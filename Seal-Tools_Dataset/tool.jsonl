{"api_name": "analyzeEvidence", "api_description": "Analyze the chemical evidence collected from a crime scene", "field": "Chemical Engineering/Forensic engineering", "parameters": {"evidence_type": {"type": "str", "description": "The type of evidence to be analyzed (e.g., DNA, fingerprints, blood, fibers)"}, "method": {"type": "str", "description": "The method or technique to be used for analysis (e.g., spectroscopy, chromatography, microscopy)"}, "sample": {"type": "str", "description": "The sample or specimen to be analyzed (e.g., crime scene swab, hair strand, fabric sample)"}}, "required": ["evidence_type", "method", "sample"], "responses": {"analysis_results": {"type": "str", "description": "The results of the chemical analysis of the evidence"}, "conclusion": {"type": "str", "description": "The conclusion drawn from the analysis"}}}
{"api_name": "analyzeSubstance", "api_description": "Analyze a substance for forensic purposes", "field": "Chemical Engineering/Forensic engineering", "parameters": {"substance": {"type": "str", "description": "The substance to be analyzed (e.g., white powder, unknown liquid)"}, "technique": {"type": "str", "description": "The technique to be used for analysis (e.g., mass spectrometry, chromatography)"}, "sample_source": {"type": "str", "description": "The source of the sample (e.g., crime scene, suspicious package)"}, "priority": {"type": "int", "description": "The priority level for analysis (e.g., 1, 2, 3)"}, "additional_info": {"type": "str", "description": "Additional information related to the analysis (e.g., color, odor)"}}, "required": ["substance", "technique", "sample_source"], "responses": {"analysis_result": {"type": "str", "description": "The result of the forensic analysis"}, "report": {"type": "str", "description": "A detailed report of the analysis findings"}}}
{"api_name": "getForensicAnalysis", "api_description": "Retrieve forensic analysis report for a given chemical sample", "field": "Chemical Engineering/Forensic engineering", "parameters": {"sample_id": {"type": "str", "description": "The ID of the chemical sample for forensic analysis"}, "analysis_type": {"type": "str", "description": "Type of forensic analysis (e.g., fingerprinting, DNA profiling, toxicology)"}, "location": {"type": "str", "description": "The location where the forensic analysis is conducted"}}, "required": ["sample_id"], "responses": {"report": {"type": "str", "description": "The forensic analysis report for the chemical sample"}}}
{"api_name": "getBasketballScore", "api_description": "Retrieve the score of a basketball game", "field": "Sports/Basketball", "parameters": {"team_name": {"type": "str", "description": "The name of the basketball team (e.g., Los Angeles Lakers, Golden State Warriors)"}, "opponent_name": {"type": "str", "description": "The name of the opposing basketball team (e.g., Boston Celtics, Houston Rockets)"}, "game_date": {"type": "str", "description": "The date of the basketball game (e.g., 2021-12-01)"}, "venue": {"type": "str", "description": "The venue where the basketball game was played (e.g., Staples Center, TD Garden)"}, "period": {"type": "int", "description": "The period of the basketball game you want to retrieve the score (e.g., 1, 2, 3, 4, overtime)"}}, "required": ["team_name", "opponent_name", "game_date"], "responses": {"team_score": {"type": "int", "description": "The score of the specified team at the specified period"}, "opponent_score": {"type": "int", "description": "The score of the opposing team at the specified period"}}}
{"api_name": "getMatchInfo", "api_description": "Retrieve information about a football match", "field": "Sports/Football", "parameters": {"match_id": {"type": "str", "description": "The ID of the football match you want to retrieve information for"}, "team": {"type": "str", "description": "The name of the football team you want to retrieve information for"}}, "required": ["match_id"], "responses": {"match_info": {"type": "str", "description": "The information about the football match"}}}
{"api_name": "getTeamStats", "api_description": "Retrieve statistics about a football team", "field": "Sports/Football", "parameters": {"team": {"type": "str", "description": "The name of the football team you want to retrieve statistics for"}, "season": {"type": "str", "description": "The season for which you want to retrieve statistics"}}, "required": ["team"], "responses": {"team_stats": {"type": "str", "description": "The statistics of the football team"}}}
{"api_name": "getPlayerStats", "api_description": "Retrieve statistics about a football player", "field": "Sports/Football", "parameters": {"player_name": {"type": "str", "description": "The name of the football player you want to retrieve statistics for"}, "team": {"type": "str", "description": "The name of the football team the player belongs to"}}, "required": ["player_name"], "responses": {"player_stats": {"type": "str", "description": "The statistics of the football player"}}}
{"api_name": "getLeagueStandings", "api_description": "Retrieve the standings of a football league", "field": "Sports/Football", "parameters": {"league": {"type": "str", "description": "The name of the football league you want to retrieve standings for"}, "season": {"type": "str", "description": "The season for which you want to retrieve standings"}}, "required": ["league"], "responses": {"league_standings": {"type": "str", "description": "The standings of the football league"}}}
{"api_name": "getFootballScore", "api_description": "Retrieve the current score of a football match", "field": "Sports/Football", "parameters": {"match_id": {"type": "str", "description": "The unique identifier of the football match"}}, "required": ["match_id"], "responses": {"home_team_score": {"type": "int", "description": "The score of the home team in the match"}, "away_team_score": {"type": "int", "description": "The score of the away team in the match"}, "time_elapsed": {"type": "str", "description": "The time elapsed in the match (e.g., 45', 80')"}}}
{"api_name": "getFootballPlayerStats", "api_description": "Retrieve the statistics of a football player", "field": "Sports/Football", "parameters": {"player_id": {"type": "str", "description": "The unique identifier of the football player"}}, "required": ["player_id"], "responses": {"goals_scored": {"type": "int", "description": "The number of goals scored by the player"}, "assists": {"type": "int", "description": "The number of assists made by the player"}, "yellow_cards": {"type": "int", "description": "The number of yellow cards received by the player"}, "red_cards": {"type": "int", "description": "The number of red cards received by the player"}}}
{"api_name": "getFootballMatchInfo", "api_description": "Retrieve information about a football match", "field": "Sports/Football", "parameters": {"match_id": {"type": "str", "description": "The ID of the football match for which you want to get information"}, "team": {"type": "str", "description": "The name of the team you are interested in"}, "player": {"type": "str", "description": "The name of a specific player you want information about"}}, "required": ["match_id"], "responses": {"match_info": {"type": "str", "description": "Information about the specified football match"}, "team_info": {"type": "str", "description": "Information about the specified team"}, "player_info": {"type": "str", "description": "Information about the specified player"}}}
{"api_name": "getTeamInfo", "api_description": "Retrieve information about a soccer team", "field": "Sports/Soccer", "parameters": {"team_name": {"type": "str", "description": "The name of the soccer team you want to get information about"}}, "required": ["team_name"], "responses": {"team_name": {"type": "str", "description": "The name of the soccer team"}, "coach": {"type": "str", "description": "The name of the team's coach"}, "players": {"type": "str", "description": "A list of the team's players"}}}
{"api_name": "getMatchSchedule", "api_description": "Retrieve the schedule of upcoming soccer matches", "field": "Sports/Soccer", "parameters": {"team_name": {"type": "str", "description": "The name of the soccer team you want to get the schedule for"}}, "required": ["team_name"], "responses": {"matches": {"type": "str", "description": "A list of upcoming matches for the specified team"}}}
{"api_name": "getLeagueTable", "api_description": "Retrieve the current league table for a soccer league", "field": "Sports/Soccer", "parameters": {"league_name": {"type": "str", "description": "The name of the soccer league you want to get the table for"}}, "required": ["league_name"], "responses": {"table": {"type": "str", "description": "The current league table for the specified league"}}}
{"api_name": "getSoccerTeamStandings", "api_description": "Retrieve the standings of soccer teams in a league", "field": "Sports/Soccer", "parameters": {"league": {"type": "str", "description": "The soccer league for which you want to retrieve the team standings (e.g., Premier League, Bundesliga, Ligue 1)"}, "season": {"type": "str", "description": "The season for which you want to retrieve the standings (e.g., 2021/2022)"}}, "required": ["league"], "responses": {"team": {"type": "str", "description": "The name of the soccer team"}, "rank": {"type": "int", "description": "The current rank of the team in the standings"}, "points": {"type": "int", "description": "The total points earned by the team"}}}
{"api_name": "getPlayerInfo", "api_description": "Retrieve player information", "field": "Sports/Soccer", "parameters": {"player_name": {"type": "str", "description": "The name of the player you want information about (e.g., Lionel Messi, Cristiano Ronaldo)"}, "team": {"type": "str", "description": "The team the player is currently playing for (e.g., Barcelona, Juventus)"}}, "required": ["player_name"], "responses": {"name": {"type": "str", "description": "The name of the player"}, "age": {"type": "int", "description": "The age of the player"}, "position": {"type": "str", "description": "The position the player plays at (e.g., Forward, Midfielder)"}, "nationality": {"type": "str", "description": "The nationality of the player"}}}
{"api_name": "getMatchScore", "api_description": "Retrieve the current score of a tennis match", "field": "Sports/Tennis", "parameters": {"match_id": {"type": "str", "description": "The unique identifier of the tennis match"}, "player": {"type": "str", "description": "The name of the player for whom you want to get the score"}}, "required": ["match_id"], "responses": {"score": {"type": "str", "description": "The current score of the tennis match"}, "player": {"type": "str", "description": "The player corresponding to the obtained score"}}}
{"api_name": "getMatchResults", "api_description": "Retrieve the results of a tennis match", "field": "Sports/Tennis", "parameters": {"tournament_name": {"type": "str", "description": "The name of the tennis tournament (e.g., Wimbledon, US Open)"}, "player1": {"type": "str", "description": "The name of the first tennis player"}, "player2": {"type": "str", "description": "The name of the second tennis player"}}, "required": ["tournament_name", "player1", "player2"], "responses": {"winner": {"type": "str", "description": "The name of the player who won the match"}, "score": {"type": "str", "description": "The final score of the match"}}}
{"api_name": "getPlayerRanking", "api_description": "Retrieve the ranking of a tennis player", "field": "Sports/Tennis", "parameters": {"player_name": {"type": "str", "description": "The name of the tennis player"}}, "required": ["player_name"], "responses": {"ranking": {"type": "int", "description": "The ranking of the tennis player"}}}
{"api_name": "getGolfCourseDetails", "api_description": "Retrieve details about a golf course", "field": "Sports/Golf", "parameters": {"course_name": {"type": "str", "description": "The name of the golf course for which you want to get details"}}, "required": ["course_name"], "responses": {"details": {"type": "str", "description": "Details about the specified golf course"}}}
{"api_name": "getGolfScore", "api_description": "Retrieve the score for a specific golf game", "field": "Sports/Golf", "parameters": {"game_id": {"type": "int", "description": "The unique identifier of the golf game"}, "player_name": {"type": "str", "description": "The name of the player for which you want to retrieve the score"}, "date": {"type": "str", "description": "The date of the golf game (e.g., DD/MM/YYYY)"}}, "required": ["game_id", "player_name"], "responses": {"score": {"type": "int", "description": "The score of the player in the specified golf game"}}}
{"api_name": "getCricketScore", "api_description": "Retrieve current score information for a cricket match", "field": "Sports/Cricket", "parameters": {"match_id": {"type": "str", "description": "The ID of the cricket match you want to get the score for"}, "team": {"type": "str", "description": "The name of the cricket team you want to get the score for"}}, "required": ["match_id"], "responses": {"score": {"type": "str", "description": "The current score of the specified cricket match"}, "team": {"type": "str", "description": "The team name for which the score is provided"}}}
{"api_name": "getHockeyScore", "api_description": "Retrieve the score of a hockey game", "field": "Sports/Hockey", "parameters": {"team": {"type": "str", "description": "The name of the team for which you want to get the score (e.g., Penguins, Bruins, Maple Leafs)"}, "opposing_team": {"type": "str", "description": "The name of the opposing team in the game"}, "date": {"type": "str", "description": "The date of the game (e.g., yyyy-mm-dd)"}, "venue": {"type": "str", "description": "The venue of the game"}}, "required": ["team", "opposing_team", "date"], "responses": {"team_score": {"type": "int", "description": "The score of the team in the game"}, "opposing_team_score": {"type": "int", "description": "The score of the opposing team in the game"}}}
{"api_name": "getHockeyPlayerStatistics", "api_description": "Retrieve player statistics for a specific hockey player", "field": "Sports/Hockey", "parameters": {"player_name": {"type": "str", "description": "The name of the hockey player for which you want to get the statistics"}}, "required": ["player_name"], "responses": {"goals": {"type": "int", "description": "The number of goals scored by the player"}, "assists": {"type": "int", "description": "The number of assists made by the player"}, "points": {"type": "int", "description": "The total number of points earned by the player"}}}
{"api_name": "getVolleyballScore", "api_description": "Retrieve the current score of a volleyball match", "field": "Sports/Volleyball", "parameters": {"match_id": {"type": "str", "description": "The ID of the volleyball match"}, "team": {"type": "str", "description": "The team for which you want to get the score (e.g., home, away)"}, "set_number": {"type": "int", "description": "Specify the set number for the score (e.g., 1, 2, 3, ...)", "example": "1"}}, "required": ["match_id"], "responses": {"score": {"type": "str", "description": "The score of the specified team in the specified set"}}}
{"api_name": "getVolleyballMatch", "api_description": "Retrieve information about a volleyball match", "field": "Sports/Volleyball", "parameters": {"match_id": {"type": "int", "description": "The unique identifier of the volleyball match"}, "date": {"type": "str", "description": "The date of the match (e.g., 2022-10-25)"}, "teams": {"type": "str", "description": "The teams playing the match (e.g., Brazil vs. USA)"}, "venue": {"type": "str", "description": "The location where the match is held (e.g., Tokyo Olympic Stadium)"}}, "required": ["match_id"], "responses": {"match_info": {"type": "str", "description": "Information about the volleyball match"}, "result": {"type": "str", "description": "The result of the match (e.g., Brazil won by 3-1)"}}}
{"api_name": "getTournamentInfo", "api_description": "Retrieve information about a badminton tournament", "field": "Sports/Badminton", "parameters": {"tournament_name": {"type": "str", "description": "The name of the badminton tournament"}, "year": {"type": "int", "description": "The year in which the tournament took place"}}, "required": ["tournament_name"], "responses": {"winner": {"type": "str", "description": "The winner of the tournament"}, "location": {"type": "str", "description": "The location of the tournament"}, "prize_money": {"type": "float", "description": "The total prize money for the tournament"}}}
{"api_name": "getLiveScore", "api_description": "Retrieve the live score of a badminton match", "field": "Sports/Badminton", "parameters": {"match_id": {"type": "int", "description": "The ID of the badminton match for which you want to get the live score"}}, "required": ["match_id"], "responses": {"player1_score": {"type": "int", "description": "The score of Player 1 in the match"}, "player2_score": {"type": "int", "description": "The score of Player 2 in the match"}, "match_status": {"type": "str", "description": "The current status of the match"}}}
{"api_name": "getBadmintonScore", "api_description": "Retrieve the current score of a badminton match", "field": "Sports/Badminton", "parameters": {"match_id": {"type": "str", "description": "The unique identifier for the badminton match"}, "player_name": {"type": "str", "description": "The name of the player for which you want to retrieve the score"}}, "required": ["match_id"], "responses": {"score": {"type": "str", "description": "The current score of the badminton match"}, "player_name": {"type": "str", "description": "The name of the player"}}}
{"api_name": "getBadmintonPlayerStats", "api_description": "Retrieve the statistics of a badminton player", "field": "Sports/Badminton", "parameters": {"player_id": {"type": "str", "description": "The unique identifier for the badminton player"}}, "required": ["player_id"], "responses": {"matches_played": {"type": "int", "description": "The number of matches played by the badminton player"}, "wins": {"type": "int", "description": "The number of wins by the player"}, "losses": {"type": "int", "description": "The number of losses by the player"}, "win_percentage": {"type": "float", "description": "The win percentage of the player"}}}
{"api_name": "getBadmintonCourtAvailability", "api_description": "Retrieve the availability of badminton courts", "field": "Sports/Badminton", "parameters": {"location": {"type": "str", "description": "The location for which you want to check badminton court availability (e.g., city, area)"}, "date": {"type": "str", "description": "The date for which you want to check court availability (e.g., YYYY-MM-DD)"}}, "required": ["location", "date"], "responses": {"available_courts": {"type": "int", "description": "The number of available badminton courts on the specified date at the location"}}}
{"api_name": "getSwimmingDistance", "api_description": "Retrieve the distance of a swimming event", "field": "Sports/Swimming", "parameters": {"event": {"type": "str", "description": "The swimming event you want to retrieve the distance for (e.g., freestyle, butterfly, backstroke)"}, "unit": {"type": "str", "description": "The desired unit for the distance (e.g., meters, yards)"}}, "required": ["event"], "responses": {"distance": {"type": "int", "description": "The distance of the specified swimming event"}, "unit": {"type": "str", "description": "The unit of distance in which the distance is provided"}}}
{"api_name": "getSwimmingResults", "api_description": "Retrieve swimming results for a specific event", "field": "Sports/Swimming", "parameters": {"event": {"type": "str", "description": "The specific swimming event for which you want to retrieve the results (e.g., 100m freestyle, 200m butterfly, 4x100m medley relay)"}, "year": {"type": "int", "description": "The year in which the swimming event took place (e.g., 2020, 2021, 2022)"}, "location": {"type": "str", "description": "The location where the swimming event took place (e.g., Tokyo, Rio de Janeiro, London)"}}, "required": ["event"], "responses": {"results": {"type": "str", "description": "The results of the swimming event in the specified year and location"}}}
{"api_name": "getSwimmingInfo", "api_description": "Retrieve information about swimming", "field": "Sports/Swimming", "parameters": {"technique": {"type": "str", "description": "The swimming technique to get information about (e.g., butterfly, breaststroke, freestyle)"}, "distance": {"type": "int", "description": "The distance in meters (e.g., 50, 100, 200, 400)"}, "is_indoor": {"type": "bool", "description": "Specify if the swimming event is indoor or outdoor"}}, "required": ["technique", "distance"], "responses": {"world_record": {"type": "str", "description": "The current world record for the specified swimming event"}, "olympic_champion": {"type": "str", "description": "The Olympic champion for the specified swimming event"}}}
{"api_name": "getAthleteProfile", "api_description": "Retrieve the profile information of an athlete", "field": "Sports/Athletics", "parameters": {"athlete_id": {"type": "int", "description": "The ID of the athlete for which you want to retrieve the profile information"}}, "required": ["athlete_id"], "responses": {"name": {"type": "str", "description": "The name of the athlete"}, "country": {"type": "str", "description": "The country of the athlete"}, "gender": {"type": "str", "description": "The gender of the athlete"}, "age": {"type": "int", "description": "The age of the athlete"}, "personal_best": {"type": "str", "description": "The athlete's personal best in a specific event"}}}
{"api_name": "getBoxingMatch", "api_description": "Retrieve information about a boxing match", "field": "Sports/Boxing", "parameters": {"boxer1": {"type": "str", "description": "The first boxer competing in the match"}, "boxer2": {"type": "str", "description": "The second boxer competing in the match"}, "venue": {"type": "str", "description": "The venue where the match is taking place (e.g., Madison Square Garden, MGM Grand)"}}, "required": ["boxer1", "boxer2"], "responses": {"boxer1_name": {"type": "str", "description": "The name of the first boxer"}, "boxer2_name": {"type": "str", "description": "The name of the second boxer"}, "venue": {"type": "str", "description": "The venue of the match"}}}
{"api_name": "getBoxerInfo", "api_description": "Retrieve information about a specific boxer", "field": "Sports/Boxing", "parameters": {"boxer_name": {"type": "str", "description": "The name of the boxer"}}, "required": ["boxer_name"], "responses": {"name": {"type": "str", "description": "The name of the boxer"}, "weight_class": {"type": "str", "description": "The weight class in which the boxer competes"}, "record": {"type": "str", "description": "The boxing record of the boxer"}}}
{"api_name": "getCyclingDistance", "api_description": "Retrieve the distance covered during a cycling activity", "field": "Sports/Cycling", "parameters": {"activity_type": {"type": "str", "description": "The type of cycling activity (e.g., road cycling, mountain biking)"}, "time": {"type": "str", "description": "The time of the day the cycling activity took place (e.g., morning, afternoon, evening)"}, "location": {"type": "str", "description": "The location where the cycling activity took place (e.g., park, trail, city streets)"}}, "required": ["activity_type"], "responses": {"distance": {"type": "float", "description": "The total distance covered during the cycling activity"}}}
{"api_name": "getCyclingSpeed", "api_description": "Retrieve the average speed achieved during a cycling activity", "field": "Sports/Cycling", "parameters": {"activity_type": {"type": "str", "description": "The type of cycling activity (e.g., road cycling, mountain biking)"}, "time": {"type": "str", "description": "The time of the day the cycling activity took place (e.g., morning, afternoon, evening)"}, "location": {"type": "str", "description": "The location where the cycling activity took place (e.g., park, trail, city streets)"}}, "required": ["activity_type"], "responses": {"speed": {"type": "float", "description": "The average speed achieved during the cycling activity"}}}
{"api_name": "getCyclingCaloriesBurned", "api_description": "Retrieve the number of calories burned during a cycling activity", "field": "Sports/Cycling", "parameters": {"activity_type": {"type": "str", "description": "The type of cycling activity (e.g., road cycling, mountain biking)"}, "time": {"type": "str", "description": "The time of the day the cycling activity took place (e.g., morning, afternoon, evening)"}, "location": {"type": "str", "description": "The location where the cycling activity took place (e.g., park, trail, city streets)"}, "weight": {"type": "float", "description": "The weight of the cyclist in kilograms during the cycling activity"}}, "required": ["activity_type", "weight"], "responses": {"calories_burned": {"type": "int", "description": "The number of calories burned during the cycling activity"}}}
{"api_name": "getCyclingRanking", "api_description": "Retrieve the ranking of a cyclist in a competition", "field": "Sports/Cycling", "parameters": {"competition_id": {"type": "str", "description": "The ID of the cycling competition"}, "cyclist_id": {"type": "str", "description": "The ID of the cyclist"}}, "required": ["competition_id", "cyclist_id"], "responses": {"ranking": {"type": "int", "description": "The ranking of the cyclist in the competition"}}}
{"api_name": "registerCyclingEvent", "api_description": "Register for a cycling event", "field": "Sports/Cycling", "parameters": {"event_name": {"type": "str", "description": "The name of the cycling event"}, "participant_name": {"type": "str", "description": "The name of the participant"}}, "required": ["event_name", "participant_name"], "responses": {"registration_id": {"type": "int", "description": "The ID of the participant's registration"}}}
{"api_name": "getCyclingRoute", "api_description": "Retrieve the cycling route for a specific location", "field": "Sports/Cycling", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the cycling route (e.g., Central Park, Golden Gate Park, Hyde Park)"}}, "required": ["location"], "responses": {"route": {"type": "str", "description": "The cycling route for the specified location"}}}
{"api_name": "getWrestlingMatch", "api_description": "Retrieve information about a wrestling match", "field": "Sports/Wrestling", "parameters": {"match_id": {"type": "str", "description": "The unique identifier of the wrestling match"}}, "required": ["match_id"], "responses": {"match_info": {"type": "str", "description": "Information about the wrestling match"}}}
{"api_name": "getGymnasticsScore", "api_description": "Retrieve the score of a gymnastics routine", "field": "Sports/Gymnastics", "parameters": {"routine_name": {"type": "str", "description": "The name of the gymnastics routine"}, "athlete_name": {"type": "str", "description": "The name of the athlete performing the routine"}, "difficulty_level": {"type": "str", "description": "The difficulty level of the routine (e.g., beginner, intermediate, advanced)"}, "execution_score": {"type": "float", "description": "The execution score of the routine (ranging from 0 to 10)"}}, "required": ["routine_name", "athlete_name"], "responses": {"score": {"type": "float", "description": "The total score of the routine"}, "difficulty_score": {"type": "float", "description": "The difficulty score of the routine"}, "execution_score": {"type": "float", "description": "The execution score of the routine"}}}
{"api_name": "getGymnastInformation", "api_description": "Retrieve information about a specific gymnast", "field": "Sports/Gymnastics", "parameters": {"gymnast_name": {"type": "str", "description": "The name of the gymnast you want to get information for (e.g., Simone Biles, Kohei Uchimura)"}, "country": {"type": "str", "description": "The country the gymnast represents (e.g., USA, Japan)"}}, "required": ["gymnast_name"], "responses": {"name": {"type": "str", "description": "The name of the gymnast"}, "age": {"type": "int", "description": "The age of the gymnast"}, "country": {"type": "str", "description": "The country the gymnast represents"}, "medals": {"type": "int", "description": "The number of medals won by the gymnast"}}}
{"api_name": "getGymnastRoutines", "api_description": "Retrieve the routines performed by a specific gymnast", "field": "Sports/Gymnastics", "parameters": {"gymnast_name": {"type": "str", "description": "The name of the gymnast you want to get routines for (e.g., Aly Raisman, Epke Zonderland)"}, "competition": {"type": "str", "description": "The name of the competition for which you want to retrieve routines (e.g., Olympics, World Championships)"}}, "required": ["gymnast_name", "competition"], "responses": {"floor_routine": {"type": "str", "description": "The routine performed by the gymnast on the floor exercise"}, "vault_routine": {"type": "str", "description": "The routine performed by the gymnast on the vault"}, "uneven_bars_routine": {"type": "int", "description": "The routine performed by the gymnast on the uneven bars"}, "balance_beam_routine": {"type": "int", "description": "The routine performed by the gymnast on the balance beam"}, "individual_all_around_score": {"type": "float", "description": "The individual all-around score achieved by the gymnast"}}}
{"api_name": "getMartialArtsTechnique", "api_description": "Retrieve information about a specific martial arts technique", "field": "Sports/Martial Arts", "parameters": {"technique_name": {"type": "str", "description": "The name of the martial arts technique you want to retrieve information about (e.g., Karate, Judo, Taekwondo)"}}, "required": ["technique_name"], "responses": {"description": {"type": "str", "description": "The description of the martial arts technique"}, "origin": {"type": "str", "description": "The origin of the martial arts technique"}, "technique_type": {"type": "str", "description": "The type of the martial arts technique (e.g., striking, grappling)"}}}
{"api_name": "getMartialArtsInfo", "api_description": "Retrieve information about a specific martial art", "field": "Sports/Martial Arts", "parameters": {"martial_art": {"type": "str", "description": "The name of the martial art (e.g., Karate, Taekwondo, Judo)"}, "level": {"type": "str", "description": "The skill level of the practitioner (e.g., beginner, intermediate, advanced)"}}, "required": ["martial_art"], "responses": {"history": {"type": "str", "description": "The historical background and origins of the martial art"}, "benefits": {"type": "str", "description": "The physical and mental benefits of practicing the martial art"}}}
{"api_name": "getMartialArtsTournaments", "api_description": "Retrieve information about upcoming martial arts tournaments", "field": "Sports/Martial Arts", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve tournament information (e.g., city, country)"}, "date_range": {"type": "str", "description": "The date range for tournaments (e.g., this month, next 3 months, specific date range)"}}, "required": ["location"], "responses": {"tournament_info": {"type": "str", "description": "Information about upcoming martial arts tournaments"}}}
{"api_name": "getTechnique", "api_description": "Retrieve information about a specific martial arts technique", "field": "Sports/Martial Arts", "parameters": {"technique_name": {"type": "str", "description": "The name of the martial arts technique you want to retrieve information about (e.g., kick, punch, armbar)"}}, "required": ["technique_name"], "responses": {"description": {"type": "str", "description": "A detailed description of the martial arts technique"}, "video_link": {"type": "str", "description": "A link to a video demonstration of the technique"}, "difficulty_level": {"type": "str", "description": "The difficulty level of the technique (e.g., beginner, intermediate, advanced)"}}}
{"api_name": "getRules", "api_description": "Retrieve the rules of a specific martial arts discipline", "field": "Sports/Martial Arts", "parameters": {"discipline": {"type": "str", "description": "The martial arts discipline for which you want to retrieve the rules (e.g., karate, jiu-jitsu, taekwondo)"}}, "required": ["discipline"], "responses": {"rules": {"type": "str", "description": "The rules of the specified martial arts discipline"}}}
{"api_name": "getRankings", "api_description": "Retrieve the latest rankings for a specific martial arts competition", "field": "Sports/Martial Arts", "parameters": {"competition_name": {"type": "str", "description": "The name of the martial arts competition for which you want to retrieve the rankings (e.g., UFC, WBC, IBJJF)"}, "weight_class": {"type": "str", "description": "The weight class for which you want to retrieve the rankings (e.g., lightweight, middleweight, heavyweight)"}}, "required": ["competition_name"], "responses": {"rankings": {"type": "str", "description": "The latest rankings for the specified competition and weight class"}}}
{"api_name": "getSkaterInfo", "api_description": "Retrieve information about a professional ice skater", "field": "Sports/Ice Skating", "parameters": {"skater_name": {"type": "str", "description": "The name of the ice skater you want to retrieve information about"}}, "required": ["skater_name"], "responses": {"name": {"type": "str", "description": "The name of the ice skater"}, "age": {"type": "int", "description": "The age of the ice skater"}, "country": {"type": "str", "description": "The country of the ice skater"}}}
{"api_name": "getSkatingLessons", "api_description": "Retrieve information about ice skating lessons", "field": "Sports/Ice Skating", "parameters": {"location": {"type": "str", "description": "The location where you want to find ice skating lessons (e.g., city, address, or coordinates)"}, "level": {"type": "str", "description": "The desired level of ice skating lessons (e.g., beginner, intermediate, advanced)"}, "age_group": {"type": "str", "description": "The age group for which you want to find ice skating lessons"}}, "required": ["location"], "responses": {"lessons_available": {"type": "bool", "description": "Indicates if ice skating lessons are available at the specified location"}, "instructor": {"type": "str", "description": "The name of the ice skating instructor"}, "schedule": {"type": "str", "description": "The schedule for ice skating lessons"}}}
{"api_name": "getIceSkaterInformation", "api_description": "Retrieve information about a specific ice skater", "field": "Sports/Ice Skating", "parameters": {"skater_name": {"type": "str", "description": "The name of the ice skater"}}, "required": ["skater_name"], "responses": {"name": {"type": "str", "description": "The name of the ice skater"}, "nationality": {"type": "str", "description": "The nationality of the ice skater"}, "age": {"type": "int", "description": "The age of the ice skater"}, "highest_score": {"type": "float", "description": "The highest score achieved by the ice skater in a competition"}}}
{"api_name": "getSkiingConditions", "api_description": "Retrieve current skiing conditions", "field": "Sports/Skiing", "parameters": {"location": {"type": "str", "description": "The location of the skiing resort (e.g., Aspen, Whistler, Snowbird)"}, "difficulty": {"type": "str", "description": "The desired difficulty level for skiing (e.g., beginner, intermediate, advanced)"}, "season": {"type": "str", "description": "Specify the season for skiing (e.g., winter, spring, summer)"}}, "required": ["location"], "responses": {"slope_condition": {"type": "str", "description": "The condition of slopes at the specified location"}, "snow_depth": {"type": "float", "description": "The current snow depth at the specified location"}, "difficulty": {"type": "str", "description": "The difficulty level of the slopes at the specified location"}}}
{"api_name": "getSkiingWeather", "api_description": "Retrieve current weather conditions for skiing", "field": "Sports/Skiing", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the weather conditions (e.g., Aspen, Whistler, Chamonix)"}, "time_of_day": {"type": "str", "description": "Specify a time of day for weather conditions (e.g., morning, afternoon, evening)"}}, "required": ["location"], "responses": {"temperature": {"type": "float", "description": "The temperature at the specified location for skiing"}, "snow_depth": {"type": "float", "description": "The current snow depth at the specified location for skiing"}, "weather_conditions": {"type": "str", "description": "The current weather conditions at the specified location for skiing"}}}
{"api_name": "getSnowboardTrickDifficulty", "api_description": "Retrieve the difficulty level of a specific snowboarding trick", "field": "Sports/Snowboarding", "parameters": {"trick_name": {"type": "str", "description": "The name of the snowboarding trick to get the difficulty level (e.g., 360, backflip, method grab)"}, "gender": {"type": "str", "description": "Specify the gender for which the trick difficulty should be retrieved (e.g., male, female, all)"}}, "required": ["trick_name"], "responses": {"difficulty_level": {"type": "str", "description": "The difficulty level of the specified snowboarding trick (e.g., easy, intermediate, advanced)"}}}
{"api_name": "getSnowboardGearAvailability", "api_description": "Retrieve the availability of snowboarding gear", "field": "Sports/Snowboarding", "parameters": {"location": {"type": "str", "description": "The location for which you want to check the availability of snowboarding gear (e.g., ski resort, snowboarding shop, rental shop)"}, "season": {"type": "str", "description": "Specify the season for the snowboarding gear availability (e.g., winter, spring)"}, "snow_conditions": {"type": "str", "description": "Specify the snow conditions for the gear availability (e.g., fresh powder, packed snow)"}, "gear_type": {"type": "str", "description": "Specify the type of snowboarding gear to check availability (e.g., snowboards, boots, bindings)"}}, "required": ["location"], "responses": {"availability": {"type": "bool", "description": "The availability of snowboarding gear at the specified location"}}}
{"api_name": "getSnowboardingEventResults", "api_description": "Retrieve the results of a snowboarding event", "field": "Sports/Snowboarding", "parameters": {"event_name": {"type": "str", "description": "The name of the snowboarding event to get the results (e.g., X Games, Winter Olympics)"}, "year": {"type": "int", "description": "Specify the year of the event to retrieve results"}}, "required": ["event_name"], "responses": {"results": {"type": "str", "description": "The results of the specified snowboarding event"}}}
{"api_name": "getSnowboardingConditions", "api_description": "Retrieve current snowboarding conditions", "field": "Sports/Snowboarding", "parameters": {"location": {"type": "str", "description": "The location where you want to check the snowboarding conditions (e.g., Aspen, Whistler, Park City)"}, "difficulty": {"type": "str", "description": "The desired difficulty level for snowboarding (e.g., beginner, intermediate, advanced)"}, "season": {"type": "str", "description": "The current snowboarding season (e.g., winter, spring, summer, fall)"}}, "required": ["location"], "responses": {"conditions": {"type": "str", "description": "The current snowboarding conditions at the specified location"}, "temperature": {"type": "float", "description": "The temperature at the specified location"}, "difficulty": {"type": "str", "description": "The difficulty level of available snowboarding trails"}}}
{"api_name": "getBoatSpeed", "api_description": "Retrieve the speed of a rowing boat", "field": "Sports/Rowing", "parameters": {"distance": {"type": "int", "description": "The distance covered by the boat in meters (e.g., 1000, 2000, 5000)"}, "time": {"type": "str", "description": "The time taken by the boat to cover the distance (e.g., 3:30, 7:45, 15:10)"}}, "required": ["distance", "time"], "responses": {"speed": {"type": "float", "description": "The average speed of the boat in meters per second"}}}
{"api_name": "getAthleteInformation", "api_description": "Retrieve information about a rowing athlete", "field": "Sports/Rowing", "parameters": {"athlete_name": {"type": "str", "description": "The name of the athlete you want information about (e.g., Michael Phelps, Usain Bolt)"}}, "required": ["athlete_name"], "responses": {"name": {"type": "str", "description": "The name of the athlete"}, "age": {"type": "int", "description": "The age of the athlete"}, "nationality": {"type": "str", "description": "The nationality of the athlete"}, "medals": {"type": "int", "description": "The number of medals won by the athlete"}}}
{"api_name": "getSailingStatus", "api_description": "Retrieve the current status of a sailing event", "field": "Sports/Sailing", "parameters": {"event_id": {"type": "str", "description": "The unique identifier of the sailing event"}, "location": {"type": "str", "description": "The location where the sailing event is taking place"}}, "required": ["event_id"], "responses": {"status": {"type": "str", "description": "The current status of the sailing event (e.g., in progress, completed)"}, "wind_speed": {"type": "float", "description": "The current wind speed at the sailing location"}}}
{"api_name": "getSailingScore", "api_description": "Retrieve the score of a sailing team in a given race", "field": "Sports/Sailing", "parameters": {"team_name": {"type": "str", "description": "The name of the sailing team"}, "race_number": {"type": "int", "description": "The number of the race"}}, "required": ["team_name", "race_number"], "responses": {"score": {"type": "float", "description": "The score achieved by the sailing team in the specified race"}, "position": {"type": "int", "description": "The position of the team in the specified race"}}}
{"api_name": "getGymLocation", "api_description": "Retrieve the location of a gym for bodybuilding", "field": "Sports/Bodybuilding", "parameters": {"city": {"type": "str", "description": "The city where you want to find a gym for bodybuilding"}}, "required": ["city"], "responses": {"gym_location": {"type": "str", "description": "The address of the gym located in the specified city"}}}
{"api_name": "calculateBodyFatPercentage", "api_description": "Calculate body fat percentage based on body measurements", "field": "Sports/Bodybuilding", "parameters": {"weight": {"type": "float", "description": "The weight of the person in kilograms"}, "height": {"type": "float", "description": "The height of the person in centimeters"}, "waist_circumference": {"type": "float", "description": "The circumference of the person's waist in centimeters"}, "hip_circumference": {"type": "float", "description": "The circumference of the person's hips in centimeters"}, "gender": {"type": "str", "description": "The gender of the person (e.g., male, female)"}}, "required": ["weight", "height", "waist_circumference", "hip_circumference", "gender"], "responses": {"body_fat_percentage": {"type": "float", "description": "The calculated body fat percentage"}}}
{"api_name": "getTrainingPlan", "api_description": "Retrieve a personalized training plan for bodybuilding", "field": "Sports/Bodybuilding", "parameters": {"experience_level": {"type": "str", "description": "The experience level of the person (e.g., beginner, intermediate, advanced)"}, "training_frequency": {"type": "str", "description": "The desired training frequency per week (e.g., 3 days, 5 days, 7 days)"}, "goal": {"type": "str", "description": "The goal of the person (e.g., muscle gain, fat loss, body recomposition)"}}, "required": ["experience_level", "training_frequency", "goal"], "responses": {"training_plan": {"type": "str", "description": "A customized training plan for bodybuilding"}}}
{"api_name": "getSupplementRecommendation", "api_description": "Get a supplement recommendation for bodybuilding", "field": "Sports/Bodybuilding", "parameters": {"age": {"type": "int", "description": "The age of the person in years"}, "gender": {"type": "str", "description": "The gender of the person (e.g., male, female)"}, "training_experience": {"type": "str", "description": "The training experience of the person (e.g., beginner, intermediate, advanced)"}}, "required": ["age", "gender", "training_experience"], "responses": {"supplement_recommendation": {"type": "str", "description": "A recommended supplement for bodybuilding"}}}
{"api_name": "getExerciseRoutine", "api_description": "Retrieve a bodybuilding exercise routine", "field": "Sports/Bodybuilding", "parameters": {"level": {"type": "str", "description": "The level of the exercise routine (e.g., beginner, intermediate, advanced)"}, "target_muscle_group": {"type": "str", "description": "The specific muscle group to target during the workout (e.g., chest, back, legs)"}, "duration": {"type": "int", "description": "The duration of the exercise routine in minutes"}}, "required": ["level", "target_muscle_group"], "responses": {"exercise_routine": {"type": "str", "description": "The bodybuilding exercise routine based on the specified parameters"}}}
{"api_name": "createApparelDesign", "api_description": "Create a new apparel design", "field": "Fashion/Apparel Design", "parameters": {"design_name": {"type": "str", "description": "The name of the apparel design"}, "materials": {"type": "str", "description": "The materials used in the design"}}, "required": ["design_name", "materials"], "responses": {"design_id": {"type": "int", "description": "The unique identifier of the created apparel design"}, "message": {"type": "str", "description": "Success message"}}}
{"api_name": "getShoeDesign", "api_description": "Retrieve the design details of a specific shoe", "field": "Fashion/Footwear Design", "parameters": {"shoe_id": {"type": "str", "description": "The unique identifier of the shoe design"}}, "required": ["shoe_id"], "responses": {"design": {"type": "str", "description": "The description of the shoe design"}, "brand": {"type": "str", "description": "The brand associated with the shoe design"}, "color": {"type": "str", "description": "The color of the shoe design"}, "price": {"type": "float", "description": "The price of the shoe design"}}}
{"api_name": "createAccessoryDesign", "api_description": "Create a new accessories design", "field": "Fashion/Accessories Design", "parameters": {"accessory_name": {"type": "str", "description": "The name of the accessory design"}, "material": {"type": "str", "description": "The material used for the accessory"}, "color": {"type": "str", "description": "The color of the accessory design"}, "size": {"type": "str", "description": "The size of the accessory design"}}, "required": ["accessory_name", "material", "color"], "responses": {"design_id": {"type": "int", "description": "The unique identifier for the created accessory design"}}}
{"api_name": "getTextileDesign", "api_description": "Retrieve information about textile designs", "field": "Fashion/Textile Design", "parameters": {"design_type": {"type": "str", "description": "The type of textile design (e.g., floral, geometric, abstract)"}, "color_scheme": {"type": "str", "description": "The color scheme for the textile design (e.g., pastel, vibrant, monochromatic)"}, "fabric_type": {"type": "str", "description": "The type of fabric used in the design (e.g., silk, cotton, velvet)"}}, "required": ["design_type", "color_scheme"], "responses": {"design_info": {"type": "str", "description": "Information about the textile design"}, "fabric_type": {"type": "str", "description": "The type of fabric used in the design"}, "distribution_partners": {"type": "str", "description": "The distribution partners for the textile design"}}}
{"api_name": "getFashionIllustration", "api_description": "Retrieve fashion illustration based on the provided style", "field": "Fashion/Fashion Illustration", "parameters": {"style": {"type": "str", "description": "The desired style of fashion illustration (e.g., modern, vintage, minimalist)"}, "color_palette": {"type": "str", "description": "Preferred color palette for the fashion illustration (e.g., pastel, vibrant, monochromatic)"}, "body_pose": {"type": "str", "description": "Desired body pose for the fashion illustration (e.g., standing, sitting, walking)"}, "garment_types": {"type": "str", "description": "Specify the garment types to include in the fashion illustration (e.g., dress, pants, shoes)"}}, "required": ["style"], "responses": {"fashion_illustration": {"type": "str", "description": "The generated fashion illustration in the specified style and characteristics"}}}
{"api_name": "getFashionTrends", "api_description": "Retrieve current fashion trends in the market", "field": "Fashion/Fashion Merchandising", "parameters": {"season": {"type": "str", "description": "The season for which you want to get the fashion trends (e.g., Spring, Summer, Fall, Winter)"}, "gender": {"type": "str", "description": "The desired gender for fashion trends (e.g., Male, Female, Unisex)"}, "location": {"type": "str", "description": "The location for which you want to get the fashion trends (e.g., New York, Paris, Tokyo)"}, "price_range": {"type": "str", "description": "Specify a price range for fashion trends (e.g., Low, Medium, High)"}}, "required": ["season"], "responses": {"trends": {"type": "str", "description": "The latest fashion trends for the specified parameters"}}}
{"api_name": "getSalesData", "api_description": "Retrieve sales data for fashion merchandising", "field": "Fashion/Fashion Merchandising", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve sales data (e.g., New York, Paris, London)"}, "time_period": {"type": "str", "description": "Specify the time period for sales data (e.g., last month, last quarter, last year)"}, "product_category": {"type": "str", "description": "Specify the product category for sales data (e.g., dresses, shirts, shoes)"}}, "required": ["location", "time_period"], "responses": {"sales_data": {"type": "str", "description": "The sales data for the specified location and time period"}}}
{"api_name": "getFashionPRContacts", "api_description": "Retrieve contact information of fashion public relations representatives", "field": "Fashion/Fashion Public Relations", "parameters": {"brand": {"type": "str", "description": "The name of the fashion brand for which you want to get the PR contacts"}}, "required": ["brand"], "responses": {"contacts": {"type": "str", "description": "The contact details of fashion public relations representatives for the specified brand"}}}
{"api_name": "getBrandInfo", "api_description": "Retrieve information about a fashion brand", "field": "Fashion/Fashion Brand Management", "parameters": {"brand_name": {"type": "str", "description": "The name of the fashion brand for which you want to retrieve information"}}, "required": ["brand_name"], "responses": {"brand_description": {"type": "str", "description": "A description of the fashion brand"}, "established_year": {"type": "int", "description": "The year the fashion brand was established"}, "headquarters": {"type": "str", "description": "The location of the brand's headquarters"}, "founder": {"type": "str", "description": "The founder(s) of the fashion brand"}}}
{"api_name": "getFabricComposition", "api_description": "Retrieve fabric composition information for a specific clothing item", "field": "Fashion/Fashion Technology", "parameters": {"clothing_item": {"type": "str", "description": "The type of clothing item for which you want fabric composition (e.g., t-shirt, jeans, dress)"}, "brand": {"type": "str", "description": "The brand of the clothing item (e.g., Nike, Zara, Gucci)"}}, "required": ["clothing_item"], "responses": {"composition": {"type": "str", "description": "The fabric composition of the specified clothing item"}, "brand": {"type": "str", "description": "The brand of the clothing item"}}}
{"api_name": "getFashionHistory", "api_description": "Retrieve fashion history information", "field": "Fashion/Fashion History", "parameters": {}, "required": [], "responses": {"history": {"type": "str", "description": "The fashion history information"}}}
{"api_name": "getFashionPsychology", "api_description": "Retrieve fashion psychology information", "field": "Fashion/Fashion Psychology", "parameters": {"color": {"type": "str", "description": "The color to analyze in relation to fashion psychology (e.g., red, blue, yellow)"}, "occasion": {"type": "str", "description": "The occasion to analyze in relation to fashion psychology (e.g., formal event, casual outing)"}, "body_shape": {"type": "str", "description": "The body shape to analyze in relation to fashion psychology (e.g., hourglass, pear, apple)"}}, "required": ["color", "occasion"], "responses": {"psychological_impact": {"type": "str", "description": "The psychological impact of the given color, occasion, and body shape in relation to fashion"}, "suitable_outfit": {"type": "str", "description": "The suitable outfit recommendation based on the given color, occasion, and body shape"}}}
{"api_name": "analyzeFashionPersonality", "api_description": "Analyze a person's fashion choices to determine their personality traits", "field": "Fashion/Fashion Psychology", "parameters": {"clothing_style": {"type": "str", "description": "The person's preferred clothing style (e.g., casual, formal, boho)"}, "color_preference": {"type": "str", "description": "The person's preferred color palette in their clothing (e.g., vibrant, neutral, monochromatic)"}, "accessory_choice": {"type": "str", "description": "The person's preference for accessories (e.g., minimalistic, bold, statement)"}, "brand_affinity": {"type": "str", "description": "The person's affinity towards specific fashion brands (e.g., luxury, high street, sustainable)"}, "body_language": {"type": "str", "description": "The person's body language and posture while wearing certain outfits (e.g., confident, reserved, playful)"}}, "required": ["clothing_style"], "responses": {"personality_traits": {"type": "str", "description": "Personality traits inferred based on fashion choices"}}}
{"api_name": "analyzeFashion", "api_description": "Analyze the psychology behind fashion choices", "field": "Fashion/Fashion Psychology", "parameters": {"outfit": {"type": "str", "description": "The outfit to analyze (e.g., casual, formal, trendy)"}, "color": {"type": "str", "description": "The color of the outfit (e.g., red, blue, black)"}, "personality": {"type": "str", "description": "The personality type of the individual wearing the outfit (e.g., extroverted, introverted, confident)"}, "occasion": {"type": "str", "description": "The occasion for which the outfit is being worn (e.g., party, interview, wedding)"}, "image": {"type": "str", "description": "The image URL of the outfit (optional)"}}, "required": ["outfit", "color", "personality", "occasion"], "responses": {"psychology": {"type": "str", "description": "The psychology behind the fashion choices made in the outfit"}}}
{"api_name": "getFashionLawInfo", "api_description": "Retrieve information on fashion law", "field": "Fashion/Fashion Law", "parameters": {"topic": {"type": "str", "description": "The specific topic of fashion law you are interested in (e.g., intellectual property, trademarks, contracts)"}}, "required": ["topic"], "responses": {"result": {"type": "str", "description": "Information on fashion law regarding the specified topic"}}}
{"api_name": "getFashionBlogDetails", "api_description": "Retrieve detailed information about a fashion blog", "field": "Fashion/Fashion Blogging", "parameters": {"blog_id": {"type": "int", "description": "The unique identifier of the fashion blog"}}, "required": ["blog_id"], "responses": {"title": {"type": "str", "description": "The title of the fashion blog"}, "author": {"type": "str", "description": "The author of the fashion blog"}, "content": {"type": "str", "description": "The content of the fashion blog"}}}
{"api_name": "getFashionModel", "api_description": "Retrieve information about a fashion model", "field": "Fashion/Fashion Modeling", "parameters": {"name": {"type": "str", "description": "The name of the fashion model"}, "age": {"type": "int", "description": "The age of the fashion model"}, "gender": {"type": "str", "description": "The gender of the fashion model (e.g., male, female)"}}, "required": ["name"], "responses": {"name": {"type": "str", "description": "The name of the fashion model"}, "age": {"type": "int", "description": "The age of the fashion model"}, "gender": {"type": "str", "description": "The gender of the fashion model"}}}
{"api_name": "createFashionEvent", "api_description": "Create a new fashion event", "field": "Fashion/Fashion Event Management", "parameters": {"event_name": {"type": "str", "description": "The name of the fashion event"}, "location": {"type": "str", "description": "The location of the fashion event"}, "start_date": {"type": "str", "description": "The start date of the fashion event (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the fashion event (e.g., YYYY-MM-DD)"}, "organizer": {"type": "str", "description": "The organizer of the fashion event"}, "participants": {"type": "str", "description": "The participating fashion brands, designers, or models"}}, "required": ["event_name", "location", "start_date", "end_date", "organizer"], "responses": {"event_id": {"type": "int", "description": "The unique identifier of the created fashion event"}}}
{"api_name": "createEvent", "api_description": "Create a fashion event", "field": "Fashion/Fashion Event Management", "parameters": {"event_name": {"type": "str", "description": "The name of the fashion event"}, "location": {"type": "str", "description": "The location of the fashion event"}, "start_date": {"type": "str", "description": "The start date of the fashion event (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the fashion event (e.g., YYYY-MM-DD)"}}, "required": ["event_name", "location", "start_date", "end_date"], "responses": {"event_id": {"type": "str", "description": "The unique identifier of the created fashion event"}}}
{"api_name": "getEntrepreneurshipTips", "api_description": "Retrieve fashion entrepreneurship tips and advice", "field": "Fashion/Fashion Entrepreneurship", "parameters": {}, "required": [], "responses": {"tips": {"type": "str", "description": "Fashion entrepreneurship tips and advice for starting and managing a fashion business"}}}
{"api_name": "getFilmDetails", "api_description": "Retrieve details of a film", "field": "Entertainment/Film", "parameters": {"title": {"type": "str", "description": "The title of the film you want to get details of"}}, "required": ["title"], "responses": {"title": {"type": "str", "description": "The title of the film"}, "genre": {"type": "str", "description": "The genre of the film"}, "director": {"type": "str", "description": "The director of the film"}, "release_date": {"type": "str", "description": "The release date of the film"}, "rating": {"type": "float", "description": "The rating of the film"}}}
{"api_name": "getFilmInfo", "api_description": "Retrieve information about a film", "field": "Entertainment/Film", "parameters": {"film_name": {"type": "str", "description": "The name of the film you want information about"}}, "required": ["film_name"], "responses": {"title": {"type": "str", "description": "The title of the film"}, "release_year": {"type": "int", "description": "The year the film was released"}, "director": {"type": "str", "description": "The name of the film's director"}, "actors": {"type": "str", "description": "The actors starring in the film"}, "plot": {"type": "str", "description": "A brief summary of the film's plot"}}}
{"api_name": "getSongs", "api_description": "Retrieve a list of songs based on specified criteria", "field": "Entertainment/Music", "parameters": {"genre": {"type": "str", "description": "The genre of the songs (e.g., pop, rock, hip-hop)"}, "artist": {"type": "str", "description": "The name of the artist of the songs"}, "year": {"type": "int", "description": "The year in which the songs were released"}}, "required": [], "responses": {"songs": {"type": "str", "description": "A list of songs meeting the specified criteria"}}}
{"api_name": "playSong", "api_description": "Play a specific song from a music library", "field": "Entertainment/Music", "parameters": {"song_name": {"type": "str", "description": "The name of the song to be played"}, "artist": {"type": "str", "description": "The artist who performed the song"}, "genre": {"type": "str", "description": "The genre of the song"}}, "required": ["song_name"], "responses": {"status": {"type": "str", "description": "The status of the song playback (e.g., playing, paused, stopped)"}, "duration": {"type": "float", "description": "The duration of the song in seconds"}}}
{"api_name": "createPlaylist", "api_description": "Create a new playlist in the music library", "field": "Entertainment/Music", "parameters": {"playlist_name": {"type": "str", "description": "The name of the playlist to be created"}}, "required": ["playlist_name"], "responses": {"status": {"type": "str", "description": "The status of the playlist creation"}}}
{"api_name": "addSongToPlaylist", "api_description": "Add a song to an existing playlist", "field": "Entertainment/Music", "parameters": {"playlist_name": {"type": "str", "description": "The name of the playlist to add the song"}, "song_name": {"type": "str", "description": "The name of the song to be added"}, "artist": {"type": "str", "description": "The artist who performed the song"}}, "required": ["playlist_name", "song_name"], "responses": {"status": {"type": "str", "description": "The status of the song addition to the playlist"}}}
{"api_name": "getTVShowInfo", "api_description": "Retrieve information about a TV show", "field": "Entertainment/Television", "parameters": {"tv_show": {"type": "str", "description": "The name of the TV show for which you want to get information"}}, "required": ["tv_show"], "responses": {"title": {"type": "str", "description": "The title of the TV show"}, "genre": {"type": "str", "description": "The genre of the TV show"}, "duration": {"type": "int", "description": "The duration of each episode in minutes"}}}
{"api_name": "getShowDetails", "api_description": "Retrieve details about a television show", "field": "Entertainment/Television", "parameters": {"show_name": {"type": "str", "description": "The name of the television show"}}, "required": ["show_name"], "responses": {"genre": {"type": "str", "description": "The genre of the television show"}, "cast": {"type": "str", "description": "The cast members of the television show"}, "rating": {"type": "float", "description": "The rating of the television show out of 10"}}}
{"api_name": "getArtwork", "api_description": "Retrieve information about a specific artwork", "field": "Entertainment/Visual Arts", "parameters": {"artwork_id": {"type": "str", "description": "The ID of the artwork you want to retrieve information about"}}, "required": ["artwork_id"], "responses": {"title": {"type": "str", "description": "The title of the artwork"}, "artist": {"type": "str", "description": "The name of the artist who created the artwork"}, "year": {"type": "int", "description": "The year the artwork was created"}, "description": {"type": "str", "description": "A brief description of the artwork"}}}
{"api_name": "getAnimationInfo", "api_description": "Retrieve information about a specific animation", "field": "Entertainment/Animation", "parameters": {"animation_name": {"type": "str", "description": "The name of the animation you want to get information about (e.g., My Neighbor Totoro, Spirited Away, Toy Story)"}, "release_year": {"type": "int", "description": "The release year of the animation (e.g., 2001, 1995, 1988)"}}, "required": ["animation_name"], "responses": {"animation_name": {"type": "str", "description": "The name of the animation"}, "release_year": {"type": "int", "description": "The release year of the animation"}, "director": {"type": "str", "description": "The director of the animation"}, "genre": {"type": "str", "description": "The genre of the animation"}, "rating": {"type": "float", "description": "The rating of the animation"}}}
{"api_name": "getAnimationDetails", "api_description": "Retrieve details of an animation", "field": "Entertainment/Animation", "parameters": {"animation_title": {"type": "str", "description": "The title of the animation (e.g., Frozen, Toy Story, Spirited Away)"}}, "required": ["animation_title"], "responses": {"title": {"type": "str", "description": "The title of the animation"}, "director": {"type": "str", "description": "The director of the animation"}, "genre": {"type": "str", "description": "The genre of the animation"}, "release_year": {"type": "int", "description": "The year the animation was released"}, "rating": {"type": "float", "description": "The rating of the animation (out of 10)"}}}
{"api_name": "getGameScore", "api_description": "Retrieve the current score of a gaming match", "field": "Entertainment/Gaming", "parameters": {"game_name": {"type": "str", "description": "The name of the game for which you want to get the score (e.g., FIFA 21, Call of Duty, Minecraft)"}, "player_name": {"type": "str", "description": "The name of the player for whom you want to get the score"}}, "required": ["game_name", "player_name"], "responses": {"score": {"type": "int", "description": "The current score of the player in the specified game"}}}
{"api_name": "getVirtualRealityGame", "api_description": "Retrieve a virtual reality game for entertainment", "field": "Entertainment/Virtual Reality", "parameters": {"genre": {"type": "str", "description": "The genre of the virtual reality game (e.g., action, adventure, puzzle)"}, "player_count": {"type": "int", "description": "The number of players the game can support", "example": "4"}}, "required": ["genre"], "responses": {"game_name": {"type": "str", "description": "The name of the virtual reality game"}, "player_count": {"type": "int", "description": "The maximum number of players the game can support"}}}
{"api_name": "getVRGame", "api_description": "Retrieve a virtual reality game", "field": "Entertainment/Virtual Reality", "parameters": {"genre": {"type": "str", "description": "The genre of the game you want to retrieve (e.g., action, adventure, puzzle)"}, "platform": {"type": "str", "description": "The platform on which you want to play the game (e.g., PC, PlayStation, Oculus Quest)"}, "player_count": {"type": "int", "description": "The number of players the game should support"}}, "required": ["genre", "platform"], "responses": {"game_title": {"type": "str", "description": "The title of the virtual reality game"}, "release_date": {"type": "str", "description": "The release date of the game"}, "price": {"type": "float", "description": "The price of the game in USD"}}}
{"api_name": "getVRMovie", "api_description": "Retrieve a virtual reality movie", "field": "Entertainment/Virtual Reality", "parameters": {"genre": {"type": "str", "description": "The genre of the movie you want to retrieve (e.g., action, thriller, horror)"}, "length": {"type": "int", "description": "The desired length of the movie in minutes"}}, "required": ["genre"], "responses": {"movie_title": {"type": "str", "description": "The title of the virtual reality movie"}, "release_date": {"type": "str", "description": "The release date of the movie"}, "director": {"type": "str", "description": "The director of the movie"}}}
{"api_name": "getVRConcert", "api_description": "Retrieve a virtual reality concert", "field": "Entertainment/Virtual Reality", "parameters": {"artist": {"type": "str", "description": "The artist or band you want to watch in a virtual reality concert"}, "genre": {"type": "str", "description": "The genre of music you prefer (e.g., pop, rock, hip-hop)"}, "location": {"type": "str", "description": "The location of the concert (e.g., Los Angeles, New York, London)"}}, "required": ["artist", "genre"], "responses": {"concert_title": {"type": "str", "description": "The title of the virtual reality concert"}, "date": {"type": "str", "description": "The date of the concert"}, "duration": {"type": "int", "description": "The duration of the concert in minutes"}}}
{"api_name": "getRecipe", "api_description": "Retrieve recipe information based on cuisine type and ingredients", "field": "Entertainment/Culinary Arts", "parameters": {"cuisine_type": {"type": "str", "description": "Specify the cuisine type for the recipe (e.g., Italian, Chinese, Mexican)"}, "ingredients": {"type": "str", "description": "Provide a list of ingredients for the recipe (e.g., chicken, onions, tomatoes)"}}, "required": ["cuisine_type"], "responses": {"recipe_name": {"type": "str", "description": "The name of the recipe"}, "ingredients_needed": {"type": "str", "description": "The list of ingredients needed for the recipe"}, "instructions": {"type": "str", "description": "Step-by-step instructions to prepare the recipe"}}}
{"api_name": "getSocialMediaInfluence", "api_description": "Retrieve social media influence information", "field": "Entertainment/Social Media Influence", "parameters": {"platform": {"type": "str", "description": "The platform for which you want to get the social media influence (e.g., Instagram, Twitter, TikTok)"}, "username": {"type": "str", "description": "The username of the account for which you want to get the social media influence"}}, "required": ["platform", "username"], "responses": {"followers": {"type": "int", "description": "The number of followers the account has on the specified platform"}, "engagement_rate": {"type": "float", "description": "The engagement rate of the account on the specified platform"}}}
{"api_name": "getHotelInfo", "api_description": "Retrieve information about a hotel", "field": "Hospitality/Hotel Management", "parameters": {"hotel_name": {"type": "str", "description": "The name of the hotel"}, "location": {"type": "str", "description": "The location of the hotel"}, "check_in_date": {"type": "str", "description": "The desired check-in date for the hotel (e.g., yyyy-mm-dd)"}, "check_out_date": {"type": "str", "description": "The desired check-out date for the hotel (e.g., yyyy-mm-dd)"}, "num_guests": {"type": "int", "description": "The number of guests staying at the hotel"}}, "required": ["hotel_name", "location", "check_in_date", "check_out_date"], "responses": {"hotel_details": {"type": "str", "description": "The details of the hotel (e.g., amenities, description)"}, "availability": {"type": "bool", "description": "The availability status of the hotel"}, "room_price": {"type": "float", "description": "The price per room at the hotel"}}}
{"api_name": "createRestaurant", "api_description": "Create a new restaurant in the system", "field": "Hospitality/Restaurant Management", "parameters": {"name": {"type": "str", "description": "The name of the restaurant"}, "location": {"type": "str", "description": "The location of the restaurant"}, "cuisine_type": {"type": "str", "description": "The type of cuisine offered by the restaurant (e.g., Italian, Chinese, Mexican)"}, "opening_hours": {"type": "str", "description": "The opening hours of the restaurant in a specific format (e.g., 09:00-21:00)"}, "contact_info": {"type": "str", "description": "Contact information for the restaurant (e.g., phone number, email)"}}, "required": ["name", "location"], "responses": {"restaurant_id": {"type": "str", "description": "The unique identifier for the created restaurant"}}}
{"api_name": "getRestaurantDetails", "api_description": "Retrieve details of a specific restaurant", "field": "Hospitality/Restaurant Management", "parameters": {"restaurant_id": {"type": "str", "description": "The unique identifier of the restaurant"}}, "required": ["restaurant_id"], "responses": {"name": {"type": "str", "description": "The name of the restaurant"}, "location": {"type": "str", "description": "The location of the restaurant"}, "cuisine_type": {"type": "str", "description": "The type of cuisine offered by the restaurant"}}}
{"api_name": "updateRestaurantHours", "api_description": "Update the opening hours of a specific restaurant", "field": "Hospitality/Restaurant Management", "parameters": {"restaurant_id": {"type": "str", "description": "The unique identifier of the restaurant"}, "opening_hours": {"type": "str", "description": "The new opening hours of the restaurant in a specific format (e.g., 10:00-22:00)"}}, "required": ["restaurant_id", "opening_hours"], "responses": {"status": {"type": "str", "description": "The status message indicating the success of the operation"}}}
{"api_name": "getCateringMenu", "api_description": "Retrieve the catering menu offered by a hospitality establishment", "field": "Hospitality/Catering Services", "parameters": {"establishment": {"type": "str", "description": "The name of the hospitality establishment offering catering services (e.g., ABC Hotel, XYZ Restaurant)"}, "event_type": {"type": "str", "description": "The type of event for which catering services are required (e.g., wedding, corporate event, birthday party)"}}, "required": ["establishment"], "responses": {"menu": {"type": "str", "description": "The catering menu offered by the establishment for the specified event type"}}}
{"api_name": "getCustomerServiceRating", "api_description": "Retrieve the customer service rating of a hospitality establishment", "field": "Hospitality/Customer Service", "parameters": {"establishment": {"type": "str", "description": "The name of the hospitality establishment for which you want to get the customer service rating (e.g., hotel, restaurant)"}, "location": {"type": "str", "description": "The location of the establishment (e.g., city, country)"}}, "required": ["establishment", "location"], "responses": {"rating": {"type": "float", "description": "The customer service rating of the specified hospitality establishment"}}}
{"api_name": "checkIn", "api_description": "Check in a guest", "field": "Hospitality/Front Desk Operations", "parameters": {"guest_name": {"type": "str", "description": "The name of the guest checking in"}, "reservation_id": {"type": "str", "description": "The reservation id for the guest"}, "arrival_date": {"type": "str", "description": "The date of arrival for the guest"}, "room_type": {"type": "str", "description": "The type of room assigned to the guest"}, "payment_method": {"type": "str", "description": "The payment method chosen by the guest"}}, "required": ["guest_name", "arrival_date", "room_type"], "responses": {"check_in_status": {"type": "str", "description": "The status of the check-in process"}}}
{"api_name": "checkOut", "api_description": "Check out a guest", "field": "Hospitality/Front Desk Operations", "parameters": {"guest_name": {"type": "str", "description": "The name of the guest checking out"}, "reservation_id": {"type": "str", "description": "The reservation id for the guest"}, "departure_date": {"type": "str", "description": "The date of departure for the guest"}, "bill_breakdown": {"type": "bool", "description": "Flag to indicate if a breakdown of charges is required"}}, "required": ["guest_name", "departure_date"], "responses": {"checkout_status": {"type": "str", "description": "The status of the check-out process"}, "total_bill": {"type": "float", "description": "The total bill amount for the guest"}}}
{"api_name": "checkInGuest", "api_description": "Check-in a guest", "field": "Hospitality/Front Desk Operations", "parameters": {"guest_name": {"type": "str", "description": "The name of the guest checking in"}, "arrival_date": {"type": "str", "description": "The arrival date of the guest (e.g., 2022-01-01)"}, "room_number": {"type": "int", "description": "The room number assigned to the guest"}}, "required": ["guest_name", "arrival_date", "room_number"], "responses": {"confirmation_number": {"type": "str", "description": "The confirmation number of the guest check-in"}}}
{"api_name": "roomAvailability", "api_description": "Check room availability", "field": "Hospitality/Front Desk Operations", "parameters": {"check_in_date": {"type": "str", "description": "The desired check-in date (e.g., 2022-02-01)"}, "check_out_date": {"type": "str", "description": "The desired check-out date (e.g., 2022-02-05)"}}, "required": ["check_in_date", "check_out_date"], "responses": {"available_rooms": {"type": "int", "description": "The number of available rooms for the specified dates"}}}
{"api_name": "roomServiceRequest", "api_description": "Submit a room service request", "field": "Hospitality/Front Desk Operations", "parameters": {"guest_name": {"type": "str", "description": "The name of the guest making the request"}, "room_number": {"type": "int", "description": "The room number of the guest"}, "service_type": {"type": "str", "description": "The type of service requested (e.g., food, towels, toiletries)"}, "quantity": {"type": "int", "description": "The quantity of the requested service"}}, "required": ["guest_name", "room_number", "service_type", "quantity"], "responses": {"request_number": {"type": "str", "description": "The request number for the room service request"}}}
{"api_name": "requestHousekeeping", "api_description": "Request housekeeping services", "field": "Hospitality/Housekeeping", "parameters": {"room_number": {"type": "str", "description": "The room number that requires housekeeping"}, "service_type": {"type": "str", "description": "The type of housekeeping service requested (e.g., cleaning, linen change, toiletries restock)"}}, "required": ["room_number"], "responses": {"status": {"type": "str", "description": "The status of the housekeeping request (e.g., confirmed, pending)"}}}
{"api_name": "getHousekeepingSchedule", "api_description": "Retrieve the housekeeping schedule for a specific day", "field": "Hospitality/Housekeeping", "parameters": {"date": {"type": "str", "description": "The date for which you want to retrieve the housekeeping schedule (e.g., 2022-05-30)"}}, "required": ["date"], "responses": {"schedule": {"type": "str", "description": "The housekeeping schedule for the specified date"}}}
{"api_name": "checkHousekeepingCompletion", "api_description": "Check the completion status of housekeeping tasks", "field": "Hospitality/Housekeeping", "parameters": {"room_number": {"type": "str", "description": "The room number for which you want to check the completion status"}}, "required": ["room_number"], "responses": {"tasks": {"type": "str", "description": "The list of housekeeping tasks and their completion status in the specified room"}}}
{"api_name": "cleanRoom", "api_description": "Request for room cleaning service", "field": "Hospitality/Housekeeping", "parameters": {"room_number": {"type": "str", "description": "The number of the room to be cleaned (e.g., 101, 204, 305)"}, "time_frame": {"type": "str", "description": "The preferred time frame for room cleaning (e.g., morning, afternoon, evening)"}, "extra_services": {"type": "str", "description": "Additional services requested along with room cleaning (e.g., change towels, refill minibar)"}}, "required": ["room_number"], "responses": {"status": {"type": "str", "description": "Status of the room cleaning request (e.g., pending, completed)"}, "cleaning_staff": {"type": "str", "description": "The name of the staff member assigned for room cleaning"}}}
{"api_name": "getMenu", "api_description": "Retrieve the menu for a specific restaurant", "field": "Hospitality/Food and Beverage Management", "parameters": {"restaurant_name": {"type": "str", "description": "The name of the restaurant for which you want to get the menu (e.g., The Olive Garden, McDonald's)"}, "menu_type": {"type": "str", "description": "Specify the type of menu to retrieve (e.g., breakfast, lunch, dinner)"}, "language": {"type": "str", "description": "Specify the language in which the menu is returned (e.g., English, French)"}}, "required": ["restaurant_name"], "responses": {"menu": {"type": "str", "description": "The menu of the specified restaurant in the selected language"}}}
{"api_name": "placeOrder", "api_description": "Place an order for food and beverages at a restaurant", "field": "Hospitality/Food and Beverage Management", "parameters": {"restaurant_name": {"type": "str", "description": "The name of the restaurant where you want to place the order (e.g., Pizza Hut, Starbucks)"}, "order_items": {"type": "str", "description": "The items you want to order along with their quantities (e.g., 'Cheese Pizza: 2, Coke: 1')"}, "table_number": {"type": "int", "description": "The table number where the order is being placed"}}, "required": ["restaurant_name", "order_items"], "responses": {"order_number": {"type": "str", "description": "The unique order number associated with the placed order"}, "estimated_wait_time": {"type": "int", "description": "The estimated wait time for the order in minutes"}}}
{"api_name": "getSpecialOffers", "api_description": "Retrieve special offers and discounts at a restaurant", "field": "Hospitality/Food and Beverage Management", "parameters": {"restaurant_name": {"type": "str", "description": "The name of the restaurant for which you want to get the special offers (e.g., Olive Garden, KFC)"}}, "required": ["restaurant_name"], "responses": {"special_offers": {"type": "str", "description": "The special offers and discounts available at the specified restaurant"}}}
{"api_name": "makeReservation", "api_description": "Make a reservation for a table at a restaurant", "field": "Hospitality/Food and Beverage Management", "parameters": {"restaurant": {"type": "str", "description": "The name of the restaurant for which you want to make a reservation"}, "date": {"type": "str", "description": "The desired date for the reservation (e.g., DD/MM/YYYY)"}, "time": {"type": "str", "description": "The desired time for the reservation (e.g., HH:MM AM/PM)"}, "party_size": {"type": "int", "description": "The number of people in the party"}}, "required": ["restaurant", "date", "time", "party_size"], "responses": {"reservation_id": {"type": "str", "description": "The unique reservation ID for reference"}, "confirmation": {"type": "str", "description": "The confirmation message for the reservation"}}}
{"api_name": "getReservationAvailability", "api_description": "Check the availability of reservations at a restaurant", "field": "Hospitality/Food and Beverage Management", "parameters": {"restaurant_name": {"type": "str", "description": "The name of the restaurant for which you want to check reservation availability"}, "date": {"type": "str", "description": "The desired date for the reservation (e.g., YYYY-MM-DD)"}, "party_size": {"type": "int", "description": "The number of people in your party"}}, "required": ["restaurant_name", "date", "party_size"], "responses": {"availability": {"type": "bool", "description": "The availability status of reservations for the specified date and party size"}}}
{"api_name": "getBeverageMenu", "api_description": "Retrieve the beverage menu for a bar or restaurant", "field": "Hospitality/Bar and Beverage Operations", "parameters": {"restaurant_id": {"type": "int", "description": "The unique identifier of the restaurant"}, "alcohol_only": {"type": "bool", "description": "Specify if the beverage menu should include only alcoholic drinks"}}, "required": ["restaurant_id"], "responses": {"beverages": {"type": "str", "description": "The list of beverages available at the restaurant"}, "alcohol_percentage": {"type": "float", "description": "The percentage of alcohol content in the beverages"}}}
{"api_name": "orderBeverage", "api_description": "Place an order for a beverage at the bar", "field": "Hospitality/Bar and Beverage Operations", "parameters": {"bar_location": {"type": "str", "description": "The location of the bar (e.g., hotel, restaurant)"}, "beverage_name": {"type": "str", "description": "The name of the beverage to order"}, "quantity": {"type": "int", "description": "The quantity of the beverage to order"}}, "required": ["bar_location", "beverage_name", "quantity"], "responses": {"order_id": {"type": "str", "description": "The unique identifier for the order"}, "total_price": {"type": "float", "description": "The total price of the order"}}}
{"api_name": "getBeveragePrice", "api_description": "Retrieve the price of a specific beverage at a bar", "field": "Hospitality/Bar and Beverage Operations", "parameters": {"bar_name": {"type": "str", "description": "The name of the bar where the beverage is available"}, "beverage_name": {"type": "str", "description": "The name of the specific beverage"}, "size": {"type": "str", "description": "Specify the size of the beverage (e.g., small, medium, large)"}}, "required": ["bar_name", "beverage_name"], "responses": {"price": {"type": "float", "description": "The price of the specified beverage at the specified bar"}}}
{"api_name": "getRevenue", "api_description": "Retrieve revenue information for a specific hotel", "field": "Hospitality/Revenue Management", "parameters": {"hotel_id": {"type": "str", "description": "The ID of the hotel for which you want to get the revenue"}}, "required": ["hotel_id"], "responses": {"revenue": {"type": "float", "description": "The revenue generated by the specified hotel"}}}
{"api_name": "getOccupancyRate", "api_description": "Retrieve the occupancy rate for a specific hotel", "field": "Hospitality/Revenue Management", "parameters": {"hotel_id": {"type": "str", "description": "The ID of the hotel for which you want to get the occupancy rate"}}, "required": ["hotel_id"], "responses": {"occupancy_rate": {"type": "float", "description": "The occupancy rate of the specified hotel"}}}
{"api_name": "calculateRevenue", "api_description": "Calculate revenue for a given period of time", "field": "Hospitality/Revenue Management", "parameters": {"start_date": {"type": "str", "description": "The start date of the revenue calculation period (YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the revenue calculation period (YYYY-MM-DD)"}, "room_category": {"type": "str", "description": "The category of rooms to include in the revenue calculation (e.g., single, double, suite)"}, "occupancy_rate": {"type": "float", "description": "The expected occupancy rate for the given period (e.g., 0.75 for 75% occupancy)"}}, "required": ["start_date", "end_date"], "responses": {"revenue": {"type": "float", "description": "The calculated revenue for the given period and room category"}, "occupancy_days": {"type": "int", "description": "The number of days with occupied rooms during the given period"}}}
{"api_name": "calculateRevPAR", "api_description": "Calculate the Revenue per Available Room (RevPAR)", "field": "Hospitality/Revenue Management", "parameters": {"rooms_sold": {"type": "int", "description": "The number of rooms sold in a given period"}, "average_daily_rate": {"type": "float", "description": "The average daily rate of the rooms"}, "available_rooms": {"type": "int", "description": "The total number of available rooms in the same period"}}, "required": ["rooms_sold", "average_daily_rate", "available_rooms"], "responses": {"revpar": {"type": "float", "description": "The Revenue per Available Room (RevPAR)"}}}
{"api_name": "createMarketingCampaign", "api_description": "Create a new marketing campaign for the hospitality industry", "field": "Hospitality/Hospitality Marketing", "parameters": {"campaign_name": {"type": "str", "description": "The name of the marketing campaign"}, "start_date": {"type": "str", "description": "The start date of the campaign (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the campaign (e.g., YYYY-MM-DD)"}, "target_audience": {"type": "str", "description": "The target audience for the campaign (e.g., families, business travelers, honeymooners)"}, "marketing_budget": {"type": "float", "description": "The budget allocated for the marketing campaign"}, "marketing_channels": {"type": "str", "description": "The marketing channels to be used for the campaign (e.g., social media, email, print ads)"}}, "required": ["campaign_name", "start_date", "end_date", "target_audience"], "responses": {"campaign_id": {"type": "int", "description": "The unique identifier of the created marketing campaign"}, "success": {"type": "bool", "description": "Indicates whether the marketing campaign creation was successful"}}}
{"api_name": "getTargetMarket", "api_description": "Retrieve the target market for hospitality marketing", "field": "Hospitality/Hospitality Marketing", "parameters": {"industry": {"type": "str", "description": "The specific industry within hospitality for which you want to identify the target market (e.g., hotels, restaurants, travel agencies)"}, "location": {"type": "str", "description": "The location (e.g., city, country) for which you want to identify the target market"}}, "required": ["industry"], "responses": {"target_market": {"type": "str", "description": "The identified target market for the specified industry in the given location"}}}
{"api_name": "calculateProfit", "api_description": "Calculate the profit of a hospitality business", "field": "Hospitality/Hospitality Finance", "parameters": {"revenue": {"type": "float", "description": "The total revenue generated by the business"}, "expenses": {"type": "float", "description": "The total expenses incurred by the business"}, "tax_rate": {"type": "float", "description": "The tax rate applicable to the business"}}, "required": ["revenue", "expenses", "tax_rate"], "responses": {"profit": {"type": "float", "description": "The calculated profit of the hospitality business"}}}
{"api_name": "bookHotel", "api_description": "Book a hotel room", "field": "Hospitality/Hospitality Technology", "parameters": {"location": {"type": "str", "description": "The location where you want to book the hotel room (e.g., Paris, Tokyo, New York)"}, "check_in_date": {"type": "str", "description": "The date you plan to check-in (e.g., 2022-10-15)"}, "check_out_date": {"type": "str", "description": "The date you plan to check-out (e.g., 2022-10-20)"}, "num_adults": {"type": "int", "description": "The number of adults staying in the room (e.g., 2)"}, "num_children": {"type": "int", "description": "The number of children staying in the room (e.g., 1)"}, "amenities": {"type": "str", "description": "Specify desired amenities (e.g., WiFi, Pool, Gym)"}, "price_range": {"type": "str", "description": "Specify a price range for the hotel room (e.g., $100-$200, $200-$300)"}}, "required": ["location", "check_in_date", "check_out_date"], "responses": {"booking_id": {"type": "str", "description": "The unique ID of the hotel room booking"}, "total_cost": {"type": "float", "description": "The total cost of the hotel room booking"}}}
{"api_name": "getFacilityStatus", "api_description": "Retrieve the status of a specific facility", "field": "Hospitality/Facilities Management", "parameters": {"facility_id": {"type": "str", "description": "The ID of the facility (e.g., Room 101, Conference Hall 2)"}, "date": {"type": "str", "description": "The date for which you want to check the facility status (e.g., 2022-01-01)"}, "time": {"type": "str", "description": "The time for which you want to check the facility status (e.g., 09:00 AM, 15:30 PM)"}}, "required": ["facility_id", "date", "time"], "responses": {"status": {"type": "str", "description": "The status of the facility (e.g., available, occupied)"}, "occupant": {"type": "str", "description": "The name of the occupant if the facility is occupied"}}}
{"api_name": "getEmployeeInfo", "api_description": "Retrieve information about an employee", "field": "Hospitality/Human Resource Management", "parameters": {"employee_id": {"type": "int", "description": "The ID of the employee for which you want to retrieve the information"}}, "required": ["employee_id"], "responses": {"name": {"type": "str", "description": "The name of the employee"}, "position": {"type": "str", "description": "The position of the employee in the organization"}, "department": {"type": "str", "description": "The department in which the employee works"}}}
{"api_name": "addEmployee", "api_description": "Add a new employee to the organization", "field": "Hospitality/Human Resource Management", "parameters": {"name": {"type": "str", "description": "The name of the new employee"}, "position": {"type": "str", "description": "The position of the new employee"}, "department": {"type": "str", "description": "The department in which the new employee will work"}}, "required": ["name", "position", "department"], "responses": {"success": {"type": "bool", "description": "Indicates whether the employee addition was successful"}}}
{"api_name": "deleteEmployee", "api_description": "Delete an employee from the organization", "field": "Hospitality/Human Resource Management", "parameters": {"employee_id": {"type": "int", "description": "The ID of the employee you want to delete"}}, "required": ["employee_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the employee was successfully deleted"}}}
{"api_name": "checkReviews", "api_description": "Retrieve quality assurance information by checking reviews", "field": "Hospitality/Quality Assurance", "parameters": {"hotel_id": {"type": "str", "description": "The ID of the hotel for which you want to check reviews"}, "rating": {"type": "int", "description": "The minimum rating for reviews to be considered as part of quality assurance"}, "review_count": {"type": "int", "description": "The minimum number of reviews required for quality assurance"}}, "required": ["hotel_id"], "responses": {"quality_assurance": {"type": "str", "description": "The quality assurance status of the hotel based on reviews"}, "total_reviews": {"type": "int", "description": "The total number of reviews for the hotel"}, "average_rating": {"type": "float", "description": "The average rating of the hotel based on reviews"}}}
{"api_name": "checkRoomCleanliness", "api_description": "Check the cleanliness of a hotel room", "field": "Hospitality/Quality Assurance", "parameters": {"room_number": {"type": "str", "description": "The number of the hotel room to be checked"}, "staff_id": {"type": "str", "description": "The ID of the staff member responsible for checking the room"}}, "required": ["room_number", "staff_id"], "responses": {"cleanliness_score": {"type": "float", "description": "The cleanliness score of the hotel room"}}}
{"api_name": "getFoodQuality", "api_description": "Retrieve information about the quality of food in a restaurant", "field": "Hospitality/Quality Assurance", "parameters": {"restaurant_name": {"type": "str", "description": "The name of the restaurant to retrieve information about"}, "time_of_visit": {"type": "str", "description": "The time of the visit to the restaurant"}, "location": {"type": "str", "description": "The location of the restaurant"}}, "required": ["restaurant_name"], "responses": {"food_quality_rating": {"type": "float", "description": "The quality rating of the food in the restaurant"}}}
{"api_name": "checkCustomerService", "api_description": "Check the quality of customer service in a hospitality establishment", "field": "Hospitality/Quality Assurance", "parameters": {"establishment_name": {"type": "str", "description": "The name of the hospitality establishment to be checked"}, "location": {"type": "str", "description": "The location of the establishment"}}, "required": ["establishment_name"], "responses": {"customer_service_rating": {"type": "float", "description": "The rating of customer service in the establishment"}}}
{"api_name": "checkServiceQuality", "api_description": "Check the quality of service in a hospitality establishment", "field": "Hospitality/Quality Assurance", "parameters": {"hotel_name": {"type": "str", "description": "The name of the hotel to check the service quality (e.g., Hilton, Marriott, Intercontinental)"}, "date": {"type": "str", "description": "The date for which you want to check the service quality (e.g., YYYY-MM-DD)"}, "time_slot": {"type": "str", "description": "Specify a time slot for service quality (e.g., morning, afternoon, evening)"}}, "required": ["hotel_name", "date"], "responses": {"rating": {"type": "float", "description": "The rating of service quality at the specified hotel on the given date"}, "comments": {"type": "str", "description": "Additional feedback or comments regarding the service quality"}}}
{"api_name": "checkQuality", "api_description": "Check the quality of hospitality services", "field": "Hospitality/Quality Assurance", "parameters": {"hotel_name": {"type": "str", "description": "The name of the hotel to check the quality"}, "date": {"type": "str", "description": "The date of the quality check (e.g., YYYY-MM-DD)"}, "room_type": {"type": "str", "description": "The type of room to check the quality (e.g., single, double, suite)"}, "staff_rating": {"type": "int", "description": "The rating for the staff service quality (1-10)"}, "cleanliness_rating": {"type": "int", "description": "The rating for the cleanliness of the room (1-10)"}}, "required": ["hotel_name", "date", "room_type"], "responses": {"quality_score": {"type": "float", "description": "The overall quality score of the hospitality service"}, "staff_rating": {"type": "str", "description": "The rating for the staff service quality"}, "cleanliness_rating": {"type": "str", "description": "The rating for the cleanliness of the room"}}}
{"api_name": "getAvailability", "api_description": "Check the availability of rooms in a hospitality establishment", "field": "Hospitality/Quality Assurance", "parameters": {"establishment_name": {"type": "str", "description": "The name of the hospitality establishment for which you want to check availability (e.g., Hilton Hotel, Marriott Resort)"}, "check_in_date": {"type": "str", "description": "The desired check-in date (e.g., YYYY-MM-DD)"}, "check_out_date": {"type": "str", "description": "The desired check-out date (e.g., YYYY-MM-DD)"}}, "required": ["establishment_name", "check_in_date", "check_out_date"], "responses": {"availability": {"type": "bool", "description": "Indicates whether rooms are available on the specified dates"}}}
{"api_name": "getCustomerFeedback", "api_description": "Retrieve customer feedback on the quality of service", "field": "Hospitality/Quality Assurance", "parameters": {"startDate": {"type": "str", "description": "The start date to retrieve customer feedback (e.g., 2021-01-01)"}, "endDate": {"type": "str", "description": "The end date to retrieve customer feedback (e.g., 2021-12-31)"}, "location": {"type": "str", "description": "The location to filter customer feedback (e.g., New York, London)"}, "rating": {"type": "int", "description": "Filter customer feedback based on rating (e.g., 1-5)"}}, "required": ["startDate", "endDate"], "responses": {"feedback": {"type": "str", "description": "Customer feedback on the quality of service"}, "rating": {"type": "int", "description": "Rating given by the customer"}}}
{"api_name": "getQualityAssurance", "api_description": "Retrieve quality assurance information of a hospitality establishment", "field": "Hospitality/Quality Assurance", "parameters": {"establishment": {"type": "str", "description": "The name or ID of the hospitality establishment for which you want to get the quality assurance information"}}, "required": ["establishment"], "responses": {"rating": {"type": "float", "description": "The quality assurance rating of the specified hospitality establishment"}, "feedback": {"type": "str", "description": "Feedback or comments regarding the quality assurance"}}}
{"api_name": "getHealthAndSafetyGuidelines", "api_description": "Retrieve health and safety guidelines for hospitality industry", "field": "Hospitality/Health and Safety Management", "parameters": {}, "required": [], "responses": {"guidelines": {"type": "str", "description": "The health and safety guidelines for the hospitality industry"}}}
{"api_name": "checkSafetyCompliance", "api_description": "Check the safety compliance of a hospitality establishment", "field": "Hospitality/Health and Safety Management", "parameters": {"establishment_name": {"type": "str", "description": "The name of the hospitality establishment"}, "location": {"type": "str", "description": "The location of the hospitality establishment"}}, "required": ["establishment_name", "location"], "responses": {"compliance_status": {"type": "str", "description": "The safety compliance status of the establishment"}}}
{"api_name": "reportIncident", "api_description": "Report a health and safety incident in a hospitality establishment", "field": "Hospitality/Health and Safety Management", "parameters": {"establishment_name": {"type": "str", "description": "The name of the hospitality establishment"}, "location": {"type": "str", "description": "The location of the hospitality establishment"}, "incident_details": {"type": "str", "description": "Details of the health and safety incident"}}, "required": ["establishment_name", "location", "incident_details"], "responses": {"confirmation": {"type": "str", "description": "Confirmation message indicating successful reporting of the incident"}}}
{"api_name": "checkCleaningStatus", "api_description": "Check the cleaning status of a specific area or facility", "field": "Hospitality/Health and Safety Management", "parameters": {"area": {"type": "str", "description": "The specific area or facility to check (e.g., lobby, restaurant, swimming pool)"}, "date": {"type": "str", "description": "The date for which you want to check the cleaning status (e.g., 2022-05-20)"}, "time": {"type": "str", "description": "The time for which you want to check the cleaning status (e.g., 09:00 AM, 02:30 PM)"}, "staff_id": {"type": "str", "description": "The ID of the staff responsible for cleaning"}}, "required": ["area", "date", "time"], "responses": {"cleaning_status": {"type": "str", "description": "The current cleaning status of the specified area or facility"}}}
{"api_name": "requestFirst Aid Assistance", "api_description": "Request first aid assistance for a guest or visitor", "field": "Hospitality/Health and Safety Management", "parameters": {"guest_name": {"type": "str", "description": "The name of the guest or visitor who requires first aid assistance"}, "issue": {"type": "str", "description": "Describe the issue or medical condition requiring first aid assistance (e.g., allergic reaction, minor injury)"}, "location": {"type": "str", "description": "The location where the guest or visitor is currently located"}}, "required": ["guest_name", "issue"], "responses": {"status": {"type": "str", "description": "The status of the first aid assistance request"}}}
{"api_name": "checkHealthAndSafety", "api_description": "Check the health and safety compliance of a hospitality establishment", "field": "Hospitality/Health and Safety Management", "parameters": {"establishment": {"type": "str", "description": "The name or ID of the hospitality establishment you want to check"}, "location": {"type": "str", "description": "The location of the hospitality establishment (e.g., city, country)"}, "date": {"type": "str", "description": "The date on which you want to check the health and safety compliance"}}, "required": ["establishment", "location", "date"], "responses": {"compliance_status": {"type": "str", "description": "The compliance status of the hospitality establishment"}, "violations": {"type": "int", "description": "The number of health and safety violations found"}}}
{"api_name": "getHealthAndSafetyInfo", "api_description": "Retrieve health and safety information for a specific hospitality establishment", "field": "Hospitality/Health and Safety Management", "parameters": {"establishment": {"type": "str", "description": "The name or ID of the hospitality establishment for which you want to retrieve health and safety information"}}, "required": ["establishment"], "responses": {"info": {"type": "str", "description": "The health and safety information for the specified hospitality establishment"}}}
{"api_name": "bookConferenceRoom", "api_description": "Book a conference room for a specific date and time", "field": "Hospitality/Conference Services", "parameters": {"room_name": {"type": "str", "description": "The name of the conference room (e.g., Meeting Room 1, Boardroom)"}, "date": {"type": "str", "description": "The date for booking the conference room (e.g., 2022-10-15)"}, "start_time": {"type": "str", "description": "The start time of the conference (e.g., 09:00 AM)"}, "end_time": {"type": "str", "description": "The end time of the conference (e.g., 05:00 PM)"}}, "required": ["room_name", "date", "start_time", "end_time"], "responses": {"booking_confirmation": {"type": "str", "description": "Confirmation message indicating the successful booking of the conference room"}}}
{"api_name": "bookSpaTreatment", "api_description": "Book a spa treatment appointment", "field": "Hospitality/Spa and Wellness Management", "parameters": {"spa_name": {"type": "str", "description": "The name of the spa facility where you want to book a treatment (e.g., Serenity Spa, Tranquil Wellness Center)"}, "date": {"type": "str", "description": "The desired date for the appointment (e.g., 2022-12-31)"}, "time": {"type": "str", "description": "The desired time for the appointment (e.g., 09:00 AM, 02:30 PM)"}, "treatment_type": {"type": "str", "description": "The type of treatment to be booked (e.g., massage, facial)"}, "duration": {"type": "int", "description": "The duration of the treatment in minutes (e.g., 60, 90, 120)"}, "customer_name": {"type": "str", "description": "The name of the customer booking the treatment"}}, "required": ["spa_name", "date", "time", "treatment_type", "duration", "customer_name"], "responses": {"booking_id": {"type": "str", "description": "The unique ID assigned to the booked appointment"}, "confirmation_message": {"type": "str", "description": "A confirmation message for the booked appointment"}}}
{"api_name": "bookSpaAppointment", "api_description": "Book an appointment at a spa", "field": "Hospitality/Spa and Wellness Management", "parameters": {"spa_id": {"type": "str", "description": "The unique identifier of the spa"}, "date": {"type": "str", "description": "The desired date for the appointment (e.g., 2022-07-15)"}, "time": {"type": "str", "description": "The desired time for the appointment (e.g., 10:00 AM)"}, "service": {"type": "str", "description": "The service to be booked (e.g., massage, facial)"}, "duration": {"type": "int", "description": "The duration of the appointment in minutes (e.g., 60, 90, 120)"}, "customer_name": {"type": "str", "description": "The name of the customer"}, "contact_number": {"type": "str", "description": "The contact number of the customer"}, "email": {"type": "str", "description": "The email address of the customer"}}, "required": ["spa_id", "date", "time", "service", "customer_name", "email"], "responses": {"booking_id": {"type": "str", "description": "The unique identifier of the booking"}, "confirmation": {"type": "str", "description": "A confirmation message for the booking"}}}
{"api_name": "checkSpaAvailability", "api_description": "Check the availability of spa services", "field": "Hospitality/Spa and Wellness Management", "parameters": {"location": {"type": "str", "description": "The location where the spa is located (e.g., city, hotel name)"}, "date": {"type": "str", "description": "The date to check availability for (e.g., YYYY-MM-DD)"}}, "required": ["location", "date"], "responses": {"availability": {"type": "bool", "description": "Availability status of spa services on the specified date"}}}
{"api_name": "getSpaPrice", "api_description": "Retrieve the price of a specific spa service", "field": "Hospitality/Spa and Wellness Management", "parameters": {"service_name": {"type": "str", "description": "The name of the spa service"}, "location": {"type": "str", "description": "The location where the spa is located (e.g., city, hotel)"}}, "required": ["service_name", "location"], "responses": {"price": {"type": "float", "description": "The price of the specified spa service"}}}
{"api_name": "getGolfCourseInfo", "api_description": "Retrieve information about a golf course", "field": "Hospitality/Golf and Club Management", "parameters": {"course_id": {"type": "str", "description": "The identification number of the golf course"}}, "required": ["course_id"], "responses": {"course_name": {"type": "str", "description": "The name of the golf course"}, "location": {"type": "str", "description": "The location of the golf course"}, "rating": {"type": "float", "description": "The rating out of 5 for the golf course"}, "holes": {"type": "int", "description": "The number of holes in the golf course"}}}
{"api_name": "getMembershipFee", "api_description": "Retrieve the membership fee for a golf club", "field": "Hospitality/Golf and Club Management", "parameters": {"club_name": {"type": "str", "description": "The name of the club"}}, "required": ["club_name"], "responses": {"fee": {"type": "float", "description": "The membership fee for the golf club"}}}
{"api_name": "getClubMembership", "api_description": "Retrieve information about club membership", "field": "Hospitality/Golf and Club Management", "parameters": {"club_name": {"type": "str", "description": "The name of the club"}, "membership_type": {"type": "str", "description": "Type of membership (e.g., individual, family, corporate)"}}, "required": ["club_name"], "responses": {"membership_cost": {"type": "float", "description": "The cost of the membership"}, "membership_benefits": {"type": "str", "description": "Benefits of the membership"}}}
{"api_name": "getCurrencyConversion", "api_description": "Convert currency from one unit to another", "field": "Hospitality/Travel and Tourism", "parameters": {"amount": {"type": "float", "description": "The amount of currency to convert (e.g., 100.50)"}, "from_currency": {"type": "str", "description": "The currency code of the amount to convert from (e.g., USD, EUR, GBP)"}, "to_currency": {"type": "str", "description": "The currency code of the amount to convert to (e.g., EUR, GBP, JPY)"}}, "required": ["amount", "from_currency", "to_currency"], "responses": {"converted_amount": {"type": "float", "description": "The converted amount of currency in the specified currency code"}}}
{"api_name": "getAirportWeather", "api_description": "Retrieve current weather information at a specified airport", "field": "Hospitality/Travel and Tourism", "parameters": {"airport_code": {"type": "str", "description": "The code of the airport (e.g., LAX, JFK, CDG)"}}, "required": ["airport_code"], "responses": {"weather": {"type": "str", "description": "Current weather conditions at the specified airport"}}}
{"api_name": "getAvailableRooms", "api_description": "Retrieve available rooms information", "field": "Hospitality/Lodging Operations", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the available rooms (e.g., London, New York)"}, "check_in_date": {"type": "str", "description": "The check-in date for the booking (e.g., 2022-10-15)"}, "check_out_date": {"type": "str", "description": "The check-out date for the booking (e.g., 2022-10-20)"}, "guests": {"type": "int", "description": "The number of guests for the booking"}}, "required": ["location", "check_in_date", "check_out_date"], "responses": {"available_rooms": {"type": "int", "description": "The number of available rooms at the specified location for the given dates"}, "room_details": {"type": "str", "description": "The details of the available rooms"}}}
{"api_name": "bookLodging", "api_description": "Book lodging for a specific location and duration", "field": "Hospitality/Lodging Operations", "parameters": {"location": {"type": "str", "description": "The location where you want to book the lodging (e.g., Paris, Tokyo, New York)"}, "check_in_date": {"type": "str", "description": "The desired check-in date for the lodging (e.g., 2022-08-15)"}, "check_out_date": {"type": "str", "description": "The desired check-out date for the lodging (e.g., 2022-08-20)"}, "number_of_guests": {"type": "int", "description": "The number of guests for the lodging (e.g., 2, 4, 6)"}, "amenities": {"type": "str", "description": "Preferred amenities for the lodging (e.g., pool, gym, WiFi)"}, "price_range": {"type": "str", "description": "The desired price range for the lodging (e.g., $50-$100, $100-$200, $200-$300)"}}, "required": ["location", "check_in_date", "check_out_date", "number_of_guests"], "responses": {"booking_id": {"type": "str", "description": "The unique booking ID for the lodging reservation"}, "confirmation_number": {"type": "str", "description": "The confirmation number for the lodging reservation"}, "total_amount": {"type": "float", "description": "The total amount for the lodging reservation"}}}
{"api_name": "getRenewableEnergyStats", "api_description": "Retrieve statistics on renewable energy production", "field": "Energy/Renewable Energy", "parameters": {"country": {"type": "str", "description": "The country for which you want to get renewable energy statistics"}}, "required": ["country"], "responses": {"solar_energy": {"type": "float", "description": "The amount of solar energy produced in the specified country"}, "wind_energy": {"type": "float", "description": "The amount of wind energy produced in the specified country"}, "hydropower_energy": {"type": "float", "description": "The amount of hydropower energy produced in the specified country"}, "bioenergy": {"type": "float", "description": "The amount of bioenergy produced in the specified country"}}}
{"api_name": "getFossilFuelPrice", "api_description": "Retrieve the current price of a specific fossil fuel", "field": "Energy/Fossil Fuels", "parameters": {"fuel_type": {"type": "str", "description": "The type of fossil fuel (e.g., coal, oil, natural gas)"}, "country": {"type": "str", "description": "The country for which you want to get the price"}}, "required": ["fuel_type", "country"], "responses": {"price": {"type": "float", "description": "The current price of the specified fossil fuel"}, "unit": {"type": "str", "description": "The unit of price in which the price is provided"}}}
{"api_name": "getFossilFuelConsumption", "api_description": "Retrieve the consumption of fossil fuels", "field": "Energy/Fossil Fuels", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the fossil fuel consumption (e.g., United States, China, Germany)"}}, "required": ["country"], "responses": {"consumption": {"type": "float", "description": "The consumption of fossil fuels in the specified country"}}}
{"api_name": "getNuclearEnergyData", "api_description": "Retrieve data related to nuclear energy", "field": "Energy/Nuclear Energy", "parameters": {"location": {"type": "str", "description": "The location for which you want to fetch nuclear energy data (e.g., United States, China, France)"}, "year": {"type": "int", "description": "The year for which you want to fetch nuclear energy data"}}, "required": ["location", "year"], "responses": {"nuclear_power_production": {"type": "float", "description": "The amount of nuclear power produced in the specified location and year"}, "nuclear_power_consumption": {"type": "float", "description": "The amount of nuclear power consumed in the specified location and year"}, "nuclear_plants": {"type": "int", "description": "The number of nuclear power plants in the specified location"}}}
{"api_name": "getEnergyPolicy", "api_description": "Retrieve information about a country's energy policies", "field": "Energy/Energy Policy", "parameters": {"country": {"type": "str", "description": "The country for which you want to get energy policy information (e.g., United States, China, Germany)"}, "policy_type": {"type": "str", "description": "Specify the type of energy policy you are interested in (e.g., renewable energy, energy efficiency, fossil fuels)"}}, "required": ["country"], "responses": {"policy_summary": {"type": "str", "description": "Summary of the energy policy of the specified country"}}}
{"api_name": "getEnergyEfficiency", "api_description": "Retrieve energy efficiency information", "field": "Energy/Energy Efficiency", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve energy efficiency information (e.g., city, state, country)"}, "building_type": {"type": "str", "description": "Specify the type of building (e.g., residential, commercial, industrial)"}, "year": {"type": "int", "description": "Specify the year for which you want to retrieve energy efficiency data"}}, "required": ["location"], "responses": {"efficiency_score": {"type": "float", "description": "The energy efficiency score of the specified location and building type for the given year"}, "label": {"type": "str", "description": "The energy efficiency label associated with the efficiency score"}}}
{"api_name": "calculateEfficiency", "api_description": "Calculate the energy efficiency of a device", "field": "Energy/Energy Efficiency", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the device"}, "energy_input": {"type": "float", "description": "The amount of energy input to the device (e.g., in Joules)"}, "energy_output": {"type": "float", "description": "The amount of energy output from the device (e.g., in Joules)"}}, "required": ["device_id", "energy_input", "energy_output"], "responses": {"efficiency": {"type": "float", "description": "The energy efficiency of the device"}}}
{"api_name": "getBatteryCapacity", "api_description": "Retrieve the capacity of a battery", "field": "Energy/Energy Storage", "parameters": {"battery_type": {"type": "str", "description": "The type of battery (e.g., lithium-ion, lead-acid)"}, "voltage": {"type": "float", "description": "The voltage of the battery in volts"}}, "required": ["battery_type", "voltage"], "responses": {"capacity": {"type": "float", "description": "The capacity of the battery in ampere-hours"}}}
{"api_name": "getEnergyStorageStatus", "api_description": "Retrieve the current status of an energy storage system", "field": "Energy/Energy Storage", "parameters": {"system_id": {"type": "str", "description": "The unique identifier of the energy storage system"}}, "required": ["system_id"], "responses": {"status": {"type": "str", "description": "The current status of the energy storage system: charging, discharging, idle"}}}
{"api_name": "getEnergyStorageCapacity", "api_description": "Retrieve the capacity of an energy storage system", "field": "Energy/Energy Storage", "parameters": {"system_id": {"type": "str", "description": "The unique identifier of the energy storage system"}}, "required": ["system_id"], "responses": {"capacity": {"type": "float", "description": "The capacity of the energy storage system in kWh"}}}
{"api_name": "getEnergyConsumption", "api_description": "Retrieve the current energy consumption information of a specific location", "field": "Energy/Smart Grids", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the energy consumption (e.g., home, office, city center)"}, "time_range": {"type": "str", "description": "Specify a time range for energy consumption (e.g., last hour, last day, last month)"}, "unit": {"type": "str", "description": "The desired unit for energy consumption (e.g., kWh, MWh, GWh)"}}, "required": ["location"], "responses": {"energy_consumption": {"type": "float", "description": "The energy consumption at the specified location"}, "unit": {"type": "str", "description": "The unit of energy consumption in which the consumption is provided"}}}
{"api_name": "getSolarPower", "api_description": "Retrieve solar power generation information", "field": "Energy/Solar Power", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the solar power generation (e.g., New York, Tokyo, Sydney)"}}, "required": ["location"], "responses": {"power_generation": {"type": "float", "description": "The solar power generation at the specified location"}}}
{"api_name": "getWindPower", "api_description": "Retrieve current wind power information", "field": "Energy/Wind Power", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the wind power (e.g., Beijing, London, New York)"}, "unit": {"type": "str", "description": "The desired unit for wind power (e.g., Watts, Kilowatts)"}}, "required": ["location"], "responses": {"wind_power": {"type": "float", "description": "The wind power at the specified location"}, "unit": {"type": "str", "description": "The unit of wind power in which the wind power is provided"}}}
{"api_name": "getWindSpeed", "api_description": "Retrieve current wind speed information", "field": "Energy/Wind Power", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the wind speed (e.g., Beijing, London, New York)"}, "unit": {"type": "str", "description": "The desired unit for wind speed (e.g., m/s, mph, km/h)"}}, "required": ["location"], "responses": {"wind_speed": {"type": "float", "description": "The wind speed at the specified location"}, "unit": {"type": "str", "description": "The unit of wind speed in which the wind speed is provided"}}}
{"api_name": "getWindDirection", "api_description": "Retrieve current wind direction information", "field": "Energy/Wind Power", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the wind direction (e.g., Beijing, London, New York)"}}, "required": ["location"], "responses": {"wind_direction": {"type": "str", "description": "The wind direction at the specified location"}}}
{"api_name": "getHydropowerProduction", "api_description": "Retrieve current hydropower production information", "field": "Energy/Hydropower", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the hydropower production (e.g., California, China, Brazil)"}, "time_period": {"type": "str", "description": "Specify a time period for hydropower production (e.g., daily, monthly, yearly)"}, "unit": {"type": "str", "description": "The desired unit for hydropower production (e.g., Gigawatts, Megawatts)"}}, "required": ["location"], "responses": {"hydropower_production": {"type": "float", "description": "The hydropower production at the specified location during the specified time period"}, "unit": {"type": "str", "description": "The unit of hydropower production"}}}
{"api_name": "getHydropowerOutput", "api_description": "Retrieve the current output of hydropower plants", "field": "Energy/Hydropower", "parameters": {"location": {"type": "str", "description": "The location of the hydropower plant (e.g., California, China, Brazil)"}, "time_period": {"type": "str", "description": "Specify a time period for the hydropower output (e.g., daily, monthly, yearly)"}, "unit": {"type": "str", "description": "The desired unit for the hydropower output (e.g., kilowatts, megawatts, gigawatts)"}}, "required": ["location"], "responses": {"output": {"type": "float", "description": "The current output of the hydropower plant"}, "unit": {"type": "str", "description": "The unit of hydropower output in which the output is provided"}}}
{"api_name": "getGeothermalEnergyInfo", "api_description": "Retrieve information about geothermal energy production", "field": "Energy/Geothermal Energy", "parameters": {"zipcode": {"type": "str", "description": "The zip code of the location for which you want to get geothermal energy information"}}, "required": ["zipcode"], "responses": {"geothermal_energy_production": {"type": "float", "description": "The annual geothermal energy production in the specified location"}}}
{"api_name": "getBioenergyProduction", "api_description": "Retrieve bioenergy production information", "field": "Energy/Bioenergy", "parameters": {"country": {"type": "str", "description": "The country for which you want to get bioenergy production information (e.g., United States, Brazil, Germany)"}, "year": {"type": "int", "description": "The year for which you want to get the bioenergy production"}}, "required": ["country"], "responses": {"production": {"type": "float", "description": "The bioenergy production in the specified country for the given year"}}}
{"api_name": "getEnergySavings", "api_description": "Retrieve information on energy conservation tips", "field": "Energy/Energy Conservation", "parameters": {"location": {"type": "str", "description": "The location to provide energy conservation tips for (e.g., home, office)"}, "appliance": {"type": "str", "description": "The specific appliance for which you want energy conservation tips (e.g., air conditioner, refrigerator)"}}, "required": ["location"], "responses": {"tips": {"type": "str", "description": "Energy conservation tips for the specified location and appliance"}}}
{"api_name": "checkPowerStatus", "api_description": "Retrieve the status of the power system", "field": "Energy/Power Systems", "parameters": {}, "required": [], "responses": {"status": {"type": "str", "description": "The current status of the power system (e.g., online, offline)"}}}
{"api_name": "adjustVoltage", "api_description": "Adjust the voltage of the power system", "field": "Energy/Power Systems", "parameters": {"voltage": {"type": "float", "description": "The desired voltage to set in volts (e.g., 220, 240, 110)"}, "location": {"type": "str", "description": "The location where the voltage adjustment should be applied (e.g., Building A, Substation B)"}}, "required": ["voltage"], "responses": {"message": {"type": "str", "description": "Confirmation message after adjusting the voltage"}}}
{"api_name": "calculatePowerConsumption", "api_description": "Calculate the power consumption of a device or system", "field": "Energy/Power Systems", "parameters": {"device_name": {"type": "str", "description": "The name of the device or system (e.g., refrigerator, air conditioner)"}, "power_rating": {"type": "float", "description": "The power rating of the device or system in watts"}, "usage_time": {"type": "int", "description": "The usage time of the device or system in hours"}}, "required": ["device_name", "power_rating"], "responses": {"power_consumption": {"type": "float", "description": "The total power consumption of the specified device or system in kilowatt-hours (kWh)"}}}
{"api_name": "estimateSolarPower", "api_description": "Estimate the solar power generation based on location and panel specifications", "field": "Energy/Power Systems", "parameters": {"latitude": {"type": "float", "description": "The latitude of the location"}, "longitude": {"type": "float", "description": "The longitude of the location"}, "panel_type": {"type": "str", "description": "The type of solar panel (e.g., monocrystalline, polycrystalline)"}, "panel_area": {"type": "float", "description": "The area of the solar panel in square meters"}, "efficiency": {"type": "float", "description": "The efficiency of the solar panel as a decimal fraction"}}, "required": ["latitude", "longitude", "panel_type", "panel_area"], "responses": {"solar_power": {"type": "float", "description": "The estimated solar power generation at the specified location and with the given panel specifications in kilowatt-hours per day (kWh/day)"}}}
{"api_name": "calculateEnergySavings", "api_description": "Calculate the energy savings by upgrading to more energy-efficient devices", "field": "Energy/Power Systems", "parameters": {"current_device": {"type": "str", "description": "The name of the current device or system"}, "new_device": {"type": "str", "description": "The name of the new device or system"}, "usage_time": {"type": "int", "description": "The usage time of the devices or systems in hours per day"}}, "required": ["current_device", "new_device", "usage_time"], "responses": {"energy_savings": {"type": "float", "description": "The estimated energy savings per day by upgrading to the more energy-efficient device or system in kilowatt-hours per day (kWh/day)"}}}
{"api_name": "getPowerGeneration", "api_description": "Retrieve power generation information", "field": "Energy/Power Systems", "parameters": {"system": {"type": "str", "description": "The name of the power generation system"}}, "required": ["system"], "responses": {"power_generation": {"type": "float", "description": "The power generation of the specified system"}}}
{"api_name": "getPowerDemand", "api_description": "Retrieve power demand information", "field": "Energy/Power Systems", "parameters": {"region": {"type": "str", "description": "The name of the region for which you want to get power demand"}}, "required": ["region"], "responses": {"power_demand": {"type": "float", "description": "The power demand of the specified region"}}}
{"api_name": "getEnergyTechnology", "api_description": "Retrieve information about energy technologies", "field": "Energy/Energy Technology", "parameters": {"technology_type": {"type": "str", "description": "Type of energy technology (e.g., solar, wind, hydro)"}, "country": {"type": "str", "description": "The country for which you want to get information about the energy technology"}}, "required": ["technology_type"], "responses": {"description": {"type": "str", "description": "Description of the energy technology"}, "advantages": {"type": "str", "description": "Advantages of using the energy technology"}, "disadvantages": {"type": "str", "description": "Disadvantages of using the energy technology"}, "renewable": {"type": "bool", "description": "Whether the energy technology is renewable or not"}}}
{"api_name": "getPowerPlantInformation", "api_description": "Retrieve information about a specific power plant", "field": "Energy/Energy Infrastructure", "parameters": {"power_plant_id": {"type": "str", "description": "The unique identifier of the power plant"}}, "required": ["power_plant_id"], "responses": {"name": {"type": "str", "description": "The name of the power plant"}, "location": {"type": "str", "description": "The location of the power plant"}, "capacity": {"type": "int", "description": "The capacity of the power plant in megawatts"}, "fuel_type": {"type": "str", "description": "The type of fuel used by the power plant"}}}
{"api_name": "getEnergyInfrastructure", "api_description": "Retrieve information about energy infrastructure", "field": "Energy/Energy Infrastructure", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the energy infrastructure information (e.g., USA, China, Germany)"}, "region": {"type": "str", "description": "The specific region within the country (e.g., California, Bavaria)"}, "type": {"type": "str", "description": "The type of energy infrastructure (e.g., power plants, transmission lines)"}}, "required": ["country"], "responses": {"infrastructure": {"type": "str", "description": "Information about the energy infrastructure"}}}
{"api_name": "getEnergySecurityIndex", "api_description": "Retrieve energy security index information", "field": "Energy/Energy Security", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get the energy security index (e.g., United States, China, Germany)"}}, "required": ["country"], "responses": {"index": {"type": "float", "description": "The energy security index of the specified country"}}}
{"api_name": "getRenewableEnergyPercentage", "api_description": "Retrieve the percentage of renewable energy in a specific location", "field": "Energy/Energy Transition", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the renewable energy percentage (e.g., California, Germany, Australia)"}}, "required": ["location"], "responses": {"percentage": {"type": "float", "description": "The percentage of renewable energy in the specified location"}}}
{"api_name": "getCarbonEmissions", "api_description": "Retrieve the carbon emissions data for a specific location", "field": "Energy/Energy Transition", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the carbon emissions data (e.g., New York City, London, Beijing)"}, "year": {"type": "int", "description": "The year for which you want to get the carbon emissions data (e.g., 2020, 2019, 2018)"}}, "required": ["location"], "responses": {"carbon_emissions": {"type": "float", "description": "The carbon emissions in metric tons for the specified location and year"}}}
{"api_name": "getEnergyDemandProjection", "api_description": "Retrieve the projected energy demand for a specific region", "field": "Energy/Energy Planning", "parameters": {"region": {"type": "str", "description": "The region for which you want to get the energy demand projection (e.g., Asia, Europe, North America)"}, "year": {"type": "int", "description": "The year for which you want to get the energy demand projection (e.g., 2025, 2030, 2050)"}, "sector": {"type": "str", "description": "Specify a sector for the energy demand projection (e.g., residential, commercial, industrial)"}}, "required": ["region", "year"], "responses": {"demand": {"type": "float", "description": "The projected energy demand for the specified region and year"}, "unit": {"type": "str", "description": "The unit of energy demand in which the projection is provided"}}}
{"api_name": "getEnergyForecast", "api_description": "Retrieve energy forecast information for a specific location", "field": "Energy/Energy Planning", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the energy forecast (e.g., city, country)"}, "time_period": {"type": "str", "description": "Specify the time period for energy forecast (e.g., daily, weekly, monthly)"}}, "required": ["location"], "responses": {"forecast": {"type": "float", "description": "The energy forecast value for the specified location"}}}
{"api_name": "getEnergyDemand", "api_description": "Retrieve the energy demand for a specific location", "field": "Energy/Energy Planning", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the energy demand (e.g., New York, Tokyo, Sydney)"}, "timeframe": {"type": "str", "description": "The desired timeframe for the energy demand (e.g., daily, monthly, yearly)"}}, "required": ["location"], "responses": {"demand": {"type": "float", "description": "The energy demand at the specified location"}, "unit": {"type": "str", "description": "The unit of the energy demand"}}}
{"api_name": "getEnergySupply", "api_description": "Retrieve the energy supply for a specific location", "field": "Energy/Energy Planning", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the energy supply (e.g., London, Paris, Berlin)"}, "timeframe": {"type": "str", "description": "The desired timeframe for the energy supply (e.g., daily, monthly, yearly)"}}, "required": ["location"], "responses": {"supply": {"type": "float", "description": "The energy supply at the specified location"}, "unit": {"type": "str", "description": "The unit of the energy supply"}}}
{"api_name": "getEnergyGovernance", "api_description": "Retrieve information about energy governance in a specific location", "field": "Energy/Energy Governance", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the energy governance information (e.g., country, state, city)"}, "year": {"type": "int", "description": "The year for which you want to get the energy governance information (e.g., 2020, 2021)"}, "policy_type": {"type": "str", "description": "Specify a type of energy policy (e.g., renewable energy policy, energy efficiency policy)"}}, "required": ["location"], "responses": {"policy_details": {"type": "str", "description": "The details of energy governance policies and regulations at the specified location and year"}}}
{"api_name": "getEnergyRegulations", "api_description": "Retrieve information about energy laws and regulations", "field": "Energy/Energy Law and Regulations", "parameters": {}, "required": [], "responses": {"regulations": {"type": "str", "description": "Information about energy laws and regulations"}}}
{"api_name": "submitEnergyAudit", "api_description": "Submit an energy audit for analysis", "field": "Energy/Energy Audit", "parameters": {"audit_data": {"type": "str", "description": "The energy audit data in a specified format (e.g., JSON, XML)"}, "audit_type": {"type": "str", "description": "The type of energy audit being submitted (e.g., commercial, residential)"}, "location": {"type": "str", "description": "The location of the building for which the energy audit is being conducted"}}, "required": ["audit_data", "audit_type", "location"], "responses": {"status": {"type": "str", "description": "The status of the submitted energy audit"}}}
{"api_name": "getEnergyAuditData", "api_description": "Retrieve energy audit data for a specific location", "field": "Energy/Energy Audit", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve energy audit data (e.g., building name, street address)"}, "start_date": {"type": "str", "description": "The starting date for the energy audit data (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The ending date for the energy audit data (e.g., 2022-12-31)"}}, "required": ["location", "start_date", "end_date"], "responses": {"electricity_consumption": {"type": "float", "description": "The amount of electricity consumed during the specified period"}, "gas_consumption": {"type": "float", "description": "The amount of gas consumed during the specified period"}, "water_consumption": {"type": "float", "description": "The amount of water consumed during the specified period"}}}
{"api_name": "getEnergyAuditReport", "api_description": "Retrieve energy audit report for a building or facility", "field": "Energy/Energy Audit", "parameters": {"building_id": {"type": "str", "description": "The unique identifier of the building or facility for which the energy audit report is requested"}}, "required": ["building_id"], "responses": {"audit_report": {"type": "str", "description": "The energy audit report for the specified building or facility"}}}
{"api_name": "performEnergyAudit", "api_description": "Perform an energy audit to assess the energy usage and efficiency of a building or facility", "field": "Energy/Energy Audit", "parameters": {"location": {"type": "str", "description": "The location of the building or facility (e.g., New York, London, Chicago)"}, "building_type": {"type": "str", "description": "The type of building or facility being audited (e.g., residential, commercial, industrial)"}, "audit_type": {"type": "str", "description": "The type of energy audit to be performed (e.g., preliminary, detailed)"}}, "required": ["location", "building_type"], "responses": {"energy_usage": {"type": "float", "description": "The total energy usage of the building or facility in kilowatt-hours (kWh)"}, "energy_efficiency": {"type": "float", "description": "The energy efficiency rating of the building or facility in a scale from 0 to 100"}}}
{"api_name": "getEnergyInnovationStatus", "api_description": "Retrieve the current status of energy innovation", "field": "Energy/Energy Innovation", "parameters": {}, "required": [], "responses": {"status": {"type": "str", "description": "The current status of energy innovation"}}}
{"api_name": "getEnergySustainability", "api_description": "Retrieve information about energy sustainability", "field": "Energy/Energy Sustainability", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the energy sustainability information (e.g., United States, China, Germany)"}, "year": {"type": "int", "description": "The year for which you want to retrieve the energy sustainability data (e.g., 2020, 2025, 2030)"}}, "required": ["country", "year"], "responses": {"renewable_energy_percentage": {"type": "float", "description": "The percentage of renewable energy in the total energy consumption of the specified country for the given year"}, "carbon_intensity": {"type": "float", "description": "The carbon intensity of the specified country for the given year"}}}
{"api_name": "createAdvertisement", "api_description": "Create a digital advertisement", "field": "Marketing/Digital marketing", "parameters": {"campaign_name": {"type": "str", "description": "The name of the marketing campaign"}, "target_audience": {"type": "str", "description": "The target audience for the advertisement (e.g., millennials, professionals, parents)"}, "budget": {"type": "float", "description": "The budget allocated for the advertisement"}, "platform": {"type": "str", "description": "The digital marketing platform to run the advertisement (e.g., Google Ads, Facebook Ads)"}, "duration": {"type": "int", "description": "The duration of the advertisement in days"}}, "required": ["campaign_name", "target_audience", "budget"], "responses": {"ad_id": {"type": "str", "description": "The unique identifier for the created advertisement"}, "success": {"type": "bool", "description": "Indicates whether the advertisement was successfully created"}}}
{"api_name": "createCampaign", "api_description": "Create a new digital marketing campaign", "field": "Marketing/Digital marketing", "parameters": {"name": {"type": "str", "description": "The name of the campaign"}, "platform": {"type": "str", "description": "The digital marketing platform to use (e.g., Google Ads, Facebook Ads)"}, "target_audience": {"type": "str", "description": "The target audience for the campaign"}, "budget": {"type": "float", "description": "The budget allocated for the campaign"}, "start_date": {"type": "str", "description": "The start date of the campaign"}}, "required": ["name", "platform"], "responses": {"campaign_id": {"type": "str", "description": "The unique ID assigned to the created campaign"}}}
{"api_name": "getSocialMediaFollowers", "api_description": "Retrieve the number of followers on a specific social media platform", "field": "Marketing/Social media marketing", "parameters": {"platform": {"type": "str", "description": "The social media platform on which you want to get the followers count (e.g., Instagram, Twitter, Facebook)"}, "account": {"type": "str", "description": "The account for which you want to get the followers count"}}, "required": ["platform", "account"], "responses": {"followers": {"type": "int", "description": "The number of followers on the specified social media platform"}}}
{"api_name": "getSocialMediaEngagement", "api_description": "Retrieve the engagement metrics of a specific social media post", "field": "Marketing/Social media marketing", "parameters": {"platform": {"type": "str", "description": "The social media platform on which the post was made (e.g., Instagram, Twitter, Facebook)"}, "post_id": {"type": "str", "description": "The ID of the post for which you want to get the engagement metrics"}}, "required": ["platform", "post_id"], "responses": {"likes": {"type": "int", "description": "The number of likes on the post"}, "comments": {"type": "int", "description": "The number of comments on the post"}, "shares": {"type": "int", "description": "The number of shares of the post"}}}
{"api_name": "getSocialMediaReach", "api_description": "Retrieve the reach of a specific social media campaign or post", "field": "Marketing/Social media marketing", "parameters": {"platform": {"type": "str", "description": "The social media platform on which the campaign or post was made (e.g., Instagram, Twitter, Facebook)"}, "campaign_id": {"type": "str", "description": "The ID of the campaign or post for which you want to get the reach"}}, "required": ["platform", "campaign_id"], "responses": {"reach": {"type": "int", "description": "The reach of the specified social media campaign or post"}}}
{"api_name": "createContent", "api_description": "Create a new content piece for marketing purposes", "field": "Marketing/Content marketing", "parameters": {"title": {"type": "str", "description": "The title of the content piece"}, "description": {"type": "str", "description": "A brief description of the content"}, "target_audience": {"type": "str", "description": "The target audience for the content (e.g., millennials, small business owners)"}, "format": {"type": "str", "description": "The format of the content (e.g., blog post, video, infographic)"}, "keywords": {"type": "str", "description": "Keywords related to the content for SEO optimization (e.g., marketing, social media, branding)"}}, "required": ["title", "description"], "responses": {"content_id": {"type": "str", "description": "The unique ID assigned to the created content"}}}
{"api_name": "getEngagementMetrics", "api_description": "Retrieve engagement metrics for content marketing", "field": "Marketing/Content marketing", "parameters": {"content_type": {"type": "str", "description": "The type of content (e.g., blog post, video, infographic)"}, "duration": {"type": "str", "description": "The time duration for which engagement metrics are required (e.g., last 7 days, last month, last year)"}, "platform": {"type": "str", "description": "The platform on which the content is published (e.g., website, social media, email newsletter)"}}, "required": ["content_type", "duration"], "responses": {"views": {"type": "int", "description": "The number of views for the specified content"}, "likes": {"type": "int", "description": "The number of likes received by the content"}, "shares": {"type": "int", "description": "The number of times the content was shared"}, "comments": {"type": "int", "description": "The number of comments received by the content"}}}
{"api_name": "unsubscribeSubscriber", "api_description": "Unsubscribe a subscriber from the email marketing campaign", "field": "Marketing/Email marketing", "parameters": {"campaign_id": {"type": "str", "description": "The ID of the email campaign"}, "subscriber_email": {"type": "str", "description": "The email address of the subscriber to unsubscribe"}}, "required": ["campaign_id", "subscriber_email"], "responses": {"success": {"type": "bool", "description": "Indicates whether the subscriber was successfully unsubscribed"}}}
{"api_name": "analyzeEmailCampaign", "api_description": "Analyze the performance of an email marketing campaign", "field": "Marketing/Email marketing", "parameters": {"campaign_id": {"type": "str", "description": "The ID of the email campaign"}}, "required": ["campaign_id"], "responses": {"open_rate": {"type": "float", "description": "The open rate of the email campaign"}, "click_rate": {"type": "float", "description": "The click rate of the email campaign"}, "conversion_rate": {"type": "float", "description": "The conversion rate of the email campaign"}}}
{"api_name": "getEmailAddress", "api_description": "Retrieve the email address of a subscriber", "field": "Marketing/Email marketing", "parameters": {"subscriber_id": {"type": "str", "description": "The ID of the subscriber"}}, "required": ["subscriber_id"], "responses": {"email_address": {"type": "str", "description": "The email address of the subscriber"}}}
{"api_name": "getKeywordRanking", "api_description": "Retrieve the ranking of a keyword on search engine results", "field": "Marketing/Search engine optimization (SEO)", "parameters": {"keyword": {"type": "str", "description": "The keyword you want to check the ranking for"}, "search_engine": {"type": "str", "description": "The search engine to check the ranking on (e.g., Google, Bing)"}, "country": {"type": "str", "description": "Specify the country for localized rankings (e.g., US, UK)"}, "language": {"type": "str", "description": "Specify the language for localized rankings (e.g., English, Spanish)"}}, "required": ["keyword"], "responses": {"ranking": {"type": "int", "description": "The ranking of the keyword on the specified search engine"}, "search_engine": {"type": "str", "description": "The search engine on which the ranking is checked"}}}
{"api_name": "optimizeWebsite", "api_description": "Optimize a website for better search engine rankings", "field": "Marketing/Search engine optimization (SEO)", "parameters": {"website_url": {"type": "str", "description": "The URL of the website you want to optimize"}, "target_keywords": {"type": "str", "description": "The target keywords you want the website to rank for (e.g., 'digital marketing', 'SEO services')"}, "meta_tags": {"type": "str", "description": "Additional meta tags to be added to the website for SEO purposes (e.g., 'meta description', 'meta keywords')"}, "backlinks": {"type": "int", "description": "The desired number of quality backlinks to be built for the website"}}, "required": ["website_url", "target_keywords"], "responses": {"success": {"type": "bool", "description": "A flag indicating whether the website optimization was successful"}, "message": {"type": "str", "description": "A message describing the outcome of the optimization process"}}}
{"api_name": "getCompetitorAnalysis", "api_description": "Perform competitor analysis based on a keyword", "field": "Marketing/Search engine optimization (SEO)", "parameters": {"keyword": {"type": "str", "description": "The keyword for which you want to perform competitor analysis"}}, "required": ["keyword"], "responses": {"competitor_analysis": {"type": "str", "description": "The analysis report of competitors for the given keyword"}}}
{"api_name": "analyseBacklinks", "api_description": "Analyze the backlinks of a website", "field": "Marketing/Search engine optimization (SEO)", "parameters": {"website_url": {"type": "str", "description": "The URL of the website you want to analyze"}}, "required": ["website_url"], "responses": {"backlink_analysis": {"type": "str", "description": "The analysis report of backlinks for the given website"}}}
{"api_name": "getSEORank", "api_description": "Retrieve the search engine ranking for a specific keyword", "field": "Marketing/Search engine optimization (SEO)", "parameters": {"keyword": {"type": "str", "description": "The keyword for which you want to check the search engine ranking"}, "location": {"type": "str", "description": "The location from where you want to check the search engine ranking (e.g., country, city)"}, "language": {"type": "str", "description": "The language in which the search engine ranking should be checked (e.g., English, Spanish)"}}, "required": ["keyword"], "responses": {"rank": {"type": "int", "description": "The search engine ranking for the specified keyword in the specified location and language"}}}
{"api_name": "createBrand", "api_description": "Create a new brand in the marketing platform", "field": "Marketing/Brand management", "parameters": {"brand_name": {"type": "str", "description": "The name of the brand"}, "description": {"type": "str", "description": "A brief description of the brand"}, "logo": {"type": "str", "description": "URL of the brand's logo"}, "website": {"type": "str", "description": "URL of the brand's website"}}, "required": ["brand_name"], "responses": {"brand_id": {"type": "int", "description": "The unique identifier of the created brand"}}}
{"api_name": "updateBrand", "api_description": "Update an existing brand in the marketing platform", "field": "Marketing/Brand management", "parameters": {"brand_id": {"type": "int", "description": "The unique identifier of the brand to be updated"}, "brand_name": {"type": "str", "description": "The new name of the brand"}, "description": {"type": "str", "description": "The new description of the brand"}, "logo": {"type": "str", "description": "URL of the brand's new logo"}, "website": {"type": "str", "description": "URL of the brand's new website"}}, "required": ["brand_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the brand was successfully updated"}}}
{"api_name": "deleteBrand", "api_description": "Delete a brand from the marketing platform", "field": "Marketing/Brand management", "parameters": {"brand_id": {"type": "int", "description": "The unique identifier of the brand to be deleted"}}, "required": ["brand_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the brand was successfully deleted"}}}
{"api_name": "getMarketResearchData", "api_description": "Retrieve market research data for a specific product or industry", "field": "Marketing/Market research", "parameters": {"product": {"type": "str", "description": "The name of the product to conduct market research on (e.g., mobile phones, automobiles)"}, "industry": {"type": "str", "description": "The industry to conduct market research on (e.g., technology, healthcare)"}, "location": {"type": "str", "description": "The location for which you want to gather market research data (e.g., global, specific country)"}}, "required": ["product", "industry"], "responses": {"market_share": {"type": "float", "description": "The market share of the specified product or industry in the specified location"}, "competitor_analysis": {"type": "str", "description": "An analysis of the main competitors in the market"}, "customer_demographics": {"type": "str", "description": "Demographic information about the target customers for the specified product or industry"}}}
{"api_name": "analyzeMarketTrends", "api_description": "Analyze current market trends", "field": "Marketing/Market research", "parameters": {"industry": {"type": "str", "description": "The industry to analyze market trends of (e.g., fashion, food and beverage)"}, "time_period": {"type": "str", "description": "The time period for analyzing market trends (e.g., last month, last year)"}}, "required": ["industry"], "responses": {"demand_forecast": {"type": "str", "description": "A forecast of the demand for products in the specified industry"}, "emerging_markets": {"type": "str", "description": "Identify emerging markets or trends in the specified industry"}}}
{"api_name": "conductConsumerSurvey", "api_description": "Conduct a survey to gather consumer insights", "field": "Marketing/Market research", "parameters": {"survey_topic": {"type": "str", "description": "The topic or focus of the survey (e.g., brand perception, product preferences)"}, "target_demographics": {"type": "str", "description": "The target demographics for the survey (e.g., age group, gender, income level)"}, "sample_size": {"type": "int", "description": "The desired sample size for the survey"}, "survey_questions": {"type": "str", "description": "The specific questions to include in the survey"}}, "required": ["survey_topic", "target_demographics", "survey_questions"], "responses": {"survey_results": {"type": "str", "description": "The aggregated results of the conducted survey"}}}
{"api_name": "createPressRelease", "api_description": "Create a press release for a product or event", "field": "Marketing/Public relations", "parameters": {"product_name": {"type": "str", "description": "The name of the product being promoted"}, "event_date": {"type": "str", "description": "The date of the event (e.g., January 1st, 2022)"}, "target_audience": {"type": "str", "description": "The target audience for the press release"}, "key_message": {"type": "str", "description": "The key message to be communicated"}, "company_name": {"type": "str", "description": "The name of the company issuing the press release"}}, "required": ["product_name", "event_date", "target_audience", "key_message", "company_name"], "responses": {"press_release": {"type": "str", "description": "The generated press release"}}}
{"api_name": "submitMediaInquiry", "api_description": "Submit a media inquiry to request information from a company", "field": "Marketing/Public relations", "parameters": {"company": {"type": "str", "description": "The name of the company you are requesting information from"}, "inquiry": {"type": "str", "description": "The inquiry or request for information"}, "contact_name": {"type": "str", "description": "Your name"}, "contact_email": {"type": "str", "description": "Your email address"}}, "required": ["company", "inquiry", "contact_name", "contact_email"], "responses": {"status": {"type": "str", "description": "The status of the media inquiry (e.g., successfully submitted)"}}}
{"api_name": "manageMediaContacts", "api_description": "Manage media contacts for public relations purposes", "field": "Marketing/Public relations", "parameters": {"action": {"type": "str", "description": "The action to perform on media contacts (e.g., add, remove, update)"}, "contact_name": {"type": "str", "description": "The name of the media contact"}, "contact_email": {"type": "str", "description": "The email address of the media contact"}, "company": {"type": "str", "description": "The company associated with the media contact"}}, "required": ["action", "company"], "responses": {"status": {"type": "str", "description": "The status of the media contact management action"}}}
{"api_name": "sendMarketingEmail", "api_description": "Send a marketing email to a list of recipients", "field": "Marketing/Direct marketing", "parameters": {"recipients": {"type": "str", "description": "The email addresses of the recipients (e.g., john@example.com, mary@example.com)"}, "subject": {"type": "str", "description": "The subject of the email"}, "message": {"type": "str", "description": "The content of the email"}, "attachment": {"type": "str", "description": "The file path of an optional attachment to include in the email"}}, "required": ["recipients", "subject", "message"], "responses": {"status": {"type": "str", "description": "The status of the email sending process (e.g., 'success', 'failed')"}}}
{"api_name": "createPromotion", "api_description": "Create a sales promotion campaign", "field": "Marketing/Sales promotion", "parameters": {"campaign_name": {"type": "str", "description": "The name of the sales promotion campaign"}, "start_date": {"type": "str", "description": "The start date of the campaign (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date of the campaign (e.g., 2022-01-31)"}, "discount_code": {"type": "str", "description": "The discount code to be used by customers during the promotion"}}, "required": ["campaign_name", "start_date", "end_date"], "responses": {"campaign_id": {"type": "str", "description": "The unique identifier of the created sales promotion campaign"}}}
{"api_name": "runSalesPromotion", "api_description": "Start a sales promotion campaign", "field": "Marketing/Sales promotion", "parameters": {"promotion_name": {"type": "str", "description": "The name of the sales promotion campaign"}, "discount_rate": {"type": "float", "description": "The discount rate for the promotion (e.g., 10.5%, 25%)"}, "start_date": {"type": "str", "description": "The start date of the promotion (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date of the promotion (e.g., 2022-02-28)"}, "target_customers": {"type": "str", "description": "The target customers for the promotion (e.g., VIP members, new customers)"}, "promotion_channel": {"type": "str", "description": "The promotion channel to be used (e.g., email, social media)"}}, "required": ["promotion_name", "discount_rate", "start_date", "end_date"], "responses": {"success": {"type": "bool", "description": "Indicates if the sales promotion campaign was successfully started"}, "campaign_id": {"type": "int", "description": "The unique identifier for the sales promotion campaign"}}}
{"api_name": "getMarketingStats", "api_description": "Retrieve marketing statistics and analytics for a given time period", "field": "Marketing/Marketing analytics", "parameters": {"start_date": {"type": "str", "description": "The start date of the time period for which you want to retrieve marketing statistics (e.g., 2021-01-01)"}, "end_date": {"type": "str", "description": "The end date of the time period for which you want to retrieve marketing statistics (e.g., 2021-12-31)"}, "campaign_id": {"type": "int", "description": "The ID of the specific marketing campaign for which you want to retrieve statistics"}}, "required": ["start_date", "end_date"], "responses": {"impressions": {"type": "int", "description": "The total number of impressions during the specified time period"}, "clicks": {"type": "int", "description": "The total number of clicks during the specified time period"}, "conversions": {"type": "int", "description": "The total number of conversions during the specified time period"}, "conversion_rate": {"type": "float", "description": "The conversion rate (conversions divided by clicks) during the specified time period"}}}
{"api_name": "createLead", "api_description": "Create a new lead in the marketing automation system", "field": "Marketing/Marketing automation", "parameters": {"first_name": {"type": "str", "description": "The first name of the lead"}, "last_name": {"type": "str", "description": "The last name of the lead"}, "email": {"type": "str", "description": "The email address of the lead"}, "phone": {"type": "str", "description": "The phone number of the lead"}, "company": {"type": "str", "description": "The company name of the lead"}, "job_title": {"type": "str", "description": "The job title of the lead"}}, "required": ["first_name", "email"], "responses": {"lead_id": {"type": "int", "description": "The unique identifier of the created lead"}}}
{"api_name": "sendEmail", "api_description": "Send an email to a lead", "field": "Marketing/Marketing automation", "parameters": {"lead_id": {"type": "int", "description": "The unique identifier of the lead to whom the email should be sent"}, "subject": {"type": "str", "description": "The subject of the email"}, "body": {"type": "str", "description": "The body content of the email"}}, "required": ["lead_id", "subject", "body"], "responses": {"status": {"type": "str", "description": "The status of the email sending process"}}}
{"api_name": "scheduleCampaign", "api_description": "Schedule a marketing campaign", "field": "Marketing/Marketing automation", "parameters": {"campaign_name": {"type": "str", "description": "The name of the campaign"}, "start_date": {"type": "str", "description": "The start date of the campaign (e.g., DD/MM/YYYY)"}, "end_date": {"type": "str", "description": "The end date of the campaign (e.g., DD/MM/YYYY)"}, "target_audience": {"type": "str", "description": "The target audience for the campaign"}, "budget": {"type": "float", "description": "The budget allocated for the campaign"}}, "required": ["campaign_name", "start_date", "end_date", "target_audience"], "responses": {"campaign_id": {"type": "int", "description": "The unique identifier of the scheduled campaign"}}}
{"api_name": "createForm", "api_description": "Create a new lead capture form", "field": "Marketing/Marketing automation", "parameters": {"form_name": {"type": "str", "description": "The name of the form"}, "fields": {"type": "str", "description": "The fields to be included in the form (e.g., name, email, phone)"}}, "required": ["form_name", "fields"], "responses": {"form_id": {"type": "int", "description": "The unique identifier of the created form"}}}
{"api_name": "trackConversion", "api_description": "Track a conversion event", "field": "Marketing/Marketing automation", "parameters": {"lead_id": {"type": "int", "description": "The unique identifier of the lead who performed the conversion"}, "event_name": {"type": "str", "description": "The name of the conversion event"}, "conversion_value": {"type": "float", "description": "The value associated with the conversion event"}}, "required": ["lead_id", "event_name"], "responses": {"conversion_id": {"type": "int", "description": "The unique identifier of the tracked conversion"}}}
{"api_name": "sendPushNotification", "api_description": "Send push notification to mobile devices", "field": "Marketing/Mobile marketing", "parameters": {"title": {"type": "str", "description": "The title of the push notification"}, "message": {"type": "str", "description": "The content of the push notification"}, "target_users": {"type": "str", "description": "The target users for the push notification (e.g., all users, specific segment)"}, "platform": {"type": "str", "description": "The platform to send the push notification (e.g., iOS, Android)"}, "scheduled_time": {"type": "str", "description": "The time at which the push notification should be sent"}}, "required": ["title", "message", "target_users"], "responses": {"success": {"type": "bool", "description": "Indicates whether the push notification was sent successfully"}}}
{"api_name": "executeGuerrillaMarketing", "api_description": "Execute a guerrilla marketing campaign to promote a product or service", "field": "Marketing/Guerrilla marketing", "parameters": {"target_audience": {"type": "str", "description": "The target audience for the guerrilla marketing campaign (e.g., young adults, working professionals)"}, "budget": {"type": "float", "description": "The budget allocated for the campaign in USD"}}, "required": ["target_audience", "budget"], "responses": {"campaign_success": {"type": "bool", "description": "Indicates whether the guerrilla marketing campaign was successful or not"}, "reach": {"type": "int", "description": "The estimated number of people reached by the campaign"}}}
{"api_name": "registerTradeShow", "api_description": "Register for a trade show", "field": "Marketing/Trade show marketing", "parameters": {"company_name": {"type": "str", "description": "The name of your company"}, "contact_person": {"type": "str", "description": "The name of the contact person"}, "email": {"type": "str", "description": "The email address of the contact person"}, "phone_number": {"type": "str", "description": "The phone number of the contact person"}}, "required": ["company_name", "contact_person", "email"], "responses": {"registration_status": {"type": "str", "description": "The status of the registration process"}}}
{"api_name": "getCountryMarketSize", "api_description": "Retrieve the market size of a specific country", "field": "Marketing/International marketing", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the market size (e.g., United States, China, Germany)"}, "product": {"type": "str", "description": "The specific product for which you want to get the market size (e.g., smartphones, cars, clothing)"}, "time_period": {"type": "str", "description": "Specify a time period for the market size (e.g., 2020, Q3 2021)"}, "currency": {"type": "str", "description": "The desired currency for the market size (e.g., USD, EUR)"}}, "required": ["country", "product"], "responses": {"market_size": {"type": "float", "description": "The market size of the specified country and product in the specified time period"}, "currency": {"type": "str", "description": "The currency in which the market size is provided"}}}
{"api_name": "getTargetAudience", "api_description": "Retrieve target audience demographics", "field": "Marketing/International marketing", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the target audience demographics (e.g., USA, China, Germany)"}, "product_category": {"type": "str", "description": "The category of the product or service (e.g., electronics, fashion, healthcare)"}}, "required": ["country", "product_category"], "responses": {"demographics": {"type": "str", "description": "The target audience demographics for the specified country and product category"}}}
{"api_name": "getLocalizationServices", "api_description": "Retrieve localization services", "field": "Marketing/International marketing", "parameters": {"source_language": {"type": "str", "description": "The source language of the content (e.g., English, Spanish, French)"}, "target_language": {"type": "str", "description": "The desired target language for localization (e.g., Chinese, German, Russian)"}}, "required": ["source_language", "target_language"], "responses": {"services": {"type": "str", "description": "The available localization services for the specified source and target languages"}}}
{"api_name": "analyzeCustomerDemographics", "api_description": "Analyze the demographics and characteristics of your retail customers", "field": "Marketing/Retail marketing", "parameters": {"location": {"type": "str", "description": "The location of your retail store (e.g., city, state)"}, "time_period": {"type": "str", "description": "The time period to analyze customer demographics (e.g., month, quarter, year)"}, "age_group": {"type": "str", "description": "Specify an age group for customer analysis (e.g., 18-24, 25-34, 35-44)"}, "gender": {"type": "str", "description": "Analyze customers by gender (e.g., male, female, other)"}}, "required": ["location"], "responses": {"customer_count": {"type": "int", "description": "The total number of customers analyzed"}, "average_age": {"type": "float", "description": "The average age of customers"}, "male_percentage": {"type": "float", "description": "The percentage of male customers"}, "female_percentage": {"type": "float", "description": "The percentage of female customers"}}}
{"api_name": "getB2BMarketingData", "api_description": "Retrieve B2B marketing data for a specific company or industry", "field": "Marketing/B2B marketing", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to retrieve B2B marketing data"}, "industry": {"type": "str", "description": "The industry for which you want to retrieve B2B marketing data"}}, "required": [], "responses": {"leads_generated": {"type": "int", "description": "The number of leads generated for the specified company or industry"}, "conversion_rate": {"type": "float", "description": "The conversion rate of the B2B marketing efforts"}, "campaign_performance": {"type": "str", "description": "The performance of the B2B marketing campaigns"}}}
{"api_name": "getDemographics", "api_description": "Retrieve demographic information of a target consumer group", "field": "Marketing/Consumer behavior analysis", "parameters": {"target_group": {"type": "str", "description": "The target consumer group for which you want to analyze the demographics (e.g., millennials, parents, seniors)"}, "location": {"type": "str", "description": "The location of the target consumer group (e.g., city, country, region)"}, "gender": {"type": "str", "description": "The gender of the target consumer group (e.g., male, female)"}}, "required": ["target_group"], "responses": {"age_range": {"type": "str", "description": "The age range of the target consumer group"}, "income_level": {"type": "str", "description": "The income level of the target consumer group"}}}
{"api_name": "getPurchaseHistory", "api_description": "Retrieve purchase history of a target consumer group", "field": "Marketing/Consumer behavior analysis", "parameters": {"target_group": {"type": "str", "description": "The target consumer group for which you want to analyze the purchase history (e.g., frequent shoppers, first-time buyers)"}, "product_category": {"type": "str", "description": "The category of products for which you want to analyze the purchase history (e.g., electronics, clothing, groceries)"}}, "required": ["target_group", "product_category"], "responses": {"purchases": {"type": "int", "description": "The number of purchases made by the target consumer group"}, "average_purchase_amount": {"type": "float", "description": "The average purchase amount of the target consumer group"}}}
{"api_name": "getCustomerProfile", "api_description": "Retrieve customer profile based on data-driven marketing", "field": "Marketing/Data-driven marketing", "parameters": {"customer_id": {"type": "str", "description": "The unique identifier of the customer"}, "segment": {"type": "str", "description": "The customer segment for profiling"}, "time_frame": {"type": "str", "description": "Time frame to consider for profiling (e.g., last 30 days, last year)"}}, "required": ["customer_id"], "responses": {"customer_profile": {"type": "str", "description": "The profile of the customer based on data-driven marketing"}}}
{"api_name": "analyzeCustomerData", "api_description": "Analyze customer data to drive marketing strategies", "field": "Marketing/Data-driven marketing", "parameters": {"customer_segment": {"type": "str", "description": "The target customer segment for analysis (e.g., new customers, high-value customers, churned customers)"}, "campaign_type": {"type": "str", "description": "The type of marketing campaign to analyze (e.g., email marketing, social media advertising, content marketing)"}, "time_period": {"type": "str", "description": "The time period for data analysis (e.g., last month, past year, specific date range)"}}, "required": ["customer_segment", "campaign_type"], "responses": {"insights": {"type": "str", "description": "Data-driven insights and recommendations for the marketing campaign"}, "metrics": {"type": "str", "description": "Key performance indicators and metrics to evaluate the effectiveness of the marketing campaign"}}}
{"api_name": "improvePublicSpeaking", "api_description": "Provides tips and techniques to improve public speaking skills", "field": "Marketing/Public speaking", "parameters": {"topic": {"type": "str", "description": "The specific topic or subject for which you need to improve public speaking skills (e.g., sales pitch, presentation, storytelling)"}, "audience": {"type": "str", "description": "The intended audience for the public speaking engagement (e.g., executives, students, general public)"}, "time_limit": {"type": "int", "description": "The desired time limit or duration for the speech in minutes (e.g., 5, 10, 20)"}, "confidence_level": {"type": "str", "description": "The desired confidence level to achieve during public speaking (e.g., high, moderate, low)"}}, "required": ["topic", "audience"], "responses": {"tips": {"type": "str", "description": "Tips and techniques to improve public speaking skills for the specified topic and audience"}}}
{"api_name": "sendSMS", "api_description": "Send a text message to a specified phone number", "field": "Marketing/Marketing communications", "parameters": {"phone_number": {"type": "str", "description": "The phone number of the recipient"}, "message": {"type": "str", "description": "The content of the text message"}}, "required": ["phone_number", "message"], "responses": {"success": {"type": "bool", "description": "Indicates whether the text message was successfully sent"}}}
{"api_name": "scheduleSocialMediaPost", "api_description": "Schedule a post on a social media platform", "field": "Marketing/Marketing communications", "parameters": {"platform": {"type": "str", "description": "The social media platform to post on (e.g., Facebook, Twitter, Instagram)"}, "content": {"type": "str", "description": "The content of the post"}, "schedule_time": {"type": "str", "description": "The time at which the post should be scheduled"}}, "required": ["platform", "content", "schedule_time"], "responses": {"success": {"type": "bool", "description": "Indicates whether the post was successfully scheduled"}}}
{"api_name": "createProduct", "api_description": "Create a new product for launch", "field": "Marketing/Product launch", "parameters": {"name": {"type": "str", "description": "The name of the product"}, "description": {"type": "str", "description": "A brief description of the product"}, "price": {"type": "float", "description": "The price of the product in USD"}}, "required": ["name", "description", "price"], "responses": {"product_id": {"type": "str", "description": "The unique identifier of the created product"}}}
{"api_name": "updateProduct", "api_description": "Update information of an existing product", "field": "Marketing/Product launch", "parameters": {"product_name": {"type": "str", "description": "The name of the product to update"}, "target_market": {"type": "str", "description": "The new target market for the product"}, "launch_date": {"type": "str", "description": "The new planned launch date of the product"}, "price": {"type": "float", "description": "The updated price of the product in USD"}}, "required": ["product_name"], "responses": {"status": {"type": "str", "description": "The status of product update"}}}
{"api_name": "deleteProduct", "api_description": "Delete a product from the launch plan", "field": "Marketing/Product launch", "parameters": {"product_name": {"type": "str", "description": "The name of the product to delete"}}, "required": ["product_name"], "responses": {"status": {"type": "str", "description": "The status of product deletion"}}}
{"api_name": "getProductDetails", "api_description": "Retrieve detailed information of a product for launch", "field": "Marketing/Product launch", "parameters": {"product_name": {"type": "str", "description": "The name of the product to retrieve details"}}, "required": ["product_name"], "responses": {"product_details": {"type": "str", "description": "Detailed information of the product"}}}
{"api_name": "launchProduct", "api_description": "Launch a new product in the market", "field": "Marketing/Product launch", "parameters": {"product_name": {"type": "str", "description": "The name of the new product"}, "launch_date": {"type": "str", "description": "The date on which the product will be launched (e.g., DD-MM-YYYY)"}, "target_market": {"type": "str", "description": "The specific market segment the product is targeting (e.g., millennials, working professionals)"}, "marketing_channels": {"type": "str", "description": "The marketing channels to be used for the product launch (e.g., social media, TV ads)"}, "budget": {"type": "float", "description": "The budget allocated for the product launch in USD"}}, "required": ["product_name", "launch_date", "target_market"], "responses": {"success": {"type": "bool", "description": "Indicates if the product launch was successful"}, "marketing_strategy": {"type": "str", "description": "The marketing strategy implemented for the product launch"}}}
{"api_name": "getCustomerRetentionRate", "api_description": "Retrieve the customer retention rate", "field": "Marketing/Customer retention", "parameters": {"start_date": {"type": "str", "description": "The start date from which you want to calculate the retention rate (e.g., 2021-01-01)"}, "end_date": {"type": "str", "description": "The end date until which you want to calculate the retention rate (e.g., 2021-12-31)"}, "segment": {"type": "str", "description": "The customer segment for which you want to calculate the retention rate (e.g., high-value customers, new customers)"}}, "required": ["start_date", "end_date"], "responses": {"retention_rate": {"type": "float", "description": "The customer retention rate for the specified segment"}}}
{"api_name": "getCustomerAcquisitionData", "api_description": "Retrieve customer acquisition data", "field": "Marketing/Customer acquisition", "parameters": {"start_date": {"type": "str", "description": "The start date for the data retrieval (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date for the data retrieval (e.g., 2022-12-31)"}, "campaign_id": {"type": "str", "description": "The ID of the campaign for which data is required"}}, "required": ["start_date", "end_date"], "responses": {"acquired_customers": {"type": "int", "description": "The number of customers acquired during the specified campaign period"}, "conversion_rate": {"type": "float", "description": "The conversion rate of the campaign in percentage"}}}
{"api_name": "estimateCustomerLifetimeValue", "api_description": "Estimate the customer lifetime value", "field": "Marketing/Customer acquisition", "parameters": {"average_purchase_value": {"type": "float", "description": "The average value of each purchase made by a customer"}, "average_purchase_frequency": {"type": "float", "description": "The average frequency with which a customer makes a purchase within a specific time period (e.g., per month)"}}, "required": ["average_purchase_value", "average_purchase_frequency"], "responses": {"customer_lifetime_value": {"type": "float", "description": "The estimated value of a customer over their lifetime"}}}
{"api_name": "acquireCustomers", "api_description": "Acquire new customers for marketing purposes", "field": "Marketing/Customer acquisition", "parameters": {"target_audience": {"type": "str", "description": "Define the target audience for customer acquisition (e.g., millennials, pet owners, working professionals)"}, "marketing_channel": {"type": "str", "description": "Specify the marketing channel to be used for customer acquisition (e.g., social media, email marketing, search engine advertising)"}, "budget": {"type": "float", "description": "Set the budget allocated for customer acquisition (e.g., 1000.00, 50000.00, 1000000.00)"}, "timeframe": {"type": "str", "description": "Specify the desired timeframe for customer acquisition (e.g., 1 month, 3 months, 1 year)"}}, "required": ["target_audience", "marketing_channel"], "responses": {"new_customers_acquired": {"type": "int", "description": "The number of new customers acquired through the marketing campaign"}, "conversion_rate": {"type": "float", "description": "The conversion rate of the marketing campaign in percentage (e.g., 2.5%, 10.3%, 18.9%)"}, "total_cost": {"type": "float", "description": "The total cost of the customer acquisition campaign"}}}
{"api_name": "getMarketingConsulting", "api_description": "Retrieve marketing consulting information", "field": "Marketing/Marketing consulting", "parameters": {"company_name": {"type": "str", "description": "The name of the company requiring marketing consulting (e.g., ABC Company)"}, "industry": {"type": "str", "description": "The industry in which the company operates (e.g., IT, healthcare, finance)"}, "budget": {"type": "float", "description": "The budget allocated for marketing consulting in USD"}}, "required": ["company_name"], "responses": {"consulting_services": {"type": "str", "description": "The list of marketing consulting services offered to the company"}, "consulting_fee": {"type": "float", "description": "The fee charged for the marketing consulting services in USD"}}}
{"api_name": "getMediaPlan", "api_description": "Retrieve media plan for a marketing campaign", "field": "Marketing/Media planning", "parameters": {"campaign_id": {"type": "str", "description": "The ID of the marketing campaign for which you want to get the media plan"}, "start_date": {"type": "str", "description": "The start date of the media plan"}, "end_date": {"type": "str", "description": "The end date of the media plan"}}, "required": ["campaign_id"], "responses": {"media_plan": {"type": "str", "description": "The detailed media plan for the specified marketing campaign"}}}
{"api_name": "getAudienceSize", "api_description": "Retrieve the estimated size of a target audience", "field": "Marketing/Media planning", "parameters": {"age_range": {"type": "str", "description": "The age range of the target audience (e.g., 18-24, 25-34)"}, "gender": {"type": "str", "description": "The gender of the target audience (e.g., male, female)"}, "location": {"type": "str", "description": "The location of the target audience (e.g., city, country)"}}, "required": [], "responses": {"size": {"type": "int", "description": "The estimated size of the target audience"}}}
{"api_name": "getSponsorshipInformation", "api_description": "Retrieve sponsorship information for a specific event or organization", "field": "Marketing/Sponsorship", "parameters": {"name": {"type": "str", "description": "The name of the event or organization for which you want sponsorship information"}}, "required": ["name"], "responses": {"sponsorship_level": {"type": "str", "description": "The level of sponsorship for the specified event or organization"}, "benefits": {"type": "str", "description": "The benefits and privileges associated with the sponsorship level"}, "contact_person": {"type": "str", "description": "The contact person for sponsorship inquiries"}}}
{"api_name": "requestSponsorshipProposal", "api_description": "Request a sponsorship proposal for a specific opportunity", "field": "Marketing/Sponsorship", "parameters": {"opportunity_id": {"type": "str", "description": "The unique ID of the sponsorship opportunity"}, "company_name": {"type": "str", "description": "The name of your company"}, "contact_person": {"type": "str", "description": "The name of the contact person from your company"}, "email": {"type": "str", "description": "The email address to which the proposal should be sent"}}, "required": ["opportunity_id", "company_name", "email"], "responses": {"message": {"type": "str", "description": "A confirmation message indicating that the sponsorship proposal request has been received"}}}
{"api_name": "generateCopy", "api_description": "Generate marketing copy for a given product or service", "field": "Marketing/Copywriting", "parameters": {"product_name": {"type": "str", "description": "The name of the product or service for which copy is to be generated"}, "target_audience": {"type": "str", "description": "The intended audience for the marketing copy"}, "unique_selling_point": {"type": "str", "description": "The unique selling point of the product or service"}}, "required": ["product_name"], "responses": {"marketing_copy": {"type": "str", "description": "The generated marketing copy for the given product or service"}}}
{"api_name": "createDesign", "api_description": "Create a graphic design for marketing purposes", "field": "Marketing/Graphic design", "parameters": {"design_type": {"type": "str", "description": "The type of design to create (e.g., flyer, banner, social media post)"}, "colors": {"type": "str", "description": "The colors to use in the design (e.g., red, blue, green)"}, "text": {"type": "str", "description": "The text content to include in the design"}, "images": {"type": "str", "description": "The images to include in the design"}, "logo": {"type": "str", "description": "The company logo to include in the design"}, "format": {"type": "str", "description": "The desired file format for the design (e.g., JPEG, PNG)"}}, "required": ["design_type", "text", "format"], "responses": {"design_file": {"type": "str", "description": "The file containing the created design"}}}
{"api_name": "getUXDesign", "api_description": "Retrieve UX design information for marketing purposes", "field": "Marketing/User experience (UX) design", "parameters": {"target_audience": {"type": "str", "description": "The target audience for the UX design (e.g., millennials, parents, professionals)"}, "goal": {"type": "str", "description": "The specific goal of the UX design (e.g., increase conversions, improve user engagement)"}, "platform": {"type": "str", "description": "The platform or device the UX design will be implemented on (e.g., website, mobile app)"}, "color_scheme": {"type": "str", "description": "The preferred color scheme for the UX design (e.g., vibrant, monochromatic)"}, "layout": {"type": "str", "description": "The desired layout style for the UX design (e.g., grid-based, fluid)"}, "interactions": {"type": "str", "description": "The desired interaction style for the UX design (e.g., scroll-based, click-based)"}}, "required": ["target_audience", "goal"], "responses": {"ux_design": {"type": "str", "description": "The recommended UX design based on the provided parameters"}}}
{"api_name": "getWebsiteVisitors", "api_description": "Retrieve the number of visitors to a website", "field": "Marketing/Web analytics", "parameters": {"website": {"type": "str", "description": "The URL of the website you want to get data for (e.g., www.example.com)"}, "start_date": {"type": "str", "description": "Specify the start date for the data retrieval (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "Specify the end date for the data retrieval (e.g., 2022-12-31)"}}, "required": ["website"], "responses": {"visitors": {"type": "int", "description": "The number of visitors to the website for the specified period"}}}
{"api_name": "getPageViews", "api_description": "Retrieve the number of page views for a website", "field": "Marketing/Web analytics", "parameters": {"website": {"type": "str", "description": "The website for which you want to retrieve the page views"}}, "required": ["website"], "responses": {"page_views": {"type": "int", "description": "The number of page views for the specified website"}}}
{"api_name": "getConversionRate", "api_description": "Retrieve the conversion rate for a website", "field": "Marketing/Web analytics", "parameters": {"website": {"type": "str", "description": "The website for which you want to retrieve the conversion rate"}}, "required": ["website"], "responses": {"conversion_rate": {"type": "float", "description": "The conversion rate for the specified website"}}}
{"api_name": "getBounceRate", "api_description": "Retrieve the bounce rate for a website", "field": "Marketing/Web analytics", "parameters": {"website": {"type": "str", "description": "The website for which you want to retrieve the bounce rate"}}, "required": ["website"], "responses": {"bounce_rate": {"type": "float", "description": "The bounce rate for the specified website"}}}
{"api_name": "getTrafficSources", "api_description": "Retrieve the traffic sources for a website", "field": "Marketing/Web analytics", "parameters": {"website": {"type": "str", "description": "The website for which you want to retrieve the traffic sources"}}, "required": ["website"], "responses": {"traffic_sources": {"type": "str", "description": "The traffic sources for the specified website"}}}
{"api_name": "getCustomerSatisfactionScore", "api_description": "Retrieve the customer satisfaction score for a particular product or service", "field": "Marketing/Customer satisfaction evaluation", "parameters": {"product_name": {"type": "str", "description": "The name of the product or service for which you want to get the customer satisfaction score"}, "time_period": {"type": "str", "description": "The time period for which you want to evaluate customer satisfaction (e.g., last month, last quarter)"}, "region": {"type": "str", "description": "The region for which you want to evaluate customer satisfaction (e.g., North America, Europe)"}}, "required": ["product_name"], "responses": {"customer_satisfaction_score": {"type": "float", "description": "The customer satisfaction score for the specified product or service"}}}
{"api_name": "addNewLead", "api_description": "Add a new lead to CRM software", "field": "Marketing/CRM software", "parameters": {"name": {"type": "str", "description": "The name of the lead"}, "email": {"type": "str", "description": "The email of the lead"}, "phone_number": {"type": "str", "description": "The phone number of the lead"}}, "required": ["name", "email"], "responses": {"success": {"type": "bool", "description": "Indicates if the lead was successfully added"}, "lead_id": {"type": "str", "description": "The unique ID assigned to the lead"}}}
{"api_name": "updateCustomerInfo", "api_description": "Update customer information in CRM software", "field": "Marketing/CRM software", "parameters": {"customer_id": {"type": "str", "description": "The ID of the customer to update"}, "name": {"type": "str", "description": "The updated name of the customer"}, "email": {"type": "str", "description": "The updated email of the customer"}, "phone_number": {"type": "str", "description": "The updated phone number of the customer"}}, "required": ["customer_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the customer information was successfully updated"}}}
{"api_name": "getLoyaltyPoints", "api_description": "Retrieve a customer's loyalty points information", "field": "Marketing/Customer loyalty programs", "parameters": {"customer_id": {"type": "str", "description": "The ID of the customer for whom you want to retrieve loyalty points"}, "membership_level": {"type": "str", "description": "The desired membership level of the customer (e.g., Gold, Silver, Platinum)"}}, "required": ["customer_id"], "responses": {"loyalty_points": {"type": "int", "description": "The loyalty points of the specified customer"}}}
{"api_name": "redeemLoyaltyRewards", "api_description": "Redeem loyalty rewards for a customer", "field": "Marketing/Customer loyalty programs", "parameters": {"customer_id": {"type": "str", "description": "The ID of the customer who wants to redeem rewards"}, "reward_category": {"type": "str", "description": "The category of the rewards to be redeemed (e.g., travel, merchandise, discounts)"}, "points_to_redeem": {"type": "int", "description": "The number of loyalty points to redeem"}}, "required": ["customer_id", "reward_category", "points_to_redeem"], "responses": {"status": {"type": "str", "description": "The status of the redemption process"}}}
{"api_name": "updateMembershipLevel", "api_description": "Update the membership level of a customer", "field": "Marketing/Customer loyalty programs", "parameters": {"customer_id": {"type": "str", "description": "The ID of the customer for whom you want to update the membership level"}, "new_membership_level": {"type": "str", "description": "The new membership level to assign to the customer"}}, "required": ["customer_id", "new_membership_level"], "responses": {"status": {"type": "str", "description": "The status of the membership level update process"}}}
{"api_name": "checkLoyaltyStatus", "api_description": "Check the loyalty status of a customer", "field": "Marketing/Customer loyalty programs", "parameters": {"customer_id": {"type": "str", "description": "The ID of the customer to check the loyalty status for (e.g., customer123)"}, "loyalty_program": {"type": "str", "description": "The loyalty program to check the customer's status in (e.g., Gold, Silver, Platinum)"}}, "required": ["customer_id"], "responses": {"status": {"type": "str", "description": "The loyalty status of the customer"}, "points": {"type": "int", "description": "The loyalty points accumulated by the customer"}}}
{"api_name": "checkEthicalStandards", "api_description": "Check if certain marketing practices adhere to ethical standards", "field": "Marketing/Marketing ethics", "parameters": {"practice": {"type": "str", "description": "The marketing practice to be evaluated"}}, "required": ["practice"], "responses": {"adherence": {"type": "bool", "description": "True if the marketing practice adheres to ethical standards, False otherwise"}}}
{"api_name": "checkEthics", "api_description": "Check the marketing ethics of a campaign", "field": "Marketing/Marketing ethics", "parameters": {"campaign_id": {"type": "str", "description": "The ID of the marketing campaign to be checked"}, "target_audience": {"type": "str", "description": "The target audience of the campaign"}, "platforms": {"type": "str", "description": "The marketing platforms used for the campaign (e.g., social media, email marketing)"}}, "required": ["campaign_id"], "responses": {"ethics_score": {"type": "float", "description": "The ethics score of the marketing campaign"}, "ethical_guidelines": {"type": "str", "description": "The ethical guidelines violated by the campaign (if any)"}}}
{"api_name": "getAppDownloads", "api_description": "Retrieve the number of app downloads", "field": "Marketing/Mobile app marketing", "parameters": {"app_id": {"type": "str", "description": "The ID of the mobile app"}, "start_date": {"type": "str", "description": "The start date for the download statistics"}, "end_date": {"type": "str", "description": "The end date for the download statistics"}}, "required": ["app_id"], "responses": {"downloads": {"type": "int", "description": "The number of app downloads within the specified date range"}}}
{"api_name": "getAppInstalls", "api_description": "Retrieve the number of app installs", "field": "Marketing/Mobile app marketing", "parameters": {"app_id": {"type": "str", "description": "The ID of the mobile app"}, "start_date": {"type": "str", "description": "The start date for the install statistics"}, "end_date": {"type": "str", "description": "The end date for the install statistics"}}, "required": ["app_id"], "responses": {"installs": {"type": "int", "description": "The number of app installs within the specified date range"}}}
{"api_name": "getAppUserRetention", "api_description": "Retrieve the user retention rate of the app", "field": "Marketing/Mobile app marketing", "parameters": {"app_id": {"type": "str", "description": "The ID of the mobile app"}, "start_date": {"type": "str", "description": "The start date for the retention statistics"}, "end_date": {"type": "str", "description": "The end date for the retention statistics"}}, "required": ["app_id"], "responses": {"retention_rate": {"type": "float", "description": "The percentage of users who continue to use the app after a certain period of time"}}}
{"api_name": "runPublicityCampaign", "api_description": "Initiate a new publicity campaign", "field": "Marketing/Publicity", "parameters": {"campaign_name": {"type": "str", "description": "The name of the publicity campaign"}, "start_date": {"type": "str", "description": "The start date of the campaign (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date of the campaign (e.g., 2022-12-31)"}, "target_audience": {"type": "str", "description": "The target audience for the campaign (e.g., millennials, working professionals)"}, "budget": {"type": "float", "description": "The budget allocated for the campaign in dollars"}}, "required": ["campaign_name", "start_date", "end_date", "target_audience", "budget"], "responses": {"campaign_id": {"type": "str", "description": "The unique identifier of the publicity campaign"}, "status": {"type": "str", "description": "The status of the campaign (e.g., running, completed)"}}}
{"api_name": "updateCampaign", "api_description": "Update an existing marketing campaign for publicity", "field": "Marketing/Publicity", "parameters": {"campaign_id": {"type": "int", "description": "The ID of the campaign to be updated"}, "campaign_name": {"type": "str", "description": "The new name for the campaign"}, "target_audience": {"type": "str", "description": "The new target audience for the campaign"}, "start_date": {"type": "str", "description": "The new start date of the campaign"}, "end_date": {"type": "str", "description": "The new end date of the campaign"}, "budget": {"type": "float", "description": "The new budget allocated for the campaign"}}, "required": ["campaign_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the campaign was successfully updated"}}}
{"api_name": "calculateROI", "api_description": "Calculate the return on investment (ROI) for marketing campaigns", "field": "Marketing/Marketing ROI calculation", "parameters": {"campaign_name": {"type": "str", "description": "The name of the marketing campaign"}, "investment": {"type": "float", "description": "The total investment made for the campaign"}, "revenue_generated": {"type": "float", "description": "The revenue generated from the campaign"}, "conversion_rate": {"type": "float", "description": "The conversion rate achieved in the campaign"}}, "required": ["campaign_name", "investment", "revenue_generated"], "responses": {"roi": {"type": "float", "description": "The return on investment (ROI) for the marketing campaign"}}}
{"api_name": "getLessonPlan", "api_description": "Retrieve a lesson plan for music education", "field": "Music/Music education", "parameters": {"grade_level": {"type": "str", "description": "The grade level for which you need the lesson plan (e.g., elementary, middle school, high school)"}, "topic": {"type": "str", "description": "The topic or subject area of the lesson plan (e.g., rhythm, music theory, composition)"}, "duration": {"type": "str", "description": "The desired duration of the lesson plan (e.g., 1 hour, 45 minutes)"}}, "required": ["grade_level", "topic"], "responses": {"lesson_plan": {"type": "str", "description": "The detailed lesson plan for music education"}}}
{"api_name": "getMusicPerformance", "api_description": "Retrieve information about a music performance", "field": "Music/Music performance", "parameters": {"artist": {"type": "str", "description": "The name of the artist or band (e.g., Taylor Swift, Coldplay)"}, "location": {"type": "str", "description": "The location of the music performance (e.g., New York, London)"}, "date": {"type": "str", "description": "The date of the music performance (e.g., 2022-12-31)"}, "time": {"type": "str", "description": "The time of the music performance (e.g., 20:00)"}, "ticket_type": {"type": "str", "description": "The type of ticket (e.g., VIP, General Admission)"}}, "required": ["artist", "location"], "responses": {"performance_info": {"type": "str", "description": "Information about the music performance"}, "ticket_availability": {"type": "bool", "description": "Indicates whether tickets are available or not"}}}
{"api_name": "getAudioFile", "api_description": "Retrieve the audio file of a specific song", "field": "Music/Music technology", "parameters": {"song_name": {"type": "str", "description": "The name of the song for which you want to retrieve the audio file (e.g., 'Bohemian Rhapsody', 'Shape of You')"}, "artist": {"type": "str", "description": "The name of the artist of the song (e.g., 'Queen', 'Ed Sheeran')"}, "format": {"type": "str", "description": "The desired format of the audio file (e.g., mp3, wav)"}}, "required": ["song_name", "artist"], "responses": {"audio_file": {"type": "str", "description": "The URL or path to the audio file"}}}
{"api_name": "getMusicInfo", "api_description": "Retrieve information about a particular piece of music", "field": "Music/Musicology", "parameters": {"title": {"type": "str", "description": "The title of the music piece (e.g., Symphony No. 9, Moonlight Sonata)"}, "composer": {"type": "str", "description": "The composer of the music piece (e.g., Beethoven, Mozart)"}, "year": {"type": "int", "description": "The year in which the music piece was composed (e.g., 1809, 1787)"}, "genre": {"type": "str", "description": "The genre of the music piece (e.g., Classical, Jazz)"}}, "required": ["title"], "responses": {"composer": {"type": "str", "description": "The name of the composer"}, "year": {"type": "int", "description": "The year of composition"}, "genre": {"type": "str", "description": "The genre of the music piece"}}}
{"api_name": "getSongInfo", "api_description": "Retrieve information about a song", "field": "Music/Musicology", "parameters": {"song_name": {"type": "str", "description": "The name of the song you want to get information about"}}, "required": ["song_name"], "responses": {"artist": {"type": "str", "description": "The artist of the song"}, "album": {"type": "str", "description": "The album the song belongs to"}, "release_date": {"type": "str", "description": "The release date of the song"}, "genre": {"type": "str", "description": "The genre of the song"}}}
{"api_name": "getGenre", "api_description": "Retrieve genre information for a specific song or artist", "field": "Music/Musicology", "parameters": {"song": {"type": "str", "description": "The name of the song"}, "artist": {"type": "str", "description": "The name of the artist"}}, "required": ["song", "artist"], "responses": {"genre": {"type": "str", "description": "The genre of the specified song/artist"}}}
{"api_name": "getAlbumSales", "api_description": "Retrieve album sales information for a specific artist", "field": "Music/Music business", "parameters": {"artist": {"type": "str", "description": "The name of the artist for which you want to get the album sales"}, "year": {"type": "int", "description": "Filter the album sales by year"}}, "required": ["artist"], "responses": {"sales": {"type": "int", "description": "The album sales for the specified artist and year"}}}
{"api_name": "publishMusic", "api_description": "Publish music to a platform", "field": "Music/Music publishing", "parameters": {"title": {"type": "str", "description": "The title of the music"}, "artist": {"type": "str", "description": "The artist name"}, "genre": {"type": "str", "description": "The genre of the music (e.g., Pop, Rock, Jazz)"}, "release_date": {"type": "str", "description": "The release date of the music"}, "duration": {"type": "int", "description": "The duration of the music in seconds"}}, "required": ["title", "artist"], "responses": {"success": {"type": "bool", "description": "Indicates if the music was successfully published"}}}
{"api_name": "getCopyrightInformation", "api_description": "Retrieve copyright information for a music piece", "field": "Music/Music law", "parameters": {"title": {"type": "str", "description": "The title of the music piece"}, "artist": {"type": "str", "description": "The artist or musician of the music piece"}, "year": {"type": "int", "description": "The year the music piece was released"}, "country": {"type": "str", "description": "The country where copyright information is required"}}, "required": ["title", "artist", "year"], "responses": {"copyright": {"type": "str", "description": "The copyright information for the music piece"}}}
{"api_name": "getMusicLaws", "api_description": "Retrieve information about music laws and regulations", "field": "Music/Music law", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the music laws (e.g., United States, United Kingdom, Australia)"}}, "required": ["country"], "responses": {"laws": {"type": "str", "description": "The music laws and regulations for the specified country"}}}
{"api_name": "deleteSongFromLibrary", "api_description": "Delete a song from the music library", "field": "Music/Music management", "parameters": {"song_id": {"type": "str", "description": "The unique identifier of the song"}}, "required": ["song_id"], "responses": {"message": {"type": "str", "description": "Success message indicating whether the song was deleted from the library"}}}
{"api_name": "addTrackToPlaylist", "api_description": "Add a track to an existing playlist", "field": "Music/Music management", "parameters": {"playlist_id": {"type": "int", "description": "The identifier of the target playlist"}, "track_id": {"type": "int", "description": "The identifier of the track to be added"}}, "required": ["playlist_id", "track_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the track was successfully added to the playlist"}}}
{"api_name": "removeTrackFromPlaylist", "api_description": "Remove a track from an existing playlist", "field": "Music/Music management", "parameters": {"playlist_id": {"type": "int", "description": "The identifier of the target playlist"}, "track_id": {"type": "int", "description": "The identifier of the track to be removed"}}, "required": ["playlist_id", "track_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the track was successfully removed from the playlist"}}}
{"api_name": "getMusicReview", "api_description": "Retrieve a review of a music album or song", "field": "Music/Music criticism", "parameters": {"artist": {"type": "str", "description": "The artist of the music album or song"}, "title": {"type": "str", "description": "The title of the music album or song"}, "source": {"type": "str", "description": "The source of the music review (e.g., Rolling Stone, Pitchfork, NME)"}}, "required": ["artist", "title"], "responses": {"review": {"type": "str", "description": "The review of the music album or song"}}}
{"api_name": "getMusicCriticism", "api_description": "Retrieve music criticism for a specific song or album", "field": "Music/Music criticism", "parameters": {"song_name": {"type": "str", "description": "The name of the song you want to get criticism for (e.g., 'Shape of You', 'Bohemian Rhapsody')"}, "album_name": {"type": "str", "description": "The name of the album you want to get criticism for (e.g., 'Thriller', 'Abbey Road')"}, "critic_name": {"type": "str", "description": "The name of the music critic (optional)"}}, "required": ["song_name"], "responses": {"criticism": {"type": "str", "description": "The music criticism for the specified song or album"}}}
{"api_name": "getAlbumReview", "api_description": "Retrieve review of an album", "field": "Music/Music criticism", "parameters": {"album_name": {"type": "str", "description": "The name of the album for which you want to get the review (e.g., 'Thriller', 'Abbey Road')"}, "artist_name": {"type": "str", "description": "The name of the artist or band associated with the album (e.g., 'Michael Jackson', 'The Beatles')"}, "language": {"type": "str", "description": "The desired language of the review (e.g., English, Spanish, French)"}, "publication": {"type": "str", "description": "The name of the publication or website where the review was published (e.g., Rolling Stone, Pitchfork)"}}, "required": ["album_name", "artist_name"], "responses": {"review": {"type": "str", "description": "The review text of the specified album"}, "author": {"type": "str", "description": "The author or critic who wrote the review"}, "rating": {"type": "float", "description": "The rating given to the album in the review"}}}
{"api_name": "getMelody", "api_description": "Identify the melody of a song", "field": "Music/Music cognition", "parameters": {"audio": {"type": "str", "description": "The audio file of the song for melody identification"}}, "required": ["audio"], "responses": {"melody": {"type": "str", "description": "The identified melody in the song"}}}
{"api_name": "getTempo", "api_description": "Retrieve the tempo of a song", "field": "Music/Music cognition", "parameters": {"audio": {"type": "str", "description": "The audio file of the song for tempo extraction"}}, "required": ["audio"], "responses": {"tempo": {"type": "int", "description": "The tempo of the song in beats per minute (BPM)"}}}
{"api_name": "getLyricsSentiment", "api_description": "Analyze the sentiment of song lyrics", "field": "Music/Music cognition", "parameters": {"lyrics": {"type": "str", "description": "The lyrics of the song for sentiment analysis"}}, "required": ["lyrics"], "responses": {"sentiment": {"type": "str", "description": "The sentiment analysis result of the song lyrics"}}}
{"api_name": "getMood", "api_description": "Retrieve the mood of a music track", "field": "Music/Music cognition", "parameters": {"track": {"type": "str", "description": "The name or ID of a music track"}}, "required": ["track"], "responses": {"mood": {"type": "str", "description": "The mood of the specified music track"}}}
{"api_name": "getLyrics", "api_description": "Retrieve the lyrics of a music track", "field": "Music/Music cognition", "parameters": {"track": {"type": "str", "description": "The name or ID of a music track"}}, "required": ["track"], "responses": {"lyrics": {"type": "str", "description": "The lyrics of the specified music track"}}}
{"api_name": "getChords", "api_description": "Retrieve the chords progression of a music track", "field": "Music/Music cognition", "parameters": {"track_name": {"type": "str", "description": "The name of the music track"}}, "required": ["track_name"], "responses": {"chords": {"type": "str", "description": "The chords progression of the music track"}}}
{"api_name": "getMusicTheory", "api_description": "Retrieve music theory information", "field": "Music/Music pedagogy", "parameters": {"level": {"type": "str", "description": "The level of music theory knowledge (e.g., beginner, intermediate, advanced)"}}, "required": ["level"], "responses": {"theory_notes": {"type": "str", "description": "The music theory notes for the specified level"}}}
{"api_name": "analyzeMusic", "api_description": "Analyze the music to extract various information about it", "field": "Music/Music analysis", "parameters": {"music_file": {"type": "str", "description": "The path or URL to the music file to be analyzed"}, "analysis_type": {"type": "str", "description": "Specify the type of analysis to be performed (e.g., tempo, pitch, rhythm)"}, "output_format": {"type": "str", "description": "Specify the format of the analysis results (e.g., JSON, CSV)"}}, "required": ["music_file", "analysis_type"], "responses": {"analysis_results": {"type": "str", "description": "The analysis results of the specified music file"}}}
{"api_name": "getMusicSociology", "api_description": "Retrieve sociology information about a music track or artist", "field": "Music/Music sociology", "parameters": {"track_name": {"type": "str", "description": "The name of the music track"}, "artist_name": {"type": "str", "description": "The name of the artist"}}, "required": ["track_name", "artist_name"], "responses": {"sociology": {"type": "str", "description": "The sociology information related to the music track/artist"}}}
{"api_name": "getArrangement", "api_description": "Retrieve information about a music arrangement", "field": "Music/Music arrangement", "parameters": {"song_title": {"type": "str", "description": "The title of the song to get arrangement information"}, "artist": {"type": "str", "description": "The artist of the song"}}, "required": ["song_title"], "responses": {"arrangement": {"type": "str", "description": "The arranger of the specified song"}, "duration": {"type": "int", "description": "The duration of the arrangement in seconds"}}}
{"api_name": "sendPressRelease", "api_description": "Send a press release to media outlets", "field": "Public Relations/Corporate Communications", "parameters": {"title": {"type": "str", "description": "The title of the press release"}, "body": {"type": "str", "description": "The content of the press release"}, "recipients": {"type": "str", "description": "The email addresses of the recipients (separated by commas)"}}, "required": ["title", "body", "recipients"], "responses": {"status": {"type": "str", "description": "The status of the press release sending"}}}
{"api_name": "organizePressConference", "api_description": "Organize a press conference for media coverage", "field": "Public Relations/Corporate Communications", "parameters": {"date": {"type": "str", "description": "The date of the press conference (e.g., March 15, 2022)"}, "time": {"type": "str", "description": "The time of the press conference (e.g., 10:00 AM)"}, "location": {"type": "str", "description": "The location of the press conference"}}, "required": ["date", "time", "location"], "responses": {"status": {"type": "str", "description": "The status of press conference organization"}}}
{"api_name": "createMediaKit", "api_description": "Create a media kit for marketing purposes", "field": "Public Relations/Corporate Communications", "parameters": {"company_name": {"type": "str", "description": "The name of the company"}, "logo_url": {"type": "str", "description": "The URL of the company's logo"}, "product_description": {"type": "str", "description": "Description of the company's products"}}, "required": ["company_name", "logo_url", "product_description"], "responses": {"media_kit_url": {"type": "str", "description": "The URL to download the created media kit"}}}
{"api_name": "handleCrisis", "api_description": "Handle a crisis situation effectively", "field": "Public Relations/Crisis Management", "parameters": {"crisis_type": {"type": "str", "description": "The type of crisis you are dealing with (e.g., natural disaster, product recall, PR scandal)"}, "communication_channel": {"type": "str", "description": "The communication channel to be used during crisis management (e.g., press conference, social media, official statement)"}, "team_size": {"type": "int", "description": "The size of the crisis management team involved"}, "budget": {"type": "float", "description": "The allocated budget for crisis management"}}, "required": ["crisis_type", "communication_channel"], "responses": {"strategy": {"type": "str", "description": "The recommended crisis management strategy for the given crisis type"}, "communication_plan": {"type": "str", "description": "A detailed communication plan to address the crisis"}}}
{"api_name": "prepareForCrisis", "api_description": "Prepare for crisis situations by developing an effective crisis management plan", "field": "Public Relations/Crisis Management", "parameters": {"organization": {"type": "str", "description": "The name of the organization"}, "team": {"type": "str", "description": "The crisis management team responsible for handling crises"}, "communication_channels": {"type": "str", "description": "The communication channels to be utilized during crises (e.g., email, social media, press release)"}, "emergency_contacts": {"type": "str", "description": "Emergency contact information of key stakeholders (e.g., employees, media, authorities)"}}, "required": ["organization", "team"], "responses": {"crisis_management_plan": {"type": "str", "description": "The developed crisis management plan for the organization"}}}
{"api_name": "getPost", "api_description": "Retrieve a post from the community", "field": "Public Relations/Community Relations", "parameters": {"post_id": {"type": "str", "description": "The ID of the post you want to retrieve"}}, "required": ["post_id"], "responses": {"post_content": {"type": "str", "description": "The content of the post"}, "user_name": {"type": "str", "description": "The name of the user who posted"}, "likes": {"type": "int", "description": "The number of likes the post has received"}}}
{"api_name": "getCommunityRelationsStatus", "api_description": "Retrieve current status of community relations", "field": "Public Relations/Community Relations", "parameters": {"location": {"type": "str", "description": "The location of the community (e.g., city name, neighborhood name)"}, "time_period": {"type": "str", "description": "Specify a time period to retrieve community relations status (e.g., last month, this year)"}}, "required": ["location"], "responses": {"status": {"type": "str", "description": "The current status of community relations"}, "scale": {"type": "int", "description": "A scale representing the level of community relations (e.g., 1-10 scale)"}}}
{"api_name": "analyzeCommunitySentiment", "api_description": "Analyze sentiment of community members", "field": "Public Relations/Community Relations", "parameters": {"location": {"type": "str", "description": "The location of the community (e.g., city name, neighborhood name)"}, "time_period": {"type": "str", "description": "Specify a time period to analyze community sentiment (e.g., last week, this month)"}}, "required": ["location"], "responses": {"sentiment_score": {"type": "float", "description": "The sentiment score of the community sentiment analysis"}, "sentiment_label": {"type": "str", "description": "The sentiment label indicating the overall sentiment of the community (e.g., positive, neutral, negative)"}}}
{"api_name": "getCommunityEngagement", "api_description": "Retrieve community engagement metrics", "field": "Public Relations/Community Relations", "parameters": {"location": {"type": "str", "description": "The location of the community (e.g., city name, neighborhood name)"}, "time_frame": {"type": "str", "description": "Specify a time frame of engagement metrics retrieval (e.g., past month, current year)"}}, "required": ["location"], "responses": {"engagement_rate": {"type": "float", "description": "The engagement rate of the community"}, "total_likes": {"type": "int", "description": "Total number of likes on community posts"}, "total_comments": {"type": "int", "description": "Total number of comments on community posts"}, "total_shares": {"type": "int", "description": "Total number of shares on community posts"}}}
{"api_name": "sendCommunityNewsletter", "api_description": "Send a newsletter to the community members", "field": "Public Relations/Community Relations", "parameters": {"subject": {"type": "str", "description": "The subject of the newsletter"}, "content": {"type": "str", "description": "The content of the newsletter"}}, "required": ["subject", "content"], "responses": {"success": {"type": "bool", "description": "Indicates whether the newsletter was successfully sent"}}}
{"api_name": "addCommunityRelation", "api_description": "Add a new community relation", "field": "Public Relations/Community Relations", "parameters": {"community_id": {"type": "int", "description": "The ID of the community for the new relation"}, "relation_type": {"type": "str", "description": "The type of the new relation (e.g., positive, negative, neutral)"}, "notes": {"type": "str", "description": "Additional notes related to the new relation"}}, "required": ["community_id", "relation_type"], "responses": {"relation_id": {"type": "int", "description": "The ID of the newly added relation"}, "success": {"type": "bool", "description": "Indicates if the relation addition was successful"}}}
{"api_name": "sendInternalMessage", "api_description": "Send a message to internal team members", "field": "Public Relations/Internal Communications", "parameters": {"message": {"type": "str", "description": "The message to be sent to internal team members"}}, "required": ["message"], "responses": {"status": {"type": "str", "description": "The status of the message delivery"}}}
{"api_name": "sendInternalCommunication", "api_description": "Send internal communication to employees", "field": "Public Relations/Internal Communications", "parameters": {"message": {"type": "str", "description": "The message to be communicated to employees"}, "recipients": {"type": "str", "description": "The recipients of the communication (e.g., all employees, specific departments)"}, "priority": {"type": "str", "description": "The priority level of the communication (e.g., high, medium, low)"}}, "required": ["message"], "responses": {"success": {"type": "bool", "description": "Indicates if the communication was successfully sent"}}}
{"api_name": "getReputationScore", "api_description": "Retrieve reputation score for a company or individual", "field": "Public Relations/Reputation Management", "parameters": {"name": {"type": "str", "description": "Name of the company or individual for which reputation score is required (e.g., Apple Inc, John Doe)"}, "industry": {"type": "str", "description": "Specify the industry to filter reputation score (e.g., technology, finance)"}, "location": {"type": "str", "description": "Specify the location for reputation score (e.g., New York, London)"}}, "required": ["name"], "responses": {"reputation_score": {"type": "float", "description": "The reputation score of the specified company or individual"}}}
{"api_name": "getPublicAffairsInfo", "api_description": "Retrieve information about public affairs", "field": "Public Relations/Public Affairs", "parameters": {"location": {"type": "str", "description": "The location for which you want to get public affairs information (e.g., city, state, country)"}, "category": {"type": "str", "description": "Specify a category for public affairs (e.g., education, healthcare, environment)"}}, "required": ["location"], "responses": {"info": {"type": "str", "description": "The information about public affairs at the specified location"}}}
{"api_name": "scheduleMediaInterview", "api_description": "Schedule a media interview with a spokesperson", "field": "Public Relations/Public Affairs", "parameters": {"spokesperson": {"type": "str", "description": "The name of the spokesperson for the interview"}, "media_outlet": {"type": "str", "description": "The media outlet conducting the interview", "example": "Newspaper A"}, "interview_date": {"type": "str", "description": "The date of the scheduled interview (e.g., YYYY-MM-DD)"}, "interview_time": {"type": "str", "description": "The time of the scheduled interview (e.g., HH:MM)"}}, "required": ["spokesperson", "media_outlet", "interview_date", "interview_time"], "responses": {"confirmation": {"type": "str", "description": "Confirmation message indicating the details of the scheduled interview"}}}
{"api_name": "requestStatement", "api_description": "Request an official statement on a specific issue", "field": "Public Relations/Public Affairs", "parameters": {"issue": {"type": "str", "description": "The specific issue requiring an official statement"}, "deadline": {"type": "str", "description": "The deadline for receiving the official statement", "example": "YYYY-MM-DD"}}, "required": ["issue", "deadline"], "responses": {"statement": {"type": "str", "description": "The official statement provided by the organization"}}}
{"api_name": "getDigitalPRStats", "api_description": "Retrieve digital PR statistics for a company or brand", "field": "Public Relations/Digital PR", "parameters": {"company_name": {"type": "str", "description": "The name of the company or brand for which you want to retrieve digital PR statistics (e.g., Nike, Apple, Coca-Cola)"}, "platform": {"type": "str", "description": "Specify the platform for which you want to retrieve digital PR statistics (e.g., social media, news websites)"}, "time_period": {"type": "str", "description": "Specify the time period for which you want to retrieve digital PR statistics (e.g., last month, last year)"}}, "required": ["company_name"], "responses": {"impressions": {"type": "int", "description": "The total number of impressions achieved in the specified time period"}, "mentions": {"type": "int", "description": "The total number of mentions received in the specified time period"}, "sentiment": {"type": "str", "description": "The sentiment of digital PR coverage (e.g., positive, negative, neutral)"}}}
{"api_name": "analyzeDigitalPRCoverage", "api_description": "Analyze digital PR coverage for a company or brand", "field": "Public Relations/Digital PR", "parameters": {"company_name": {"type": "str", "description": "The name of the company or brand for which you want to analyze digital PR coverage (e.g., Google, Amazon, Microsoft)"}, "topics": {"type": "str", "description": "Specify the topics you want to analyze in digital PR coverage (e.g., product launches, corporate news)"}, "time_period": {"type": "str", "description": "Specify the time period for which you want to analyze digital PR coverage (e.g., last week, last quarter)"}, "language": {"type": "str", "description": "Specify the language of digital PR coverage to analyze (e.g., English, Spanish, French)"}}, "required": ["company_name", "topics"], "responses": {"coverage_volume": {"type": "int", "description": "The total volume of digital PR coverage for the specified topics in the specified time period"}, "top_outlets": {"type": "str", "description": "The top news outlets or websites where the company/brand has received digital PR coverage"}, "sentiment_analysis": {"type": "str", "description": "The sentiment analysis of digital PR coverage for the specified topics in the specified time period"}}}
{"api_name": "getDigitalPRMetrics", "api_description": "Retrieve digital PR metrics for a given campaign or brand.", "field": "Public Relations/Digital PR", "parameters": {"campaign_name": {"type": "str", "description": "The name of the campaign for which you want to get digital PR metrics"}, "start_date": {"type": "str", "description": "The start date of the campaign (e.g., '2022-01-01')"}, "end_date": {"type": "str", "description": "The end date of the campaign (e.g., '2022-12-31')"}, "platforms": {"type": "str", "description": "Specify the platforms for digital PR metrics (e.g., 'Twitter, Facebook, Instagram')"}}, "required": ["campaign_name"], "responses": {"impressions": {"type": "int", "description": "The total number of impressions generated during the campaign"}, "engagements": {"type": "int", "description": "The total number of engagements (likes, shares, comments) generated during the campaign"}, "clicks": {"type": "int", "description": "The total number of clicks generated during the campaign"}, "reach": {"type": "int", "description": "The total reach (unique users) achieved during the campaign"}}}
{"api_name": "distributePressRelease", "api_description": "Distribute a digital press release to media outlets", "field": "Public Relations/Digital PR", "parameters": {"press_release_id": {"type": "int", "description": "The ID of the press release to be distributed"}, "email_list": {"type": "str", "description": "Email list of media contacts to receive the press release (e.g., john@example.com, sarah@example.com)"}}, "required": ["press_release_id", "email_list"], "responses": {"success": {"type": "bool", "description": "Indicates if the press release was successfully distributed"}}}
{"api_name": "monitorPressReleaseCoverage", "api_description": "Monitor media coverage of a press release", "field": "Public Relations/Digital PR", "parameters": {"press_release_id": {"type": "int", "description": "The ID of the press release to monitor"}, "start_date": {"type": "str", "description": "Start date for monitoring coverage (e.g., 2021-01-01)"}, "end_date": {"type": "str", "description": "End date for monitoring coverage (e.g., 2021-12-31)"}}, "required": ["press_release_id", "start_date", "end_date"], "responses": {"coverage": {"type": "str", "description": "Summary of media coverage for the press release"}}}
{"api_name": "getInfluencerDetails", "api_description": "Retrieve details of an influencer", "field": "Public Relations/Influencer Relations", "parameters": {"influencer_id": {"type": "str", "description": "The unique identifier of the influencer (e.g., ABC123)"}, "platform": {"type": "str", "description": "The platform on which the influencer is active (e.g., Instagram, YouTube, Twitter)"}, "audience": {"type": "str", "description": "The target audience of the influencer (e.g., teenagers, moms, fitness enthusiasts)"}}, "required": ["influencer_id"], "responses": {"name": {"type": "str", "description": "The name of the influencer"}, "followers": {"type": "int", "description": "The number of followers the influencer has"}, "engagement_rate": {"type": "float", "description": "The engagement rate of the influencer's audience"}}}
{"api_name": "sendEngagementEmail", "api_description": "Send an email to engage stakeholders", "field": "Public Relations/Stakeholder Engagement", "parameters": {"email_address": {"type": "str", "description": "The email address of the stakeholder"}, "subject": {"type": "str", "description": "The subject of the email"}, "message": {"type": "str", "description": "The message content of the email"}}, "required": ["email_address", "subject", "message"], "responses": {"status": {"type": "str", "description": "The status of the email sending operation (e.g., success, failure)"}}}
{"api_name": "createJobPosting", "api_description": "Create a new job posting", "field": "Human Resources/Recruitment and Selection", "parameters": {"title": {"type": "str", "description": "The title of the job posting"}, "department": {"type": "str", "description": "The department where the job position is located"}, "location": {"type": "str", "description": "The location of the job position"}, "description": {"type": "str", "description": "The description of the job position and its responsibilities"}, "requirements": {"type": "str", "description": "The requirements and qualifications for the job position"}, "application_deadline": {"type": "str", "description": "The deadline for submitting applications"}}, "required": ["title", "department", "location", "description", "requirements"], "responses": {"job_posting_id": {"type": "str", "description": "The unique identifier of the created job posting"}}}
{"api_name": "selectCandidate", "api_description": "Select a candidate for a job position", "field": "Human Resources/Recruitment and Selection", "parameters": {"job_posting_id": {"type": "str", "description": "The unique identifier of the job posting"}, "candidate_id": {"type": "str", "description": "The unique identifier of the selected candidate"}}, "required": ["job_posting_id", "candidate_id"], "responses": {"success": {"type": "bool", "description": "True if the candidate selection was successful, False otherwise"}}}
{"api_name": "getEmployeeDetails", "api_description": "Retrieve details of an employee", "field": "Human Resources/Recruitment and Selection", "parameters": {"employee_id": {"type": "str", "description": "The unique identifier of the employee"}}, "required": ["employee_id"], "responses": {"employee_details": {"type": "str", "description": "Details of the specified employee"}}}
{"api_name": "addTrainingRecord", "api_description": "Add a training record for an employee", "field": "Human Resources/Training and Development", "parameters": {"employee_id": {"type": "str", "description": "The ID of the employee"}, "training_name": {"type": "str", "description": "The name of the training program"}, "completion_date": {"type": "str", "description": "The completion date of the training program"}}, "required": ["employee_id", "training_name", "completion_date"], "responses": {"success": {"type": "bool", "description": "Indicates whether the training record was successfully added"}}}
{"api_name": "getTrainingEvaluation", "api_description": "Retrieve the evaluation report for a training program", "field": "Human Resources/Training and Development", "parameters": {"training_name": {"type": "str", "description": "The name of the training program"}}, "required": ["training_name"], "responses": {"evaluation_report": {"type": "str", "description": "The evaluation report of the training program"}}}
{"api_name": "registerEmployeeCourse", "api_description": "Register an employee for a specific training course", "field": "Human Resources/Training and Development", "parameters": {"employee_id": {"type": "str", "description": "The ID of the employee to register"}, "course_id": {"type": "str", "description": "The ID of the training course"}, "registration_date": {"type": "str", "description": "The date of registration for the course (e.g., yyyy-mm-dd)"}, "payment_method": {"type": "str", "description": "The payment method for the course (e.g., credit card, bank transfer)"}}, "required": ["employee_id", "course_id"], "responses": {"status": {"type": "str", "description": "The status of the registration (e.g., success, failure)"}}}
{"api_name": "registerEmployeeTraining", "api_description": "Register an employee for a training course", "field": "Human Resources/Training and Development", "parameters": {"employee_id": {"type": "str", "description": "The ID of the employee to be registered for the training course"}, "course_id": {"type": "str", "description": "The ID of the training course"}, "date": {"type": "str", "description": "The date of the training session (e.g., 2022-01-01)"}, "time": {"type": "str", "description": "The time of the training session (e.g., 09:00 AM, 14:00 PM)"}}, "required": ["employee_id", "course_id", "date", "time"], "responses": {"success": {"type": "bool", "description": "Indicates whether the registration was successful"}}}
{"api_name": "getSalary", "api_description": "Retrieve employee salary information", "field": "Human Resources/Compensation and Benefits", "parameters": {"employee_id": {"type": "str", "description": "The unique identifier of the employee"}, "year": {"type": "int", "description": "The year for which salary information is required"}}, "required": ["employee_id"], "responses": {"salary_amount": {"type": "float", "description": "The total salary amount for the specified employee"}, "currency": {"type": "str", "description": "The currency in which the salary amount is provided"}}}
{"api_name": "getLeaveBalance", "api_description": "Retrieve employee leave balance", "field": "Human Resources/Compensation and Benefits", "parameters": {"employee_id": {"type": "str", "description": "The unique identifier of the employee"}}, "required": ["employee_id"], "responses": {"annual_leave": {"type": "int", "description": "The number of days of annual leave available for the employee"}}}
{"api_name": "calculateBonus", "api_description": "Calculate bonus amount for an employee", "field": "Human Resources/Compensation and Benefits", "parameters": {"employee_id": {"type": "str", "description": "The unique identifier of the employee"}, "performance_rating": {"type": "float", "description": "The performance rating of the employee (between 0 and 1)"}}, "required": ["employee_id", "performance_rating"], "responses": {"bonus_amount": {"type": "float", "description": "The calculated bonus amount for the employee"}}}
{"api_name": "getBenefits", "api_description": "Retrieve employee benefits information", "field": "Human Resources/Compensation and Benefits", "parameters": {"employee_id": {"type": "str", "description": "The unique identifier of the employee"}}, "required": ["employee_id"], "responses": {"benefits": {"type": "str", "description": "The list of benefits available for the employee"}}}
{"api_name": "updateSalary", "api_description": "Update salary information for an employee", "field": "Human Resources/Compensation and Benefits", "parameters": {"employee_id": {"type": "int", "description": "The ID of the employee for whom you want to update salary information"}, "new_salary": {"type": "float", "description": "The new salary for the employee"}}, "required": ["employee_id", "new_salary"], "responses": {"success": {"type": "bool", "description": "Indicates if the salary update was successful"}}}
{"api_name": "addBenefits", "api_description": "Add benefits to an employee's compensation package", "field": "Human Resources/Compensation and Benefits", "parameters": {"employee_id": {"type": "int", "description": "The ID of the employee for whom you want to add benefits"}, "new_benefits": {"type": "str", "description": "The new benefits to be added to the employee's compensation package"}}, "required": ["employee_id", "new_benefits"], "responses": {"success": {"type": "bool", "description": "Indicates if the benefits addition was successful"}}}
{"api_name": "calculateSalaryIncrease", "api_description": "Calculate the salary increase for an employee", "field": "Human Resources/Compensation and Benefits", "parameters": {"employee_id": {"type": "str", "description": "The unique identifier of the employee"}, "percentage_increase": {"type": "float", "description": "The percentage increase in salary (e.g., 5.0 for a 5% increase)"}}, "required": ["employee_id", "percentage_increase"], "responses": {"new_salary": {"type": "float", "description": "The new salary after applying the percentage increase"}}}
{"api_name": "getPerformanceFeedback", "api_description": "Retrieve performance feedback for an employee", "field": "Human Resources/Performance Management", "parameters": {"employee_id": {"type": "str", "description": "The ID of the employee for whom you want to retrieve the performance feedback"}}, "required": ["employee_id"], "responses": {"feedback": {"type": "str", "description": "The performance feedback for the specified employee"}}}
{"api_name": "getSelfAppraisalForm", "api_description": "Retrieve self-appraisal form for an employee", "field": "Human Resources/Performance Management", "parameters": {"employee_id": {"type": "str", "description": "The ID of the employee who wants to retrieve their self-appraisal form"}}, "required": ["employee_id"], "responses": {"form": {"type": "str", "description": "The self-appraisal form for the specified employee"}}}
{"api_name": "submitPerformanceReview", "api_description": "Submit performance review for an employee", "field": "Human Resources/Performance Management", "parameters": {"employee_id": {"type": "str", "description": "The ID of the employee for whom you want to submit the performance review"}, "review_comments": {"type": "str", "description": "The review comments for the employee's performance"}, "reviewer_id": {"type": "str", "description": "The ID of the reviewer submitting the performance review"}}, "required": ["employee_id", "review_comments", "reviewer_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the performance review was successfully submitted"}}}
{"api_name": "getPerformanceData", "api_description": "Retrieve performance data of employees", "field": "Human Resources/Performance Management", "parameters": {"department": {"type": "str", "description": "The department for which you want to retrieve performance data"}, "year": {"type": "int", "description": "The year for which you want to retrieve performance data (e.g., 2022, 2023)"}, "quarter": {"type": "str", "description": "The quarter for which you want to retrieve performance data (e.g., Q1, Q2, Q3, Q4)"}, "employee_id": {"type": "int", "description": "The ID of the employee for which you want to retrieve performance data"}}, "required": ["department", "year", "quarter"], "responses": {"performance_rating": {"type": "float", "description": "The performance rating of the employee"}, "performance_comments": {"type": "str", "description": "Comments on the employee's performance"}}}
{"api_name": "getJobOpenings", "api_description": "Retrieve available job openings", "field": "Human Resources/Organizational Development", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve job openings"}}, "required": ["location"], "responses": {"job_openings": {"type": "str", "description": "The list of available job openings at the specified location"}}}
{"api_name": "getTeamMembers", "api_description": "Retrieve members of a specific team", "field": "Human Resources/Organizational Development", "parameters": {"team_id": {"type": "str", "description": "The ID of the team for which you want to retrieve members"}}, "required": ["team_id"], "responses": {"members": {"type": "str", "description": "The list of members in the specified team"}}}
{"api_name": "getTrainingPrograms", "api_description": "Retrieve available training programs", "field": "Human Resources/Organizational Development", "parameters": {"department": {"type": "str", "description": "The department for which you want to retrieve training programs"}}, "required": ["department"], "responses": {"training_programs": {"type": "str", "description": "The list of available training programs for the specified department"}}}
{"api_name": "updateEmployeeDepartment", "api_description": "Update the department of an existing employee", "field": "Human Resources/Organizational Development", "parameters": {"employee_id": {"type": "int", "description": "The unique identifier of the employee"}, "new_department": {"type": "str", "description": "The new department for the employee"}}, "required": ["employee_id", "new_department"], "responses": {"success": {"type": "bool", "description": "Indicates whether the employee's department was successfully updated"}}}
{"api_name": "searchEmployeeByName", "api_description": "Search for an employee by their name", "field": "Human Resources/Organizational Development", "parameters": {"name": {"type": "str", "description": "The name of the employee to search for"}}, "required": ["name"], "responses": {"employee": {"type": "str", "description": "The details of the employee"}}}
{"api_name": "updateWorkforcePlan", "api_description": "Update workforce planning information", "field": "Human Resources/Workforce Planning", "parameters": {"department": {"type": "str", "description": "The department for which you want to update the workforce plan"}, "timeframe": {"type": "str", "description": "The timeframe for which the workforce plan needs to be updated"}, "employee_count": {"type": "int", "description": "The new employee count for the workforce plan"}}, "required": ["department", "timeframe", "employee_count"], "responses": {"success": {"type": "bool", "description": "Indicates if the workforce plan update was successful"}}}
{"api_name": "getLaborLaws", "api_description": "Retrieve information about labor and employment laws", "field": "Human Resources/Labor and Employment Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve labor laws information (e.g., United States, Germany, Japan)"}, "language": {"type": "str", "description": "The desired language for the labor laws information (e.g., English, German, Japanese)"}}, "required": ["country"], "responses": {"laws_info": {"type": "str", "description": "The labor laws information of the specified country"}}}
{"api_name": "getMinimumWage", "api_description": "Retrieve the minimum wage information", "field": "Human Resources/Labor and Employment Law", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the minimum wage information (e.g., California, New York, Texas)"}, "year": {"type": "int", "description": "The year for which you want to get the minimum wage"}}, "required": ["location"], "responses": {"minimum_wage": {"type": "float", "description": "The minimum wage at the specified location and year"}}}
{"api_name": "getWorkHoursLimit", "api_description": "Retrieve the work hours limit information", "field": "Human Resources/Labor and Employment Law", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the work hours limit information (e.g., United States, United Kingdom, Germany)"}, "age_group": {"type": "str", "description": "The age group for which you want to get the work hours limit (e.g., minors, adults)"}, "occupation": {"type": "str", "description": "The occupation for which you want to get the work hours limit"}}, "required": ["location"], "responses": {"work_hours_limit": {"type": "int", "description": "The maximum number of work hours allowed for the specified age group and occupation"}}}
{"api_name": "getEqualPayLaws", "api_description": "Retrieve the equal pay laws information", "field": "Human Resources/Labor and Employment Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the equal pay laws information (e.g., United States, United Kingdom, Canada)"}, "gender": {"type": "str", "description": "The gender for which you want to get the equal pay laws (e.g., male, female, all)"}, "occupation": {"type": "str", "description": "The occupation for which you want to get the equal pay laws"}}, "required": ["country"], "responses": {"equal_pay_laws": {"type": "str", "description": "The equal pay laws applicable for the specified gender and occupation"}}}
{"api_name": "calculateEmployeeSalary", "api_description": "Calculate the monthly salary of an employee based on various parameters", "field": "Human Resources/Labor and Employment Law", "parameters": {"hours_worked": {"type": "int", "description": "The number of hours worked by the employee in a month"}, "hourly_rate": {"type": "float", "description": "The hourly rate of the employee"}, "overtime_hours": {"type": "int", "description": "The number of overtime hours worked by the employee in a month"}, "overtime_rate": {"type": "float", "description": "The overtime rate of the employee"}}, "required": ["hours_worked", "hourly_rate"], "responses": {"monthly_salary": {"type": "float", "description": "The calculated monthly salary of the employee"}}}
{"api_name": "calculateVacationDays", "api_description": "Calculate the number of vacation days an employee is entitled to based on their tenure", "field": "Human Resources/Labor and Employment Law", "parameters": {"years_of_service": {"type": "int", "description": "The number of years the employee has been with the company"}}, "required": ["years_of_service"], "responses": {"vacation_days": {"type": "int", "description": "The number of vacation days the employee is entitled to"}}}
{"api_name": "getDiversityStatistics", "api_description": "Retrieve diversity statistics for a company", "field": "Human Resources/Diversity and Inclusion", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to get diversity statistics"}}, "required": ["company_name"], "responses": {"gender_ratio": {"type": "str", "description": "The gender ratio of employees in the company"}, "ethnicity_ratio": {"type": "str", "description": "The ethnicity ratio of employees in the company"}, "age_distribution": {"type": "str", "description": "The age distribution of employees in the company"}}}
{"api_name": "createChangeRequest", "api_description": "Create a change request in the system", "field": "Human Resources/Change Management", "parameters": {"requester": {"type": "str", "description": "The person responsible for making the change request"}, "description": {"type": "str", "description": "A description of the change being requested"}, "impact": {"type": "str", "description": "The potential impact of the change on the organization (e.g., low, medium, high)"}, "urgency": {"type": "str", "description": "The urgency of the change request (e.g., low, medium, high)"}}, "required": ["requester", "description"], "responses": {"change_request_id": {"type": "int", "description": "The unique identifier for the created change request"}, "status": {"type": "str", "description": "The current status of the change request"}}}
{"api_name": "getEmployeeEngagementScore", "api_description": "Retrieve employee engagement score for a specific employee or the entire organization", "field": "Human Resources/Employee Engagement", "parameters": {"employee_id": {"type": "str", "description": "The unique identifier of the employee"}, "organization_id": {"type": "str", "description": "The unique identifier of the organization"}}, "required": [], "responses": {"engagement_score": {"type": "float", "description": "The employee's or organization's engagement score"}}}
{"api_name": "calculateEngagementScore", "api_description": "Calculate the employee engagement score based on several factors", "field": "Human Resources/Employee Engagement", "parameters": {"employee_id": {"type": "int", "description": "The ID of the employee whose engagement score needs to be calculated (e.g., 12345)"}, "performance_rating": {"type": "float", "description": "The performance rating of the employee (e.g., 4.5)"}, "satisfaction_score": {"type": "float", "description": "The satisfaction score of the employee (e.g., 8.7)"}, "tenure": {"type": "int", "description": "The number of years the employee has been with the company (e.g., 3)"}, "manager_rating": {"type": "float", "description": "The rating given by the employee's manager (e.g., 4.2)"}, "team_size": {"type": "int", "description": "The size of the employee's team (e.g., 10)"}, "work_life_balance_rating": {"type": "float", "description": "The rating given by the employee for work-life balance (e.g., 3.8)"}}, "required": ["employee_id", "performance_rating", "satisfaction_score"], "responses": {"engagement_score": {"type": "float", "description": "The calculated employee engagement score"}}}
{"api_name": "getEmployeeTurnover", "api_description": "Retrieve the turnover rate of employees in a company", "field": "Human Resources/HR Analytics", "parameters": {}, "required": [], "responses": {"turnover_rate": {"type": "float", "description": "The turnover rate of employees in percentage"}}}
{"api_name": "getTrainingEffectiveness", "api_description": "Retrieve the effectiveness of employee training programs", "field": "Human Resources/HR Analytics", "parameters": {}, "required": [], "responses": {"effectiveness": {"type": "str", "description": "The effectiveness of training programs (e.g., excellent, good, fair, poor)"}}}
{"api_name": "getSalaryBenchmark", "api_description": "Retrieve the benchmark for salaries in a specific job role", "field": "Human Resources/HR Analytics", "parameters": {"job_role": {"type": "str", "description": "The job role for which you want to get the salary benchmark (e.g., Software Engineer, Marketing Manager)"}, "location": {"type": "str", "description": "The location for which you want to get the salary benchmark (e.g., New York, London, Bangalore)"}, "years_experience": {"type": "int", "description": "The years of experience in the job role (e.g., 1, 2, 5, 10)"}}, "required": ["job_role", "location"], "responses": {"salary_benchmark": {"type": "float", "description": "The benchmark salary for the specified job role and location"}}}
{"api_name": "getEmployeePerformance", "api_description": "Retrieve the performance metrics of an employee", "field": "Human Resources/HR Analytics", "parameters": {"employee_id": {"type": "int", "description": "The ID of the employee for whom you want to get the performance metrics"}}, "required": ["employee_id"], "responses": {"performance_metrics": {"type": "str", "description": "The performance metrics of the specified employee"}}}
{"api_name": "getEmployeeAttendance", "api_description": "Retrieve the attendance record of an employee", "field": "Human Resources/HR Analytics", "parameters": {"employee_id": {"type": "int", "description": "The ID of the employee for whom you want to get the attendance record"}}, "required": ["employee_id"], "responses": {"attendance_record": {"type": "str", "description": "The attendance record of the specified employee"}}}
{"api_name": "getHRPolicies", "api_description": "Retrieve HR policies and procedures information", "field": "Human Resources/HR Policies and Procedures", "parameters": {"company": {"type": "str", "description": "The name of the company for which you want to retrieve HR policies and procedures"}}, "required": ["company"], "responses": {"policies": {"type": "str", "description": "The HR policies and procedures of the specified company"}}}
{"api_name": "getHRStrategy", "api_description": "Retrieve the HR strategy for a company", "field": "Human Resources/HR Strategy", "parameters": {"company": {"type": "str", "description": "The name of the company for which you want to retrieve the HR strategy"}}, "required": ["company"], "responses": {"strategy": {"type": "str", "description": "The HR strategy of the specified company"}}}
{"api_name": "assignManager", "api_description": "Assign a manager to an employee", "field": "Human Resources/Employee Onboarding", "parameters": {"employee_id": {"type": "int", "description": "The ID of the employee"}, "manager_id": {"type": "int", "description": "The ID of the manager to be assigned to the employee"}}, "required": ["employee_id", "manager_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the manager assignment was successful"}}}
{"api_name": "employeeOffboarding", "api_description": "Perform offboarding process for an employee", "field": "Human Resources/Employee Offboarding", "parameters": {"employee_id": {"type": "str", "description": "The unique ID of the employee to be offboarded"}, "last_working_day": {"type": "str", "description": "The date of the employee's last working day (e.g., YYYY-MM-DD)"}, "exit_interview": {"type": "bool", "description": "Specify if an exit interview is required for the employee"}, "access_revoked": {"type": "bool", "description": "Specify if the employee's access to company resources should be revoked"}}, "required": ["employee_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the offboarding process was successful or not"}, "message": {"type": "str", "description": "Additional information or error message"}}}
{"api_name": "createAd", "api_description": "Create a digital advertisement", "field": "Advertising/Digital advertising", "parameters": {"ad_name": {"type": "str", "description": "The name of the advertisement"}, "ad_content": {"type": "str", "description": "The content of the advertisement"}, "ad_platform": {"type": "str", "description": "The platform where the advertisement will be displayed (e.g., Facebook, Google, Instagram)"}, "target_audience": {"type": "str", "description": "The target audience for the advertisement"}, "budget": {"type": "float", "description": "The budget allocated for the advertisement"}, "start_date": {"type": "str", "description": "The start date of the advertisement (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date of the advertisement (e.g., 2022-12-31)"}, "status": {"type": "str", "description": "The status of the advertisement (e.g., active, paused, expired)"}}, "required": ["ad_name", "ad_content", "ad_platform", "target_audience"], "responses": {"ad_id": {"type": "int", "description": "The unique identifier of the created advertisement"}}}
{"api_name": "getAdStats", "api_description": "Retrieve statistics for digital advertising campaigns", "field": "Advertising/Digital advertising", "parameters": {"campaign_id": {"type": "int", "description": "The ID of the advertising campaign"}, "start_date": {"type": "str", "description": "The start date of the statistics period (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date of the statistics period (e.g., 2022-01-07)"}}, "required": ["campaign_id"], "responses": {"impressions": {"type": "int", "description": "The number of impressions for the specified campaign"}, "clicks": {"type": "int", "description": "The number of clicks for the specified campaign"}, "conversions": {"type": "int", "description": "The number of conversions for the specified campaign"}}}
{"api_name": "getAdImpressions", "api_description": "Retrieve the number of impressions for a digital advertisement", "field": "Advertising/Digital advertising", "parameters": {"ad_id": {"type": "str", "description": "The ID of the digital advertisement"}}, "required": ["ad_id"], "responses": {"impressions": {"type": "int", "description": "The number of impressions for the specified digital advertisement"}}}
{"api_name": "getAdClicks", "api_description": "Retrieve the number of clicks for a digital advertisement", "field": "Advertising/Digital advertising", "parameters": {"ad_id": {"type": "str", "description": "The ID of the digital advertisement"}}, "required": ["ad_id"], "responses": {"clicks": {"type": "int", "description": "The number of clicks for the specified digital advertisement"}}}
{"api_name": "getAdCTR", "api_description": "Retrieve the click-through rate (CTR) for a digital advertisement", "field": "Advertising/Digital advertising", "parameters": {"ad_id": {"type": "str", "description": "The ID of the digital advertisement"}}, "required": ["ad_id"], "responses": {"CTR": {"type": "float", "description": "The click-through rate for the specified digital advertisement"}}}
{"api_name": "getAdCost", "api_description": "Retrieve the cost of a digital advertisement", "field": "Advertising/Digital advertising", "parameters": {"ad_id": {"type": "str", "description": "The ID of the digital advertisement"}, "currency": {"type": "str", "description": "The desired currency for the cost (e.g., USD, EUR)"}}, "required": ["ad_id"], "responses": {"cost": {"type": "float", "description": "The cost of the specified digital advertisement"}}}
{"api_name": "updateAdBudget", "api_description": "Update the budget of a social media advertising campaign", "field": "Advertising/Social media advertising", "parameters": {"campaign_id": {"type": "str", "description": "The unique identifier of the campaign"}, "new_budget": {"type": "float", "description": "The new budget to set for the campaign (e.g., 1500.00)"}}, "required": ["campaign_id", "new_budget"], "responses": {"status": {"type": "str", "description": "The status of the budget update (e.g., success, failure)"}}}
{"api_name": "getSocialMediaAds", "api_description": "Retrieve information about social media advertising campaigns", "field": "Advertising/Social media advertising", "parameters": {"platform": {"type": "str", "description": "The social media platform for which you want to get advertising information (e.g., Facebook, Instagram, Twitter)"}, "campaign_id": {"type": "str", "description": "The unique identifier of the advertising campaign"}}, "required": ["campaign_id"], "responses": {"impressions": {"type": "int", "description": "The number of times the ad was shown to users"}, "clicks": {"type": "int", "description": "The number of times users clicked on the ad"}, "conversions": {"type": "int", "description": "The number of times users completed a desired action after clicking on the ad"}}}
{"api_name": "getPrintAd", "api_description": "Retrieve information about a specific print advertisement", "field": "Advertising/Print advertising", "parameters": {"brand": {"type": "str", "description": "The brand associated with the print advertisement (e.g., Nike, Coca-Cola)"}, "date": {"type": "str", "description": "The date when the print advertisement was published (e.g., January 1, 2022)"}, "magazine": {"type": "str", "description": "The name of the magazine where the print advertisement was featured (e.g., Vogue, National Geographic)"}, "country": {"type": "str", "description": "The country where the print advertisement was published (e.g., United States, United Kingdom)"}}, "required": ["brand", "date"], "responses": {"ad_text": {"type": "str", "description": "The actual text content of the print advertisement"}, "image_url": {"type": "str", "description": "The URL of the image file representing the print advertisement"}}}
{"api_name": "getPrintAdvertising", "api_description": "Retrieve information about print advertising", "field": "Advertising/Print advertising", "parameters": {"publication": {"type": "str", "description": "The publication in which the print advertisement is featured (e.g., Vogue, The New York Times, Time)"}, "industry": {"type": "str", "description": "The specific industry for the print advertisement (e.g., fashion, technology, automotive)"}, "target_audience": {"type": "str", "description": "The intended target audience for the print advertisement (e.g., women, millennials, sports enthusiasts)"}, "ad_size": {"type": "str", "description": "The size of the print advertisement (e.g., full page, half page, quarter page)"}}, "required": ["publication", "industry"], "responses": {"ad_information": {"type": "str", "description": "Detailed information about the print advertisement"}}}
{"api_name": "getTelevisionAdvertising", "api_description": "Retrieve television advertising information", "field": "Advertising/Television advertising", "parameters": {"brand": {"type": "str", "description": "The brand for which you want to get television advertising information (e.g., Nike, Apple, Coca-Cola)"}, "duration": {"type": "int", "description": "The desired duration of the television advertising in seconds (e.g., 30, 60)"}, "time_of_day": {"type": "str", "description": "Specify a time of day for television advertising (e.g., morning, afternoon, prime time)"}, "channel": {"type": "str", "description": "The desired television channel on which the advertising should be targeted (e.g., ABC, NBC, ESPN)"}}, "required": ["brand", "duration"], "responses": {"advertising_info": {"type": "str", "description": "The information about the television advertising for the specified brand and duration"}, "air_time": {"type": "str", "description": "The scheduled air time of the television advertising"}, "channel": {"type": "str", "description": "The television channel on which the advertising is aired"}}}
{"api_name": "getTVAds", "api_description": "Retrieve television advertising information", "field": "Advertising/Television advertising", "parameters": {"brand": {"type": "str", "description": "The brand for which you want to get the advertisements (e.g., Nike, Coca-Cola, Apple)"}, "time_slot": {"type": "str", "description": "Specify a time slot for the advertisements (e.g., prime time, daytime, late night)"}}, "required": ["brand"], "responses": {"ads": {"type": "str", "description": "The television advertisements for the specified brand"}}}
{"api_name": "getTelevisionAd", "api_description": "Retrieve information about a television advertisement", "field": "Advertising/Television advertising", "parameters": {"ad_id": {"type": "str", "description": "The ID of the television advertisement to retrieve information for"}}, "required": ["ad_id"], "responses": {"ad_length": {"type": "int", "description": "The length in seconds of the television advertisement"}, "ad_type": {"type": "str", "description": "The type of the television advertisement (e.g., commercial, infomercial)"}, "ad_airtime": {"type": "str", "description": "The airtime of the television advertisement (e.g., prime time, daytime)"}}}
{"api_name": "getAdReach", "api_description": "Retrieve the estimated reach of radio advertising", "field": "Advertising/Radio advertising", "parameters": {"target_audience": {"type": "str", "description": "The target audience for radio advertising (e.g., young adults, business professionals)"}}, "required": ["target_audience"], "responses": {"reach": {"type": "int", "description": "The estimated reach of radio advertising among the target audience"}}}
{"api_name": "getAdDuration", "api_description": "Retrieve the duration of radio advertising", "field": "Advertising/Radio advertising", "parameters": {"start_date": {"type": "str", "description": "The start date of the radio advertising campaign (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date of the radio advertising campaign (e.g., 2022-12-31)"}, "frequency": {"type": "int", "description": "The frequency of radio advertising per day"}}, "required": ["start_date", "end_date", "frequency"], "responses": {"duration": {"type": "str", "description": "The total duration of the radio advertising campaign"}}}
{"api_name": "getRadioAdPerformance", "api_description": "Retrieve performance metrics for a specific radio advertisement", "field": "Advertising/Radio advertising", "parameters": {"ad_id": {"type": "str", "description": "The unique identifier of the radio advertisement"}}, "required": ["ad_id"], "responses": {"impressions": {"type": "int", "description": "The number of times the radio advertisement was played"}, "clicks": {"type": "int", "description": "The number of times the radio advertisement received clicks"}, "conversion_rate": {"type": "float", "description": "The conversion rate of the radio advertisement"}}}
{"api_name": "getRadioAdvertisingCost", "api_description": "Retrieve the cost information for radio advertising", "field": "Advertising/Radio advertising", "parameters": {"location": {"type": "str", "description": "The location where the radio advertising will be aired (e.g., city, state, country)"}, "duration": {"type": "int", "description": "The duration of the radio advertisement in seconds"}}, "required": ["location", "duration"], "responses": {"cost": {"type": "float", "description": "The cost of the radio advertising for the specified location and duration"}}}
{"api_name": "getOutdoorAdvertisingInfo", "api_description": "Retrieve information about outdoor advertising", "field": "Advertising/Outdoor advertising", "parameters": {"location": {"type": "str", "description": "The location for which you want to get information about outdoor advertising (e.g., city, state, country)"}, "category": {"type": "str", "description": "The category of outdoor advertising you are interested in (e.g., billboards, transit ads, street furniture)"}, "size": {"type": "str", "description": "The size range of outdoor advertising (e.g., small, medium, large)"}, "duration": {"type": "int", "description": "The desired duration of outdoor advertising campaign in days"}}, "required": ["location", "category"], "responses": {"advertiser_name": {"type": "str", "description": "The name of the advertiser"}, "location": {"type": "str", "description": "The location of the outdoor advertising"}, "duration": {"type": "int", "description": "The duration of the outdoor advertising campaign in days"}, "price": {"type": "float", "description": "The price of the outdoor advertising"}}}
{"api_name": "getVideoAd", "api_description": "Retrieve a video advertisement", "field": "Advertising/Video advertising", "parameters": {"length": {"type": "int", "description": "The desired length of the video advertisement in seconds (e.g., 15, 30, 60)"}, "interests": {"type": "str", "description": "The target interests for the video advertisement (e.g., sports, music, technology)"}, "location": {"type": "str", "description": "The location for which the video advertisement should be tailored (e.g., New York, London, Tokyo)"}}, "required": ["length"], "responses": {"video_url": {"type": "str", "description": "The URL of the video advertisement"}, "interests": {"type": "str", "description": "The target interests for the video advertisement"}, "location": {"type": "str", "description": "The location for which the video advertisement is tailored"}}}
{"api_name": "getKeywordSearchVolume", "api_description": "Retrieve the search volume for a specific keyword", "field": "Advertising/Search engine marketing", "parameters": {"keyword": {"type": "str", "description": "The keyword for which you want to get the search volume"}}, "required": ["keyword"], "responses": {"search_volume": {"type": "int", "description": "The search volume for the specified keyword"}}}
{"api_name": "getSearchEngineMarketingData", "api_description": "Retrieve search engine marketing data for a specific time period", "field": "Advertising/Search engine marketing", "parameters": {"start_date": {"type": "str", "description": "The start date for the data retrieval (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date for the data retrieval (e.g., 2022-01-31)"}, "campaign_id": {"type": "str", "description": "The ID of the campaign for which you want to retrieve data"}}, "required": ["start_date", "end_date", "campaign_id"], "responses": {"clicks": {"type": "int", "description": "The total number of clicks for the specified campaign"}, "impressions": {"type": "int", "description": "The total number of impressions for the specified campaign"}, "cost": {"type": "float", "description": "The total cost incurred for the specified campaign"}}}
{"api_name": "runSEM", "api_description": "Run a search engine marketing campaign", "field": "Advertising/Search engine marketing", "parameters": {"keywords": {"type": "str", "description": "The keywords to target in your search engine marketing campaign"}, "budget": {"type": "float", "description": "The budget allocated for the campaign (e.g., 1000.0, 500.5, 250.75)"}, "target_location": {"type": "str", "description": "The location where the campaign should be targeted (e.g., New York, London, Sydney)"}, "target_audience": {"type": "str", "description": "The target audience for the campaign (e.g., adults, students, parents)"}, "ad_schedule": {"type": "str", "description": "The schedule for the ads (e.g., weekdays, weekends, specific dates)"}, "ad_format": {"type": "str", "description": "The format of the ads (e.g., text, image, video)"}}, "required": ["keywords", "budget"], "responses": {"campaign_id": {"type": "str", "description": "The ID of the created search engine marketing campaign"}, "status": {"type": "str", "description": "The status of the campaign (e.g., running, paused, completed)"}, "clicks": {"type": "int", "description": "The total number of clicks received by the ads"}, "impressions": {"type": "int", "description": "The total number of impressions of the ads"}}}
{"api_name": "getAdvertisingBudget", "api_description": "Retrieve the advertising budget for a specific campaign", "field": "Advertising/Media planning and buying", "parameters": {"campaign_id": {"type": "str", "description": "The unique identifier of the campaign for which you want to retrieve the budget"}}, "required": ["campaign_id"], "responses": {"budget": {"type": "float", "description": "The allocated budget for the specified campaign"}}}
{"api_name": "getReachAndFrequency", "api_description": "Calculate the reach and frequency for a specific advertising campaign", "field": "Advertising/Media planning and buying", "parameters": {"campaign_id": {"type": "str", "description": "The unique identifier of the campaign for which you want to calculate reach and frequency"}, "target_audience": {"type": "str", "description": "The description or criteria of the target audience (e.g., young adults, parents, sports enthusiasts)"}, "media_channel": {"type": "str", "description": "The media channel(s) used for the campaign (e.g., TV, radio, online ads)"}, "time_period": {"type": "str", "description": "The time period over which reach and frequency will be calculated (e.g., one week, one month)"}}, "required": ["campaign_id", "target_audience", "media_channel", "time_period"], "responses": {"reach": {"type": "int", "description": "The estimated number of unique individuals exposed to the campaign"}, "frequency": {"type": "float", "description": "The average number of times each individual is exposed to the campaign"}}}
{"api_name": "getMediaBuyCost", "api_description": "Retrieve cost for media buying", "field": "Advertising/Media planning and buying", "parameters": {"media_plan": {"type": "str", "description": "The media plan for which you want to get the cost"}}, "required": ["media_plan"], "responses": {"cost": {"type": "float", "description": "The cost for buying the specified media plan"}}}
{"api_name": "calculateMediaReach", "api_description": "Calculate the reach of a media campaign", "field": "Advertising/Media planning and buying", "parameters": {"target_audience_size": {"type": "int", "description": "The size of the target audience for the media campaign"}}, "required": ["target_audience_size"], "responses": {"reach": {"type": "int", "description": "The estimated reach of the media campaign"}}}
{"api_name": "getCampaignStats", "api_description": "Retrieve performance statistics of an advertising campaign", "field": "Advertising/Campaign management", "parameters": {"campaign_id": {"type": "str", "description": "The unique identifier of the campaign"}, "start_date": {"type": "str", "description": "The start date for the statistics retrieval"}, "end_date": {"type": "str", "description": "The end date for the statistics retrieval"}}, "required": ["campaign_id", "start_date", "end_date"], "responses": {"impressions": {"type": "int", "description": "The total number of impressions for the campaign"}, "clicks": {"type": "int", "description": "The total number of clicks on the campaign ads"}, "conversions": {"type": "int", "description": "The total number of conversions generated by the campaign"}, "cost": {"type": "float", "description": "The total cost of the campaign"}}}
{"api_name": "listCampaigns", "api_description": "List all existing advertising campaigns", "field": "Advertising/Campaign management", "parameters": {"status": {"type": "str", "description": "Filter campaigns by status (e.g., active, paused, completed)"}, "include_metrics": {"type": "bool", "description": "Flag to include performance metrics in the response"}}, "required": [], "responses": {"campaigns": {"type": "str", "description": "The list of all campaigns"}, "metrics": {"type": "str", "description": "Performance metrics of the campaigns (if requested)"}}}
{"api_name": "sendDirectMail", "api_description": "Send direct mail to targeted customers", "field": "Advertising/Direct marketing", "parameters": {"recipients": {"type": "str", "description": "The email addresses of the targeted customers (e.g., customer1@example.com, customer2@example.com)"}, "subject": {"type": "str", "description": "The subject of the email"}, "message": {"type": "str", "description": "The content of the email"}}, "required": ["recipients", "subject", "message"], "responses": {"success": {"type": "bool", "description": "Returns true if the direct mail was successfully sent"}}}
{"api_name": "createPromotionCampaign", "api_description": "Create a new sales promotion campaign", "field": "Advertising/Sales promotion", "parameters": {"campaign_name": {"type": "str", "description": "The name of the sales promotion campaign"}, "start_date": {"type": "str", "description": "The start date of the campaign (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the campaign (e.g., YYYY-MM-DD)"}, "budget": {"type": "float", "description": "The budget allocated for the campaign"}, "target_audience": {"type": "str", "description": "The target audience for the campaign (e.g., young adults, parents)"}, "promotion_message": {"type": "str", "description": "The promotional message or offer for the campaign"}}, "required": ["campaign_name", "start_date", "end_date", "budget", "target_audience", "promotion_message"], "responses": {"campaign_id": {"type": "int", "description": "The ID of the created campaign"}}}
{"api_name": "addCustomer", "api_description": "Add a new customer to the CRM system", "field": "Advertising/Customer relationship management (CRM)", "parameters": {"customer_name": {"type": "str", "description": "The name of the customer"}, "customer_email": {"type": "str", "description": "The email address of the customer"}, "customer_phone": {"type": "str", "description": "The phone number of the customer"}, "customer_address": {"type": "str", "description": "The address of the customer"}}, "required": ["customer_name", "customer_email"], "responses": {"success": {"type": "bool", "description": "Indicates if the customer is successfully added to the CRM system"}}}
{"api_name": "deleteCustomer", "api_description": "Delete a customer from the CRM system", "field": "Advertising/Customer relationship management (CRM)", "parameters": {"customer_id": {"type": "int", "description": "The ID of the customer to be deleted"}}, "required": ["customer_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the customer is successfully deleted from the CRM system"}}}
{"api_name": "runABTest", "api_description": "Run an A/B test to compare the performance of two different advertising strategies", "field": "Advertising/A/B testing", "parameters": {"strategy_A": {"type": "str", "description": "The first advertising strategy to be tested"}, "strategy_B": {"type": "str", "description": "The second advertising strategy to be tested"}, "target_audience": {"type": "str", "description": "The target audience for the A/B test (e.g., age group, location)"}, "sample_size": {"type": "int", "description": "The desired sample size for the A/B test"}}, "required": ["strategy_A", "strategy_B", "target_audience"], "responses": {"conversion_rate_A": {"type": "float", "description": "The conversion rate for the first strategy"}, "conversion_rate_B": {"type": "float", "description": "The conversion rate for the second strategy"}, "winner_strategy": {"type": "str", "description": "The winning strategy with higher conversion rate"}}}
{"api_name": "getBrandPositioning", "api_description": "Retrieve the brand positioning information for a specific product", "field": "Advertising/Brand positioning", "parameters": {"product": {"type": "str", "description": "The name of the product for which you want to retrieve brand positioning information (e.g., Nike shoes, Coca-Cola)"}, "audience": {"type": "str", "description": "The target audience for the brand positioning (e.g., young adults, parents)"}, "message": {"type": "str", "description": "The key message or value communicated through the brand positioning (e.g., quality, innovation)"}}, "required": ["product"], "responses": {"positioning": {"type": "str", "description": "The brand positioning statement or description for the specified product"}, "target_audience": {"type": "str", "description": "The identified target audience for the brand positioning"}, "key_message": {"type": "str", "description": "The key message or value communicated through the brand positioning"}}}
{"api_name": "schedulePost", "api_description": "Schedule a social media post for publishing", "field": "Advertising/Social media management", "parameters": {"content": {"type": "str", "description": "The content of the social media post"}, "platform": {"type": "str", "description": "The social media platform on which the post should be published (e.g., Facebook, Instagram, LinkedIn)"}, "scheduled_time": {"type": "str", "description": "The date and time at which the post should be published (e.g., '2022-01-01 10:00:00')"}}, "required": ["content", "platform", "scheduled_time"], "responses": {"post_id": {"type": "str", "description": "The ID of the scheduled social media post"}}}
{"api_name": "createPost", "api_description": "Create a new social media post", "field": "Advertising/Social media management", "parameters": {"platform": {"type": "str", "description": "The social media platform to post on (e.g., Facebook, Twitter, Instagram)"}, "message": {"type": "str", "description": "The content of the post (e.g., 'Check out our latest product!')"}, "image_url": {"type": "str", "description": "The URL of an image to include in the post (optional)"}, "hashtags": {"type": "str", "description": "Hashtags to include in the post (e.g., '#marketing #promotion')"}}, "required": ["platform", "message"], "responses": {"post_id": {"type": "int", "description": "The ID of the created post"}}}
{"api_name": "retrievePostMetrics", "api_description": "Retrieve metrics for a specific social media post", "field": "Advertising/Social media management", "parameters": {"platform": {"type": "str", "description": "The social media platform of the post (e.g., Facebook, Twitter, Instagram)"}, "post_id": {"type": "int", "description": "The ID of the post for which to retrieve metrics"}}, "required": ["platform", "post_id"], "responses": {"likes": {"type": "int", "description": "The number of likes on the post"}, "comments": {"type": "int", "description": "The number of comments on the post"}, "shares": {"type": "int", "description": "The number of shares of the post"}}}
{"api_name": "deletePost", "api_description": "Delete a specific social media post", "field": "Advertising/Social media management", "parameters": {"platform": {"type": "str", "description": "The social media platform to delete the post from (e.g., Facebook, Twitter, Instagram)"}, "post_id": {"type": "int", "description": "The ID of the post to delete"}}, "required": ["platform", "post_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the deletion was successful"}}}
{"api_name": "getPublicityData", "api_description": "Retrieve publicity data for advertising campaigns", "field": "Advertising/Publicity", "parameters": {"campaign_id": {"type": "int", "description": "The ID of the advertising campaign to retrieve publicity data"}, "start_date": {"type": "str", "description": "The start date of the data range for the publicity data (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the data range for the publicity data (e.g., YYYY-MM-DD)"}, "platform": {"type": "str", "description": "The advertising platform for which to retrieve the data (e.g., Facebook, Google AdWords)"}}, "required": ["campaign_id"], "responses": {"impressions": {"type": "int", "description": "The total number of impressions for the specified campaign and date range"}, "clicks": {"type": "int", "description": "The total number of clicks for the specified campaign and date range"}, "conversions": {"type": "int", "description": "The total number of conversions for the specified campaign and date range"}, "cost": {"type": "float", "description": "The total cost incurred for the specified campaign and date range"}}}
{"api_name": "optimizeAdCampaign", "api_description": "Optimize an advertising campaign for better performance", "field": "Advertising/Ad campaign optimization", "parameters": {"campaign_id": {"type": "str", "description": "The ID of the advertising campaign you want to optimize"}, "target_audience": {"type": "str", "description": "The desired target audience for the campaign (e.g., age range, interests, demographics)"}, "budget": {"type": "float", "description": "The budget allocated for the campaign in USD"}}, "required": ["campaign_id", "target_audience", "budget"], "responses": {"optimized_campaign": {"type": "str", "description": "The optimized advertising campaign with improved performance"}, "impressions": {"type": "int", "description": "The number of times the ad was displayed to users"}, "clicks": {"type": "int", "description": "The number of times users clicked on the ad"}, "conversions": {"type": "int", "description": "The number of users who completed a desired action after clicking on the ad"}}}
{"api_name": "scheduleEmail", "api_description": "Schedule an email to be sent to a specific audience", "field": "Advertising/Marketing automation", "parameters": {"email_subject": {"type": "str", "description": "The subject of the email"}, "email_body": {"type": "str", "description": "The content of the email"}, "recipient_list": {"type": "str", "description": "The list of recipients for the email"}, "send_date": {"type": "str", "description": "The date and time when the email should be sent (e.g., 2022-01-01 10:00:00)"}}, "required": ["email_subject", "email_body", "recipient_list", "send_date"], "responses": {"success": {"type": "bool", "description": "Indicates if the email was successfully scheduled"}}}
{"api_name": "trackAdClick", "api_description": "Track the number of clicks on an advertisement", "field": "Advertising/Ad tracking and reporting", "parameters": {"ad_id": {"type": "str", "description": "The unique identifier of the advertisement"}, "user_id": {"type": "str", "description": "The unique identifier of the user who clicked the ad"}, "timestamp": {"type": "str", "description": "The timestamp when the ad was clicked (e.g., '2022-01-01 09:15:30')"}, "location": {"type": "str", "description": "The location where the ad was clicked (e.g., 'New York')"}}, "required": ["ad_id", "user_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the ad click was successfully tracked"}}}
{"api_name": "getAdConversions", "api_description": "Retrieve the number of ad conversions for a specific campaign", "field": "Advertising/Ad tracking and reporting", "parameters": {"campaign_id": {"type": "str", "description": "The ID of the campaign for which you want to retrieve ad conversions"}}, "required": ["campaign_id"], "responses": {"conversions": {"type": "int", "description": "The number of ad conversions for the specified campaign"}}}
{"api_name": "getAdROI", "api_description": "Calculate the return on investment (ROI) for a specific campaign", "field": "Advertising/Ad tracking and reporting", "parameters": {"campaign_id": {"type": "str", "description": "The ID of the campaign for which you want to calculate ROI"}}, "required": ["campaign_id"], "responses": {"roi": {"type": "float", "description": "The return on investment (ROI) for the specified campaign"}}}
{"api_name": "trackAdImpression", "api_description": "Track impressions of an ad", "field": "Advertising/Ad tracking and reporting", "parameters": {"ad_id": {"type": "str", "description": "The ID of the ad being tracked"}, "user_id": {"type": "str", "description": "The ID of the user who viewed the ad"}, "timestamp": {"type": "int", "description": "The timestamp when the ad was viewed"}}, "required": ["ad_id", "user_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the impression tracking was successful"}}}
{"api_name": "getAdTrackingData", "api_description": "Retrieve ad tracking data for a specific advertisement", "field": "Advertising/Ad tracking and reporting", "parameters": {"ad_id": {"type": "str", "description": "The unique identifier of the advertisement"}}, "required": ["ad_id"], "responses": {"clicks": {"type": "int", "description": "The number of clicks received by the advertisement"}, "conversions": {"type": "int", "description": "The number of conversions generated by the advertisement"}}}
{"api_name": "getQuantitativeResearchData", "api_description": "Retrieve quantitative research data", "field": "Research/Quantitative Research", "parameters": {"topic": {"type": "str", "description": "The topic of the research (e.g., economics, psychology, sociology)"}, "sample_size": {"type": "int", "description": "The number of participants in the research study"}, "methodology": {"type": "str", "description": "The research methodology used (e.g., survey, experiment)"}, "duration": {"type": "int", "description": "The duration of the research study in months"}}, "required": ["topic"], "responses": {"data": {"type": "str", "description": "The quantitative data collected for the research study"}}}
{"api_name": "getResearchParticipants", "api_description": "Retrieve information about research participants", "field": "Research/Qualitative Research", "parameters": {"study_id": {"type": "int", "description": "The ID of the research study"}, "participant_id": {"type": "int", "description": "The ID of the participant"}}, "required": ["study_id", "participant_id"], "responses": {"age": {"type": "int", "description": "The age of the participant"}, "gender": {"type": "str", "description": "The gender of the participant"}}}
{"api_name": "getResearchInterviews", "api_description": "Retrieve information about research interviews", "field": "Research/Qualitative Research", "parameters": {"study_id": {"type": "int", "description": "The ID of the research study"}}, "required": ["study_id"], "responses": {"interview_date": {"type": "str", "description": "The date when the interview took place"}, "interviewer": {"type": "str", "description": "The name of the interviewer"}, "transcript": {"type": "str", "description": "The transcript of the interview"}}}
{"api_name": "conductQualitativeResearch", "api_description": "Conduct qualitative research and gather insights through open-ended questions and observations", "field": "Research/Qualitative Research", "parameters": {"research_question": {"type": "str", "description": "The main question that the research aims to answer"}, "participants": {"type": "int", "description": "The number of participants in the research study"}, "methodology": {"type": "str", "description": "The approach or methodology used for data collection (e.g., interviews, focus groups, observations)"}}, "required": ["research_question", "participants", "methodology"], "responses": {"insights": {"type": "str", "description": "Key findings and insights obtained from the qualitative research"}}}
{"api_name": "performQualitativeResearch", "api_description": "Conduct qualitative research to gather in-depth insights and understanding", "field": "Research/Qualitative Research", "parameters": {"research_question": {"type": "str", "description": "The central question that the qualitative research aims to answer (e.g., What are the challenges faced by small businesses in the current economic climate?)"}, "data_collection_methods": {"type": "str", "description": "The methods or techniques used for collecting qualitative data (e.g., interviews, focus groups, observations)"}, "data_analysis_framework": {"type": "str", "description": "The theoretical framework or approach used for analyzing qualitative data (e.g., thematic analysis, grounded theory)"}, "participants": {"type": "int", "description": "The number of participants involved in the research study"}}, "required": ["research_question", "data_collection_methods"], "responses": {"data_insights": {"type": "str", "description": "The key findings and insights obtained from the qualitative research"}, "data_analysis_framework": {"type": "str", "description": "The specific data analysis framework or approach used for analyzing the gathered qualitative data"}}}
{"api_name": "conductExperiment", "api_description": "Conduct an experimental research", "field": "Research/Experimental Research", "parameters": {"experimental_design": {"type": "str", "description": "Specify the experimental design used for the research (e.g., randomized controlled trial, cross-sectional study)"}, "sample_size": {"type": "int", "description": "Specify the number of participants included in the research"}, "variables": {"type": "str", "description": "Specify the independent and dependent variables measured in the experiment (e.g., age, gender, height, weight)"}}, "required": ["experimental_design", "sample_size", "variables"], "responses": {"results": {"type": "str", "description": "The results obtained from the experimental research"}}}
{"api_name": "createExperiment", "api_description": "Create a new experimental research project", "field": "Research/Experimental Research", "parameters": {"project_name": {"type": "str", "description": "The name of the experimental research project"}, "start_date": {"type": "str", "description": "The start date of the experiment (e.g., yyyy-mm-dd)"}, "end_date": {"type": "str", "description": "The end date of the experiment (e.g., yyyy-mm-dd)"}, "description": {"type": "str", "description": "A brief description of the experiment"}}, "required": ["project_name", "start_date", "end_date"], "responses": {"project_id": {"type": "int", "description": "The ID of the created project"}}}
{"api_name": "collectData", "api_description": "Collect data during an experimental research project", "field": "Research/Experimental Research", "parameters": {"project_name": {"type": "str", "description": "The name of the experimental research project"}, "data_type": {"type": "str", "description": "The type of data being collected (e.g., survey, observation)"}, "participant_id": {"type": "str", "description": "The unique ID of the participant"}, "data": {"type": "str", "description": "The collected data"}}, "required": ["project_name", "participant_id", "data"], "responses": {"status": {"type": "str", "description": "The status of data collection (e.g., success, error)"}}}
{"api_name": "analyzeData", "api_description": "Analyze data from an experimental research project", "field": "Research/Experimental Research", "parameters": {"project_name": {"type": "str", "description": "The name of the experimental research project"}, "analysis_type": {"type": "str", "description": "The type of analysis to be performed (e.g., descriptive, inferential)"}, "data": {"type": "str", "description": "The data to be analyzed"}}, "required": ["project_name", "analysis_type", "data"], "responses": {"results": {"type": "str", "description": "The results of the data analysis"}}}
{"api_name": "submitExperiment", "api_description": "Submit an experimental research to the system", "field": "Research/Experimental Research", "parameters": {"research_title": {"type": "str", "description": "The title of the experimental research"}, "research_description": {"type": "str", "description": "A brief description of the experimental research"}, "research_file": {"type": "str", "description": "The file containing the experimental research"}, "research_tags": {"type": "str", "description": "Tags related to the experimental research (e.g., biology, chemistry, physics)"}, "research_date": {"type": "str", "description": "The date when the experimental research was conducted"}}, "required": ["research_title", "research_description", "research_file"], "responses": {"message": {"type": "str", "description": "A message indicating if the experimental research was successfully submitted"}}}
{"api_name": "getActionResearch", "api_description": "Retrieve information about action research", "field": "Research/Action Research", "parameters": {"topic": {"type": "str", "description": "The topic of action research (e.g., education, healthcare, environmental sustainability)"}, "location": {"type": "str", "description": "The location where the action research took place (e.g., school, hospital, community)"}, "duration": {"type": "int", "description": "The duration of the action research project in months"}}, "required": ["topic", "location"], "responses": {"results": {"type": "str", "description": "The results or findings of the action research project"}, "recommendations": {"type": "str", "description": "Recommendations based on the action research"}, "conclusion": {"type": "str", "description": "The conclusion drawn from the action research"}}}
{"api_name": "getTitle", "api_description": "Retrieve the title of an action research study", "field": "Research/Action Research", "parameters": {"study_id": {"type": "int", "description": "The unique identifier of the action research study"}}, "required": ["study_id"], "responses": {"title": {"type": "str", "description": "The title of the action research study"}}}
{"api_name": "conductEthnographicResearch", "api_description": "Conduct ethnographic research to study human behavior and cultures", "field": "Research/Ethnographic Research", "parameters": {"research_site": {"type": "str", "description": "The location or site where the ethnographic research will take place (e.g., rural village, urban community, workplace)"}, "research_method": {"type": "str", "description": "The method or approach used for conducting ethnographic research (e.g., participant observation, interviews, focus groups)"}, "research_duration": {"type": "int", "description": "The duration of the ethnographic research in months"}}, "required": ["research_site", "research_method"], "responses": {"findings": {"type": "str", "description": "The findings and insights obtained from the ethnographic research"}}}
{"api_name": "getEthnographicData", "api_description": "Retrieve ethnographic research data", "field": "Research/Ethnographic Research", "parameters": {"location": {"type": "str", "description": "The location where the ethnographic research was conducted (e.g., Africa, Asia, Europe)"}, "duration": {"type": "str", "description": "The duration of the ethnographic research (e.g., 6 months, 1 year, 3 years)"}, "research_topic": {"type": "str", "description": "The specific topic or theme of the ethnographic research (e.g., cultural practices, social dynamics, economic patterns)"}}, "required": ["location", "duration"], "responses": {"data": {"type": "str", "description": "The ethnographic research data collected"}, "researcher": {"type": "str", "description": "The name of the researcher who conducted the study"}}}
{"api_name": "getParticipantData", "api_description": "Retrieve participant data from ethnographic research", "field": "Research/Ethnographic Research", "parameters": {"participant_id": {"type": "str", "description": "The ID of the participant whose data you want to retrieve (e.g., P001, P002, P003)"}, "data_type": {"type": "str", "description": "Specify the type of data to retrieve (e.g., audio, video, field notes)"}}, "required": ["participant_id"], "responses": {"data": {"type": "str", "description": "The participant data in the specified format"}}}
{"api_name": "getGroundedTheoryResearch", "api_description": "Retrieve information about grounded theory research", "field": "Research/Grounded Theory Research", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about grounded theory research"}}}
{"api_name": "createResearchQuestion", "api_description": "Create a research question for a grounded theory research study", "field": "Research/Grounded Theory Research", "parameters": {"topic": {"type": "str", "description": "The topic or area of interest for the research"}, "phenomenon": {"type": "str", "description": "The central phenomenon to be explored in the research"}}, "required": ["topic", "phenomenon"], "responses": {"research_question": {"type": "str", "description": "The research question generated based on the topic and phenomenon"}}}
{"api_name": "getHistoricalData", "api_description": "Retrieve historical research data", "field": "Research/Historical Research", "parameters": {"topic": {"type": "str", "description": "The topic of research (e.g., World War II, Ancient Egypt, Renaissance)"}, "time_period": {"type": "str", "description": "The time period for the research (e.g., 18th century, Middle Ages, Prehistoric era)"}, "location": {"type": "str", "description": "The location associated with the research (e.g., Rome, Machu Picchu, Great Wall of China)"}}, "required": ["topic"], "responses": {"data": {"type": "str", "description": "The historical research data for the specified topic, time period, and location"}}}
{"api_name": "getSampleSize", "api_description": "Retrieve the sample size of a mixed methods research study", "field": "Research/Mixed Methods Research", "parameters": {"study_id": {"type": "str", "description": "The unique identifier of the research study"}}, "required": ["study_id"], "responses": {"sample_size": {"type": "int", "description": "The sample size of the research study"}}}
{"api_name": "getResearchMethod", "api_description": "Retrieve the research method used in a mixed methods research study", "field": "Research/Mixed Methods Research", "parameters": {"study_id": {"type": "str", "description": "The unique identifier of the research study"}}, "required": ["study_id"], "responses": {"research_method": {"type": "str", "description": "The research method used in the research study"}}}
{"api_name": "getAnalysisApproach", "api_description": "Retrieve the analysis approach used in a mixed methods research study", "field": "Research/Mixed Methods Research", "parameters": {"study_id": {"type": "str", "description": "The unique identifier of the research study"}}, "required": ["study_id"], "responses": {"analysis_approach": {"type": "str", "description": "The analysis approach used in the research study"}}}
{"api_name": "getLiteratureReview", "api_description": "Retrieve literature review on a given topic", "field": "Research/Literature Review", "parameters": {"topic": {"type": "str", "description": "The topic for which you want to get the literature review (e.g., Artificial Intelligence, Climate Change, Human Psychology)"}, "year": {"type": "int", "description": "Filter literature review by a specific year"}, "author": {"type": "str", "description": "Filter literature review by a specific author"}}, "required": ["topic"], "responses": {"literature_review": {"type": "str", "description": "The literature review on the specified topic"}}}
{"api_name": "getSystematicReview", "api_description": "Retrieve systematic review information", "field": "Research/Systematic Review", "parameters": {"keywords": {"type": "str", "description": "Keywords relevant to the systematic review (e.g., cancer, diabetes, hypertension)"}, "publication_year": {"type": "int", "description": "The year of publication (e.g., 2015, 2018, 2022)"}, "authors": {"type": "str", "description": "The author(s) of the systematic review"}, "journal": {"type": "str", "description": "The journal where the systematic review was published"}}, "required": ["keywords"], "responses": {"title": {"type": "str", "description": "The title of the systematic review"}, "abstract": {"type": "str", "description": "The abstract of the systematic review"}, "authors": {"type": "str", "description": "The author(s) of the systematic review"}, "publication_year": {"type": "int", "description": "The year of publication"}}}
{"api_name": "deleteSurvey", "api_description": "Delete an existing survey", "field": "Research/Survey Design", "parameters": {"survey_id": {"type": "str", "description": "The ID of the survey to be deleted"}}, "required": ["survey_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the survey was successfully deleted"}}}
{"api_name": "getSurveyResults", "api_description": "Retrieve the results of a completed survey", "field": "Research/Survey Design", "parameters": {"survey_id": {"type": "str", "description": "The ID of the survey for which to retrieve results"}}, "required": ["survey_id"], "responses": {"results": {"type": "str", "description": "The results of the survey"}}}
{"api_name": "performDataAnalysis", "api_description": "Perform data analysis on a given dataset", "field": "Research/Data Analysis", "parameters": {"dataset": {"type": "str", "description": "The dataset on which data analysis needs to be performed"}}, "required": ["dataset"], "responses": {"analysis_results": {"type": "str", "description": "The results of the data analysis performed on the dataset"}}}
{"api_name": "getQualitativeAnalysis", "api_description": "Retrieve qualitative analysis of research data", "field": "Research/Qualitative Analysis", "parameters": {"data": {"type": "str", "description": "The research data for qualitative analysis"}, "method": {"type": "str", "description": "The method used for qualitative analysis (e.g., content analysis, thematic analysis)"}}, "required": ["data", "method"], "responses": {"analysis": {"type": "str", "description": "The qualitative analysis results of the research data"}}}
{"api_name": "checkEthicApproval", "api_description": "Check if a research project has received ethical approval", "field": "Research/Research Ethics", "parameters": {"project_title": {"type": "str", "description": "The title of the research project"}, "researcher_name": {"type": "str", "description": "The name of the researcher"}, "institution": {"type": "str", "description": "The name of the research institution"}, "start_date": {"type": "str", "description": "The start date of the research project (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the research project (e.g., YYYY-MM-DD)"}}, "required": ["project_title", "researcher_name"], "responses": {"ethic_approval": {"type": "bool", "description": "Indicates whether the research project has received ethical approval or not"}}}
{"api_name": "submitEthicsApplication", "api_description": "Submit an ethics application for a research project", "field": "Research/Research Ethics", "parameters": {"project_title": {"type": "str", "description": "The title of the research project"}, "researcher_name": {"type": "str", "description": "The name of the researcher"}, "institution": {"type": "str", "description": "The institution affiliation of the researcher"}}, "required": ["project_title", "researcher_name", "institution"], "responses": {"application_id": {"type": "int", "description": "The ID of the submitted ethics application"}}}
{"api_name": "getEthicsReviewComments", "api_description": "Retrieve the comments provided by the ethics review board for a research project", "field": "Research/Research Ethics", "parameters": {"project_id": {"type": "int", "description": "The ID of the research project for which you want to retrieve review comments"}}, "required": ["project_id"], "responses": {"comments": {"type": "str", "description": "The comments provided by the ethics review board"}}}
{"api_name": "getEthicsGuidelines", "api_description": "Retrieve research ethics guidelines for a specific discipline", "field": "Research/Research Ethics", "parameters": {"discipline": {"type": "str", "description": "The discipline for which you want to get the ethics guidelines (e.g., biology, psychology, sociology)"}}, "required": ["discipline"], "responses": {"guidelines": {"type": "str", "description": "The ethics guidelines for the specified discipline"}}}
{"api_name": "createProposal", "api_description": "Create a research proposal", "field": "Research/Research Proposal Writing", "parameters": {"title": {"type": "str", "description": "The title of the research proposal"}, "abstract": {"type": "str", "description": "A summary of the research proposal"}, "objectives": {"type": "str", "description": "The research objectives"}, "methodology": {"type": "str", "description": "The research methodology to be used"}, "team": {"type": "str", "description": "The team members involved in the research"}}, "required": ["title", "abstract"], "responses": {"proposal_id": {"type": "int", "description": "The unique identifier of the created research proposal"}}}
{"api_name": "createResearchProposal", "api_description": "Create a research proposal", "field": "Research/Research Proposal Writing", "parameters": {"title": {"type": "str", "description": "The title of the research proposal"}, "abstract": {"type": "str", "description": "A summary of the research proposal"}, "objectives": {"type": "str", "description": "The main objectives of the research"}, "methods": {"type": "str", "description": "The methods to be used in the research"}, "expected_results": {"type": "str", "description": "The expected results of the research"}}, "required": ["title", "abstract", "objectives", "methods"], "responses": {"research_proposal_id": {"type": "int", "description": "The ID of the created research proposal"}}}
{"api_name": "createPresentation", "api_description": "Create a research presentation", "field": "Research/Research Presentation", "parameters": {"title": {"type": "str", "description": "The title of the research presentation"}, "author": {"type": "str", "description": "The author of the research presentation"}, "keywords": {"type": "str", "description": "Keywords related to the research presentation, separated by commas (e.g., keyword1, keyword2, keyword3)"}}, "required": ["title", "author"], "responses": {"presentation_id": {"type": "str", "description": "The unique identifier of the created research presentation"}}}
{"api_name": "getResearchFunding", "api_description": "Retrieve information about research funding opportunities", "field": "Research/Research Funding", "parameters": {"topic": {"type": "str", "description": "The research topic of interest (e.g., Cancer, Artificial Intelligence, Climate Change)"}, "location": {"type": "str", "description": "The desired location for funding opportunities (e.g., United States, Europe, Global)"}, "deadline": {"type": "str", "description": "Specify a deadline for funding applications (e.g., within 6 months, before July 2022)"}, "amount_range": {"type": "str", "description": "Specify a desired funding amount range (e.g., $10,000 - $50,000, over $1 million)"}, "government_funding": {"type": "bool", "description": "Specify if only government-funded opportunities are required (true/false)"}}, "required": ["topic"], "responses": {"funding_opportunities": {"type": "str", "description": "A list of research funding opportunities matching the specified criteria"}}}
{"api_name": "checkResearchValidity", "api_description": "Check the validity of a research study", "field": "Research/Research Validity", "parameters": {"study_id": {"type": "str", "description": "The unique identifier of the research study"}, "participants": {"type": "int", "description": "The number of participants in the study"}, "research_method": {"type": "str", "description": "The research method used in the study (e.g., experimental, observational)"}}, "required": ["study_id", "participants", "research_method"], "responses": {"validity": {"type": "bool", "description": "True if the research study is deemed valid, False otherwise"}, "reason": {"type": "str", "description": "Reason for the validity determination"}}}
{"api_name": "getResearchReliability", "api_description": "Retrieve the reliability of research studies", "field": "Research/Research Reliability", "parameters": {"keywords": {"type": "str", "description": "Keywords to search for relevant research studies (e.g., cancer, climate change)"}, "year": {"type": "int", "description": "The year in which the research study was published"}, "author": {"type": "str", "description": "The author of the research study"}}, "required": ["keywords"], "responses": {"reliability": {"type": "str", "description": "The reliability rating of the research study (e.g., high, medium, low)"}, "source": {"type": "str", "description": "The source or organization providing the reliability rating"}}}
{"api_name": "getSamplingMethod", "api_description": "Retrieve information about research sampling methods", "field": "Research/Research Sampling", "parameters": {"research_question": {"type": "str", "description": "The main research question you are investigating"}, "population": {"type": "str", "description": "The target population for your research"}, "sample_size": {"type": "int", "description": "The desired sample size for your study"}}, "required": ["research_question", "population"], "responses": {"sampling_method": {"type": "str", "description": "The recommended sampling method for your study"}}}
{"api_name": "getPublicationCount", "api_description": "Retrieve the count of publications for a researcher", "field": "Research/Research Evaluation", "parameters": {"researcher_name": {"type": "str", "description": "The name of the researcher for whom you want to retrieve the publication count"}}, "required": ["researcher_name"], "responses": {"count": {"type": "int", "description": "The count of publications for the specified researcher"}}}
{"api_name": "calculateResearchImpact", "api_description": "Calculate the research impact of a publication or a researcher", "field": "Research/Research Impact Assessment", "parameters": {"publication": {"type": "str", "description": "The publication for which you want to assess the research impact"}, "researcher": {"type": "str", "description": "The researcher for whom you want to assess the research impact"}, "year": {"type": "int", "description": "The year of assessment (e.g., 2021)"}, "citation_database": {"type": "str", "description": "The citation database to be used (e.g., Scopus, Web of Science)"}}, "required": ["publication", "researcher"], "responses": {"citation_count": {"type": "int", "description": "The number of citations received by the publication or researcher"}, "h_index": {"type": "int", "description": "The H-index of the publication or researcher"}}}
{"api_name": "createResearchProject", "api_description": "Create a new research project", "field": "Research/Research Management", "parameters": {"project_name": {"type": "str", "description": "The name of the research project"}, "project_description": {"type": "str", "description": "A brief description of the research project"}, "start_date": {"type": "str", "description": "The start date of the research project (e.g., yyyy-mm-dd)"}, "end_date": {"type": "str", "description": "The end date of the research project (e.g., yyyy-mm-dd)"}}, "required": ["project_name", "project_description", "start_date"], "responses": {"project_id": {"type": "str", "description": "The unique ID assigned to the research project"}}}
{"api_name": "addResearchMember", "api_description": "Add a member to a research project", "field": "Research/Research Management", "parameters": {"project_id": {"type": "str", "description": "The ID of the research project"}, "member_name": {"type": "str", "description": "The name of the member to be added"}, "member_role": {"type": "str", "description": "The role of the member in the research project"}}, "required": ["project_id", "member_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the member was successfully added to the research project"}}}
{"api_name": "findMentor", "api_description": "Find a research mentor for guidance and support", "field": "Research/Research Mentoring", "parameters": {"research_area": {"type": "str", "description": "The specific research area you are interested in (e.g., Artificial Intelligence, Biochemistry, Economics)"}, "qualification": {"type": "str", "description": "The desired qualification of the research mentor (e.g., PhD, Postdoctoral Fellow)"}}, "required": ["research_area"], "responses": {"mentor_name": {"type": "str", "description": "The name of the research mentor"}, "institution": {"type": "str", "description": "The institution where the research mentor is affiliated"}, "contact_email": {"type": "str", "description": "The email address to contact the research mentor"}}}
{"api_name": "findResearchMentor", "api_description": "Find a research mentor for a specific field", "field": "Research/Research Mentoring", "parameters": {"field_of_interest": {"type": "str", "description": "The specific field of interest for which you are seeking a mentor (e.g., computer science, biology, psychology)"}, "years_of_experience": {"type": "int", "description": "The minimum number of years of research experience the mentor should have"}, "location": {"type": "str", "description": "The location where you would like the mentor to be based"}}, "required": ["field_of_interest"], "responses": {"mentor_name": {"type": "str", "description": "The name of the research mentor"}, "mentor_contact": {"type": "str", "description": "The contact information of the research mentor (e.g., email, phone number)"}}}
{"api_name": "getRequestMentoring", "api_description": "Request research mentoring", "field": "Research/Research Mentoring", "parameters": {"student_name": {"type": "str", "description": "The name of the student requesting mentoring"}, "research_topic": {"type": "str", "description": "The topic or area of research the student needs mentoring on"}, "mentoring_type": {"type": "str", "description": "The type of mentoring required (e.g., one-on-one, group)"}, "mentor_experience": {"type": "str", "description": "The level of experience required in a mentor (e.g., beginner, intermediate, advanced)"}}, "required": ["student_name", "research_topic"], "responses": {"status": {"type": "str", "description": "The status of the mentoring request (e.g., pending, confirmed, declined)"}, "mentor_name": {"type": "str", "description": "The name of the assigned mentor (if request is confirmed)"}}}
{"api_name": "submitResearch", "api_description": "Submit research findings for communication", "field": "Research/Research Communication", "parameters": {"title": {"type": "str", "description": "Title of the research paper"}, "authors": {"type": "str", "description": "List of authors of the research paper"}, "abstract": {"type": "str", "description": "Abstract of the research paper"}, "keywords": {"type": "str", "description": "Keywords related to the research paper"}}, "required": ["title", "authors", "abstract"], "responses": {"submission_status": {"type": "str", "description": "Status of the research paper submission"}}}
{"api_name": "enrollInTrainingProgram", "api_description": "Enroll in a research training program", "field": "Research/Research Training", "parameters": {"program_id": {"type": "int", "description": "The unique identifier of the training program you want to enroll in"}, "name": {"type": "str", "description": "Your full name"}, "email": {"type": "str", "description": "Your email address"}, "phone_number": {"type": "str", "description": "Your phone number"}, "previous_experience": {"type": "str", "description": "Details of your previous research experience"}}, "required": ["program_id", "name", "email", "phone_number"], "responses": {"enrollment_status": {"type": "str", "description": "The status of your enrollment in the training program"}, "confirmation_email": {"type": "str", "description": "A confirmation email sent to your provided email address"}}}
{"api_name": "disseminateResearch", "api_description": "Disseminate research findings to the target audience", "field": "Research/Research Dissemination", "parameters": {"topic": {"type": "str", "description": "The research topic being disseminated"}, "audience": {"type": "str", "description": "The target audience for the research dissemination (e.g., scientists, general public, policymakers)"}, "format": {"type": "str", "description": "The desired format for dissemination (e.g., research paper, conference presentation, infographic)"}}, "required": ["topic", "audience"], "responses": {"dissemination_status": {"type": "str", "description": "The status of the research dissemination (e.g., successful, pending)"}}}
{"api_name": "getConsultantInfo", "api_description": "Retrieve information about a management consultant", "field": "Consulting/Management Consulting", "parameters": {"consultant_id": {"type": "str", "description": "The ID of the management consultant"}}, "required": ["consultant_id"], "responses": {"name": {"type": "str", "description": "The name of the management consultant"}, "specialty": {"type": "str", "description": "The specialty of the management consultant"}, "experience": {"type": "str", "description": "The years of experience of the management consultant"}}}
{"api_name": "getConsultingFirmInfo", "api_description": "Retrieve information about a management consulting firm", "field": "Consulting/Management Consulting", "parameters": {"firm_id": {"type": "str", "description": "The ID of the management consulting firm"}}, "required": ["firm_id"], "responses": {"name": {"type": "str", "description": "The name of the management consulting firm"}, "location": {"type": "str", "description": "The location of the management consulting firm"}, "size": {"type": "int", "description": "The number of employees in the management consulting firm"}}}
{"api_name": "getRiskConsulting", "api_description": "Retrieve risk consulting report", "field": "Consulting/Risk Consulting", "parameters": {"industry": {"type": "str", "description": "The industry for which you want a risk consulting report (e.g., finance, healthcare, technology)"}, "company": {"type": "str", "description": "The name of the company for which you want a risk consulting report"}, "location": {"type": "str", "description": "The location of the company"}, "language": {"type": "str", "description": "The desired language of the report"}}, "required": ["industry", "company"], "responses": {"report": {"type": "str", "description": "The risk consulting report for the specified company"}}}
{"api_name": "getSupplyChainConsultingServices", "api_description": "Retrieve information about supply chain consulting services", "field": "Consulting/Supply Chain Consulting", "parameters": {"location": {"type": "str", "description": "The location where the supply chain consulting services are required (e.g., New York, London, Singapore)"}, "company_size": {"type": "str", "description": "The size of the company seeking supply chain consulting services (e.g., small, medium, large)"}, "industry": {"type": "str", "description": "The industry of the company requiring supply chain consulting services (e.g., manufacturing, retail, healthcare)"}, "expertise_required": {"type": "str", "description": "The specific expertise required for supply chain consulting services (e.g., inventory management, logistics optimization, demand forecasting)"}, "budget_range": {"type": "str", "description": "The budget range available for supply chain consulting services (e.g., $10,000 - $50,000, $50,000 - $100,000, above $100,000)"}}, "required": ["location"], "responses": {"consulting_services": {"type": "str", "description": "The list of available supply chain consulting services meeting the specified criteria"}, "consulting_firms": {"type": "str", "description": "The consulting firms specializing in supply chain consulting services"}, "contact_details": {"type": "str", "description": "Contact details of the consulting firms for further inquiries"}}}
{"api_name": "getTechnologyConsultant", "api_description": "Retrieve a technology consultant for a specific project", "field": "Consulting/Technology Consulting", "parameters": {"project_type": {"type": "str", "description": "The type of project you need consultation for (e.g., software development, IT infrastructure)"}, "industry": {"type": "str", "description": "The industry your project belongs to (e.g., healthcare, finance)"}, "budget": {"type": "float", "description": "The budget allocated for the consulting services"}}, "required": ["project_type", "industry"], "responses": {"consultant_name": {"type": "str", "description": "The name of the technology consultant assigned to the project"}, "consulting_firm": {"type": "str", "description": "The consulting firm providing the technology consulting services"}, "contact_info": {"type": "str", "description": "Contact information of the assigned technology consultant"}}}
{"api_name": "getConsultationCost", "api_description": "Retrieve the cost of a technology consultation", "field": "Consulting/Technology Consulting", "parameters": {"consultant": {"type": "str", "description": "Name of the technology consultant"}, "duration": {"type": "int", "description": "Duration of the consultation in minutes"}}, "required": ["consultant", "duration"], "responses": {"cost": {"type": "float", "description": "The cost of the technology consultation"}}}
{"api_name": "getProcessImprovementRecommendations", "api_description": "Retrieve recommendations for improving business processes", "field": "Consulting/Business Process Improvement Consulting", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which recommendations are needed"}}, "required": ["company_name"], "responses": {"recommendations": {"type": "str", "description": "A list of recommendations for improving business processes"}}}
{"api_name": "analyzeBusinessProcess", "api_description": "Analyze the existing business process in order to identify areas for improvement", "field": "Consulting/Business Process Improvement Consulting", "parameters": {"process_name": {"type": "str", "description": "The name or description of the business process to be analyzed"}, "process_owner": {"type": "str", "description": "The person or department responsible for the management and execution of the process"}, "current_state": {"type": "str", "description": "The current state or flow of the business process"}, "desired_state": {"type": "str", "description": "The desired future state or improved flow of the business process"}, "documentation_available": {"type": "bool", "description": "Indicates whether documentation of the current business process is available or not"}}, "required": ["process_name", "current_state", "desired_state"], "responses": {"improvement_recommendations": {"type": "str", "description": "Recommendations for improving the identified business process"}}}
{"api_name": "getProcessEfficiency", "api_description": "Retrieve the process efficiency improvement data", "field": "Consulting/Business Process Improvement Consulting", "parameters": {"process_name": {"type": "str", "description": "The name of the process for which you want to get the efficiency improvement data (e.g., Sales, Manufacturing, Supply Chain)"}, "time_period": {"type": "str", "description": "Specify a time period for the data (e.g., monthly, quarterly, yearly)"}, "location": {"type": "str", "description": "The location of the business (e.g., New York, London, Beijing)"}, "industry_type": {"type": "str", "description": "The industry type of the business (e.g., Retail, Manufacturing, Healthcare)"}}, "required": ["process_name", "time_period"], "responses": {"efficiency_improvement": {"type": "float", "description": "The percentage of process efficiency improvement"}, "unit": {"type": "str", "description": "The unit of measurement for efficiency improvement (e.g., percentage)"}, "comparison_to_benchmark": {"type": "str", "description": "Comparison of the efficiency improvement to industry benchmarks (e.g., above average, below average)"}}}
{"api_name": "getProcessImprovisation", "api_description": "Retrieve process improvement consulting information", "field": "Consulting/Business Process Improvement Consulting", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to get process improvement consulting"}, "industry": {"type": "str", "description": "The industry of the company (e.g., healthcare, technology)"}, "current_process": {"type": "str", "description": "Description of the current business process in the company"}}, "required": ["company_name", "current_process"], "responses": {"improvement_strategy": {"type": "str", "description": "Proposed strategy for improving the business process"}, "estimated_roi": {"type": "float", "description": "Estimated return on investment after implementing the suggested improvements"}}}
{"api_name": "improveBusinessProcess", "api_description": "Improve a specific business process", "field": "Consulting/Business Process Improvement Consulting", "parameters": {"organization": {"type": "str", "description": "The name of the organization"}, "department": {"type": "str", "description": "The department within the organization"}, "process_id": {"type": "int", "description": "The ID of the business process to be improved"}}, "required": ["organization", "process_id"], "responses": {"status": {"type": "str", "description": "The status of the process improvement"}}}
{"api_name": "getAnalytics", "api_description": "Retrieve data analytics consulting information", "field": "Consulting/Data Analytics Consulting", "parameters": {"business_type": {"type": "str", "description": "Specify the type of business for data analytics consulting (e.g., retail, finance, healthcare)"}, "data_sources": {"type": "str", "description": "Specify the data sources available for analysis (e.g., sales data, customer data, social media data)"}, "metrics": {"type": "str", "description": "Specify the metrics you want to analyze (e.g., revenue, customer acquisition, website traffic)"}, "time_period": {"type": "str", "description": "Specify the time period for data analysis (e.g., monthly, quarterly, yearly)"}}, "required": ["business_type", "data_sources", "metrics"], "responses": {"analytics_report": {"type": "str", "description": "The data analytics report for the specified parameters"}, "recommendations": {"type": "str", "description": "Recommendations based on the data analysis"}}}
{"api_name": "getDataAnalyticsConsulting", "api_description": "Consulting service for data analytics", "field": "Consulting/Data Analytics Consulting", "parameters": {"company_name": {"type": "str", "description": "The name of the company requiring data analytics consulting"}}, "required": ["company_name"], "responses": {"recommendation": {"type": "str", "description": "The recommended data analytics strategy for the given company"}, "cost": {"type": "float", "description": "The estimated cost for the data analytics consulting service"}}}
{"api_name": "getSalesConsultant", "api_description": "Retrieve information about a sales consultant", "field": "Consulting/Sales Consulting", "parameters": {"name": {"type": "str", "description": "The name of the sales consultant"}, "location": {"type": "str", "description": "The location where the sales consultant is based"}, "experience": {"type": "str", "description": "The level of experience of the sales consultant (e.g., senior, mid-level, junior)"}}, "required": ["name"], "responses": {"name": {"type": "str", "description": "The name of the sales consultant"}, "location": {"type": "str", "description": "The location where the sales consultant is based"}, "experience": {"type": "str", "description": "The level of experience of the sales consultant"}}}
{"api_name": "getMandAConsultingServices", "api_description": "Retrieve information about mergers and acquisitions consulting services", "field": "Consulting/Mergers and Acquisitions Consulting", "parameters": {"industry": {"type": "str", "description": "The industry for which you require mergers and acquisitions consulting services (e.g., technology, healthcare, finance)"}, "company_size": {"type": "str", "description": "The size of the company seeking mergers and acquisitions consulting services (e.g., small, medium, large)"}, "location": {"type": "str", "description": "The location where the consulting services are required (e.g., New York, London, Singapore)"}}, "required": ["industry"], "responses": {"consulting_services": {"type": "str", "description": "List of mergers and acquisitions consulting services available"}, "companies": {"type": "str", "description": "List of companies providing mergers and acquisitions consulting services"}}}
{"api_name": "getCustomerData", "api_description": "Retrieve customer data for consulting purposes", "field": "Consulting/Customer Relationship Management Consulting", "parameters": {"customer_id": {"type": "str", "description": "The ID of the customer for whom you want to retrieve data"}}, "required": ["customer_id"], "responses": {"customer_name": {"type": "str", "description": "The name of the customer"}, "customer_age": {"type": "int", "description": "The age of the customer"}, "customer_contact": {"type": "str", "description": "The contact information of the customer"}}}
{"api_name": "updateCustomerStatus", "api_description": "Update the status of a customer for consulting purposes", "field": "Consulting/Customer Relationship Management Consulting", "parameters": {"customer_id": {"type": "str", "description": "The ID of the customer for whom you want to update status"}, "new_status": {"type": "str", "description": "The new status to be assigned to the customer (e.g., active, inactive)"}, "reason": {"type": "str", "description": "The reason for updating the customer's status"}}, "required": ["customer_id", "new_status"], "responses": {"success": {"type": "bool", "description": "Indicates whether the status update was successful"}}}
{"api_name": "getPerformanceImprovementPlan", "api_description": "Retrieve a performance improvement plan to enhance performance", "field": "Consulting/Performance Improvement Consulting", "parameters": {"employee_id": {"type": "str", "description": "The ID of the employee for whom the plan is being generated"}, "factors": {"type": "str", "description": "The factors affecting performance (e.g., motivation, skills, environment)"}, "current_performance": {"type": "float", "description": "The current performance level of the employee"}}, "required": ["employee_id", "factors", "current_performance"], "responses": {"improvement_plan": {"type": "str", "description": "A detailed plan outlining specific steps and recommendations to improve performance"}}}
{"api_name": "getAdmissionRequirements", "api_description": "Retrieve admission requirements for a university", "field": "Consulting/Education Consulting", "parameters": {"university": {"type": "str", "description": "The name of the university for which you want to retrieve admission requirements"}}, "required": ["university"], "responses": {"requirements": {"type": "str", "description": "Admission requirements for the specified university"}}}
{"api_name": "getLegalAdvice", "api_description": "Get legal advice on a specific legal issue", "field": "Consulting/Legal Consulting", "parameters": {"issue": {"type": "str", "description": "Specify the legal issue you need advice on (e.g., contract dispute, copyright infringement)"}}, "required": ["issue"], "responses": {"advice": {"type": "str", "description": "The legal advice for the specified issue"}}}
{"api_name": "getRetailSales", "api_description": "Retrieve retail sales data", "field": "Consulting/Retail Consulting", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the retail sales data (e.g., city, country)"}, "category": {"type": "str", "description": "The specific category of retail sales (e.g., clothing, electronics, furniture)"}, "year": {"type": "int", "description": "The year for which you want to retrieve the retail sales data"}}, "required": ["location", "category"], "responses": {"sales": {"type": "float", "description": "The retail sales amount for the specified location, category, and year"}, "unit": {"type": "str", "description": "The unit of currency in which the retail sales amount is provided"}}}
{"api_name": "getInsuranceQuote", "api_description": "Retrieve an insurance quote for a specified coverage type", "field": "Consulting/Insurance Consulting", "parameters": {"coverage_type": {"type": "str", "description": "The type of insurance coverage for which you want a quote (e.g., auto, home, life)"}}, "required": ["coverage_type"], "responses": {"quote": {"type": "float", "description": "The insurance quote for the specified coverage type"}}}
{"api_name": "getPharmaceuticalConsultingServices", "api_description": "Retrieve information about pharmaceutical consulting services", "field": "Consulting/Pharmaceutical Consulting", "parameters": {"specialty_area": {"type": "str", "description": "The specialty area of pharmaceutical consulting services (e.g., regulatory affairs, clinical development, market access)"}, "location": {"type": "str", "description": "The location where the consulting services are required (e.g., New York, London, Beijing)"}, "industry": {"type": "str", "description": "The industry within pharmaceutical consulting (e.g., biotechnology, medical devices, pharmaceutical companies)"}, "service_type": {"type": "str", "description": "The type of consulting service desired (e.g., strategy consulting, technical consulting, management consulting)"}, "years_of_experience": {"type": "int", "description": "The number of years of consulting experience required"}}, "required": ["specialty_area", "location"], "responses": {"services": {"type": "str", "description": "A list of available pharmaceutical consulting services"}, "consultants": {"type": "str", "description": "A list of consultants specialized in the specified specialty area and location"}, "consulting_firms": {"type": "str", "description": "A list of pharmaceutical consulting firms that offer services in the specified location"}}}
{"api_name": "calculateSpeed", "api_description": "Calculate the speed of an object", "field": "Science/Physics", "parameters": {"distance": {"type": "float", "description": "The distance traveled by the object (e.g., 10.5 km)"}, "time": {"type": "float", "description": "The time taken to travel the distance (e.g., 2.5 hours)"}}, "required": ["distance", "time"], "responses": {"speed": {"type": "float", "description": "The speed of the object in km/h"}}}
{"api_name": "calculateForce", "api_description": "Calculate the force exerted by an object", "field": "Science/Physics", "parameters": {"mass": {"type": "float", "description": "The mass of the object in kilograms"}, "acceleration": {"type": "float", "description": "The acceleration of the object in meters per second squared"}, "time": {"type": "int", "description": "The time duration for which the force is applied in seconds"}}, "required": ["mass", "acceleration"], "responses": {"force": {"type": "float", "description": "The force exerted by the object in Newtons"}}}
{"api_name": "calculateVelocity", "api_description": "Calculate the velocity of an object", "field": "Science/Physics", "parameters": {"displacement": {"type": "float", "description": "The displacement of the object in meters"}, "time": {"type": "int", "description": "The time taken for the object to travel the displacement in seconds"}}, "required": ["displacement", "time"], "responses": {"velocity": {"type": "float", "description": "The velocity of the object in meters per second"}}}
{"api_name": "calculatePressure", "api_description": "Calculate the pressure exerted on an object", "field": "Science/Physics", "parameters": {"force": {"type": "float", "description": "The force exerted on the object in Newtons"}, "area": {"type": "float", "description": "The surface area over which the force is applied in square meters"}}, "required": ["force", "area"], "responses": {"pressure": {"type": "float", "description": "The pressure exerted on the object in Pascals"}}}
{"api_name": "calculateAcceleration", "api_description": "Calculate the acceleration of an object", "field": "Science/Physics", "parameters": {"mass": {"type": "float", "description": "The mass of the object in kilograms"}, "force": {"type": "float", "description": "The force applied on the object in Newtons"}}, "required": ["mass", "force"], "responses": {"acceleration": {"type": "float", "description": "The calculated acceleration of the object in meters per second squared"}}}
{"api_name": "getMolarMass", "api_description": "Retrieve the molar mass of a chemical compound", "field": "Science/Chemistry", "parameters": {"compound": {"type": "str", "description": "The chemical compound for which you want to get the molar mass (e.g., H2O, CO2, NaCl)"}}, "required": ["compound"], "responses": {"molar_mass": {"type": "float", "description": "The molar mass of the specified chemical compound"}}}
{"api_name": "getChemicalProperties", "api_description": "Retrieve chemical properties of a compound", "field": "Science/Chemistry", "parameters": {"compound": {"type": "str", "description": "The name or formula of the compound for which you want to retrieve the properties (e.g., water, CO2, NaCl)"}}, "required": ["compound"], "responses": {"melting_point": {"type": "float", "description": "The melting point of the compound in degrees Celsius"}, "boiling_point": {"type": "float", "description": "The boiling point of the compound in degrees Celsius"}, "molar_mass": {"type": "float", "description": "The molar mass of the compound in g/mol"}, "density": {"type": "float", "description": "The density of the compound in g/mL"}}}
{"api_name": "calculateMolarMass", "api_description": "Calculates the molar mass of a chemical compound", "field": "Science/Chemistry", "parameters": {"compound": {"type": "str", "description": "The chemical compound for which you want to calculate the molar mass (e.g., H2O, C6H12O6)"}}, "required": ["compound"], "responses": {"molar_mass": {"type": "float", "description": "The molar mass of the specified chemical compound"}}}
{"api_name": "balanceEquation", "api_description": "Balances a chemical equation", "field": "Science/Chemistry", "parameters": {"equation": {"type": "str", "description": "The chemical equation that you want to balance (e.g., H2 + O2 -> H2O)"}}, "required": ["equation"], "responses": {"balanced_equation": {"type": "str", "description": "The balanced chemical equation"}}}
{"api_name": "getOrganismInfo", "api_description": "Retrieve information about a specific organism", "field": "Science/Biology", "parameters": {"organism": {"type": "str", "description": "The name of the organism for which you want to retrieve information (e.g., human, mouse, plant)"}, "genus": {"type": "str", "description": "The genus of the organism (e.g., Homo, Mus, Arabidopsis)"}, "species": {"type": "str", "description": "The species of the organism (e.g., sapiens, musculus, thaliana)"}}, "required": ["organism"], "responses": {"common_name": {"type": "str", "description": "The common name of the organism"}, "classification": {"type": "str", "description": "The taxonomic classification of the organism"}, "habitat": {"type": "str", "description": "The natural habitat of the organism"}}}
{"api_name": "getGeneSequence", "api_description": "Retrieve the DNA/RNA sequence of a specific gene", "field": "Science/Biology", "parameters": {"gene_name": {"type": "str", "description": "The name of the gene for which you want to retrieve the sequence"}}, "required": ["gene_name"], "responses": {"sequence": {"type": "str", "description": "The DNA/RNA sequence of the gene"}}}
{"api_name": "getAirQuality", "api_description": "Retrieve the air quality information", "field": "Science/Environmental Science", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the air quality (e.g., Beijing, London, New York)"}, "time_period": {"type": "str", "description": "Specify a time period for air quality (e.g., current, past 24 hours, past week)"}}, "required": ["location"], "responses": {"air_quality_index": {"type": "int", "description": "The air quality index at the specified location"}}}
{"api_name": "getPollutionLevels", "api_description": "Retrieve pollution levels information", "field": "Science/Environmental Science", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the pollution levels (e.g., Beijing, London, New York)"}, "pollutant": {"type": "str", "description": "Specify a pollutant for pollution levels (e.g., PM2.5, PM10, ozone)"}}, "required": ["location"], "responses": {"pollution_level": {"type": "str", "description": "The pollution level of the specified pollutant at the specified location"}}}
{"api_name": "getWaterQuality", "api_description": "Retrieve water quality information", "field": "Science/Environmental Science", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the water quality (e.g., river, lake, beach)"}}, "required": ["location"], "responses": {"water_quality_index": {"type": "int", "description": "The water quality index at the specified location"}}}
{"api_name": "getGeologyInfo", "api_description": "Retrieve geological information", "field": "Science/Geology", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve geological information (e.g., mountains, lakes, caves)"}}, "required": ["location"], "responses": {"rock_type": {"type": "str", "description": "The type of rocks found in the specified location"}, "earthquake_activity": {"type": "bool", "description": "Indicates whether there is any earthquake activity in the specified location"}}}
{"api_name": "getRockComposition", "api_description": "Retrieve the composition of a rock sample", "field": "Science/Geology", "parameters": {"sample_id": {"type": "str", "description": "The ID of the rock sample"}, "location": {"type": "str", "description": "The location from where the rock sample was obtained"}, "analysis_method": {"type": "str", "description": "The method used for analyzing the rock composition"}}, "required": ["sample_id", "location"], "responses": {"composition": {"type": "str", "description": "The composition of the rock sample"}}}
{"api_name": "getRockAge", "api_description": "Retrieve the age of a rock formation", "field": "Science/Geology", "parameters": {"formation_id": {"type": "str", "description": "The ID of the rock formation"}, "location": {"type": "str", "description": "The location of the rock formation"}, "dating_method": {"type": "str", "description": "The method used for determining the age of the rock formation"}}, "required": ["formation_id", "location"], "responses": {"age": {"type": "float", "description": "The age of the rock formation in years"}}}
{"api_name": "classifyRocks", "api_description": "Classify rocks based on their properties", "field": "Science/Geology", "parameters": {"rock_type": {"type": "str", "description": "The type of rock (e.g., sedimentary, igneous, metamorphic)"}, "composition": {"type": "str", "description": "Composition of the rock (e.g., silicate, carbonate)"}, "texture": {"type": "str", "description": "Texture of the rock (e.g., fine-grained, coarse-grained)"}}, "required": ["rock_type"], "responses": {"classification": {"type": "str", "description": "The classification of the rock based on its properties"}}}
{"api_name": "getFossilAge", "api_description": "Determine the age of a fossil", "field": "Science/Geology", "parameters": {"fossil_id": {"type": "str", "description": "The ID of the fossil you want to date"}}, "required": ["fossil_id"], "responses": {"age": {"type": "float", "description": "The estimated age of the fossil in millions of years"}}}
{"api_name": "getRockType", "api_description": "Retrieve the type of rock at a given location", "field": "Science/Geology", "parameters": {"latitude": {"type": "float", "description": "The latitude of the location"}, "longitude": {"type": "float", "description": "The longitude of the location"}}, "required": ["latitude", "longitude"], "responses": {"rock_type": {"type": "str", "description": "The type of rock at the specified location"}}}
{"api_name": "getVolcanoEruptionHistory", "api_description": "Retrieve the eruption history of a volcano", "field": "Science/Geology", "parameters": {"volcano_name": {"type": "str", "description": "The name of the volcano"}}, "required": ["volcano_name"], "responses": {"eruption_history": {"type": "str", "description": "The eruption history of the specified volcano"}}}
{"api_name": "getEarthquakeMagnitude", "api_description": "Retrieve the magnitude of earthquakes at a given location", "field": "Science/Geology", "parameters": {"latitude": {"type": "float", "description": "The latitude of the location"}, "longitude": {"type": "float", "description": "The longitude of the location"}}, "required": ["latitude", "longitude"], "responses": {"magnitude": {"type": "float", "description": "The magnitude of earthquakes at the specified location"}}}
{"api_name": "getGeologyData", "api_description": "Retrieve geological data for a specific location", "field": "Science/Geology", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve geological data (e.g., mountain range, river, city)"}}, "required": ["location"], "responses": {"geological_data": {"type": "str", "description": "The geological information for the specified location"}}}
{"api_name": "getGeologicalFormation", "api_description": "Retrieve information about a specific geological formation", "field": "Science/Geology", "parameters": {"formation_name": {"type": "str", "description": "The name of the geological formation you want information on (e.g., Grand Canyon, Mount Everest)"}, "age": {"type": "str", "description": "The age range of the formation (e.g., Triassic, Early Cretaceous)"}, "location": {"type": "str", "description": "The location of the formation (e.g., Arizona, Nepal)"}}, "required": ["formation_name"], "responses": {"description": {"type": "str", "description": "A brief description of the geological formation"}, "age": {"type": "str", "description": "The age of the formation"}, "location": {"type": "str", "description": "The location of the formation"}}}
{"api_name": "getFossilRecord", "api_description": "Retrieve the fossil record at a given site", "field": "Science/Geology", "parameters": {"site": {"type": "str", "description": "The site where you want to retrieve the fossil record (e.g., excavation site, paleontological site)"}}, "required": ["site"], "responses": {"fossil_record": {"type": "str", "description": "The fossil record at the specified site"}}}
{"api_name": "getAstronomyData", "api_description": "Retrieve astronomical data for a specific location and time", "field": "Science/Astronomy", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve astronomy data (e.g., city, country, coordinates)"}, "date": {"type": "str", "description": "The date for which you want to retrieve astronomy data (e.g., yyyy-mm-dd)"}, "time": {"type": "str", "description": "The time for which you want to retrieve astronomy data (e.g., hh:mm:ss)"}}, "required": ["location", "date"], "responses": {"sunrise": {"type": "str", "description": "The time of sunrise at the specified location"}, "sunset": {"type": "str", "description": "The time of sunset at the specified location"}, "moon_phase": {"type": "str", "description": "The current phase of the moon at the specified location"}}}
{"api_name": "getBrainActivity", "api_description": "Retrieve brain activity information", "field": "Science/Neuroscience", "parameters": {"subject": {"type": "str", "description": "The subject for which you want to retrieve brain activity (e.g., human, mouse, monkey)"}, "region": {"type": "str", "description": "The specific brain region for which you want to retrieve activity (e.g., prefrontal cortex, hippocampus, visual cortex)"}, "time_window": {"type": "int", "description": "The time window in milliseconds for which you want to retrieve the brain activity"}}, "required": ["subject", "region"], "responses": {"activity_pattern": {"type": "str", "description": "The pattern of brain activity in the specified region"}, "time_points": {"type": "int", "description": "The number of time points in the retrieved brain activity data"}}}
{"api_name": "getNeuronActivity", "api_description": "Retrieve the activity of a specific neuron", "field": "Science/Neuroscience", "parameters": {"neuron_id": {"type": "int", "description": "The unique identifier of the neuron"}, "time_period": {"type": "str", "description": "The time period for which you want to retrieve activity (e.g., last hour, last day, last week)"}, "brain_area": {"type": "str", "description": "The specific brain area where the neuron is located"}}, "required": ["neuron_id"], "responses": {"activity": {"type": "float", "description": "The activity level of the neuron"}, "time_unit": {"type": "str", "description": "The unit of time in which the activity is provided"}}}
{"api_name": "identifyMicroorganism", "api_description": "Identify a microorganism based on its characteristics", "field": "Science/Microbiology", "parameters": {"characteristics": {"type": "str", "description": "The characteristics of the microorganism that need to be identified (e.g., shape, color, growth pattern)"}}, "required": ["characteristics"], "responses": {"identification_result": {"type": "str", "description": "The identified microorganism based on the provided characteristics"}}}
{"api_name": "getMicroorganismCount", "api_description": "Retrieve the count of microorganisms in a given sample", "field": "Science/Microbiology", "parameters": {"sample": {"type": "str", "description": "The name or description of the sample (e.g., soil, water, blood)"}, "time_point": {"type": "str", "description": "The time point at which the sample was collected (e.g., before treatment, after 24 hours)"}, "unit": {"type": "str", "description": "The desired unit for microorganism count (e.g., cells/mL, cells/g)"}, "dilution_factor": {"type": "int", "description": "The dilution factor used for sample preparation"}}, "required": ["sample"], "responses": {"count": {"type": "int", "description": "The count of microorganisms in the sample"}, "unit": {"type": "str", "description": "The unit of microorganism count"}}}
{"api_name": "getBiodiversity", "api_description": "Retrieve the biodiversity of a specified location", "field": "Science/Ecology", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the biodiversity (e.g., rainforest, ocean, grassland)"}, "time_period": {"type": "str", "description": "Specify a time period for biodiversity (e.g., past decade, current year, future prediction)"}, "category": {"type": "str", "description": "Specify a category of biodiversity (e.g., species richness, genetic diversity, ecosystem diversity)"}}, "required": ["location"], "responses": {"biodiversity": {"type": "str", "description": "The level of biodiversity at the specified location"}, "unit": {"type": "str", "description": "The unit in which the biodiversity is measured"}}}
{"api_name": "getPopulationDensity", "api_description": "Retrieve the population density of a certain area", "field": "Science/Ecology", "parameters": {"area": {"type": "str", "description": "The name of the area for which you want to get the population density (e.g., New York City, Tokyo, London)"}}, "required": ["area"], "responses": {"density": {"type": "float", "description": "The population density of the specified area (in people per square kilometer)"}}}
{"api_name": "getCarbonFootprint", "api_description": "Calculate the carbon footprint of an activity", "field": "Science/Ecology", "parameters": {"activity": {"type": "str", "description": "The activity for which you want to calculate the carbon footprint (e.g., driving, using air conditioning, eating beef)"}, "duration": {"type": "int", "description": "The duration of the activity in hours"}, "amount": {"type": "int", "description": "The amount of the activity (e.g., number of miles driven, kilowatts of energy used, number of beef servings)"}}, "required": ["activity", "duration", "amount"], "responses": {"footprint": {"type": "float", "description": "The carbon footprint of the specified activity"}}}
{"api_name": "getSpeciesCount", "api_description": "Retrieve the count of species in a given ecological area", "field": "Science/Ecology", "parameters": {"area": {"type": "str", "description": "The ecological area for which you want to get the species count (e.g., forest, wetland, grassland)"}}, "required": ["area"], "responses": {"species_count": {"type": "int", "description": "The count of species in the specified ecological area"}}}
{"api_name": "getEcosystemData", "api_description": "Retrieve data about an ecosystem", "field": "Science/Ecology", "parameters": {"ecosystem": {"type": "str", "description": "The name of the ecosystem for which you want to retrieve data (e.g., coral reef, rainforest, tundra)"}}, "required": ["ecosystem"], "responses": {"data": {"type": "str", "description": "Data about the specified ecosystem"}}}
{"api_name": "calculateSum", "api_description": "Calculate the sum of two numbers", "field": "Science/Mathematics", "parameters": {"num1": {"type": "float", "description": "The first number"}, "num2": {"type": "float", "description": "The second number"}}, "required": ["num1", "num2"], "responses": {"sum": {"type": "float", "description": "The sum of the two numbers"}}}
{"api_name": "calculateSquareRoot", "api_description": "Calculate the square root of a number", "field": "Science/Mathematics", "parameters": {"number": {"type": "float", "description": "The number for which you want to calculate the square root"}}, "required": ["number"], "responses": {"square_root": {"type": "float", "description": "The square root of the given number"}}}
{"api_name": "searchAlgorithm", "api_description": "Search for a specific algorithm in computer science", "field": "Science/Computer Science", "parameters": {"algorithm_name": {"type": "str", "description": "The name of the algorithm you want to search for"}}, "required": ["algorithm_name"], "responses": {"algorithm_description": {"type": "str", "description": "A brief description of the algorithm"}, "algorithm_example": {"type": "str", "description": "An example of how the algorithm can be used"}}}
{"api_name": "getComputerArchitecture", "api_description": "Retrieve computer architecture information", "field": "Science/Computer Science", "parameters": {}, "required": [], "responses": {"architecture": {"type": "str", "description": "The computer architecture"}}}
{"api_name": "getRobotStatus", "api_description": "Retrieve the status of a robot", "field": "Science/Robotics", "parameters": {"robot_id": {"type": "str", "description": "The unique ID of the robot"}, "location": {"type": "str", "description": "The location of the robot (e.g., lab, warehouse, outdoor)"}, "time_interval": {"type": "int", "description": "The time interval in seconds for checking the robot status"}}, "required": ["robot_id"], "responses": {"status": {"type": "str", "description": "The current status of the robot (e.g., idle, moving, charging)"}, "battery_level": {"type": "int", "description": "The battery level of the robot"}}}
{"api_name": "moveRobot", "api_description": "Control the movement of a robot", "field": "Science/Robotics", "parameters": {"robot_id": {"type": "str", "description": "The ID of the robot you want to control"}, "direction": {"type": "str", "description": "The direction in which the robot should move (e.g., forward, backward, left, right)"}}, "required": ["robot_id", "direction"], "responses": {"success": {"type": "bool", "description": "Indicates whether the movement command is successful"}}}
{"api_name": "getRobotBatteryLevel", "api_description": "Retrieve the battery level of a robot", "field": "Science/Robotics", "parameters": {"robot_id": {"type": "int", "description": "The ID of the robot you want to check the battery level of"}}, "required": ["robot_id"], "responses": {"battery_level": {"type": "float", "description": "The current battery level of the specified robot"}}}
{"api_name": "getRobotPosition", "api_description": "Retrieve the current position of a robot", "field": "Science/Robotics", "parameters": {"robot_id": {"type": "int", "description": "The ID of the robot whose position you want to retrieve"}}, "required": ["robot_id"], "responses": {"position": {"type": "str", "description": "The current position of the specified robot"}}}
{"api_name": "chargeRobotBattery", "api_description": "Start charging the battery of a robot", "field": "Science/Robotics", "parameters": {"robot_id": {"type": "str", "description": "The unique identifier of the robot (e.g., R001, R002, R003)"}}, "required": ["robot_id"], "responses": {"success": {"type": "bool", "description": "A boolean indicating whether the robot's battery charging process started successfully"}}}
{"api_name": "sendRobotCommand", "api_description": "Send a command to control a robot", "field": "Science/Robotics", "parameters": {"robot_id": {"type": "str", "description": "The ID of the robot to control"}, "command": {"type": "str", "description": "The command to be sent to the robot (e.g., move_forward, turn_left, pick_up_object)"}}, "required": ["robot_id", "command"], "responses": {"success": {"type": "bool", "description": "Indicates whether the command was successfully executed"}}}
{"api_name": "calculateProteinFoldingEnergy", "api_description": "Calculate the energy required for protein folding", "field": "Science/Biotechnology", "parameters": {"protein_sequence": {"type": "str", "description": "The amino acid sequence of the protein"}}, "required": ["protein_sequence"], "responses": {"folding_energy": {"type": "float", "description": "The energy required for protein folding"}}}
{"api_name": "predictProteinStructure", "api_description": "Predict the 3D structure of a protein", "field": "Science/Biotechnology", "parameters": {"protein_sequence": {"type": "str", "description": "The amino acid sequence of the protein"}}, "required": ["protein_sequence"], "responses": {"protein_structure": {"type": "str", "description": "The predicted 3D structure of the protein"}}}
{"api_name": "analyzeGene", "api_description": "Analyze a gene sequence and provide information about its structure, function, and potential applications in biotechnology", "field": "Science/Biotechnology", "parameters": {"sequence": {"type": "str", "description": "The gene sequence to be analyzed"}}, "required": ["sequence"], "responses": {"structure": {"type": "str", "description": "The predicted structure of the gene"}, "function": {"type": "str", "description": "The predicted function of the gene"}, "applications": {"type": "str", "description": "Potential applications of the gene in biotechnology"}}}
{"api_name": "getDNASequence", "api_description": "Retrieve DNA sequence from a given organism", "field": "Science/Biotechnology", "parameters": {"organism_name": {"type": "str", "description": "The name of the organism (e.g., human, mouse, bacteria)"}, "gene_id": {"type": "str", "description": "The ID of the gene (e.g., NM_001195597.2, ENSG00000157764)"}}, "required": ["organism_name", "gene_id"], "responses": {"sequence": {"type": "str", "description": "The DNA sequence of the specified gene"}}}
{"api_name": "analyzeGeneExpression", "api_description": "Analyze gene expression data from a given dataset", "field": "Science/Biotechnology", "parameters": {"dataset_name": {"type": "str", "description": "The name of the dataset (e.g., GSE12345, E-MTAB-6789)"}, "gene_list": {"type": "str", "description": "A list of genes to analyze expression levels"}}, "required": ["dataset_name", "gene_list"], "responses": {"expression_levels": {"type": "str", "description": "Expression levels of the specified genes in the given dataset"}}}
{"api_name": "analyzeDNA", "api_description": "Analyze the DNA sequence to identify genetic variations and determine functionalities", "field": "Science/Biotechnology", "parameters": {"sequence": {"type": "str", "description": "The DNA sequence to be analyzed"}}, "required": ["sequence"], "responses": {"variations": {"type": "str", "description": "The identified genetic variations"}, "functionalities": {"type": "str", "description": "The determined functionalities of the DNA sequence"}}}
{"api_name": "sequenceAlignment", "api_description": "Perform sequence alignment for two DNA sequences", "field": "Science/Biotechnology", "parameters": {"sequence1": {"type": "str", "description": "The first DNA sequence you want to align"}, "sequence2": {"type": "str", "description": "The second DNA sequence you want to align"}, "method": {"type": "str", "description": "The method to use for sequence alignment (e.g., global, local, semi-global)"}}, "required": ["sequence1", "sequence2"], "responses": {"alignment": {"type": "str", "description": "The aligned sequences in the specified method"}}}
{"api_name": "analyzeProteinStructure", "api_description": "Analyze the three-dimensional structure of a protein", "field": "Science/Biotechnology", "parameters": {"protein": {"type": "str", "description": "The name or identifier of the protein for which the structure is to be analyzed (e.g., EnzymeX, PDB ID: 2AB4)"}}, "required": ["protein"], "responses": {"structure_data": {"type": "str", "description": "The data representing the three-dimensional structure of the protein"}}}
{"api_name": "searchGeneExpression", "api_description": "Search for gene expression data across different tissues or conditions", "field": "Science/Biotechnology", "parameters": {"gene": {"type": "str", "description": "The name or identifier of the gene for which you want to search gene expression data (e.g., TP53, ENSG00000141510)"}, "tissue": {"type": "str", "description": "The tissue or organ of interest (e.g., liver, heart, brain)"}, "condition": {"type": "str", "description": "The specific condition or treatment (e.g., cancer, drug treatment)"}}, "required": ["gene"], "responses": {"expression_data": {"type": "str", "description": "The gene expression data in the specified tissue or condition"}}}
{"api_name": "predictProteinFunction", "api_description": "Predict the function of a protein based on its amino acid sequence", "field": "Science/Biotechnology", "parameters": {"protein_sequence": {"type": "str", "description": "The amino acid sequence of the protein for which you want to predict the function"}}, "required": ["protein_sequence"], "responses": {"predicted_function": {"type": "str", "description": "The predicted function of the protein"}}}
{"api_name": "analyzeProteins", "api_description": "Analyze a protein sequence and provide information about its structure and function", "field": "Science/Biochemistry", "parameters": {"protein_sequence": {"type": "str", "description": "The amino acid sequence of the protein (e.g., MSVLTPLLWLMWAAGTVTLGCAPPPAVPEALRAPRAWAAQGGRAQAGICIGAVLAGIALGVGILVLALAALVFIPHHWAYVWKFSRSSPLWGPMSAFANHADYQTRGLRSLTTDERSAVVFMKLKFSRNVILGALGGVGLPLLVILYLVPNLFIIDLAYFSNMFTVFSGLLALIAWSLGGFYMALYTGAVITNLPVITYFNITSPAWARVAMDTRGSWLKLQSTASDAENYTYPDYLALTPKTRAHPQFEIWAAQQRRFEALPVAEGARQLALHGIDPISLDQAKEKQIKKGKLSKEDFLKDFLKDVFIYVDDDDKDATEFLPKIVQTDWTEVLGRPSLARVAFIDGSVSVDNNTKGSLYLAQSWVPSTKLSAPEGTWQKWVNLLFAAGITHAGSAFSQTTGNNLNYLKGLNS", "example": "MSVLTPLLWLMWAAGTVTLGCAPPPAVPEALRAPRAWAAQGGRAQAGICIGAVLAGIALGVGILVLALAALVFIPHHWAYVWKFSRSSPLWGPMSAFANHADYQTRGLRSLTTDERSAVVFMKLKFSRNVILGALGGVGLPLLVILYLVPNLFIIDLAYFSNMFTVFSGLLALIAWSLGGFYMALYTGAVITNLPVITYFNITSPAWARVAMDTRGSWLKLQSTASDAENYTYPDYLALTPKTRAHPQFEIWAAQQRRFEALPVAEGARQLALHGIDPISLDQAKEKQIKKGKLSKEDFLKDFLKDVFIYVDDDDKDATEFLPKIVQTDWTEVLGRPSLARVAFIDGSVSVDNNTKGSLYLAQSWVPSTKLSAPEGTWQKWVNLLFAAGITHAGSAFSQTTGNNLNYLKGLNS"}}, "required": ["protein_sequence"], "responses": {"structure": {"type": "str", "description": "The predicted structure of the protein"}, "function": {"type": "str", "description": "The predicted function of the protein"}}}
{"api_name": "getBiochemicalData", "api_description": "Retrieve biochemical data for a specific substance", "field": "Science/Biochemistry", "parameters": {"substance": {"type": "str", "description": "The name of the substance for which you want to retrieve biochemical data (e.g., glucose, cholesterol, DNA)"}, "source": {"type": "str", "description": "The source from which you want to retrieve the biochemical data (e.g., research paper, database)"}, "format": {"type": "str", "description": "The desired format for the biochemical data (e.g., JSON, XML)"}}, "required": ["substance"], "responses": {"data": {"type": "str", "description": "The biochemical data for the specified substance in the desired format"}}}
{"api_name": "getEnzymeActivity", "api_description": "Retrieve the activity of a specific enzyme", "field": "Science/Biochemistry", "parameters": {"enzyme_name": {"type": "str", "description": "The name of the enzyme for which you want to retrieve the activity (e.g., amylase, ATPase)"}, "substrate": {"type": "str", "description": "The substrate on which the enzyme acts (e.g., glucose, ATP)"}, "temperature": {"type": "int", "description": "The temperature at which the enzyme activity is measured (e.g., 25, 37, 50)"}}, "required": ["enzyme_name", "substrate"], "responses": {"activity": {"type": "float", "description": "The activity of the enzyme in units per minute"}}}
{"api_name": "identifyEnzyme", "api_description": "Identify the enzyme responsible for a given biochemical reaction", "field": "Science/Biochemistry", "parameters": {"reaction": {"type": "str", "description": "The biochemical reaction for which you want to identify the enzyme (e.g., glucose + ATP -> glucose-6-phosphate + ADP)"}}, "required": ["reaction"], "responses": {"enzyme": {"type": "str", "description": "The enzyme responsible for the given reaction"}}}
{"api_name": "getMetabolicPathways", "api_description": "Retrieve the metabolic pathways of a compound", "field": "Science/Biochemistry", "parameters": {"compound_id": {"type": "str", "description": "The identifier of the compound to retrieve metabolic pathways (e.g., CAS number)"}}, "required": ["compound_id"], "responses": {"pathways": {"type": "str", "description": "The metabolic pathways of the compound"}}}
{"api_name": "calculateMembranePermeability", "api_description": "Calculate the permeability of a molecule through a biological membrane", "field": "Science/Biophysics", "parameters": {"molecule": {"type": "str", "description": "The molecular structure of the compound (e.g., SMILES notation)"}}, "required": ["molecule"], "responses": {"permeability": {"type": "float", "description": "The permeability coefficient of the molecule"}}}
{"api_name": "calculateProteinFoldability", "api_description": "Calculate the foldability of a given protein sequence", "field": "Science/Biophysics", "parameters": {"protein_sequence": {"type": "str", "description": "The amino acid sequence of the protein"}}, "required": ["protein_sequence"], "responses": {"foldability_score": {"type": "float", "description": "A numeric score indicating the foldability of the protein sequence"}}}
{"api_name": "analyzeProteinInteractions", "api_description": "Analyze the interactions between two proteins", "field": "Science/Biophysics", "parameters": {"protein1_sequence": {"type": "str", "description": "The amino acid sequence of the first protein (e.g., ALA-ASN-VAL-...)"}, "protein2_sequence": {"type": "str", "description": "The amino acid sequence of the second protein (e.g., ALA-ASN-VAL-...)"}}, "required": ["protein1_sequence", "protein2_sequence"], "responses": {"interaction_score": {"type": "float", "description": "The score indicating the strength of interaction between the two proteins"}}}
{"api_name": "getProteinFolding", "api_description": "Retrieve information about protein folding", "field": "Science/Biophysics", "parameters": {"protein_id": {"type": "str", "description": "The ID of the protein for which you want to get folding data"}}, "required": ["protein_id"], "responses": {"folding_energy": {"type": "float", "description": "The folding energy of the protein"}}}
{"api_name": "getMentalHealthStatus", "api_description": "Retrieve the mental health status of a person", "field": "Science/Psychology", "parameters": {"person_name": {"type": "str", "description": "The name of the person for whom you want to retrieve the mental health status"}}, "required": ["person_name"], "responses": {"mental_health_status": {"type": "str", "description": "The mental health status of the specified person"}}}
{"api_name": "getPersonalityTraits", "api_description": "Retrieve the personality traits of a person", "field": "Science/Psychology", "parameters": {"person_name": {"type": "str", "description": "The name of the person for whom you want to retrieve the personality traits"}}, "required": ["person_name"], "responses": {"personality_traits": {"type": "str", "description": "The personality traits of the specified person"}}}
{"api_name": "getEmotionalIntelligence", "api_description": "Retrieve the emotional intelligence of a person", "field": "Science/Psychology", "parameters": {"person_name": {"type": "str", "description": "The name of the person for whom you want to retrieve the emotional intelligence"}}, "required": ["person_name"], "responses": {"emotional_intelligence": {"type": "int", "description": "The emotional intelligence score of the specified person"}}}
{"api_name": "getPsychologyExperiment", "api_description": "Retrieve information about a psychology experiment", "field": "Science/Psychology", "parameters": {"experiment_name": {"type": "str", "description": "The name of the psychology experiment (e.g., Stroop test, Milgram experiment)"}}, "required": ["experiment_name"], "responses": {"description": {"type": "str", "description": "A brief description of the psychology experiment"}, "results": {"type": "str", "description": "The results obtained from the experiment"}}}
{"api_name": "getPsychologicalDisorder", "api_description": "Retrieve information about a psychological disorder", "field": "Science/Psychology", "parameters": {"disorder_name": {"type": "str", "description": "The name of the psychological disorder (e.g., depression, anxiety, schizophrenia)"}}, "required": ["disorder_name"], "responses": {"description": {"type": "str", "description": "A brief description of the psychological disorder"}, "symptoms": {"type": "str", "description": "The symptoms commonly associated with the disorder"}}}
{"api_name": "getPsychologyDefinition", "api_description": "Retrieve the definition and explanation of a psychology term", "field": "Science/Psychology", "parameters": {"term": {"type": "str", "description": "The psychology term for which you want to get the definition (e.g., cognitive dissonance, behaviorism, self-esteem)"}}, "required": ["term"], "responses": {"definition": {"type": "str", "description": "The definition and explanation of the specified psychology term"}}}
{"api_name": "getSocialSciencesData", "api_description": "Retrieve social sciences data", "field": "Science/Social Sciences", "parameters": {"topic": {"type": "str", "description": "The topic for which you want to retrieve data (e.g., sociology, psychology, economics)"}, "year": {"type": "int", "description": "The desired year for the data (e.g., 2020, 2021, 2022)"}, "country": {"type": "str", "description": "Specify a country for the data (e.g., United States, China, Germany)"}}, "required": ["topic", "year"], "responses": {"data": {"type": "str", "description": "The social sciences data for the specified topic, year, and country"}}}
{"api_name": "getPopulation", "api_description": "Retrieve the population of a country or region", "field": "Science/Social Sciences", "parameters": {"location": {"type": "str", "description": "The country or region for which you want to get the population (e.g., United States, Europe, China)"}}, "required": ["location"], "responses": {"population": {"type": "int", "description": "The population of the specified country or region"}}}
{"api_name": "getGDP", "api_description": "Retrieve the GDP (Gross Domestic Product) of a country or region", "field": "Science/Social Sciences", "parameters": {"location": {"type": "str", "description": "The country or region for which you want to get the GDP (e.g., United States, Europe, China)"}}, "required": ["location"], "responses": {"GDP": {"type": "float", "description": "The GDP of the specified country or region"}}}
{"api_name": "getLiteracyRate", "api_description": "Retrieve the literacy rate of a country or region", "field": "Science/Social Sciences", "parameters": {"location": {"type": "str", "description": "The country or region for which you want to get the literacy rate (e.g., United States, Europe, China)"}}, "required": ["location"], "responses": {"literacy_rate": {"type": "float", "description": "The literacy rate of the specified country or region"}}}
{"api_name": "getAnthropologyFacts", "api_description": "Retrieve interesting facts about anthropology", "field": "Science/Anthropology", "parameters": {}, "required": [], "responses": {"facts": {"type": "str", "description": "Interesting facts about anthropology"}}}
{"api_name": "getArtifactClassification", "api_description": "Retrieve the classification of an artifact", "field": "Science/Archaeology", "parameters": {"artifact_id": {"type": "int", "description": "The unique identifier of the artifact"}}, "required": ["artifact_id"], "responses": {"classification": {"type": "str", "description": "The classification or category of the artifact"}}}
{"api_name": "getLandArea", "api_description": "Retrieve land area information of a country", "field": "Science/Geography", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get the land area (e.g., Germany, Australia, Brazil)"}, "unit": {"type": "str", "description": "The desired unit for land area (e.g., square kilometers, square miles)"}}, "required": ["country"], "responses": {"land_area": {"type": "float", "description": "The land area of the specified country"}, "unit": {"type": "str", "description": "The unit of land area in which the land area is provided"}}}
{"api_name": "getCapitalCity", "api_description": "Retrieve the capital city of a country", "field": "Science/Geography", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get the capital city (e.g., France, Japan, Mexico)"}}, "required": ["country"], "responses": {"capital_city": {"type": "str", "description": "The capital city of the specified country"}}}
{"api_name": "getContinent", "api_description": "Retrieve the continent of a country", "field": "Science/Geography", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get the continent (e.g., Canada, Egypt, South Korea)"}}, "required": ["country"], "responses": {"continent": {"type": "str", "description": "The continent where the specified country is located"}}}
{"api_name": "getCountryInfo", "api_description": "Retrieve information about a specific country", "field": "Science/Geography", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get information"}}, "required": ["country"], "responses": {"population": {"type": "int", "description": "The population of the specified country"}, "capital": {"type": "str", "description": "The capital city of the specified country"}, "area": {"type": "float", "description": "The area of the specified country in square kilometers"}}}
{"api_name": "getInflationRate", "api_description": "Retrieve the current inflation rate", "field": "Science/Economics", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the inflation rate (e.g., United States, China, Germany)"}, "time_period": {"type": "str", "description": "Specify a time period for the inflation rate (e.g., monthly, quarterly, yearly)"}, "base_year": {"type": "int", "description": "Specify the base year for calculating the inflation rate"}}, "required": ["country"], "responses": {"inflation_rate": {"type": "float", "description": "The current inflation rate for the specified country"}, "time_period": {"type": "str", "description": "The time period of the provided inflation rate"}}}
{"api_name": "calculateGDP", "api_description": "Calculate the Gross Domestic Product (GDP) for a given country and year", "field": "Science/Economics", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to calculate the GDP (e.g., United States, China, Germany)"}, "year": {"type": "int", "description": "The year for which you want to calculate the GDP (e.g., 2020, 2019, 2018)"}}, "required": ["country", "year"], "responses": {"gdp": {"type": "float", "description": "The calculated GDP for the specified country and year"}}}
{"api_name": "getGDPData", "api_description": "Retrieve GDP data for a specific country and year", "field": "Science/Economics", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to retrieve GDP data (e.g., United States, China, Germany)"}, "year": {"type": "int", "description": "The specific year for which you want to retrieve GDP data (e.g., 2020, 2019, 2018)"}}, "required": ["country", "year"], "responses": {"gdp": {"type": "float", "description": "The GDP value for the specified country and year"}, "currency": {"type": "str", "description": "The currency in which the GDP value is provided"}}}
{"api_name": "getHistoricalFigure", "api_description": "Retrieve information about a historical figure", "field": "Science/History", "parameters": {"name": {"type": "str", "description": "The name of the historical figure (e.g., Albert Einstein, Cleopatra, Leonardo da Vinci)"}}, "required": ["name"], "responses": {"name": {"type": "str", "description": "The name of the historical figure"}, "birth_year": {"type": "int", "description": "The year of birth of the historical figure"}, "death_year": {"type": "int", "description": "The year of death of the historical figure"}, "description": {"type": "str", "description": "A description of the historical figure"}}}
{"api_name": "getWordFrequency", "api_description": "Retrieve the frequency of a word in a given text corpus", "field": "Science/Linguistics", "parameters": {"word": {"type": "str", "description": "The word for which you want to get the frequency in the text corpus"}, "corpus": {"type": "str", "description": "The text corpus from which you want to retrieve the frequency of the word"}}, "required": ["word", "corpus"], "responses": {"frequency": {"type": "int", "description": "The frequency count of the word in the given text corpus"}}}
{"api_name": "getSentenceSentiment", "api_description": "Analyze the sentiment of a given sentence", "field": "Science/Linguistics", "parameters": {"sentence": {"type": "str", "description": "The sentence for which you want to analyze the sentiment"}}, "required": ["sentence"], "responses": {"sentiment_score": {"type": "float", "description": "The sentiment score of the given sentence, ranging from -1 (negative) to 1 (positive)"}, "sentiment_category": {"type": "str", "description": "The sentiment category of the given sentence such as 'positive', 'negative', or 'neutral'"}}}
{"api_name": "getLanguageDetection", "api_description": "Detect the language of a given text", "field": "Science/Linguistics", "parameters": {"text": {"type": "str", "description": "The text for which you want to detect the language"}}, "required": ["text"], "responses": {"language": {"type": "str", "description": "The detected language of the given text"}}}
{"api_name": "getWordMeaning", "api_description": "Retrieve the meaning of a word", "field": "Science/Linguistics", "parameters": {"word": {"type": "str", "description": "The word for which you want to get the meaning"}}, "required": ["word"], "responses": {"meaning": {"type": "str", "description": "The meaning of the specified word"}}}
{"api_name": "getSentenceAnalysis", "api_description": "Analyze the grammatical structure of a sentence", "field": "Science/Linguistics", "parameters": {"sentence": {"type": "str", "description": "The sentence to be analyzed"}}, "required": ["sentence"], "responses": {"analysis": {"type": "str", "description": "The grammatical analysis of the specified sentence"}}}
{"api_name": "translateWord", "api_description": "Translate a word from one language to another", "field": "Science/Linguistics", "parameters": {"word": {"type": "str", "description": "The word you want to translate"}, "source_language": {"type": "str", "description": "The language of the word (e.g., English, Spanish, French)"}, "target_language": {"type": "str", "description": "The language to which you want to translate the word"}}, "required": ["word", "source_language", "target_language"], "responses": {"translation": {"type": "str", "description": "The translated word in the target language"}}}
{"api_name": "getPortfolioValue", "api_description": "Retrieve the current value of a investment portfolio", "field": "Finance/Investment Banking", "parameters": {"account_id": {"type": "str", "description": "The unique identifier of the investment portfolio account"}, "currency": {"type": "str", "description": "The desired currency in which the value is provided (e.g., USD, EUR)"}}, "required": ["account_id"], "responses": {"portfolio_value": {"type": "float", "description": "The current value of the investment portfolio in the specified currency"}}}
{"api_name": "getCurrencyExchangeRate", "api_description": "Retrieve the exchange rate between two currencies", "field": "Finance/Investment Banking", "parameters": {"base_currency": {"type": "str", "description": "The base currency of the exchange rate (e.g., USD, EUR)"}, "target_currency": {"type": "str", "description": "The target currency of the exchange rate (e.g., CNY, GBP)"}}, "required": ["base_currency", "target_currency"], "responses": {"exchange_rate": {"type": "float", "description": "The current exchange rate between the base and target currencies"}}}
{"api_name": "getInvestmentBankingData", "api_description": "Retrieve investment banking data", "field": "Finance/Investment Banking", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the investment banking data (e.g., United States, United Kingdom, Germany)"}, "sector": {"type": "str", "description": "The sector of investment banking (e.g., technology, healthcare, energy)"}, "year": {"type": "int", "description": "Specify a year for investment banking data (e.g., 2020, 2021)"}}, "required": ["country", "sector", "year"], "responses": {"revenue": {"type": "float", "description": "The revenue generated in investment banking for the specified country, sector, and year"}, "deals_completed": {"type": "int", "description": "The number of deals completed in investment banking for the specified country, sector, and year"}}}
{"api_name": "getFinancialStatement", "api_description": "Retrieve the financial statement of a company", "field": "Finance/Corporate Finance", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to get the financial statement (e.g., Apple Inc., Google LLC, Microsoft Corporation)"}, "year": {"type": "int", "description": "The year of the financial statement (e.g., 2020, 2019, 2018)"}, "quarter": {"type": "int", "description": "The quarter of the financial statement (e.g., 1, 2, 3, 4)"}}, "required": ["company_name", "year"], "responses": {"revenue": {"type": "float", "description": "The revenue of the company for the specified financial statement"}, "expenses": {"type": "float", "description": "The total expenses of the company for the specified financial statement"}, "net_income": {"type": "float", "description": "The net income of the company for the specified financial statement"}}}
{"api_name": "calculateReturnOnInvestment", "api_description": "Calculate the return on investment (ROI) for a project", "field": "Finance/Corporate Finance", "parameters": {"project_cost": {"type": "float", "description": "The total cost of the project (e.g., 1000000, 5000000, 10000000)"}, "project_revenue": {"type": "float", "description": "The total revenue generated by the project (e.g., 1500000, 7000000, 12000000)"}}, "required": ["project_cost", "project_revenue"], "responses": {"roi": {"type": "float", "description": "The return on investment (ROI) of the project"}}}
{"api_name": "calculateBondYield", "api_description": "Calculate the yield on a bond", "field": "Finance/Corporate Finance", "parameters": {"face_value": {"type": "float", "description": "The face value of the bond"}, "coupon_rate": {"type": "float", "description": "The coupon rate of the bond"}, "current_price": {"type": "float", "description": "The current market price of the bond"}}, "required": ["face_value", "coupon_rate", "current_price"], "responses": {"yield": {"type": "float", "description": "The yield on the bond"}}}
{"api_name": "getFinancialPlan", "api_description": "Retrieve financial planning information", "field": "Finance/Financial Planning", "parameters": {"age": {"type": "int", "description": "The age of the person for whom the financial plan is being created (e.g., 30, 45, 60)"}, "income": {"type": "int", "description": "The annual income of the person (e.g., 50000, 75000, 100000)"}, "expenses": {"type": "int", "description": "The total annual expenses of the person (e.g., 40000, 60000, 80000)"}, "savings": {"type": "int", "description": "The current savings of the person (e.g., 20000, 50000, 100000)"}, "retirement_age": {"type": "int", "description": "The desired retirement age of the person (e.g., 60, 65, 70)"}}, "required": ["age", "income", "expenses", "savings"], "responses": {"financial_plan": {"type": "str", "description": "The detailed financial plan for the person"}}}
{"api_name": "addInvestment", "api_description": "Add an investment to a portfolio", "field": "Finance/Portfolio Management", "parameters": {"portfolio_id": {"type": "int", "description": "The unique identifier of the portfolio"}, "investment_name": {"type": "str", "description": "The name of the investment"}, "investment_type": {"type": "str", "description": "The type of investment (e.g., stocks, bonds, mutual funds)"}}, "required": ["portfolio_id", "investment_name"], "responses": {"investment_id": {"type": "int", "description": "The unique identifier for the newly added investment"}, "investment_name": {"type": "str", "description": "The name of the investment"}, "investment_type": {"type": "str", "description": "The type of investment"}}}
{"api_name": "updateInvestmentQuantity", "api_description": "Update the quantity of an investment in a portfolio", "field": "Finance/Portfolio Management", "parameters": {"portfolio_id": {"type": "int", "description": "The unique identifier of the portfolio"}, "investment_id": {"type": "int", "description": "The unique identifier of the investment"}, "quantity": {"type": "int", "description": "The new quantity of the investment"}}, "required": ["portfolio_id", "investment_id", "quantity"], "responses": {"message": {"type": "str", "description": "A message indicating the success or failure of the quantity update"}}}
{"api_name": "getDerivativesPrice", "api_description": "Retrieve the current price of a derivatives contract", "field": "Finance/Derivatives", "parameters": {"contract_type": {"type": "str", "description": "The type of derivatives contract (e.g., options, futures)"}, "underlying_asset": {"type": "str", "description": "The underlying asset of the derivatives contract (e.g., stocks, commodities)"}, "expiry_date": {"type": "str", "description": "The expiry date of the derivatives contract (e.g., 2022-12-31)"}, "strike_price": {"type": "float", "description": "The strike price of the derivatives contract"}}, "required": ["contract_type", "underlying_asset", "expiry_date"], "responses": {"price": {"type": "float", "description": "The price of the derivatives contract"}}}
{"api_name": "getHedgeFundReturns", "api_description": "Retrieve returns data for a specific hedge fund", "field": "Finance/Hedge Funds", "parameters": {"fund_name": {"type": "str", "description": "The name of the hedge fund for which you want to retrieve returns", "example": "ABC Hedge Fund"}, "start_date": {"type": "str", "description": "The start date for the returns data (e.g., '2020-01-01')"}, "end_date": {"type": "str", "description": "The end date for the returns data (e.g., '2021-12-31')"}}, "required": ["fund_name"], "responses": {"returns": {"type": "float", "description": "The returns of the specified hedge fund during the specified period"}, "start_date": {"type": "str", "description": "The start date of the returns data"}, "end_date": {"type": "str", "description": "The end date of the returns data"}}}
{"api_name": "getHedgeFundInfo", "api_description": "Retrieve information about a specific hedge fund", "field": "Finance/Hedge Funds", "parameters": {"fund_name": {"type": "str", "description": "The name of the hedge fund for which you want to retrieve information", "example": "XYZ Hedge Fund"}}, "required": ["fund_name"], "responses": {"fund_name": {"type": "str", "description": "The name of the hedge fund"}, "strategy": {"type": "str", "description": "The investment strategy of the hedge fund"}, "assets_under_management": {"type": "float", "description": "The total assets under management of the hedge fund"}}}
{"api_name": "getPrivateEquityDeal", "api_description": "Retrieve information about a private equity deal", "field": "Finance/Private Equity", "parameters": {"company_name": {"type": "str", "description": "The name of the company involved in the private equity deal"}, "deal_size": {"type": "float", "description": "The size of the private equity deal in millions (e.g., 100, 500, 1000)"}, "country": {"type": "str", "description": "The country where the private equity deal took place"}}, "required": ["company_name", "deal_size", "country"], "responses": {"deal_date": {"type": "str", "description": "The date when the private equity deal took place"}, "investors": {"type": "str", "description": "The list of investors involved in the private equity deal"}}}
{"api_name": "getPrivateEquityFirmInformation", "api_description": "Retrieve information about a private equity firm", "field": "Finance/Private Equity", "parameters": {"firm_name": {"type": "str", "description": "The name of the private equity firm you want to get information about"}}, "required": ["firm_name"], "responses": {"firm_name": {"type": "str", "description": "The name of the private equity firm"}, "location": {"type": "str", "description": "The location of the private equity firm"}, "industry": {"type": "str", "description": "The industry focus of the private equity firm"}, "funds_raised": {"type": "float", "description": "The total funds raised by the private equity firm"}}}
{"api_name": "getPrivateEquityFirms", "api_description": "Retrieve information about private equity firms", "field": "Finance/Private Equity", "parameters": {"location": {"type": "str", "description": "The location of the private equity firm (e.g., New York, London, Hong Kong)"}, "investment_size": {"type": "str", "description": "Specify the investment size of the private equity firm (e.g., small, mid-size, large)"}, "industry_focus": {"type": "str", "description": "Specify the industry focus of the private equity firm (e.g., technology, healthcare, real estate)"}}, "required": ["location"], "responses": {"firm_name": {"type": "str", "description": "The name of the private equity firm"}, "location": {"type": "str", "description": "The location of the private equity firm"}, "investment_size": {"type": "str", "description": "The investment size of the private equity firm"}, "industry_focus": {"type": "str", "description": "The industry focus of the private equity firm"}}}
{"api_name": "calculatePremium", "api_description": "Calculate insurance premium based on the provided information", "field": "Finance/Insurance", "parameters": {"age": {"type": "int", "description": "The age of the person applying for insurance"}, "gender": {"type": "str", "description": "The gender of the person applying for insurance (e.g., Male, Female)"}, "coverage_amount": {"type": "float", "description": "The desired coverage amount for the insurance policy"}, "policy_term": {"type": "int", "description": "The desired term length of the insurance policy in years"}}, "required": ["age", "gender", "coverage_amount", "policy_term"], "responses": {"premium_amount": {"type": "float", "description": "The calculated premium amount for the insurance policy"}}}
{"api_name": "getFinancialConsulting", "api_description": "Retrieve financial consulting services", "field": "Finance/Financial Consulting", "parameters": {"service_type": {"type": "str", "description": "The type of financial consulting service you are looking for (e.g., investment advice, tax planning, retirement planning)"}, "location": {"type": "str", "description": "The location where you want to receive the financial consulting services (e.g., New York, London, Singapore)"}}, "required": ["service_type"], "responses": {"consulting_firm": {"type": "str", "description": "The name of the consulting firm providing the financial consulting service"}, "contact_info": {"type": "str", "description": "Contact information of the consulting firm"}}}
{"api_name": "getRealEstatePrice", "api_description": "Retrieve current price information for a real estate property", "field": "Finance/Real Estate Finance", "parameters": {"property": {"type": "str", "description": "The name or ID of the real estate property for which you want to get the price"}}, "required": ["property"], "responses": {"price": {"type": "float", "description": "The current price of the specified real estate property"}}}
{"api_name": "calculateLoanPayment", "api_description": "Calculate the monthly payment for a real estate loan", "field": "Finance/Real Estate Finance", "parameters": {"loan_amount": {"type": "float", "description": "The total amount of the loan (e.g., 100000)"}, "interest_rate": {"type": "float", "description": "The annual interest rate for the loan (e.g., 5.25)"}, "loan_term": {"type": "int", "description": "The duration of the loan in years (e.g., 20)"}, "down_payment": {"type": "float", "description": "The initial deposit made towards the loan (e.g., 20000)"}}, "required": ["loan_amount", "interest_rate", "loan_term"], "responses": {"monthly_payment": {"type": "float", "description": "The monthly payment amount for the real estate loan"}}}
{"api_name": "calculatePropertyROI", "api_description": "Calculate the return on investment (ROI) for a real estate property", "field": "Finance/Real Estate Finance", "parameters": {"purchase_price": {"type": "float", "description": "The purchase price of the property"}, "rental_income": {"type": "float", "description": "The monthly rental income from the property"}, "expenses": {"type": "float", "description": "The monthly expenses for the property (e.g., maintenance, property taxes)"}, "holding_period": {"type": "int", "description": "The number of years the property will be held"}}, "required": ["purchase_price", "rental_income", "expenses", "holding_period"], "responses": {"roi": {"type": "float", "description": "The return on investment (ROI) for the property"}}}
{"api_name": "convertCurrency", "api_description": "Convert one currency to another", "field": "Finance/Financial Technology", "parameters": {"amount": {"type": "float", "description": "The amount to be converted"}, "from_currency": {"type": "str", "description": "The currency to convert from (e.g., USD, EUR, GBP)"}, "to_currency": {"type": "str", "description": "The currency to convert to (e.g., USD, EUR, GBP)"}}, "required": ["amount", "from_currency", "to_currency"], "responses": {"converted_amount": {"type": "float", "description": "The amount after conversion"}}}
{"api_name": "getCommodityPrice", "api_description": "Retrieve current commodity price information", "field": "Finance/Commodities", "parameters": {"commodity": {"type": "str", "description": "The name of the commodity you want to get the price for (e.g., gold, oil, corn)"}, "unit": {"type": "str", "description": "The desired unit for price (e.g., USD, EUR, GBP)"}, "location": {"type": "str", "description": "The location from where you want to get the price (e.g., New York, London, Dubai)"}}, "required": ["commodity"], "responses": {"price": {"type": "float", "description": "The price of the specified commodity"}, "unit": {"type": "str", "description": "The unit of currency in which the price is provided"}}}
{"api_name": "getIslamicFinanceInfo", "api_description": "Retrieve information about Islamic finance", "field": "Finance/Islamic Finance", "parameters": {"product_type": {"type": "str", "description": "Specify the type of Islamic finance product you are interested in (e.g., Murabaha, Sukuk, Ijarah)"}, "country": {"type": "str", "description": "Specify the country for which you want to get Islamic finance information"}}, "required": ["product_type"], "responses": {"info": {"type": "str", "description": "The information about the specified Islamic finance product in the specified country"}}}
{"api_name": "getInvestorBiases", "api_description": "Retrieve information on common investor biases", "field": "Finance/Behavioral Finance", "parameters": {}, "required": [], "responses": {"biases": {"type": "str", "description": "A list of common investor biases"}}}
{"api_name": "calculateRiskAppetite", "api_description": "Calculate risk appetite based on investor preferences", "field": "Finance/Behavioral Finance", "parameters": {"age": {"type": "int", "description": "The age of the investor"}, "income": {"type": "float", "description": "The annual income of the investor"}, "investment_experience": {"type": "str", "description": "The level of investment experience of the investor (e.g., novice, intermediate, expert)"}}, "required": ["age", "income"], "responses": {"risk_appetite": {"type": "str", "description": "The calculated risk appetite of the investor"}}}
{"api_name": "getInvestorSentiment", "api_description": "Retrieve investor sentiment information", "field": "Finance/Behavioral Finance", "parameters": {"company": {"type": "str", "description": "The name of the company for which you want to get investor sentiment information"}, "time_period": {"type": "str", "description": "The time period for which you want to retrieve the sentiment (e.g., last month, last quarter, last year)"}}, "required": ["company"], "responses": {"sentiment_score": {"type": "float", "description": "The sentiment score indicating the overall investor sentiment for the specified company"}, "sentiment_level": {"type": "str", "description": "The sentiment level indicating the positive, neutral, or negative sentiment of investors for the specified company"}}}
{"api_name": "getRiskAppetite", "api_description": "Retrieve risk appetite information", "field": "Finance/Behavioral Finance", "parameters": {"country": {"type": "str", "description": "The country for which you want to get risk appetite information"}, "year": {"type": "int", "description": "The year of risk appetite data"}}, "required": ["country"], "responses": {"risk_appetite_index": {"type": "float", "description": "The risk appetite index indicating the willingness of investors in the specified country to take on risks"}}}
{"api_name": "getSoilPollution", "api_description": "Retrieve soil pollution information", "field": "Environmental/Soil Pollution", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the soil pollution information (e.g., city, region)"}, "depth": {"type": "str", "description": "The depth at which you want to assess the soil pollution (e.g., 0-10cm, 10-20cm, 20-30cm)"}, "pollutants": {"type": "str", "description": "Specify the pollutants you want to assess in the soil (e.g., heavy metals, pesticides)"}, "time_frame": {"type": "str", "description": "Specify the time frame for soil pollution assessment (e.g., weekly, monthly, annually)"}}, "required": ["location"], "responses": {"pollution_level": {"type": "float", "description": "The level of soil pollution at the specified location and depth"}, "threshold": {"type": "str", "description": "The threshold value for soil pollution level at the specified location and depth"}}}
{"api_name": "getHabitatCoverage", "api_description": "Retrieve the percentage of habitat coverage for a specific species", "field": "Environmental/Conservation Biology", "parameters": {"species": {"type": "str", "description": "The specific species for which you want to get the habitat coverage (e.g., Bengal Tiger, Blue Whale, Douglas Fir Tree)"}}, "required": ["species"], "responses": {"coverage_percentage": {"type": "float", "description": "The percentage of habitat coverage for the specified species"}}}
{"api_name": "getWasteCollectionSchedule", "api_description": "Retrieve the waste collection schedule for a specific location", "field": "Environmental/Waste Management", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the waste collection schedule (e.g., city name, street address)"}}, "required": ["location"], "responses": {"schedule": {"type": "str", "description": "The waste collection schedule for the specified location"}}}
{"api_name": "getWasteRecyclingInfo", "api_description": "Retrieve recycling information for different types of waste", "field": "Environmental/Waste Management", "parameters": {"waste_type": {"type": "str", "description": "The type of waste for which you want to get recycling information (e.g., paper, plastic, glass)"}}, "required": ["waste_type"], "responses": {"recycling_info": {"type": "str", "description": "Information about recycling options for the specified waste type"}}}
{"api_name": "getEnvironmentalPolicy", "api_description": "Retrieve environmental policy information", "field": "Environmental/Environmental Policy", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the environmental policy (e.g., United States, China, Germany)"}, "policy_type": {"type": "str", "description": "The type of environmental policy (e.g., air pollution, water conservation)"}}, "required": ["country"], "responses": {"policy_details": {"type": "str", "description": "The details of the environmental policy at the specified country"}}}
{"api_name": "getEnvironmentalHealthIndex", "api_description": "Retrieve the environmental health index of a specific location", "field": "Environmental/Environmental Health", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the environmental health index (e.g., Beijing, London, New York)"}, "time_interval": {"type": "str", "description": "The time interval for which you want to get the environmental health index (e.g., daily, weekly, monthly)"}}, "required": ["location"], "responses": {"index": {"type": "int", "description": "The environmental health index at the specified location and time interval"}}}
{"api_name": "getNoiseLevel", "api_description": "Retrieve noise level information", "field": "Environmental/Environmental Health", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the noise level (e.g., office, street, park)"}}, "required": ["location"], "responses": {"noise_level": {"type": "int", "description": "The noise level at the specified location"}}}
{"api_name": "getSolarEnergy", "api_description": "Retrieve information about solar energy resources", "field": "Environmental/Renewable Resources", "parameters": {"location": {"type": "str", "description": "The location for which you want to get solar energy information (e.g., Beijing, London, New York)"}, "timeframe": {"type": "str", "description": "Specify a timeframe for solar energy data (e.g., daily, monthly, yearly)"}, "unit": {"type": "str", "description": "The desired unit for solar energy (e.g., kilowatt-hour, megawatt-hour)"}}, "required": ["location"], "responses": {"solar_energy": {"type": "float", "description": "The amount of solar energy available at the specified location"}, "unit": {"type": "str", "description": "The unit of solar energy in which the data is provided"}}}
{"api_name": "getChemicalConcentration", "api_description": "Retrieve the concentration of a specific chemical in the environment", "field": "Environmental/Environmental Chemistry", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve the chemical concentration (e.g., city, river, forest)"}, "chemical_name": {"type": "str", "description": "The name of the chemical for which you want to retrieve the concentration (e.g., carbon dioxide, lead, ozone)"}, "unit": {"type": "str", "description": "The desired unit for concentration (e.g., ppm, mg/L, ng/m³)"}, "time_window": {"type": "str", "description": "Specify a time window for concentration retrieval (e.g., daily, weekly, monthly)"}}, "required": ["location", "chemical_name"], "responses": {"concentration": {"type": "float", "description": "The concentration of the specified chemical in the environment"}, "unit": {"type": "str", "description": "The unit of concentration in which the value is provided"}}}
{"api_name": "getWaterPollutionData", "api_description": "Retrieve water pollution data for a specific location", "field": "Environmental/Environmental Engineering", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the water pollution data (e.g., river, lake, coastal area)"}, "time_range": {"type": "str", "description": "Specify a time range for the water pollution data (e.g., monthly, yearly)"}}, "required": ["location"], "responses": {"water_quality_index": {"type": "int", "description": "The water quality index at the specified location"}}}
{"api_name": "getSolarRadiation", "api_description": "Retrieve the solar radiation data for a specific location", "field": "Environmental/Environmental Engineering", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the solar radiation data (e.g., city, town, village)"}, "time_range": {"type": "str", "description": "Specify a time range for the solar radiation data (e.g., daily, monthly, yearly)"}}, "required": ["location"], "responses": {"solar_radiation": {"type": "float", "description": "The solar radiation level at the specified location"}}}
{"api_name": "submitAssessment", "api_description": "Submit an environmental impact assessment", "field": "Environmental/Environmental Impact Assessment", "parameters": {"project_name": {"type": "str", "description": "The name of the project for which the assessment is being submitted"}, "location": {"type": "str", "description": "The location of the project (e.g., city, state, country)"}, "duration": {"type": "int", "description": "The estimated duration of the project in months"}, "start_date": {"type": "str", "description": "The planned start date of the project"}, "end_date": {"type": "str", "description": "The planned end date of the project"}, "assessor_name": {"type": "str", "description": "The name of the person performing the assessment"}}, "required": ["project_name", "location"], "responses": {"assessment_id": {"type": "str", "description": "The unique ID assigned to the submitted assessment"}}}
{"api_name": "getEnvironmentalImpactAssessment", "api_description": "Retrieve environmental impact assessment information", "field": "Environmental/Environmental Impact Assessment", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the environmental impact assessment (e.g., city, country)"}, "year": {"type": "int", "description": "The year for which you want to get the environmental impact assessment (e.g., 2020, 2021)"}, "area_of_study": {"type": "str", "description": "Specify the area of study for the environmental impact assessment (e.g., air pollution, water quality)"}, "industry": {"type": "str", "description": "Specify the industry of interest for the environmental impact assessment (e.g., manufacturing, agriculture)"}, "criteria": {"type": "str", "description": "Specify the criteria for the environmental impact assessment (e.g., biodiversity, carbon footprint)"}}, "required": ["location", "year"], "responses": {"assessment_score": {"type": "float", "description": "The environmental impact assessment score for the specified location and year"}, "area_of_study": {"type": "str", "description": "The area of study in which the environmental impact assessment was conducted"}, "industry": {"type": "str", "description": "The industry for which the environmental impact assessment was conducted"}, "criteria": {"type": "str", "description": "The criteria included in the environmental impact assessment"}}}
{"api_name": "calculateEnvironmentalCost", "api_description": "Calculate the cost of environmental damage caused by economic activities", "field": "Environmental/Environmental Economics", "parameters": {"economic_activity": {"type": "str", "description": "The economic activity for which you want to calculate the environmental cost (e.g., construction, manufacturing)", "example": "construction"}, "pollution_type": {"type": "str", "description": "The type of pollution associated with the economic activity (e.g., air pollution, water pollution)", "example": "air pollution"}, "pollution_level": {"type": "float", "description": "The level of pollution emitted per unit of economic activity (e.g., tonnes of CO2 per hour of operation)", "example": 2.5}, "economic_damage_ratio": {"type": "float", "description": "The economic damage caused by each unit of pollution (e.g., monetary cost in dollars per tonne of CO2 emitted)", "example": 100}}, "required": ["economic_activity", "pollution_type", "pollution_level", "economic_damage_ratio"], "responses": {"environmental_cost": {"type": "float", "description": "The cost of environmental damage caused by the economic activity", "example": 2500.0}, "currency": {"type": "str", "description": "The currency in which the environmental cost is provided", "example": "USD"}}}
{"api_name": "calculateCostBenefit", "api_description": "Calculate the cost and benefit of an environmental project", "field": "Environmental/Environmental Economics", "parameters": {"project_name": {"type": "str", "description": "The name of the project"}, "costs": {"type": "float", "description": "The costs of the project in monetary value"}, "benefits": {"type": "float", "description": "The benefits of the project in monetary value"}, "timeframe": {"type": "str", "description": "The timeframe for which the costs and benefits are calculated (e.g., 1 year, 5 years)"}}, "required": ["project_name", "costs", "benefits"], "responses": {"net_benefit": {"type": "float", "description": "The net benefit of the project after subtracting costs from benefits"}, "cost_ratio": {"type": "float", "description": "The cost-benefit ratio"}}}
{"api_name": "getEthics", "api_description": "Retrieve information about environmental ethics", "field": "Environmental/Environmental Ethics", "parameters": {}, "required": [], "responses": {"ethics": {"type": "str", "description": "Information about different ethical theories related to the environment"}}}
{"api_name": "getEmotionalResponse", "api_description": "Retrieve emotional response information based on environmental factors", "field": "Environmental/Environmental Psychology", "parameters": {"environment": {"type": "str", "description": "The type of environment (e.g., natural, indoor, workplace)"}, "stimuli": {"type": "str", "description": "The specific stimuli in the environment (e.g., color, lighting, temperature)"}, "personality_traits": {"type": "str", "description": "The personality traits of the individual (e.g., extroversion, introversion, neuroticism)"}, "duration": {"type": "int", "description": "The duration of exposure to the environmental factors in minutes"}}, "required": ["environment", "stimuli"], "responses": {"emotional_response": {"type": "str", "description": "The emotional response triggered by the specified environmental factors"}, "intensity": {"type": "float", "description": "The intensity level of the emotional response"}, "duration_extracted": {"type": "bool", "description": "Flag indicating if duration was extracted from the data"}}}
{"api_name": "analyzeEnvironmentalData", "api_description": "Analyze environmental data for a given location", "field": "Environmental/Environmental Data Analysis", "parameters": {"location": {"type": "str", "description": "The location for which you want to analyze the environmental data (e.g., city, country)"}, "start_date": {"type": "str", "description": "The start date of the data analysis (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the data analysis (e.g., YYYY-MM-DD)"}, "data_type": {"type": "str", "description": "Specify the type of environmental data to analyze (e.g., air quality, water pollution)"}, "statistical_measure": {"type": "str", "description": "Specify the statistical measure to apply on the data (e.g., mean, median, maximum, minimum)"}, "visualization_type": {"type": "str", "description": "Specify the type of visualization for the analyzed data (e.g., line chart, bar chart, heatmap)"}}, "required": ["location", "start_date", "end_date"], "responses": {"analysis_result": {"type": "str", "description": "The result of the environmental data analysis"}, "visualization": {"type": "str", "description": "The visualization of the analyzed data"}}}
{"api_name": "runEnvironmentalModel", "api_description": "Run an environmental modeling simulation", "field": "Environmental/Environmental Modeling", "parameters": {"model_type": {"type": "str", "description": "The type of environmental model to use (e.g., air quality, water quality)"}, "input_data": {"type": "str", "description": "The input data for the environmental model (e.g., pollution levels, runoff data)"}, "parameters": {"type": "str", "description": "Additional parameters for the environmental model (e.g., time step, spatial resolution)"}}, "required": ["model_type", "input_data"], "responses": {"simulation_results": {"type": "str", "description": "The results of the environmental modeling simulation"}}}
{"api_name": "getPM2.5Level", "api_description": "Retrieve the PM2.5 level for a specified location", "field": "Environmental/Environmental Modeling", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the PM2.5 level (e.g., Beijing, London, New York)"}}, "required": ["location"], "responses": {"pm2.5_level": {"type": "float", "description": "The PM2.5 level at the specified location"}}}
{"api_name": "getSoilMoisture", "api_description": "Retrieve the soil moisture level for a specified location", "field": "Environmental/Environmental Modeling", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the soil moisture level (e.g., Beijing, London, New York)"}}, "required": ["location"], "responses": {"soil_moisture": {"type": "float", "description": "The soil moisture level at the specified location"}}}
{"api_name": "getEnvironmentalJusticeData", "api_description": "Retrieve environmental justice data for a specific location", "field": "Environmental/Environmental Justice", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve environmental justice data (e.g., city, state, country)"}, "year": {"type": "int", "description": "The year for which you want to retrieve data"}, "parameter": {"type": "str", "description": "The specific environmental justice parameter you are interested in (e.g., air quality, water pollution)"}}, "required": ["location"], "responses": {"data": {"type": "str", "description": "The environmental justice data for the specified location and parameter"}}}
{"api_name": "getWildlifeData", "api_description": "Retrieve wildlife data in a specific location", "field": "Environmental/Wildlife Management", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve wildlife data (e.g., national park, forest reserve)"}, "time_frame": {"type": "str", "description": "Specify a time frame for the wildlife data (e.g., past week, past month, past year)"}}, "required": ["location"], "responses": {"wildlife_species": {"type": "str", "description": "A list of wildlife species found in the specified location"}, "population_count": {"type": "int", "description": "The estimated population count of wildlife species in the specified location"}}}
{"api_name": "getWildlifePopulation", "api_description": "Retrieve the population of a specific wildlife species", "field": "Environmental/Wildlife Management", "parameters": {"species": {"type": "str", "description": "The specific wildlife species for which you want to get the population (e.g., elephants, tigers, pandas)"}, "location": {"type": "str", "description": "The geographical location where the wildlife population is to be retrieved (e.g., national park, forest reserve)"}}, "required": ["species"], "responses": {"population": {"type": "int", "description": "The estimated population of the specified wildlife species at the given location"}}}
{"api_name": "getNaturalResourceStatus", "api_description": "Retrieve the status of natural resources in a given location", "field": "Environmental/Natural Resource Management", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve the natural resource status (e.g., forests, rivers, wildlife reserves)"}, "resource_type": {"type": "str", "description": "Specify the type of natural resource you want to retrieve (e.g., timber, water, endangered species)"}}, "required": ["location"], "responses": {"status": {"type": "str", "description": "The status of the specified natural resource in the given location"}}}
{"api_name": "getAvailableResources", "api_description": "Retrieve available natural resources information", "field": "Environmental/Natural Resource Management", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the natural resources availability (e.g., forest area, water bodies)"}, "resource_type": {"type": "str", "description": "Specify the type of natural resource (e.g., timber, minerals, freshwater)"}}, "required": ["location"], "responses": {"resources": {"type": "str", "description": "The available natural resources at the specified location"}}}
{"api_name": "getEcotoxicityData", "api_description": "Retrieve ecotoxicity data for a given chemical", "field": "Environmental/Ecotoxicology", "parameters": {"chemical_name": {"type": "str", "description": "The name of the chemical for which ecotoxicity data is required (e.g., Benzene, Glyphosate, DDT)"}, "species": {"type": "str", "description": "The target species for which ecotoxicity data is required (e.g., Fish, Daphnia, Algae)"}}, "required": ["chemical_name", "species"], "responses": {"ecotoxicity_value": {"type": "float", "description": "The ecotoxicity value for the specified chemical and species"}}}
{"api_name": "getBiodegradationRate", "api_description": "Retrieve the rate of biodegradation for a specific substance", "field": "Environmental/Environmental Biotechnology", "parameters": {"substance": {"type": "str", "description": "The substance for which you want to retrieve the biodegradation rate (e.g., plastic, oil, pesticide)"}}, "required": ["substance"], "responses": {"rate": {"type": "float", "description": "The rate of biodegradation for the specified substance"}}}
{"api_name": "getToxicityLevel", "api_description": "Retrieve the toxicity level of a specific substance", "field": "Environmental/Environmental Biotechnology", "parameters": {"substance": {"type": "str", "description": "The substance for which you want to retrieve the toxicity level (e.g., heavy metals, pollutants, chemicals)"}}, "required": ["substance"], "responses": {"level": {"type": "str", "description": "The toxicity level of the specified substance"}}}
{"api_name": "getMicrobialDiversity", "api_description": "Retrieve the microbial diversity in a specific environment", "field": "Environmental/Environmental Biotechnology", "parameters": {"environment": {"type": "str", "description": "The environment for which you want to retrieve the microbial diversity (e.g., soil, water, air)"}}, "required": ["environment"], "responses": {"diversity": {"type": "float", "description": "The microbial diversity in the specified environment"}}}
{"api_name": "calculateCO2Emissions", "api_description": "Calculate the CO2 emissions produced by a specific process", "field": "Environmental/Environmental Biotechnology", "parameters": {"process": {"type": "str", "description": "The specific process for which you want to calculate CO2 emissions (e.g., manufacturing, transportation)"}, "amount": {"type": "float", "description": "The amount of the process (e.g., number of units, distance traveled)"}}, "required": ["process", "amount"], "responses": {"emissions": {"type": "float", "description": "The amount of CO2 emissions produced by the specified process"}}}
{"api_name": "measureAirQuality", "api_description": "Measure the air quality at a specific location", "field": "Environmental/Environmental Biotechnology", "parameters": {"location": {"type": "str", "description": "The location for which you want to measure the air quality (e.g., city, address)"}, "duration": {"type": "int", "description": "The duration of the air quality measurement in minutes"}}, "required": ["location", "duration"], "responses": {"air_quality_index": {"type": "int", "description": "The air quality index at the specified location"}}}
{"api_name": "getUrbanEcologyIndex", "api_description": "Retrieve the current urban ecology index", "field": "Environmental/Urban Ecology", "parameters": {}, "required": [], "responses": {"index": {"type": "float", "description": "The urban ecology index indicating the overall environmental quality of the city"}}}
{"api_name": "getUrbanVegetationCoverage", "api_description": "Retrieve the percentage of vegetation coverage in urban areas", "field": "Environmental/Urban Ecology", "parameters": {"city": {"type": "str", "description": "The city for which you want to get the vegetation coverage (e.g., New York, London, Beijing)"}, "time_frame": {"type": "str", "description": "The specific time frame for which the vegetation coverage data is required (e.g., year, month, season)"}}, "required": ["city"], "responses": {"coverage_percentage": {"type": "float", "description": "The percentage of vegetation coverage in the specified city"}, "time_frame": {"type": "str", "description": "The time frame in which the vegetation coverage data is provided"}}}
{"api_name": "getUrbanAirQualityIndex", "api_description": "Retrieve the air quality index in urban areas", "field": "Environmental/Urban Ecology", "parameters": {"city": {"type": "str", "description": "The city for which you want to get the air quality index (e.g., New York, London, Beijing)"}, "time_frame": {"type": "str", "description": "The specific time frame for which the air quality index data is required (e.g., day, week, month)"}, "monitoring_station_id": {"type": "str", "description": "The ID of the monitoring station from which the air quality data is collected"}}, "required": ["city"], "responses": {"air_quality_index": {"type": "int", "description": "The air quality index in the specified city"}, "time_frame": {"type": "str", "description": "The time frame in which the air quality index data is provided"}}}
{"api_name": "createEnvironmentalReport", "api_description": "Generate a report based on environmental data", "field": "Environmental/Environmental Communication", "parameters": {"data": {"type": "str", "description": "The environmental data to be included in the report (e.g., JSON, CSV)"}, "report_type": {"type": "str", "description": "The type of report to be generated (e.g., summary, detailed)"}, "output_format": {"type": "str", "description": "The format in which the report will be generated (e.g., PDF, HTML)"}}, "required": ["data", "report_type", "output_format"], "responses": {"report": {"type": "str", "description": "The generated environmental report in the specified format"}, "status": {"type": "str", "description": "The status of the report generation (e.g., success, error)"}}}
{"api_name": "getProductionLineStatus", "api_description": "Retrieve the status of a production line in an automotive manufacturing plant", "field": "Manufacturing/Automotive manufacturing", "parameters": {"production_line_id": {"type": "str", "description": "The ID of the production line for which you want to get the status"}}, "required": ["production_line_id"], "responses": {"status": {"type": "str", "description": "The current status of the specified production line (e.g., operational, under maintenance)"}}}
{"api_name": "getQualityCheckResult", "api_description": "Retrieve the quality check result for a specific vehicle in the automotive manufacturing process", "field": "Manufacturing/Automotive manufacturing", "parameters": {"vehicle_id": {"type": "str", "description": "The ID of the vehicle for which you want to check the quality"}}, "required": ["vehicle_id"], "responses": {"result": {"type": "str", "description": "The quality check result of the specified vehicle (e.g., pass, fail)"}}}
{"api_name": "getAutomotiveParts", "api_description": "Retrieve information about specific automotive parts", "field": "Manufacturing/Automotive manufacturing", "parameters": {"part_name": {"type": "str", "description": "The name of the automotive part you want to get information about (e.g., engine, transmission, brake system)"}, "manufacturer": {"type": "str", "description": "The name of the manufacturer for the automotive part (e.g., Ford, Toyota, BMW)"}, "year": {"type": "int", "description": "The year of the automotive part model"}}, "required": ["part_name", "manufacturer"], "responses": {"part_information": {"type": "str", "description": "Detailed information about the automotive part"}, "price": {"type": "float", "description": "The price of the automotive part"}, "available": {"type": "bool", "description": "Specifies whether the automotive part is currently available or not"}}}
{"api_name": "getProductionCapacity", "api_description": "Retrieve the production capacity of an aerospace manufacturing facility", "field": "Manufacturing/Aerospace manufacturing", "parameters": {"facility": {"type": "str", "description": "The manufacturing facility for which you want to get the production capacity"}}, "required": ["facility"], "responses": {"capacity": {"type": "int", "description": "The production capacity of the specified aerospace manufacturing facility"}}}
{"api_name": "getPharmaceuticalInventory", "api_description": "Retrieve the current inventory of pharmaceutical products", "field": "Manufacturing/Pharmaceutical manufacturing", "parameters": {}, "required": [], "responses": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product"}, "quantity": {"type": "int", "description": "The quantity of the pharmaceutical product in stock"}}}
{"api_name": "getPharmaceuticalPrice", "api_description": "Retrieve the price information for a pharmaceutical product", "field": "Manufacturing/Pharmaceutical manufacturing", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product"}}, "required": ["product_name"], "responses": {"price": {"type": "float", "description": "The price of the pharmaceutical product"}}}
{"api_name": "getManufacturingCost", "api_description": "Retrieve the cost of manufacturing electronic products", "field": "Manufacturing/Electronics manufacturing", "parameters": {"product_name": {"type": "str", "description": "The name of the electronic product for which you want to retrieve the manufacturing cost (e.g., smartphone, laptop, TV)"}, "quantity": {"type": "int", "description": "The quantity of electronic products to be manufactured"}, "currency": {"type": "str", "description": "The desired currency in which the manufacturing cost will be provided (e.g., USD, EUR, GBP)"}}, "required": ["product_name", "quantity"], "responses": {"manufacturing_cost": {"type": "float", "description": "The cost of manufacturing the specified quantity of electronic products in the desired currency"}}}
{"api_name": "calculateChemicalConsumption", "api_description": "Calculate the consumption rate of a chemical", "field": "Manufacturing/Chemical manufacturing", "parameters": {"start_date": {"type": "str", "description": "The start date of the calculation (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the calculation (e.g., YYYY-MM-DD)"}, "chemical_name": {"type": "str", "description": "The name of the chemical"}, "production_quantity": {"type": "int", "description": "The quantity of the product manufactured during the specified period"}}, "required": ["start_date", "end_date", "chemical_name", "production_quantity"], "responses": {"consumption_rate": {"type": "float", "description": "The consumption rate of the chemical during the specified period"}, "unit": {"type": "str", "description": "The unit of measurement for the consumption rate"}}}
{"api_name": "getChemicalSafetyDataSheet", "api_description": "Retrieve safety data sheet for a chemical", "field": "Manufacturing/Chemical manufacturing", "parameters": {"chemical_name": {"type": "str", "description": "The name of the chemical"}}, "required": ["chemical_name"], "responses": {"safety_data_sheet": {"type": "str", "description": "The safety data sheet of the chemical"}}}
{"api_name": "addChemicalToInventory", "api_description": "Add a new chemical to the inventory", "field": "Manufacturing/Chemical manufacturing", "parameters": {"chemical_name": {"type": "str", "description": "The name of the chemical"}, "quantity": {"type": "int", "description": "The quantity of the chemical to be added"}, "unit": {"type": "str", "description": "The unit of measurement for the quantity"}}, "required": ["chemical_name", "quantity", "unit"], "responses": {"status": {"type": "str", "description": "The status of the operation (e.g., success, failure)"}}}
{"api_name": "calculateRawMaterialUsage", "api_description": "Calculate the raw material usage for paper and pulp manufacturing", "field": "Manufacturing/Paper and pulp manufacturing", "parameters": {"product_type": {"type": "str", "description": "The type of paper or pulp product being manufactured (e.g., Writing paper, Kraft paper, Tissue paper)"}, "production_quantity": {"type": "int", "description": "The quantity of the product being manufactured"}}, "required": ["product_type", "production_quantity"], "responses": {"raw_material_usage": {"type": "float", "description": "The amount of raw material needed for the specified product and quantity"}}}
{"api_name": "getFurnitureDetails", "api_description": "Retrieve detailed information about a furniture item", "field": "Manufacturing/Furniture manufacturing", "parameters": {"furniture_name": {"type": "str", "description": "The name of the furniture for which you want to get the details"}}, "required": ["furniture_name"], "responses": {"material": {"type": "str", "description": "The material of the specified furniture"}, "style": {"type": "str", "description": "The style of the specified furniture"}, "price": {"type": "float", "description": "The price of the specified furniture"}}}
{"api_name": "getFurnitureDimensions", "api_description": "Retrieve dimensions of a specific furniture item", "field": "Manufacturing/Furniture manufacturing", "parameters": {"furniture_id": {"type": "str", "description": "The ID of the furniture item for which you want to get dimensions"}}, "required": ["furniture_id"], "responses": {"length": {"type": "float", "description": "The length of the furniture item"}, "width": {"type": "float", "description": "The width of the furniture item"}, "height": {"type": "float", "description": "The height of the furniture item"}}}
{"api_name": "getFurniturePrice", "api_description": "Retrieve the price of a specific furniture item", "field": "Manufacturing/Furniture manufacturing", "parameters": {"furniture_id": {"type": "str", "description": "The ID of the furniture item for which you want to get the price"}}, "required": ["furniture_id"], "responses": {"price": {"type": "float", "description": "The price of the furniture item"}}}
{"api_name": "getFurnitureAssemblyInstructions", "api_description": "Retrieve assembly instructions for a specific furniture item", "field": "Manufacturing/Furniture manufacturing", "parameters": {"furniture_id": {"type": "str", "description": "The ID of the furniture item for which you want to get assembly instructions"}}, "required": ["furniture_id"], "responses": {"instructions": {"type": "str", "description": "Assembly instructions for the furniture item"}}}
{"api_name": "calculateGlassComposition", "api_description": "Calculate the composition of a glass material", "field": "Manufacturing/Ceramics and glass manufacturing", "parameters": {"glass_type": {"type": "str", "description": "Type of glass material (e.g., borosilicate, soda-lime, fused silica)"}}, "required": ["glass_type"], "responses": {"composition": {"type": "str", "description": "The composition of the glass material in terms of its constituent elements"}}}
{"api_name": "calculateCeramicDensity", "api_description": "Calculate the density of a ceramic material", "field": "Manufacturing/Ceramics and glass manufacturing", "parameters": {"ceramic_type": {"type": "str", "description": "Type of ceramic material (e.g., alumina, silicon carbide, zirconia)"}, "temperature": {"type": "int", "description": "Temperature at which the density is to be calculated (in Celsius)"}}, "required": ["ceramic_type", "temperature"], "responses": {"density": {"type": "float", "description": "The density of the ceramic material at the specified temperature"}}}
{"api_name": "estimateCeramicShrinkage", "api_description": "Estimate the shrinkage of a ceramic material during firing", "field": "Manufacturing/Ceramics and glass manufacturing", "parameters": {"ceramic_type": {"type": "str", "description": "Type of ceramic material (e.g., porcelain, stoneware, earthenware)"}, "initial_size": {"type": "float", "description": "Initial size of the ceramic piece before firing (in mm)"}}, "required": ["ceramic_type", "initial_size"], "responses": {"shrinkage": {"type": "float", "description": "The percentage shrinkage of the ceramic material during firing"}}}
{"api_name": "createPainting", "api_description": "Create a new painting", "field": "Art and Design/Painting", "parameters": {"title": {"type": "str", "description": "The title of the painting"}, "artist": {"type": "str", "description": "The artist who created the painting"}, "medium": {"type": "str", "description": "The medium used in the painting (e.g., oil, acrylic, watercolor)"}, "year": {"type": "int", "description": "The year when the painting was created"}, "dimensions": {"type": "str", "description": "The dimensions of the painting (e.g., 24x36 inches, 50x70 cm)"}, "price": {"type": "float", "description": "The price of the painting in a specific currency"}}, "required": ["title", "artist", "medium"], "responses": {"painting_id": {"type": "str", "description": "The unique identifier of the created painting"}}}
{"api_name": "getDrawingDetails", "api_description": "Retrieve details (such as dimensions, medium, and artist) of a specific drawing", "field": "Art and Design/Drawing", "parameters": {"drawing_id": {"type": "int", "description": "ID of the drawing"}}, "required": ["drawing_id"], "responses": {"dimensions": {"type": "str", "description": "Dimensions of the drawing"}, "medium": {"type": "str", "description": "Medium used for the drawing"}, "artist": {"type": "str", "description": "Artist who created the drawing"}}}
{"api_name": "getPhotoInfo", "api_description": "Retrieve information about a specific photograph", "field": "Art and Design/Photography", "parameters": {"photo_id": {"type": "str", "description": "The unique identifier of the photograph"}}, "required": ["photo_id"], "responses": {"author": {"type": "str", "description": "Name of the photographer"}, "title": {"type": "str", "description": "Title of the photograph"}, "location": {"type": "str", "description": "The location where the photograph was taken"}, "description": {"type": "str", "description": "Description of the photograph"}}}
{"api_name": "getPhotoExif", "api_description": "Retrieve EXIF metadata of a photograph", "field": "Art and Design/Photography", "parameters": {"photo_id": {"type": "str", "description": "The unique identifier of the photograph"}}, "required": ["photo_id"], "responses": {"camera_make": {"type": "str", "description": "Make/brand of the camera used"}, "camera_model": {"type": "str", "description": "Model of the camera used"}, "aperture": {"type": "float", "description": "Aperture value of the photograph"}, "shutter_speed": {"type": "str", "description": "Shutter speed value of the photograph"}, "iso": {"type": "int", "description": "ISO sensitivity value of the photograph"}}}
{"api_name": "getSculptureInfo", "api_description": "Retrieve information about a sculpture", "field": "Art and Design/Sculpture", "parameters": {"sculpture_name": {"type": "str", "description": "The name of the sculpture (e.g., David, The Thinker, Venus de Milo)"}}, "required": ["sculpture_name"], "responses": {"artist": {"type": "str", "description": "The artist who created the sculpture"}, "year": {"type": "int", "description": "The year in which the sculpture was created"}, "material": {"type": "str", "description": "The material used to make the sculpture"}, "dimensions": {"type": "str", "description": "The dimensions of the sculpture"}}}
{"api_name": "getSculptureDetails", "api_description": "Retrieve details of a specific sculpture", "field": "Art and Design/Sculpture", "parameters": {"sculpture_id": {"type": "int", "description": "The ID of the sculpture you want to get details for"}}, "required": ["sculpture_id"], "responses": {"name": {"type": "str", "description": "The name of the sculpture"}, "artist": {"type": "str", "description": "The artist who created the sculpture"}, "year": {"type": "int", "description": "The year the sculpture was created"}, "material": {"type": "str", "description": "The material used in the sculpture"}, "description": {"type": "str", "description": "A brief description of the sculpture"}}}
{"api_name": "getPrintmakingInformation", "api_description": "Retrieve information about printmaking", "field": "Art and Design/Printmaking", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about printmaking"}}}
{"api_name": "getTextileArtInfo", "api_description": "Retrieve information about textile art", "field": "Art and Design/Textile Art", "parameters": {"art_form": {"type": "str", "description": "The specific form of textile art you want information on (e.g., embroidery, weaving, knitting)"}, "material": {"type": "str", "description": "The type of material used in the textile art (e.g., silk, cotton, wool)"}, "technique": {"type": "str", "description": "The technique used in creating the textile art (e.g., applique, patchwork, batik)"}}, "required": ["art_form"], "responses": {"info": {"type": "str", "description": "Information about the specified textile art form"}}}
{"api_name": "createGraphic", "api_description": "Create a new graphic design", "field": "Art and Design/Graphic Design", "parameters": {"width": {"type": "int", "description": "The width of the graphic in pixels"}, "height": {"type": "int", "description": "The height of the graphic in pixels"}, "background_color": {"type": "str", "description": "The background color of the graphic (e.g., #FFFFFF)"}, "text": {"type": "str", "description": "The text to be included in the graphic"}}, "required": ["width", "height"], "responses": {"graphic_id": {"type": "int", "description": "The unique ID of the created graphic design"}, "url": {"type": "str", "description": "The URL where the created graphic can be accessed"}}}
{"api_name": "updateGraphicDesignProject", "api_description": "Update an existing graphic design project", "field": "Art and Design/Graphic Design", "parameters": {"project_id": {"type": "int", "description": "The ID of the graphic design project to be updated"}, "client": {"type": "str", "description": "The updated client name for the project"}, "project_name": {"type": "str", "description": "The updated name of the graphic design project"}, "requirements": {"type": "str", "description": "The updated requirements and details of the project"}}, "required": ["project_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the project update was successful"}}}
{"api_name": "convertTextToTypography", "api_description": "Convert a plain text into a specific typography style", "field": "Art and Design/Typography", "parameters": {"text": {"type": "str", "description": "The plain text that needs to be converted into typography style"}, "style": {"type": "str", "description": "The desired typography style for the text (e.g., bold, italic, underline)"}, "color": {"type": "str", "description": "The desired color of the text (e.g., red, blue, #FF0000)"}}, "required": ["text", "style"], "responses": {"converted_text": {"type": "str", "description": "The converted text in the specified typography style and color"}}}
{"api_name": "getTypographyDetails", "api_description": "Retrieve details about a specific typography style", "field": "Art and Design/Typography", "parameters": {"font_name": {"type": "str", "description": "The name of the typography style to retrieve details for (e.g., Arial, Helvetica, Times New Roman)"}, "language": {"type": "str", "description": "The language in which the typography is used (e.g., English, French, Spanish)"}, "sample_text": {"type": "str", "description": "A sample text to display in the specified typography style"}}, "required": ["font_name"], "responses": {"font_size": {"type": "int", "description": "The size of the typography in points"}, "line_height": {"type": "float", "description": "The vertical spacing between lines of the typography"}, "character_set": {"type": "str", "description": "The set of characters supported by the typography style"}}}
{"api_name": "generateTypographySample", "api_description": "Generate a sample of typography using provided parameters", "field": "Art and Design/Typography", "parameters": {"text": {"type": "str", "description": "The text to be displayed using typography"}, "font": {"type": "str", "description": "The font to be used for the typography"}, "size": {"type": "int", "description": "The size of the typography in pixels"}}, "required": ["text"], "responses": {"typography_sample": {"type": "str", "description": "A sample image showcasing the provided text rendered in the specified font and size"}}}
{"api_name": "getTypographyInfo", "api_description": "Retrieve information about typography", "field": "Art and Design/Typography", "parameters": {"font_type": {"type": "str", "description": "The type of font you want information about (e.g., serif, sans-serif, script)"}, "font_size": {"type": "int", "description": "The size of the font (e.g., 12, 18, 24)"}, "font_style": {"type": "str", "description": "The style of the font (e.g., italic, bold, regular)"}, "alignment": {"type": "str", "description": "The alignment of the text (e.g., left, center, right)"}}, "required": ["font_type", "font_size"], "responses": {"typography_info": {"type": "str", "description": "Information about the specified typography"}}}
{"api_name": "getJewelryPriceRange", "api_description": "Retrieve price range for jewelry", "field": "Art and Design/Jewelry Design", "parameters": {}, "required": [], "responses": {"price_range": {"type": "str", "description": "The price range for jewelry (e.g., $100 - $500)"}}}
{"api_name": "getRoomDimensions", "api_description": "Retrieve the dimensions of a room", "field": "Art and Design/Interior Design", "parameters": {"room_name": {"type": "str", "description": "The name or identifier of the room (e.g., living room, bedroom, kitchen)"}, "unit": {"type": "str", "description": "The desired unit for the dimensions (e.g., meters, feet)"}}, "required": ["room_name"], "responses": {"length": {"type": "float", "description": "The length of the room"}, "width": {"type": "float", "description": "The width of the room"}, "height": {"type": "float", "description": "The height of the room"}, "unit": {"type": "str", "description": "The unit in which the dimensions are provided"}}}
{"api_name": "getRoomColorScheme", "api_description": "Retrieve the color scheme for a room", "field": "Art and Design/Interior Design", "parameters": {"room_name": {"type": "str", "description": "The name or identifier of the room (e.g., living room, bedroom, kitchen)"}}, "required": ["room_name"], "responses": {"color_scheme": {"type": "str", "description": "The color scheme of the room"}}}
{"api_name": "getBuildingDimensions", "api_description": "Retrieve the dimensions of a specific building", "field": "Art and Design/Architectural Design", "parameters": {"building_name": {"type": "str", "description": "The name of the building (e.g., Burj Khalifa, Taj Mahal)"}}, "required": ["building_name"], "responses": {"height": {"type": "float", "description": "The height of the building in meters"}, "width": {"type": "float", "description": "The width of the building in meters"}, "depth": {"type": "float", "description": "The depth of the building in meters"}}}
{"api_name": "getExhibition", "api_description": "Retrieve exhibition information", "field": "Art and Design/Exhibition Design", "parameters": {"exhibition_id": {"type": "str", "description": "The unique ID of the exhibition"}}, "required": ["exhibition_id"], "responses": {"title": {"type": "str", "description": "The title of the exhibition"}, "location": {"type": "str", "description": "The location of the exhibition"}, "start_date": {"type": "str", "description": "The start date of the exhibition"}, "end_date": {"type": "str", "description": "The end date of the exhibition"}}}
{"api_name": "getExhibitionDetails", "api_description": "Retrieve details of an exhibition", "field": "Art and Design/Exhibition Design", "parameters": {"exhibition_id": {"type": "str", "description": "The unique identifier of the exhibition (e.g., 12345)"}, "location": {"type": "str", "description": "The location of the exhibition (e.g., New York, Paris, London)"}}, "required": ["exhibition_id"], "responses": {"title": {"type": "str", "description": "The title of the exhibition"}, "description": {"type": "str", "description": "A brief description of the exhibition"}, "start_date": {"type": "str", "description": "The start date of the exhibition (e.g., DD-MM-YYYY)"}, "end_date": {"type": "str", "description": "The end date of the exhibition (e.g., DD-MM-YYYY)"}, "location": {"type": "str", "description": "The location of the exhibition"}}}
{"api_name": "getDigitalArt", "api_description": "Retrieve digital art information", "field": "Art and Design/Digital Art", "parameters": {"artist": {"type": "str", "description": "The name of the artist"}, "style": {"type": "str", "description": "The style of the digital art (e.g., abstract, surreal, pop art)"}, "year": {"type": "int", "description": "The year the artwork was created"}}, "required": ["artist", "style"], "responses": {"artwork": {"type": "str", "description": "The digital artwork information"}, "year": {"type": "int", "description": "The year the artwork was created"}}}
{"api_name": "createMixedMediaArt", "api_description": "Create a new piece of mixed media art", "field": "Art and Design/Mixed Media", "parameters": {"title": {"type": "str", "description": "Title of the artwork"}, "artist": {"type": "str", "description": "Name of the artist"}, "materials": {"type": "str", "description": "List of materials used in the artwork (e.g., canvas, acrylic paint, paper, found objects)"}}, "required": ["title", "artist", "materials"], "responses": {"success": {"type": "bool", "description": "Indicates whether the artwork was successfully created"}, "artwork_id": {"type": "str", "description": "Unique identifier for the created artwork"}}}
{"api_name": "getStreetArtDetails", "api_description": "Retrieve details of a specific street art piece", "field": "Art and Design/Street Art", "parameters": {"art_id": {"type": "str", "description": "The unique ID of the street art piece"}}, "required": ["art_id"], "responses": {"artist": {"type": "str", "description": "The artist who created the street art"}, "location": {"type": "str", "description": "The location where the street art is"}, "description": {"type": "str", "description": "A description of the street art piece"}}}
{"api_name": "getVideoArtists", "api_description": "Retrieve information about video art artists", "field": "Art and Design/Video Art", "parameters": {"nationality": {"type": "str", "description": "The artist's nationality"}, "movement": {"type": "str", "description": "The art movement associated with the artist"}}, "required": [], "responses": {"artist_name": {"type": "str", "description": "The name of the video art artist"}, "nationality": {"type": "str", "description": "The artist's nationality"}, "movement": {"type": "str", "description": "The art movement associated with the artist"}}}
{"api_name": "getSoundArtWork", "api_description": "Retrieve information about sound artworks", "field": "Art and Design/Sound Art", "parameters": {"title": {"type": "str", "description": "The title of the sound artwork"}, "artist": {"type": "str", "description": "The artist who created the sound artwork"}, "year": {"type": "int", "description": "The year the sound artwork was created"}}, "required": ["title", "artist"], "responses": {"title": {"type": "str", "description": "The title of the sound artwork"}, "artist": {"type": "str", "description": "The artist who created the sound artwork"}, "year": {"type": "int", "description": "The year the sound artwork was created"}, "description": {"type": "str", "description": "A brief description of the sound artwork"}}}
{"api_name": "getArtMovements", "api_description": "Retrieve information about different art movements", "field": "Art and Design/Art History", "parameters": {}, "required": [], "responses": {"art_movements": {"type": "str", "description": "List of art movements with a brief description"}}}
{"api_name": "startArtTherapySession", "api_description": "Starts a new art therapy session", "field": "Art and Design/Art Therapy", "parameters": {"client_id": {"type": "str", "description": "The unique ID of the client participating in the therapy session"}, "session_type": {"type": "str", "description": "The type of art therapy session (e.g., painting, sculpting, drawing)"}}, "required": ["client_id"], "responses": {"session_id": {"type": "str", "description": "The unique ID of the art therapy session"}, "start_time": {"type": "str", "description": "The start time of the art therapy session"}}}
{"api_name": "getArttherapyProgress", "api_description": "Retrieve progress and insights from art therapy sessions", "field": "Art and Design/Art Therapy", "parameters": {"client_id": {"type": "str", "description": "The unique ID of the client for whom the progress is requested"}, "time_period": {"type": "str", "description": "The time period for which the progress is requested (e.g., past week, past month, overall)"}}, "required": ["client_id"], "responses": {"progress_summary": {"type": "str", "description": "A summary of the progress made by the client"}, "insights": {"type": "str", "description": "Insights and observations based on the art therapy sessions"}}}
{"api_name": "getArtCriticism", "api_description": "Retrieve art criticism for a specific artwork or artist", "field": "Art and Design/Art Criticism", "parameters": {"artwork": {"type": "str", "description": "The name of the artwork (e.g., Mona Lisa, The Starry Night)"}, "artist": {"type": "str", "description": "The name of the artist (e.g., Leonardo da Vinci, Vincent van Gogh)"}}, "required": ["artwork"], "responses": {"criticism": {"type": "str", "description": "The art criticism for the specified artwork or artist"}}}
{"api_name": "getCuratorialStudies", "api_description": "Retrieve information about curatorial studies in the field of art and design", "field": "Art and Design/Curatorial Studies", "parameters": {"degree_type": {"type": "str", "description": "Specify the type of degree (e.g., Bachelor's, Master's, Ph.D.)"}, "program_location": {"type": "str", "description": "Specify the location of the program (e.g., New York, London, Paris)"}, "study_duration": {"type": "str", "description": "Specify the duration of the study (e.g., full-time, part-time)"}, "language_requirements": {"type": "str", "description": "Specify the language proficiency required for the program (e.g., English, French, Spanish)"}, "application_deadline": {"type": "str", "description": "Specify the application deadline for the program (e.g., January 1st, May 15th, September 30th)"}}, "required": ["degree_type", "program_location"], "responses": {"program_name": {"type": "str", "description": "Name of the curatorial studies program"}, "degree_type": {"type": "str", "description": "Type of degree offered by the program"}, "program_location": {"type": "str", "description": "Location of the program"}, "study_duration": {"type": "str", "description": "Duration of the study program"}, "language_requirements": {"type": "str", "description": "Language proficiency requirements for the program"}, "application_deadline": {"type": "str", "description": "Application deadline for the program"}}}
{"api_name": "getArtworkCondition", "api_description": "Retrieve the condition and conservation information of an artwork", "field": "Art and Design/Art Conservation", "parameters": {"artwork_id": {"type": "str", "description": "The unique identifier of the artwork for which you want to retrieve the information"}, "location": {"type": "str", "description": "The location where the artwork is currently housed (e.g., museum, gallery, private collection)"}, "conservation_level": {"type": "str", "description": "Specify the desired conservation level of the artwork (e.g., minimal, moderate, extensive)"}, "include_details": {"type": "bool", "description": "Specify whether to include detailed information on the conservation process (true or false)"}, "include_images": {"type": "bool", "description": "Specify whether to include images of the artwork and its conservation process (true or false)"}}, "required": ["artwork_id"], "responses": {"artwork_condition": {"type": "str", "description": "The current condition of the artwork"}, "conservation_information": {"type": "str", "description": "Details about the conservation process and treatments performed on the artwork"}, "images": {"type": "str", "description": "Images depicting the artwork and its conservation process"}}}
{"api_name": "cleanArtwork", "api_description": "Clean an artwork to remove dirt and debris", "field": "Art and Design/Art Conservation", "parameters": {"artwork_id": {"type": "str", "description": "The ID of the artwork to be cleaned"}, "cleaning_method": {"type": "str", "description": "The method used for cleaning the artwork (e.g., dry cleaning, wet cleaning)"}, "intensity": {"type": "int", "description": "The intensity level of the cleaning process (1-10)"}, "time_required": {"type": "str", "description": "The approximate time required for the cleaning process"}}, "required": ["artwork_id", "cleaning_method"], "responses": {"cleaned_artwork_id": {"type": "str", "description": "The ID of the artwork after cleaning"}}}
{"api_name": "restoreArtwork", "api_description": "Restore damaged parts of an artwork", "field": "Art and Design/Art Conservation", "parameters": {"artwork_id": {"type": "str", "description": "The ID of the artwork to be restored"}, "damaged_parts": {"type": "str", "description": "The description of damaged parts of the artwork"}, "restoration_method": {"type": "str", "description": "The method used for restoration (e.g., retouching, inpainting)"}, "time_required": {"type": "str", "description": "The approximate time required for the restoration process"}}, "required": ["artwork_id", "damaged_parts", "restoration_method"], "responses": {"restored_artwork_id": {"type": "str", "description": "The ID of the artwork after restoration"}}}
{"api_name": "getArtWriting", "api_description": "Retrieve written content about art", "field": "Art and Design/Art Writing", "parameters": {"keyword": {"type": "str", "description": "A keyword to search for specific art writing (e.g., painting, sculpture)"}, "language": {"type": "str", "description": "The language in which the art writing is desired (e.g., English, French, Spanish)"}}, "required": ["keyword"], "responses": {"content": {"type": "str", "description": "The written content about art related to the specified keyword"}, "author": {"type": "str", "description": "The author of the art writing"}, "publication_date": {"type": "str", "description": "The date when the art writing was published"}}}
{"api_name": "setArtisticDirection", "api_description": "Set the artistic direction for a project or production", "field": "Art and Design/Artistic Direction", "parameters": {"project_name": {"type": "str", "description": "The name of the project or production"}, "director_name": {"type": "str", "description": "The name of the artistic director"}, "theme": {"type": "str", "description": "The theme or concept of the artistic direction"}}, "required": ["project_name", "director_name", "theme"], "responses": {"success": {"type": "bool", "description": "Indicates if the artistic direction was successfully set"}}}
{"api_name": "getArtAdminInfo", "api_description": "Retrieve information about art administration", "field": "Art and Design/Art Administration", "parameters": {}, "required": [], "responses": {"info": {"type": "str", "description": "Information about art administration"}}}
{"api_name": "getShipmentStatus", "api_description": "Retrieve the current status of a shipment", "field": "Logistics/Transportation management", "parameters": {"shipment_id": {"type": "str", "description": "The unique identifier of the shipment"}, "carrier": {"type": "str", "description": "The name of the carrier handling the shipment"}}, "required": ["shipment_id", "carrier"], "responses": {"status": {"type": "str", "description": "The current status of the shipment"}, "estimated_delivery_date": {"type": "str", "description": "The estimated delivery date of the shipment"}, "location": {"type": "str", "description": "The current location of the shipment"}}}
{"api_name": "trackParcel", "api_description": "Track the progress of a parcel", "field": "Logistics/Transportation management", "parameters": {"parcel_number": {"type": "str", "description": "The unique number of the parcel"}, "shipping_service": {"type": "str", "description": "The shipping service used for the parcel"}, "language": {"type": "str", "description": "The language in which to receive tracking updates (e.g., English, Spanish, French)"}}, "required": ["parcel_number", "shipping_service"], "responses": {"current_status": {"type": "str", "description": "The current status of the parcel"}, "location": {"type": "str", "description": "The current location of the parcel"}, "delivery_date": {"type": "str", "description": "The estimated delivery date of the parcel"}}}
{"api_name": "getInventory", "api_description": "Retrieve inventory information for a specific product", "field": "Logistics/Inventory management", "parameters": {"product_id": {"type": "str", "description": "The ID of the product for which you want to retrieve inventory information"}}, "required": ["product_id"], "responses": {"available_quantity": {"type": "int", "description": "The available quantity of the specified product in the inventory"}, "location": {"type": "str", "description": "The location where the product is stored"}}}
{"api_name": "checkInventory", "api_description": "Check the inventory of a specific product", "field": "Logistics/Inventory management", "parameters": {"product_code": {"type": "str", "description": "The code of the product to check inventory for (e.g., ABC123)"}, "location": {"type": "str", "description": "The location to check inventory at (e.g., warehouse A, store B)"}}, "required": ["product_code"], "responses": {"available_quantity": {"type": "int", "description": "The available quantity of the product at the specified location"}}}
{"api_name": "getStockStatus", "api_description": "Retrieve the stock status of a product", "field": "Logistics/Inventory management", "parameters": {"product_code": {"type": "str", "description": "The unique code for the product (e.g., SKU12345, ABC123)"}}, "required": ["product_code"], "responses": {"status": {"type": "str", "description": "The stock status of the product (e.g., In Stock, Out of Stock)"}, "message": {"type": "str", "description": "Additional information or error message in case of failure"}}}
{"api_name": "updateInventoryLevel", "api_description": "Update the inventory level of a product", "field": "Logistics/Inventory management", "parameters": {"product_id": {"type": "str", "description": "The ID of the product for which you want to update the inventory level"}, "location": {"type": "str", "description": "The location where you want to update the inventory level"}, "quantity": {"type": "int", "description": "The new quantity of the product in the inventory"}}, "required": ["product_id", "location", "quantity"], "responses": {"success": {"type": "bool", "description": "Indicates whether the inventory level update was successful"}}}
{"api_name": "getWarehouseInformation", "api_description": "Retrieve information about a warehouse", "field": "Logistics/Warehousing", "parameters": {"warehouse_id": {"type": "str", "description": "The ID of the warehouse you want to get information about (e.g., WH001, WH002)"}, "location": {"type": "str", "description": "The location of the warehouse (e.g., New York, London, Beijing)"}}, "required": ["warehouse_id"], "responses": {"warehouse_name": {"type": "str", "description": "The name of the warehouse"}, "inventory_count": {"type": "int", "description": "The total count of items stored in the warehouse"}}}
{"api_name": "getWarehouseCapacity", "api_description": "Retrieve the current capacity of a warehouse", "field": "Logistics/Warehousing", "parameters": {"warehouse_id": {"type": "int", "description": "The ID of the warehouse for which you want to get the capacity"}}, "required": ["warehouse_id"], "responses": {"capacity": {"type": "int", "description": "The current capacity of the warehouse"}}}
{"api_name": "checkProductAvailability", "api_description": "Check the availability of a product in a warehouse", "field": "Logistics/Warehousing", "parameters": {"warehouse_id": {"type": "int", "description": "The ID of the warehouse in which you want to check the availability"}, "product_id": {"type": "str", "description": "The ID or name of the product you want to check"}}, "required": ["warehouse_id", "product_id"], "responses": {"availability": {"type": "bool", "description": "Indicates whether the product is available in the warehouse"}}}
{"api_name": "updateWarehouseLocation", "api_description": "Update the location of a warehouse", "field": "Logistics/Warehousing", "parameters": {"warehouse_id": {"type": "int", "description": "The ID of the warehouse you want to update"}, "new_location": {"type": "str", "description": "The new location of the warehouse"}}, "required": ["warehouse_id", "new_location"], "responses": {"success": {"type": "bool", "description": "Indicates whether the update was successful"}}}
{"api_name": "getOrderStatus", "api_description": "Retrieve status of a specific order", "field": "Logistics/Supply chain planning", "parameters": {"order_id": {"type": "str", "description": "The ID of the order for which you want to get the status"}}, "required": ["order_id"], "responses": {"order_status": {"type": "str", "description": "The current status of the specified order"}}}
{"api_name": "getSupplierPerformance", "api_description": "Retrieve performance metrics for a specific supplier", "field": "Logistics/Supply chain planning", "parameters": {"supplier_id": {"type": "str", "description": "The ID of the supplier for which you want to retrieve performance metrics"}}, "required": ["supplier_id"], "responses": {"performance_metrics": {"type": "str", "description": "The performance metrics of the specified supplier"}}}
{"api_name": "getDistributionStatus", "api_description": "Retrieve current distribution status for a particular order", "field": "Logistics/Distribution", "parameters": {"order_number": {"type": "str", "description": "The unique identifier of the order for which you want to retrieve distribution status"}}, "required": ["order_number"], "responses": {"status": {"type": "str", "description": "The current distribution status of the order (e.g., in transit, delivered, out for delivery)"}, "estimated_delivery_date": {"type": "str", "description": "The estimated delivery date of the order"}, "carrier": {"type": "str", "description": "The logistics carrier responsible for the distribution"}}}
{"api_name": "createShipmentLabel", "api_description": "Create a shipment label for an order", "field": "Logistics/Order fulfillment", "parameters": {"order_id": {"type": "str", "description": "The ID of the order for which you want to create the shipment label"}}, "required": ["order_id"], "responses": {"label_url": {"type": "str", "description": "The URL of the created shipment label"}}}
{"api_name": "trackShipment", "api_description": "Track the progress of a shipment", "field": "Logistics/Order fulfillment", "parameters": {"tracking_number": {"type": "str", "description": "The tracking number of the shipment you want to track"}}, "required": ["tracking_number"], "responses": {"status": {"type": "str", "description": "The current status of the shipment (e.g., in transit, out for delivery)"}, "location": {"type": "str", "description": "The current location of the shipment"}, "estimated_delivery_date": {"type": "str", "description": "The estimated delivery date of the shipment"}}}
{"api_name": "getOrderDetails", "api_description": "Retrieve the detailed information of an order", "field": "Logistics/Order fulfillment", "parameters": {"order_id": {"type": "str", "description": "The unique identifier of the order"}}, "required": ["order_id"], "responses": {"order_details": {"type": "str", "description": "The detailed information of the order"}}}
{"api_name": "trackOrder", "api_description": "Track the shipment of an order", "field": "Logistics/Order fulfillment", "parameters": {"tracking_number": {"type": "str", "description": "The tracking number of the shipment"}}, "required": ["tracking_number"], "responses": {"shipment_status": {"type": "str", "description": "The current status of the shipment"}}}
{"api_name": "shipOrder", "api_description": "Ship an order", "field": "Logistics/Order fulfillment", "parameters": {"order_id": {"type": "str", "description": "The ID of the order to be shipped"}, "shipping_address": {"type": "str", "description": "The address where the order should be shipped to"}, "customer_id": {"type": "str", "description": "The ID of the customer who placed the order"}}, "required": ["order_id", "shipping_address"], "responses": {"success": {"type": "bool", "description": "Indicates whether the order was successfully shipped"}}}
{"api_name": "createReturnLabel", "api_description": "Create a return label for a package", "field": "Logistics/Reverse logistics", "parameters": {"package_id": {"type": "str", "description": "The unique identifier of the package"}, "reason": {"type": "str", "description": "The reason for return (e.g., damaged, incorrect item)"}, "address": {"type": "str", "description": "The address where the package should be returned (e.g., 123 Main St, New York)"}, "shipping_method": {"type": "str", "description": "The preferred shipping method for return (e.g., USPS, UPS, Fedex)"}}, "required": ["package_id", "reason", "address"], "responses": {"return_label_url": {"type": "str", "description": "The URL of the generated return label"}, "return_instructions": {"type": "str", "description": "Instructions for returning the package (e.g., drop off at nearest post office)"}}}
{"api_name": "createReturnOrder", "api_description": "Create a reverse logistics return order", "field": "Logistics/Reverse logistics", "parameters": {"order_id": {"type": "str", "description": "The unique identifier of the original order", "example": "123456"}, "reason": {"type": "str", "description": "The reason for returning the order", "example": "Damaged item"}, "return_address": {"type": "str", "description": "The address where the return should be sent", "example": "123 Main St, City, State, Zip"}, "contact_name": {"type": "str", "description": "The name of the person to contact for the return", "example": "John Doe"}, "contact_phone": {"type": "str", "description": "The phone number to contact for the return", "example": "+1 123-456-7890"}, "email": {"type": "str", "description": "The email address for communication regarding the return", "example": "example@example.com"}}, "required": ["order_id", "reason", "return_address"], "responses": {"return_order_id": {"type": "str", "description": "The unique identifier of the created return order"}, "status": {"type": "str", "description": "The status of the return order", "example": "Created"}}}
{"api_name": "trackPackage", "api_description": "Track the progress of a package during reverse logistics", "field": "Logistics/Reverse logistics", "parameters": {"tracking_number": {"type": "str", "description": "The tracking number of the package being returned"}, "return_reason": {"type": "str", "description": "The reason for returning the package (e.g., damaged, wrong item)"}, "return_method": {"type": "str", "description": "The method used to return the package (e.g., courier, postal service)"}}, "required": ["tracking_number"], "responses": {"status": {"type": "str", "description": "The current status of the returned package"}, "estimated_delivery_date": {"type": "str", "description": "The estimated delivery date of the returned package"}}}
{"api_name": "schedulePickup", "api_description": "Schedule a pickup for a package during reverse logistics", "field": "Logistics/Reverse logistics", "parameters": {"pickup_date": {"type": "str", "description": "The desired date for the package pickup"}, "pickup_address": {"type": "str", "description": "The address where the package should be picked up"}, "pickup_time": {"type": "str", "description": "The desired time range for the package pickup"}}, "required": ["pickup_date", "pickup_address"], "responses": {"pickup_confirmation": {"type": "str", "description": "The confirmation number for the scheduled package pickup"}}}
{"api_name": "processReturn", "api_description": "Process return of products", "field": "Logistics/Reverse logistics", "parameters": {"order_number": {"type": "str", "description": "The order number of the product return"}, "return_reason": {"type": "str", "description": "The reason for returning the product"}, "return_address": {"type": "str", "description": "The address where the product should be returned"}}, "required": ["order_number", "return_reason"], "responses": {"status": {"type": "str", "description": "The status of the return processing"}}}
{"api_name": "getReturnInstructions", "api_description": "Retrieve return instructions for a product", "field": "Logistics/Reverse logistics", "parameters": {"product_id": {"type": "str", "description": "The unique identifier of the product to return"}, "reason": {"type": "str", "description": "The reason for returning the product (e.g., wrong size, damaged, not as described)"}, "customer_info": {"type": "str", "description": "Customer information for return process (e.g., name, email, phone)"}, "shipping_address": {"type": "str", "description": "The shipping address where the product should be returned"}}, "required": ["product_id", "reason", "customer_info", "shipping_address"], "responses": {"instructions": {"type": "str", "description": "Return instructions for the specified product"}}}
{"api_name": "trackReturn", "api_description": "Track the status of a return", "field": "Logistics/Reverse logistics", "parameters": {"return_id": {"type": "str", "description": "The ID of the return for which you want to track the status"}}, "required": ["return_id"], "responses": {"status": {"type": "str", "description": "The current status of the return"}, "history": {"type": "str", "description": "The history of events associated with the return"}}}
{"api_name": "getShippingRate", "api_description": "Retrieve the shipping rate for international logistics", "field": "Logistics/International logistics", "parameters": {"origin": {"type": "str", "description": "The location from where the shipment will be sent (e.g., Shanghai, New York, London)"}, "destination": {"type": "str", "description": "The location to where the shipment will be sent (e.g., Sydney, Tokyo, Dubai)"}, "weight": {"type": "float", "description": "The weight of the shipment in kilograms"}}, "required": ["origin", "destination", "weight"], "responses": {"rate": {"type": "float", "description": "The shipping rate for the specified shipment"}}}
{"api_name": "get3PLTrackingInfo", "api_description": "Retrieves the tracking information of a shipped product through 3PL", "field": "Logistics/Third-party logistics (3PL)", "parameters": {"tracking_number": {"type": "str", "description": "The tracking number of the shipped product"}}, "required": ["tracking_number"], "responses": {"tracking_info": {"type": "str", "description": "The tracking information of the shipped product"}}}
{"api_name": "getFreightCost", "api_description": "Retrieve the cost of freight forwarding for a specific shipment", "field": "Logistics/Freight forwarding", "parameters": {"origin": {"type": "str", "description": "The origin location of the shipment (e.g., Shanghai, New York, London)"}, "destination": {"type": "str", "description": "The destination location of the shipment (e.g., Tokyo, Sydney, Paris)"}, "weight": {"type": "float", "description": "The weight of the shipment in kilograms"}}, "required": ["origin", "destination", "weight"], "responses": {"cost": {"type": "float", "description": "The cost of freight forwarding for the shipment"}}}
{"api_name": "transferInventory", "api_description": "Transfer inventory from one location to another", "field": "Logistics/Inventory control", "parameters": {"item_code": {"type": "str", "description": "The code of the item to transfer inventory for (e.g., ABC123)"}, "source_location": {"type": "str", "description": "The source location from where inventory will be transferred (e.g., Warehouse A)"}, "destination_location": {"type": "str", "description": "The destination location where inventory will be transferred (e.g., Store B)"}, "quantity": {"type": "int", "description": "The quantity of the item to transfer"}}, "required": ["item_code", "source_location", "destination_location", "quantity"], "responses": {"success": {"type": "bool", "description": "Indicates if the inventory transfer was successful"}}}
{"api_name": "getLogisticsData", "api_description": "Retrieve logistics data analytics", "field": "Logistics/Data analytics in logistics", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve logistics data"}, "time_range": {"type": "str", "description": "Specify a time range for the logistics data (e.g., last 7 days, last month)"}, "product_category": {"type": "str", "description": "Specify a product category for the logistics data (e.g., electronics, clothing)"}}, "required": ["location"], "responses": {"analytics": {"type": "str", "description": "The logistics data analytics for the specified location and time range"}}}
{"api_name": "getGreenLogisticsInfo", "api_description": "Retrieve information on green logistics solutions", "field": "Logistics/Green logistics", "parameters": {"location": {"type": "str", "description": "The location for which you want to get green logistics information (e.g., city name)"}, "service_type": {"type": "str", "description": "Specify the type of green logistics service desired (e.g., delivery, transportation)"}}, "required": ["location"], "responses": {"service_provider": {"type": "str", "description": "The name of the green logistics service provider"}, "service_options": {"type": "str", "description": "Available green logistics service options"}}}
{"api_name": "calculateGreenLogisticsScore", "api_description": "Calculate the green logistics score for a logistic company", "field": "Logistics/Green logistics", "parameters": {"renewable_energy_usage": {"type": "float", "description": "The percentage of renewable energy used by the logistic company (e.g., 80.5%)"}, "vehicle_emissions": {"type": "float", "description": "The average CO2 emissions per vehicle of the logistic company (e.g., 50.2 g/km)"}, "waste_management": {"type": "str", "description": "The waste management practices implemented by the logistic company (e.g., recycling, composting)"}}, "required": ["renewable_energy_usage", "vehicle_emissions", "waste_management"], "responses": {"green_logistics_score": {"type": "float", "description": "The calculated green logistics score for the logistic company"}}}
{"api_name": "calculateDeliveryTime", "api_description": "Calculate the estimated delivery time for a package", "field": "Logistics/Lean logistics", "parameters": {"origin": {"type": "str", "description": "The origin location of the package (e.g., Chicago, Los Angeles, London)"}, "destination": {"type": "str", "description": "The destination location of the package (e.g., New York, Sydney, Paris)"}, "weight": {"type": "float", "description": "The weight of the package in kilograms (e.g., 1.5, 2.3, 5.7)"}}, "required": ["origin", "destination", "weight"], "responses": {"delivery_time": {"type": "str", "description": "The estimated delivery time in days"}}}
{"api_name": "getDeliveryTime", "api_description": "Retrieve the estimated delivery time for a package", "field": "Logistics/Lean logistics", "parameters": {"tracking_number": {"type": "str", "description": "The tracking number of the package"}, "origin": {"type": "str", "description": "The origin location of the package (e.g., New York, London, Shanghai)"}, "destination": {"type": "str", "description": "The destination location of the package (e.g., Paris, Sydney, Tokyo)"}}, "required": ["tracking_number", "origin", "destination"], "responses": {"estimated_time": {"type": "str", "description": "The estimated delivery time for the package in hours"}}}
{"api_name": "calculateLeadTime", "api_description": "Calculate lead time for a logistics process", "field": "Logistics/Lean logistics", "parameters": {"start_time": {"type": "str", "description": "The start time of the logistics process (e.g., yyyy-mm-dd hh:mm:ss)"}, "end_time": {"type": "str", "description": "The end time of the logistics process (e.g., yyyy-mm-dd hh:mm:ss)"}, "number_of_orders": {"type": "int", "description": "The number of orders processed in the logistics process"}}, "required": ["start_time", "end_time", "number_of_orders"], "responses": {"lead_time": {"type": "float", "description": "The calculated lead time for the logistics process in hours"}}}
{"api_name": "trackDelivery", "api_description": "Track the last mile delivery of a package", "field": "Logistics/Last mile delivery", "parameters": {"tracking_number": {"type": "str", "description": "The tracking number of the package"}}, "required": ["tracking_number"], "responses": {"status": {"type": "str", "description": "The current status of the package"}, "location": {"type": "str", "description": "The current location of the package"}, "estimated_delivery_time": {"type": "str", "description": "The estimated delivery time of the package"}}}
{"api_name": "scheduleDelivery", "api_description": "Schedule the delivery of a package", "field": "Logistics/Last mile delivery", "parameters": {"parcel_size": {"type": "str", "description": "The size of the package (e.g., small, medium, large)"}, "pickup_address": {"type": "str", "description": "The pickup address of the package"}, "delivery_address": {"type": "str", "description": "The delivery address of the package"}, "preferred_delivery_time": {"type": "str", "description": "The preferred delivery time for the package"}}, "required": ["parcel_size", "pickup_address", "delivery_address"], "responses": {"scheduled_delivery_time": {"type": "str", "description": "The scheduled delivery time of the package"}}}
{"api_name": "getDeliveryCost", "api_description": "Calculate the cost of last mile delivery for a shipment", "field": "Logistics/Last mile delivery", "parameters": {"weight": {"type": "float", "description": "The weight of the shipment in kilograms"}, "dimensions": {"type": "str", "description": "The dimensions of the shipment in length x width x height format"}, "destination": {"type": "str", "description": "The destination address of the shipment"}}, "required": ["weight", "dimensions", "destination"], "responses": {"cost": {"type": "float", "description": "The calculated cost of last mile delivery"}}}
{"api_name": "createTemperatureControlledShipment", "api_description": "Create a new temperature-controlled shipment", "field": "Logistics/Cold chain logistics", "parameters": {"sender_name": {"type": "str", "description": "Name of the sender"}, "sender_address": {"type": "str", "description": "Address of the sender"}, "receiver_name": {"type": "str", "description": "Name of the receiver"}, "receiver_address": {"type": "str", "description": "Address of the receiver"}, "product": {"type": "str", "description": "Type of product to be shipped (e.g., perishable food, pharmaceuticals)"}, "temperature": {"type": "float", "description": "Required temperature for the shipment"}, "unit": {"type": "str", "description": "Unit of temperature (e.g., Celsius, Fahrenheit)"}}, "required": ["sender_name", "sender_address", "receiver_name", "receiver_address", "product", "temperature"], "responses": {"shipment_id": {"type": "int", "description": "ID of the created shipment"}, "status": {"type": "str", "description": "Status of the shipment"}}}
{"api_name": "customsDeclarationStatus", "api_description": "Check the status of customs declaration for a specific shipment", "field": "Logistics/Customs and trade compliance", "parameters": {"shipment_id": {"type": "str", "description": "The ID of the shipment for which you want to check the customs declaration status"}, "country": {"type": "str", "description": "The country where the shipment is being imported/exported to"}}, "required": ["shipment_id", "country"], "responses": {"status": {"type": "str", "description": "The current status of the customs declaration for the shipment"}, "estimated_delivery_date": {"type": "str", "description": "The estimated delivery date for the shipment"}}}
{"api_name": "calculateImportDuty", "api_description": "Calculate the import duty for a specific product", "field": "Logistics/Customs and trade compliance", "parameters": {"product_id": {"type": "str", "description": "The ID of the product for which you want to calculate the import duty"}, "country": {"type": "str", "description": "The country where the product is being imported to"}, "quantity": {"type": "int", "description": "The quantity of the product being imported"}, "value": {"type": "float", "description": "The value of the product being imported"}}, "required": ["product_id", "country", "quantity", "value"], "responses": {"duty_amount": {"type": "float", "description": "The calculated import duty amount for the product"}, "currency": {"type": "str", "description": "The currency in which the import duty is calculated"}}}
{"api_name": "checkTradeEmbargo", "api_description": "Check if a specific country has any trade embargoes or restrictions", "field": "Logistics/Customs and trade compliance", "parameters": {"country": {"type": "str", "description": "The country for which you want to check trade embargoes"}}, "required": ["country"], "responses": {"has_embargo": {"type": "bool", "description": "Indicates if the country has any trade embargoes or restrictions"}, "embargo_details": {"type": "str", "description": "Additional details about the trade embargoes or restrictions (if any)"}}}
{"api_name": "getCustomsInfo", "api_description": "Retrieve customs and trade compliance information", "field": "Logistics/Customs and trade compliance", "parameters": {"shipment_id": {"type": "str", "description": "The ID of the shipment for which you want to retrieve customs information"}, "country": {"type": "str", "description": "The country for which you want to retrieve customs information"}}, "required": ["shipment_id"], "responses": {"customs_info": {"type": "str", "description": "The customs information related to the shipment"}}}
{"api_name": "getSustainableLogistics", "api_description": "Retrieve sustainable logistics information", "field": "Logistics/Sustainable logistics", "parameters": {"origin": {"type": "str", "description": "The origin of the logistic route (e.g., Shanghai, New York, Berlin)"}, "destination": {"type": "str", "description": "The destination of the logistic route (e.g., London, Tokyo, Sydney)"}, "weight": {"type": "float", "description": "The weight of the shipment in kilograms (e.g., 10.5, 20.2, 30.7)"}, "shipping_method": {"type": "str", "description": "The preferred shipping method (e.g., air, sea, road)"}}, "required": ["origin", "destination", "weight"], "responses": {"carbon_emissions": {"type": "float", "description": "The estimated carbon emissions for the selected logistic route"}, "shipping_time": {"type": "str", "description": "The estimated shipping time for the selected logistic route"}}}
{"api_name": "calculateTransportationCost", "api_description": "Calculate the transportation cost for a logistics network design", "field": "Logistics/Logistics network design", "parameters": {"source": {"type": "str", "description": "The source location for the logistics network design"}, "destination": {"type": "str", "description": "The destination location for the logistics network design"}, "distance": {"type": "float", "description": "The total distance between the source and destination locations (in km)"}, "weight": {"type": "float", "description": "The total weight of the goods to be transported (in tons)"}, "mode": {"type": "str", "description": "The mode of transportation to be used (e.g., truck, train, ship)"}}, "required": ["source", "destination", "distance"], "responses": {"cost": {"type": "float", "description": "The transportation cost for the logistics network design (in USD)"}, "time": {"type": "str", "description": "The estimated time required for transportation (e.g., 2 days, 5 hours)"}}}
{"api_name": "getProductInfo", "api_description": "Retrieve detailed information about a product in the warehouse", "field": "Logistics/Warehouse automation", "parameters": {"product_id": {"type": "str", "description": "The unique ID of the product you want to retrieve information on (e.g., PQR456)"}, "location": {"type": "str", "description": "The specific location within the warehouse where the product is stored (e.g., aisle E, shelf F)"}}, "required": ["product_id"], "responses": {"product_name": {"type": "str", "description": "The name of the product"}, "description": {"type": "str", "description": "A brief description of the product"}, "weight": {"type": "float", "description": "The weight of the product in kilograms"}, "dimensions": {"type": "str", "description": "The dimensions of the product (e.g., 10cm x 5cm x 3cm)"}, "location": {"type": "str", "description": "The current location of the product within the warehouse"}}}
{"api_name": "getProductInventory", "api_description": "Retrieve current inventory information of a product", "field": "Logistics/Warehouse automation", "parameters": {"product_code": {"type": "str", "description": "The code of the product for which you want to get the inventory (e.g., SKU1234, PL6789)"}, "warehouse_id": {"type": "str", "description": "The ID of the warehouse from which you want to get the inventory (e.g., WH001, WH002)"}, "location": {"type": "str", "description": "The location of the warehouse (e.g., New York, London)"}}, "required": ["product_code", "warehouse_id"], "responses": {"inventory": {"type": "int", "description": "The quantity of the product available in the specified warehouse"}}}
{"api_name": "getAvailableSpace", "api_description": "Retrieve the available space in the warehouse", "field": "Logistics/Warehouse automation", "parameters": {}, "required": [], "responses": {"space": {"type": "float", "description": "The available space in the warehouse in square meters"}}}
{"api_name": "moveProduct", "api_description": "Move a product from one location to another within the warehouse", "field": "Logistics/Warehouse automation", "parameters": {"product_id": {"type": "str", "description": "The unique identifier of the product"}, "source_location": {"type": "str", "description": "The current location of the product within the warehouse"}, "destination_location": {"type": "str", "description": "The desired location to move the product within the warehouse"}}, "required": ["product_id", "source_location", "destination_location"], "responses": {"success": {"type": "bool", "description": "Indicates whether the product was successfully moved to the destination location"}}}
{"api_name": "updateShipmentDetails", "api_description": "Update the details of a shipment in the logistics management software", "field": "Logistics/Logistics management software", "parameters": {"shipment_id": {"type": "str", "description": "The identifier of the shipment to be updated"}, "new_details": {"type": "str", "description": "New details of the shipment (e.g., updated item name, weight, dimensions)"}}, "required": ["shipment_id", "new_details"], "responses": {"success": {"type": "bool", "description": "Indicates whether the update operation was successful"}}}
{"api_name": "cancelShipment", "api_description": "Cancel a shipment in the logistics management software", "field": "Logistics/Logistics management software", "parameters": {"shipment_id": {"type": "str", "description": "The identifier of the shipment to be canceled"}}, "required": ["shipment_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the cancellation operation was successful"}}}
{"api_name": "getEstimatedDeliveryTime", "api_description": "Get the estimated delivery time for a shipment", "field": "Logistics/Logistics management software", "parameters": {"shipment_number": {"type": "str", "description": "The unique identifier of the shipment"}}, "required": ["shipment_number"], "responses": {"estimated_delivery_time": {"type": "str", "description": "The estimated time of delivery for the shipment"}}}
{"api_name": "getResidentialConstructionCost", "api_description": "Retrieve the cost of residential construction", "field": "Construction/Residential construction", "parameters": {"location": {"type": "str", "description": "The location where residential construction is to be carried out (e.g., city, town)"}, "floor_area": {"type": "float", "description": "The desired floor area for residential construction (e.g., in square meters)"}, "number_of_rooms": {"type": "int", "description": "The number of rooms in the residential construction (e.g., 1, 2, 3, ...)"}}, "required": ["location", "floor_area", "number_of_rooms"], "responses": {"construction_cost": {"type": "float", "description": "The estimated cost of residential construction"}}}
{"api_name": "getCommercialConstructionInfo", "api_description": "Retrieve information about commercial construction projects", "field": "Construction/Commercial construction", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the information (e.g., city, state)"}, "type": {"type": "str", "description": "The type of commercial construction project (e.g., office building, shopping mall)"}, "status": {"type": "str", "description": "The status of the construction project (e.g., ongoing, completed)"}}, "required": ["location"], "responses": {"project_name": {"type": "str", "description": "The name of the commercial construction project"}, "location": {"type": "str", "description": "The location of the construction project"}, "type": {"type": "str", "description": "The type of commercial construction project"}, "status": {"type": "str", "description": "The status of the construction project"}}}
{"api_name": "getIndustrialConstructionProgress", "api_description": "Retrieve the progress of industrial construction projects", "field": "Construction/Industrial construction", "parameters": {"location": {"type": "str", "description": "The location of the industrial construction projects (e.g., city, state, country)"}, "status": {"type": "str", "description": "The status of the construction projects (e.g., ongoing, completed, planned)"}, "project_type": {"type": "str", "description": "The type of industrial construction projects (e.g., power plants, factories, refineries)"}, "year": {"type": "int", "description": "The specific year for which you want to retrieve the progress of construction projects"}}, "required": ["location"], "responses": {"progress": {"type": "float", "description": "The progress of the industrial construction projects in percentage"}, "status": {"type": "str", "description": "The status of the construction projects (e.g., ongoing, completed)"}, "project_type": {"type": "str", "description": "The type of industrial construction projects (e.g., power plants, factories, refineries)"}, "year": {"type": "int", "description": "The specific year for which the progress of construction projects is provided"}}}
{"api_name": "calculateConcreteVolume", "api_description": "Calculate the required volume of concrete for a civil engineering project", "field": "Construction/Civil engineering", "parameters": {"length": {"type": "float", "description": "The length of the structure in meters"}, "width": {"type": "float", "description": "The width of the structure in meters"}, "height": {"type": "float", "description": "The height of the structure in meters"}}, "required": ["length", "width", "height"], "responses": {"concrete_volume": {"type": "float", "description": "The required volume of concrete in cubic meters"}}}
{"api_name": "calculateEarthworkCost", "api_description": "Calculate the cost of earthwork for a construction project", "field": "Construction/Civil engineering", "parameters": {"area": {"type": "float", "description": "The area of land to be excavated in square meters"}, "depth": {"type": "float", "description": "The depth of excavation in meters"}, "cost_per_cubic_meter": {"type": "float", "description": "The cost per cubic meter of earthwork in the local currency"}}, "required": ["area", "depth", "cost_per_cubic_meter"], "responses": {"cost": {"type": "float", "description": "The total cost of earthwork for the construction project in the local currency"}}}
{"api_name": "getBuildingSize", "api_description": "Retrieve building size information", "field": "Construction/Architectural design", "parameters": {"building_type": {"type": "str", "description": "The type of the building (e.g., residential, commercial, industrial)"}, "number_of_floors": {"type": "int", "description": "The number of floors in the building"}, "building_area": {"type": "float", "description": "The total area of the building in square meters"}}, "required": ["building_type", "number_of_floors"], "responses": {"size": {"type": "str", "description": "The size of the building (e.g., small, medium, large)"}, "building_area": {"type": "float", "description": "The total area of the building in square meters"}}}
{"api_name": "getHVACLoad", "api_description": "Calculate the heating, ventilation, and air conditioning (HVAC) load for a building", "field": "Construction/Building services engineering", "parameters": {"building_type": {"type": "str", "description": "The type of building for which you want to calculate the HVAC load (e.g., office building, residential building)"}, "area": {"type": "float", "description": "The total area of the building in square meters"}, "occupancy": {"type": "int", "description": "The number of occupants in the building"}}, "required": ["building_type", "area"], "responses": {"hvac_load": {"type": "float", "description": "The calculated HVAC load for the building in kilowatts"}}}
{"api_name": "getLightingDesign", "api_description": "Design the lighting system for a building", "field": "Construction/Building services engineering", "parameters": {"room_area": {"type": "float", "description": "The area of the room in square meters"}, "ceiling_height": {"type": "float", "description": "The height of the room's ceiling in meters"}, "lighting_level": {"type": "int", "description": "The desired lighting level in lux"}}, "required": ["room_area", "ceiling_height"], "responses": {"lighting_power": {"type": "float", "description": "The recommended lighting power in watts"}}}
{"api_name": "getFireProtectionSystem", "api_description": "Retrieve information about the fire protection system of a building", "field": "Construction/Building services engineering", "parameters": {"building_height": {"type": "float", "description": "The height of the building in meters"}, "number_of_floors": {"type": "int", "description": "The total number of floors in the building"}, "building_type": {"type": "str", "description": "The type of building (e.g., residential, commercial, industrial)"}}, "required": ["building_height", "number_of_floors"], "responses": {"fire_protection_system": {"type": "str", "description": "The recommended fire protection system for the building"}}}
{"api_name": "getHVACSystemSpecifications", "api_description": "Retrieve specifications of the HVAC system for a building", "field": "Construction/Building services engineering", "parameters": {"building_name": {"type": "str", "description": "The name of the building"}, "floor_count": {"type": "int", "description": "The number of floors in the building"}, "area": {"type": "float", "description": "The total area of the building in square meters"}}, "required": ["building_name"], "responses": {"specifications": {"type": "str", "description": "The specifications of the HVAC system for the building"}}}
{"api_name": "addProjectMember", "api_description": "Add a member to a construction project", "field": "Construction/Construction management", "parameters": {"project_id": {"type": "int", "description": "The ID of the construction project"}, "member_name": {"type": "str", "description": "The name of the project member"}, "member_role": {"type": "str", "description": "The role of the project member in the construction project"}}, "required": ["project_id", "member_name", "member_role"], "responses": {"status": {"type": "str", "description": "The status of the operation (e.g., success, failure)"}}}
{"api_name": "removeProjectMember", "api_description": "Remove a member from a construction project", "field": "Construction/Construction management", "parameters": {"project_id": {"type": "int", "description": "The ID of the construction project"}, "member_name": {"type": "str", "description": "The name of the project member"}}, "required": ["project_id", "member_name"], "responses": {"status": {"type": "str", "description": "The status of the operation (e.g., success, failure)"}}}
{"api_name": "addTask", "api_description": "Add a new task to a construction project", "field": "Construction/Construction management", "parameters": {"project_id": {"type": "int", "description": "The unique identifier of the project"}, "task_name": {"type": "str", "description": "The name of the task"}, "assigned_to": {"type": "str", "description": "The name of the team member assigned to the task"}, "start_date": {"type": "str", "description": "The start date of the task (e.g., yyyy-mm-dd)"}, "end_date": {"type": "str", "description": "The end date of the task (e.g., yyyy-mm-dd)"}}, "required": ["project_id", "task_name", "assigned_to", "start_date", "end_date"], "responses": {"task_id": {"type": "int", "description": "The unique identifier of the created task"}}}
{"api_name": "calculateMaterialQuantity", "api_description": "Calculate the required quantity of a construction material", "field": "Construction/Construction materials", "parameters": {"material_id": {"type": "int", "description": "ID of the construction material"}, "area": {"type": "float", "description": "Total area to be covered by the material"}}, "required": ["material_id", "area"], "responses": {"quantity": {"type": "float", "description": "Required quantity of the construction material"}}}
{"api_name": "verifyCredentials", "api_description": "Verify the credentials of a construction worker", "field": "Construction/Construction safety", "parameters": {"name": {"type": "str", "description": "The name of the construction worker"}, "id_number": {"type": "str", "description": "The identification number of the construction worker"}}, "required": ["name", "id_number"], "responses": {"is_verified": {"type": "bool", "description": "Indicates whether the credentials of the construction worker are valid"}}}
{"api_name": "getSafetyStatus", "api_description": "Retrieve the safety status of a construction site", "field": "Construction/Construction safety", "parameters": {"site_location": {"type": "str", "description": "The location of the construction site (e.g., city, address)"}, "worker_count": {"type": "int", "description": "The number of workers at the construction site"}, "equipment_status": {"type": "str", "description": "The status of the construction equipment (e.g., operational, under repair)"}}, "required": ["site_location"], "responses": {"safety_level": {"type": "str", "description": "The safety level of the construction site (e.g., high, medium, low)"}, "incident_reports": {"type": "str", "description": "Any incident reports at the construction site"}}}
{"api_name": "getBuildingData", "api_description": "Retrieve building information data", "field": "Construction/Building information modeling (BIM)", "parameters": {"building_id": {"type": "str", "description": "The ID of the building for which you want to retrieve BIM data"}, "level_of_detail": {"type": "str", "description": "Specify the level of detail to retrieve BIM data (e.g., high, medium, low)"}, "file_format": {"type": "str", "description": "Specify the file format of the BIM data (e.g., IFC, Revit, Navisworks)"}}, "required": ["building_id"], "responses": {"data": {"type": "str", "description": "The retrieved BIM data of the specified building"}}}
{"api_name": "getEstimate", "api_description": "Retrieve construction cost estimate", "field": "Construction/Construction estimating", "parameters": {"project_name": {"type": "str", "description": "The name of the construction project"}, "location": {"type": "str", "description": "The location of the construction project (e.g., city, state)"}, "square_footage": {"type": "float", "description": "The total square footage of the construction project"}, "project_type": {"type": "str", "description": "The type of construction project (e.g., residential, commercial)"}}, "required": ["project_name", "location", "square_footage"], "responses": {"estimate": {"type": "float", "description": "The estimated cost of the construction project"}}}
{"api_name": "getConstructionScheduling", "api_description": "Retrieve construction scheduling information", "field": "Construction/Construction scheduling", "parameters": {"project_name": {"type": "str", "description": "The name of the construction project"}, "start_date": {"type": "str", "description": "The desired start date of the construction (e.g., yyyy-mm-dd)"}, "end_date": {"type": "str", "description": "The desired end date of the construction (e.g., yyyy-mm-dd)"}}, "required": ["project_name"], "responses": {"scheduling_info": {"type": "str", "description": "The detailed scheduling information for the construction project"}}}
{"api_name": "getProjectSchedule", "api_description": "Retrieve construction project schedule", "field": "Construction/Construction scheduling", "parameters": {"project_id": {"type": "str", "description": "The unique identifier of the construction project"}, "start_date": {"type": "str", "description": "The start date of the project (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the project (e.g., YYYY-MM-DD)"}}, "required": ["project_id"], "responses": {"schedule": {"type": "str", "description": "The schedule of the construction project"}}}
{"api_name": "scheduleBuildingInspection", "api_description": "Schedule a building inspection", "field": "Construction/Building inspection", "parameters": {"building_id": {"type": "str", "description": "The ID of the building for which you want to schedule the inspection"}, "inspection_date": {"type": "str", "description": "The desired date for the building inspection"}, "inspector_id": {"type": "str", "description": "The ID of the inspector who will conduct the inspection"}}, "required": ["building_id", "inspection_date", "inspector_id"], "responses": {"confirmation": {"type": "str", "description": "Confirmation message for the scheduled building inspection"}}}
{"api_name": "requestInspection", "api_description": "Send a request for a building inspection", "field": "Construction/Building inspection", "parameters": {"building_id": {"type": "str", "description": "The unique identifier of the building"}, "date": {"type": "str", "description": "The desired date for the inspection (e.g., 2022-12-31)"}, "time": {"type": "str", "description": "The desired time for the inspection (e.g., 09:00 AM, 14:30 PM)"}, "inspector_name": {"type": "str", "description": "The name of the assigned inspector"}}, "required": ["building_id", "date", "time"], "responses": {"request_status": {"type": "str", "description": "The status of the inspection request"}}}
{"api_name": "getEquipmentInfo", "api_description": "Retrieve information about construction equipment", "field": "Construction/Construction equipment", "parameters": {"equipment_type": {"type": "str", "description": "The type of construction equipment (e.g., excavator, bulldozer, crane)"}}, "required": ["equipment_type"], "responses": {"equipment_name": {"type": "str", "description": "The name of the construction equipment"}, "manufacturer": {"type": "str", "description": "The manufacturer of the construction equipment"}, "year_of_manufacture": {"type": "int", "description": "The year the construction equipment was manufactured"}}}
{"api_name": "getAirportConstructionStatus", "api_description": "Retrieve the status information of airport construction", "field": "Construction/Airport construction", "parameters": {"airport_code": {"type": "str", "description": "The code of the airport for which you want to get the construction status (e.g., JFK, LHR, CDG)"}}, "required": ["airport_code"], "responses": {"status": {"type": "str", "description": "The current status of the airport construction"}}}
{"api_name": "getLandDevelopmentStatus", "api_description": "Retrieve the status of land development in a specific location", "field": "Construction/Land development", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the land development status (e.g., city, district, street)"}, "status_type": {"type": "str", "description": "The type of status you want to retrieve (e.g., planning, zoning, construction)"}, "start_date": {"type": "str", "description": "The start date of the land development project (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the land development project (e.g., YYYY-MM-DD)"}}, "required": ["location"], "responses": {"status": {"type": "str", "description": "The current status of land development at the specified location"}, "progress": {"type": "int", "description": "The progress percentage of the land development project"}}}
{"api_name": "demolishBuilding", "api_description": "Demolish a building at a specified location", "field": "Construction/Demolition", "parameters": {"location": {"type": "str", "description": "The location of the building to be demolished (e.g., 123 Main Street, New York)"}, "building_type": {"type": "str", "description": "The type of building to be demolished (e.g., residential, commercial, industrial)"}}, "required": ["location", "building_type"], "responses": {"status": {"type": "str", "description": "The status of the demolition process"}}}
{"api_name": "requestDemolitionPermit", "api_description": "Submit a request for a demolition permit", "field": "Construction/Demolition", "parameters": {"location": {"type": "str", "description": "The location where the demolition needs to take place (e.g., address, city, coordinates)"}}, "required": ["location"], "responses": {"permit_status": {"type": "str", "description": "The status of the demolition permit request"}}}
{"api_name": "getDemolitionCost", "api_description": "Retrieve the estimated cost for the demolition", "field": "Construction/Demolition", "parameters": {"property_size": {"type": "float", "description": "The size of the property in square meters"}}, "required": ["property_size"], "responses": {"estimated_cost": {"type": "float", "description": "The estimated cost for the demolition"}}}
{"api_name": "getSafetyIssues", "api_description": "Retrieve safety issues in a construction site", "field": "Construction/Safety management in construction", "parameters": {"site_id": {"type": "str", "description": "The ID of the construction site"}, "date": {"type": "str", "description": "The date for which you want to get safety issues (e.g., yyyy-mm-dd)"}, "severity_level": {"type": "str", "description": "Specify a severity level for safety issues (e.g., low, medium, high)"}}, "required": ["site_id", "date"], "responses": {"issues": {"type": "str", "description": "List of safety issues at the construction site on the specified date and severity level"}}}
{"api_name": "getConstructionLaw", "api_description": "Retrieve construction laws and regulations", "field": "Construction/Construction law and regulations", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve construction laws and regulations (e.g., USA, UK, China)"}}, "required": ["country"], "responses": {"laws_regulations": {"type": "str", "description": "The construction laws and regulations of the specified country"}}}
{"api_name": "checkBuildingCodeCompliance", "api_description": "Check if a building design complies with the local building codes and standards", "field": "Construction/Building codes and standards", "parameters": {"building_design": {"type": "str", "description": "The design of the building to be checked for compliance"}, "region": {"type": "str", "description": "The region or jurisdiction to which the building must comply", "example": "USA, Europe, Australia"}}, "required": ["building_design"], "responses": {"complies": {"type": "bool", "description": "Indicates whether the building design complies with the local building codes and standards"}}}
{"api_name": "getBuildingCodeRequirements", "api_description": "Retrieve the building code requirements for a specific region", "field": "Construction/Building codes and standards", "parameters": {"region": {"type": "str", "description": "The region or jurisdiction for which you want to retrieve the building code requirements", "example": "Canada, UK, India"}}, "required": ["region"], "responses": {"requirements": {"type": "str", "description": "The building code requirements for the specified region"}}}
{"api_name": "getBuildingCodes", "api_description": "Retrieve building codes and standards information", "field": "Construction/Building codes and standards", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the building codes and standards information (e.g., United States, Canada, Australia)"}, "type": {"type": "str", "description": "The type of building (e.g., residential, commercial, industrial)"}, "year": {"type": "int", "description": "The year for which you want to get the building codes and standards information"}}, "required": ["country", "type"], "responses": {"codes": {"type": "str", "description": "The building codes and standards for the specified country and type of building"}, "year": {"type": "int", "description": "The year for which the building codes and standards are provided"}}}
{"api_name": "findEmergencyRoom", "api_description": "Find the nearest emergency room based on location", "field": "Healthcare/Emergency Medicine", "parameters": {"location": {"type": "str", "description": "The current location of the user (e.g., latitude, longitude or address)"}, "hospital_type": {"type": "str", "description": "Specify the type of emergency room to search for (e.g., trauma center, pediatric emergency room)"}}, "required": ["location"], "responses": {"hospital_name": {"type": "str", "description": "The name of the emergency room"}, "address": {"type": "str", "description": "The address of the emergency room"}, "phone_number": {"type": "str", "description": "The contact number of the emergency room"}}}
{"api_name": "getChildVaccinationStatus", "api_description": "Retrieve the vaccination status of a child", "field": "Healthcare/Pediatrics", "parameters": {"child_name": {"type": "str", "description": "The name of the child for whom you want to retrieve vaccination status"}}, "required": ["child_name"], "responses": {"vaccination_status": {"type": "str", "description": "The vaccination status of the child"}}}
{"api_name": "addPediatricRecord", "api_description": "Add a new pediatric health record", "field": "Healthcare/Pediatrics", "parameters": {"patient_id": {"type": "int", "description": "The ID of the pediatric patient"}, "record_date": {"type": "str", "description": "The date of the health record"}, "height": {"type": "float", "description": "The height of the patient in centimeters"}, "weight": {"type": "float", "description": "The weight of the patient in kilograms"}, "temperature": {"type": "float", "description": "The body temperature of the patient in Celsius"}, "symptoms": {"type": "str", "description": "The symptoms reported by the patient"}}, "required": ["patient_id", "record_date"], "responses": {"success": {"type": "bool", "description": "Indicates if the record was successfully added"}}}
{"api_name": "createPrescription", "api_description": "Create a new prescription for a patient", "field": "Healthcare/Internal Medicine", "parameters": {"patient_id": {"type": "int", "description": "The ID of the patient for whom you want to create a prescription"}, "medication": {"type": "str", "description": "The medication to be prescribed"}, "dosage": {"type": "str", "description": "The dosage instructions for the medication"}, "duration": {"type": "int", "description": "The duration of the prescription in days"}}, "required": ["patient_id", "medication", "dosage", "duration"], "responses": {"prescription_id": {"type": "int", "description": "The ID of the newly created prescription"}, "patient_id": {"type": "int", "description": "The ID of the patient for whom the prescription was created"}, "medication": {"type": "str", "description": "The medication prescribed"}, "dosage": {"type": "str", "description": "The dosage instructions for the medication"}, "duration": {"type": "int", "description": "The duration of the prescription in days"}}}
{"api_name": "getLabResults", "api_description": "Retrieve laboratory test results for a patient", "field": "Healthcare/Internal Medicine", "parameters": {"patient_id": {"type": "int", "description": "The ID of the patient for whom you want to retrieve lab results"}}, "required": ["patient_id"], "responses": {"results": {"type": "str", "description": "The laboratory test results for the patient"}, "patient_id": {"type": "int", "description": "The ID of the patient"}, "date": {"type": "str", "description": "The date the test was conducted"}}}
{"api_name": "getDiagnosis", "api_description": "Retrieve diagnosis information", "field": "Healthcare/Internal Medicine", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient for whom you want to retrieve the diagnosis"}}, "required": ["patient_id"], "responses": {"diagnosis": {"type": "str", "description": "The diagnosis details for the patient"}}}
{"api_name": "getMedication", "api_description": "Retrieve medication recommendations for a specific condition", "field": "Healthcare/Internal Medicine", "parameters": {"condition": {"type": "str", "description": "Specific condition for which medication recommendations are needed (e.g., diabetes, hypertension)"}}, "required": ["condition"], "responses": {"medication": {"type": "str", "description": "Recommended medication for the specified condition"}}}
{"api_name": "getSpecialist", "api_description": "Retrieve information about a specialist for a specific condition", "field": "Healthcare/Internal Medicine", "parameters": {"condition": {"type": "str", "description": "Specific condition for which specialist information is needed (e.g., cardiology, endocrinology)"}}, "required": ["condition"], "responses": {"specialist": {"type": "str", "description": "Information about the specialist for the specified condition"}}}
{"api_name": "getProcedures", "api_description": "Retrieve the procedures for a specific diagnosis", "field": "Healthcare/Internal Medicine", "parameters": {"diagnosis": {"type": "str", "description": "The diagnosis for which you want to get the procedures"}}, "required": ["diagnosis"], "responses": {"procedures": {"type": "str", "description": "The recommended procedures for the provided diagnosis"}}}
{"api_name": "getPregnancyWeek", "api_description": "Retrieve the current week of pregnancy", "field": "Healthcare/Obstetrics and Gynecology", "parameters": {"due_date": {"type": "str", "description": "The due date of pregnancy (e.g., YYYY-MM-DD)"}, "current_date": {"type": "str", "description": "The current date for which you want to get the pregnancy week (e.g., YYYY-MM-DD)"}}, "required": ["due_date", "current_date"], "responses": {"pregnancy_week": {"type": "int", "description": "The current week of pregnancy at the specified date"}}}
{"api_name": "getGynecologicalExam", "api_description": "Retrieve information about gynecological exams", "field": "Healthcare/Obstetrics and Gynecology", "parameters": {"name": {"type": "str", "description": "The name of the patient"}, "age": {"type": "int", "description": "The age of the patient"}, "type_of_exam": {"type": "str", "description": "Specify the type of gynecological exam (e.g., Pap smear, pelvic exam)"}}, "required": ["name", "type_of_exam"], "responses": {"results": {"type": "str", "description": "Results of the gynecological exam"}}}
{"api_name": "getFetalHeartRate", "api_description": "Retrieve the fetal heart rate", "field": "Healthcare/Obstetrics and Gynecology", "parameters": {"location": {"type": "str", "description": "The location of the pregnancy (e.g., uterus, abdomen)"}, "gestational_age": {"type": "int", "description": "The gestational age of the fetus in weeks"}}, "required": ["location", "gestational_age"], "responses": {"heart_rate": {"type": "int", "description": "The fetal heart rate in beats per minute"}}}
{"api_name": "getCervicalDilation", "api_description": "Get the measurement of cervical dilation", "field": "Healthcare/Obstetrics and Gynecology", "parameters": {"dilation_unit": {"type": "str", "description": "The unit of measurement for cervical dilation (e.g., centimeters, inches)"}}, "required": ["dilation_unit"], "responses": {"cervical_dilation": {"type": "float", "description": "The measurement of cervical dilation in the specified unit"}}}
{"api_name": "getDueDate", "api_description": "Calculate the estimated due date based on the first day of the last menstrual period", "field": "Healthcare/Obstetrics and Gynecology", "parameters": {"last_menstrual_period": {"type": "str", "description": "The first day of the last menstrual period (e.g., 2022-01-01)"}}, "required": ["last_menstrual_period"], "responses": {"due_date": {"type": "str", "description": "The estimated due date for the pregnancy"}}}
{"api_name": "getBabyGender", "api_description": "Predict the gender of the baby based on maternal age and conception month", "field": "Healthcare/Obstetrics and Gynecology", "parameters": {"maternal_age": {"type": "int", "description": "The age of the mother in years (e.g., 30)"}, "conception_month": {"type": "str", "description": "The month in which conception occurred (e.g., January, February, March)"}}, "required": ["maternal_age", "conception_month"], "responses": {"baby_gender": {"type": "str", "description": "The predicted gender of the baby"}}}
{"api_name": "getBloodGlucoseLevel", "api_description": "Retrieve current blood glucose level of a patient", "field": "Healthcare/Endocrinology", "parameters": {"patient_id": {"type": "str", "description": "The unique ID of the patient"}, "time_period": {"type": "str", "description": "Specify a time period for blood glucose level (e.g., morning, afternoon, evening)"}, "unit": {"type": "str", "description": "The desired unit for blood glucose level (e.g., mg/dL, mmol/L)"}}, "required": ["patient_id", "time_period"], "responses": {"blood_glucose_level": {"type": "float", "description": "The blood glucose level of the patient at the specified time period"}, "unit": {"type": "str", "description": "The unit in which the blood glucose level is provided"}}}
{"api_name": "getThyroidFunction", "api_description": "Retrieve current thyroid function of a patient", "field": "Healthcare/Endocrinology", "parameters": {"patient_id": {"type": "str", "description": "The unique ID of the patient"}, "unit": {"type": "str", "description": "The desired unit for thyroid function measurements (e.g., ng/dL, pmol/L)"}}, "required": ["patient_id"], "responses": {"TSH_level": {"type": "float", "description": "The TSH level of the patient's thyroid function"}, "T4_level": {"type": "float", "description": "The T4 level of the patient's thyroid function"}, "T3_level": {"type": "float", "description": "The T3 level of the patient's thyroid function"}, "unit": {"type": "str", "description": "The unit in which the thyroid function measurements are provided"}}}
{"api_name": "getInsulinDosage", "api_description": "Retrieve insulin dosage recommendation for a patient", "field": "Healthcare/Endocrinology", "parameters": {"patient_id": {"type": "str", "description": "The unique ID of the patient"}, "meal_period": {"type": "str", "description": "Specify a meal period for insulin dosage recommendation (e.g., breakfast, lunch, dinner)"}, "blood_glucose_level": {"type": "float", "description": "The patient's blood glucose level at the specified meal period"}}, "required": ["patient_id", "meal_period", "blood_glucose_level"], "responses": {"insulin_dosage": {"type": "float", "description": "The recommended insulin dosage for the patient at the specified meal period"}}}
{"api_name": "getHbA1cLevel", "api_description": "Retrieve the current HbA1c level of a patient", "field": "Healthcare/Endocrinology", "parameters": {"patient_id": {"type": "str", "description": "The unique ID of the patient whose HbA1c level is requested (e.g., 1234, ABCD)"}, "unit": {"type": "str", "description": "The desired unit for HbA1c level (e.g., percentage, mmol/mol)"}}, "required": ["patient_id"], "responses": {"hba1c_level": {"type": "float", "description": "The HbA1c level of the patient"}, "unit": {"type": "str", "description": "The unit in which the HbA1c level is provided"}}}
{"api_name": "getBloodSugar", "api_description": "Retrieve blood sugar level information", "field": "Healthcare/Endocrinology", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "time_period": {"type": "str", "description": "The time period for which you want to retrieve blood sugar data (e.g., day, week, month)"}, "unit": {"type": "str", "description": "The preferred unit for blood sugar measurement (e.g., mg/dL, mmol/L)"}}, "required": ["patient_id"], "responses": {"blood_sugar": {"type": "float", "description": "The patient's blood sugar level"}, "unit": {"type": "str", "description": "The unit of blood sugar measurement"}}}
{"api_name": "getDigestiveHealthInfo", "api_description": "Retrieve information related to digestive health", "field": "Healthcare/Gastroenterology", "parameters": {"symptom": {"type": "str", "description": "The symptom for which you want to get information (e.g., bloating, abdominal pain, diarrhea)"}, "age": {"type": "int", "description": "The age of the patient (e.g., 30, 45, 60)"}, "gender": {"type": "str", "description": "The gender of the patient (e.g., male, female)"}}, "required": ["symptom"], "responses": {"information": {"type": "str", "description": "Information regarding the specified symptom and its possible causes and treatments"}}}
{"api_name": "getStomachPainSeverity", "api_description": "Retrieve the severity of stomach pain", "field": "Healthcare/Gastroenterology", "parameters": {"location": {"type": "str", "description": "The specific location of the stomach pain (e.g., upper abdomen, lower abdomen)"}, "duration": {"type": "str", "description": "The duration of the stomach pain (e.g., hours, days, weeks)"}, "description": {"type": "str", "description": "A brief description of the stomach pain (e.g., sharp, dull, burning)"}}, "required": ["location"], "responses": {"severity": {"type": "str", "description": "The severity of the stomach pain (e.g., mild, moderate, severe)"}}}
{"api_name": "getColonoscopyRecommendations", "api_description": "Retrieve recommendations for colonoscopy screening", "field": "Healthcare/Gastroenterology", "parameters": {"age": {"type": "int", "description": "Age of the individual for colonoscopy screening recommendations"}, "family_history": {"type": "bool", "description": "Whether there is a family history of colon cancer (true/false)"}, "prior_screening": {"type": "bool", "description": "Whether the individual has had prior colonoscopy screening (true/false)"}}, "required": ["age"], "responses": {"recommendations": {"type": "str", "description": "Recommendations for colonoscopy screening based on the individual's age, family history, and prior screening"}}}
{"api_name": "getGastroenterologyReport", "api_description": "Retrieve gastroenterology report for a patient", "field": "Healthcare/Gastroenterology", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "start_date": {"type": "str", "description": "The starting date for the report (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date for the report (e.g., YYYY-MM-DD)"}, "severity_threshold": {"type": "str", "description": "Specify a severity threshold for the report (e.g., low, medium, high)"}}, "required": ["patient_id"], "responses": {"report": {"type": "str", "description": "The gastroenterology report for the specified patient"}}}
{"api_name": "getBloodCount", "api_description": "Retrieve blood count information", "field": "Healthcare/Hematology", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "date": {"type": "str", "description": "The date for which you want to retrieve the blood count (e.g., 2021-09-30)"}, "time": {"type": "str", "description": "The time of the blood count (e.g., morning, afternoon, evening)"}}, "required": ["patient_id", "date"], "responses": {"hemoglobin": {"type": "float", "description": "The hemoglobin level of the patient's blood"}, "platelet_count": {"type": "int", "description": "The number of platelets in the patient's blood"}}}
{"api_name": "getCompleteBloodCount", "api_description": "Retrieve the values of various components in a complete blood count test", "field": "Healthcare/Hematology", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "date": {"type": "str", "description": "The date on which the complete blood count test was performed (e.g., YYYY-MM-DD)"}}, "required": ["patient_id", "date"], "responses": {"red_blood_cells": {"type": "float", "description": "The number of red blood cells in the blood sample"}, "white_blood_cells": {"type": "float", "description": "The number of white blood cells in the blood sample"}, "hemoglobin": {"type": "float", "description": "The concentration of hemoglobin in the blood sample"}, "platelets": {"type": "int", "description": "The number of platelets in the blood sample"}}}
{"api_name": "getInfectionInfo", "api_description": "Retrieve information about infectious diseases", "field": "Healthcare/Infectious Diseases", "parameters": {"disease": {"type": "str", "description": "The infectious disease for which you want to get information (e.g., COVID-19, Influenza, Measles)"}, "country": {"type": "str", "description": "The country for which you want to get the infection information (e.g., United States, China, Brazil)"}, "date": {"type": "str", "description": "Specify a date for which you want to get the infection information (e.g., 2022-01-01)"}}, "required": ["disease", "country"], "responses": {"total_cases": {"type": "int", "description": "The total reported cases of the specified infectious disease in the specified country"}, "total_deaths": {"type": "int", "description": "The total reported deaths caused by the specified infectious disease in the specified country"}, "recovered_cases": {"type": "int", "description": "The total reported recovered cases of the specified infectious disease in the specified country"}, "active_cases": {"type": "int", "description": "The total active cases of the specified infectious disease in the specified country"}}}
{"api_name": "getTreatmentPlan", "api_description": "Retrieve treatment plan for kidney disease", "field": "Healthcare/Nephrology", "parameters": {"patient_id": {"type": "str", "description": "The unique ID of the patient"}}, "required": ["patient_id"], "responses": {"medications": {"type": "str", "description": "The prescribed medications for the patient's kidney disease"}, "diet_recommendations": {"type": "str", "description": "The recommended diet for the patient to manage their kidney disease"}}}
{"api_name": "getUrineOutput", "api_description": "Retrieve urine output information for a patient", "field": "Healthcare/Nephrology", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient for whom you want to retrieve urine output information"}, "time_period": {"type": "str", "description": "The time period for which you want to retrieve urine output information (e.g., past week, last month, last year)"}}, "required": ["patient_id"], "responses": {"urine_output": {"type": "float", "description": "The urine output value for the specified patient"}, "unit": {"type": "str", "description": "The unit of urine output"}}}
{"api_name": "getNephrologist", "api_description": "Retrieve nephrologist information", "field": "Healthcare/Nephrology", "parameters": {"location": {"type": "str", "description": "The location for which you want to find a nephrologist (e.g., New York, Los Angeles)"}, "specialty": {"type": "str", "description": "Specify a nephrology specialty (e.g., chronic kidney disease, dialysis, kidney transplantation)"}, "language": {"type": "str", "description": "Specify a language spoken by the nephrologist (e.g., English, Spanish, Mandarin)"}}, "required": ["location"], "responses": {"nephrologist": {"type": "str", "description": "The name and contact information of the nephrologist"}, "rating": {"type": "float", "description": "The rating of the nephrologist"}}}
{"api_name": "getNeurologicalTestResults", "api_description": "Retrieve neurological test results for a patient", "field": "Healthcare/Neurology", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient for whom you want to retrieve the neurological test results"}, "test_type": {"type": "str", "description": "The type of neurological test to retrieve results for (e.g., EEG, MRI, CT scan)"}, "date_range": {"type": "str", "description": "Specify a date range for the test results (e.g., 2021-01-01 to 2021-12-31)"}}, "required": ["patient_id"], "responses": {"test_results": {"type": "str", "description": "The neurological test results for the specified patient and test type"}}}
{"api_name": "getOncologyStats", "api_description": "Retrieve oncology statistics", "field": "Healthcare/Oncology", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the oncology statistics (e.g., country, city)"}, "age_group": {"type": "str", "description": "Specify an age group for oncology statistics (e.g., pediatric, adult, elderly)"}}, "required": ["location"], "responses": {"cancer_cases": {"type": "int", "description": "The number of cancer cases in the specified location"}, "treatment_options": {"type": "str", "description": "The available treatment options for oncology"}}}
{"api_name": "getChemotherapyProtocol", "api_description": "Retrieve the chemotherapy protocol for a specific type of cancer", "field": "Healthcare/Oncology", "parameters": {"cancer_type": {"type": "str", "description": "The type of cancer for which you want to retrieve the chemotherapy protocol"}}, "required": ["cancer_type"], "responses": {"chemotherapy_protocol": {"type": "str", "description": "The detailed chemotherapy protocol for the specified type of cancer"}}}
{"api_name": "getVisionTest", "api_description": "Get the results of a vision test", "field": "Healthcare/Ophthalmology", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient who took the vision test"}, "test_date": {"type": "str", "description": "The date on which the vision test was taken"}}, "required": ["patient_id"], "responses": {"visual_acuity": {"type": "str", "description": "The visual acuity of the patient, indicating their clarity and sharpness of vision"}, "refractive_error": {"type": "str", "description": "The type and extent of refractive error of the patient's eyes"}}}
{"api_name": "getEyeExamResult", "api_description": "Retrieve the result of an eye exam", "field": "Healthcare/Ophthalmology", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient who underwent the eye exam"}, "eye_type": {"type": "str", "description": "The type of eye for which the exam was performed (e.g., left eye, right eye, both eyes)"}}, "required": ["patient_id"], "responses": {"visual_acuity": {"type": "str", "description": "The visual acuity measurement of the patient's eyes"}, "intraocular_pressure": {"type": "float", "description": "The measurement of intraocular pressure in the patient's eyes"}}}
{"api_name": "getEyePressure", "api_description": "Retrieve the eye pressure measurement", "field": "Healthcare/Ophthalmology", "parameters": {"eye_side": {"type": "str", "description": "Specify the eye side for the measurement (e.g., left, right, both)"}, "patient_id": {"type": "str", "description": "The unique ID of the patient"}}, "required": ["eye_side"], "responses": {"pressure": {"type": "float", "description": "The measurement of eye pressure in mmHg"}}}
{"api_name": "getEyeExamData", "api_description": "Retrieve eye examination data of a patient", "field": "Healthcare/Ophthalmology", "parameters": {"patient_id": {"type": "int", "description": "The unique identifier of the patient"}, "exam_type": {"type": "str", "description": "The type of eye examination to retrieve (e.g., visual acuity, intraocular pressure, retinal imaging)"}, "date_range": {"type": "str", "description": "Specify a date range for the eye examination data (e.g., last month, last year)"}}, "required": ["patient_id"], "responses": {"exam_data": {"type": "str", "description": "The eye examination data of the specified patient"}, "exam_type": {"type": "str", "description": "The type of eye examination for which the data is provided"}}}
{"api_name": "getIntraocularPressure", "api_description": "Retrieve intraocular pressure measurement", "field": "Healthcare/Ophthalmology", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}}, "required": ["patient_id"], "responses": {"intraocular_pressure": {"type": "float", "description": "The measured intraocular pressure in mmHg"}}}
{"api_name": "getVocalCordsStatus", "api_description": "Retrieve the status of vocal cords", "field": "Healthcare/Otolaryngology", "parameters": {"patient_id": {"type": "int", "description": "The unique identifier of the patient", "example": "12345"}, "test_type": {"type": "str", "description": "The type of test to be conducted on vocal cords", "example": "endoscopy"}}, "required": ["patient_id"], "responses": {"status": {"type": "str", "description": "The status of vocal cords (e.g., normal, inflamed)"}}}
{"api_name": "getHearingLoss", "api_description": "Retrieve information about hearing loss", "field": "Healthcare/Otolaryngology", "parameters": {"patient_id": {"type": "int", "description": "The unique identifier of the patient", "example": "54321"}, "test_type": {"type": "str", "description": "The type of test to diagnose hearing loss", "example": "audiometry"}}, "required": ["patient_id"], "responses": {"hearing_loss": {"type": "str", "description": "The extent of hearing loss (e.g., mild, moderate, severe)"}}}
{"api_name": "getTinnitusStatus", "api_description": "Retrieve the status of tinnitus", "field": "Healthcare/Otolaryngology", "parameters": {"patient_id": {"type": "int", "description": "The unique identifier of the patient", "example": "67890"}, "test_type": {"type": "str", "description": "The type of test to diagnose tinnitus", "example": "audiometry"}}, "required": ["patient_id"], "responses": {"status": {"type": "str", "description": "The status of tinnitus (e.g., present, absent)"}}}
{"api_name": "getNasalObstruction", "api_description": "Retrieve information about nasal obstruction", "field": "Healthcare/Otolaryngology", "parameters": {"patient_id": {"type": "int", "description": "The unique identifier of the patient", "example": "24680"}, "test_type": {"type": "str", "description": "The type of test to diagnose nasal obstruction", "example": "rhinomanometry"}, "nostril": {"type": "str", "description": "Specify the nostril (left, right) to diagnose nasal obstruction", "example": "left"}}, "required": ["patient_id"], "responses": {"obstruction_status": {"type": "str", "description": "The status of nasal obstruction (e.g., absent, mild, moderate, severe)"}}}
{"api_name": "getEarInfection", "api_description": "Retrieve information about ear infection", "field": "Healthcare/Otolaryngology", "parameters": {"age": {"type": "int", "description": "The age of the patient in years (e.g., 20, 30, 40)"}, "gender": {"type": "str", "description": "The gender of the patient (e.g., Male, Female)"}, "symptoms": {"type": "str", "description": "The symptoms experienced by the patient (e.g., ear pain, hearing loss, dizziness)"}}, "required": ["age"], "responses": {"diagnosis": {"type": "str", "description": "The diagnosed condition based on the given symptoms"}}}
{"api_name": "getPulmonaryFunctionTest", "api_description": "Retrieve the results of a pulmonary function test", "field": "Healthcare/Pulmonology", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient who underwent the test"}, "date": {"type": "str", "description": "The date on which the test was performed"}, "test_type": {"type": "str", "description": "The type of pulmonary function test (e.g., spirometry, lung diffusion test)"}}, "required": ["patient_id", "date"], "responses": {"forced_vital_capacity": {"type": "float", "description": "The forced vital capacity measure in liters"}, "forced_expiratory_volume": {"type": "float", "description": "The forced expiratory volume measure in liters"}, "diffusion_capacity": {"type": "float", "description": "The diffusion capacity measure in milliliters per minute"}}}
{"api_name": "getRadiologyReport", "api_description": "Retrieve radiology report for a patient", "field": "Healthcare/Radiology", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "report_type": {"type": "str", "description": "The type of radiology report to retrieve (e.g., X-ray, MRI, CT scan)"}}, "required": ["patient_id"], "responses": {"report": {"type": "str", "description": "The radiology report for the specified patient"}}}
{"api_name": "getRadiologyImages", "api_description": "Retrieve radiology images for a patient", "field": "Healthcare/Radiology", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "image_type": {"type": "str", "description": "The type of radiology image to retrieve (e.g., X-ray, MRI, CT scan)"}, "image_format": {"type": "str", "description": "The desired format of the radiology image (e.g., JPEG, DICOM)"}}, "required": ["patient_id"], "responses": {"images": {"type": "str", "description": "The radiology images for the specified patient"}}}
{"api_name": "getRheumatologyStatus", "api_description": "Retrieve the current status of a patient with rheumatological conditions", "field": "Healthcare/Rheumatology", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient to retrieve the rheumatology status"}, "date": {"type": "str", "description": "The specific date to retrieve the rheumatology status (e.g., yyyy-mm-dd)"}, "time": {"type": "str", "description": "The specific time to retrieve the rheumatology status (e.g., morning, afternoon, night)"}}, "required": ["patient_id"], "responses": {"status": {"type": "str", "description": "The current status of the patient's rheumatological condition"}, "symptoms": {"type": "str", "description": "The symptoms reported by the patient (if any)"}, "medications": {"type": "str", "description": "The prescribed medications for the patient's rheumatological condition"}, "appointment": {"type": "str", "description": "The upcoming appointment details for the patient (if available)"}}}
{"api_name": "getRheumatologyInfo", "api_description": "Retrieve information about rheumatology", "field": "Healthcare/Rheumatology", "parameters": {"symptoms": {"type": "str", "description": "The symptoms experienced by the patient (e.g., joint pain, stiffness)"}, "age": {"type": "int", "description": "The age of the patient (e.g., 30, 45, 60)"}}, "required": ["symptoms"], "responses": {"diagnosis": {"type": "str", "description": "The possible diagnosis based on the provided symptoms and age"}, "treatment": {"type": "str", "description": "The recommended treatment for the diagnosed condition"}}}
{"api_name": "getArthritisDetails", "api_description": "Retrieve details about different types of arthritis", "field": "Healthcare/Rheumatology", "parameters": {"arthritis_type": {"type": "str", "description": "Type of arthritis (e.g., rheumatoid arthritis, osteoarthritis, psoriatic arthritis)"}}, "required": ["arthritis_type"], "responses": {"details": {"type": "str", "description": "Detailed information about the specified type of arthritis"}}}
{"api_name": "getTreatmentOptions", "api_description": "Retrieve treatment options for arthritis", "field": "Healthcare/Rheumatology", "parameters": {"type": {"type": "str", "description": "Specify the type of arthritis for which you want treatment options (e.g., rheumatoid arthritis, osteoarthritis)"}, "severity": {"type": "str", "description": "Specify the severity level of arthritis (e.g., mild, moderate, severe)"}, "age": {"type": "int", "description": "Specify the age of the patient with arthritis"}}, "required": ["type"], "responses": {"treatment_options": {"type": "str", "description": "Different treatment options available for the specified type and severity of arthritis"}}}
{"api_name": "getPainManagementTips", "api_description": "Retrieve pain management tips for arthritis", "field": "Healthcare/Rheumatology", "parameters": {"type": {"type": "str", "description": "Specify the type of arthritis for which you want pain management tips (e.g., rheumatoid arthritis, osteoarthritis)"}, "severity": {"type": "str", "description": "Specify the severity level of arthritis (e.g., mild, moderate, severe)"}, "age": {"type": "int", "description": "Specify the age of the patient with arthritis"}, "location": {"type": "str", "description": "Specify the affected joint or body part for pain management (e.g., knees, hands, spine)"}}, "required": ["type"], "responses": {"pain_management_tips": {"type": "str", "description": "Useful tips for managing pain associated with the specified type and severity of arthritis"}}}
{"api_name": "calculateAnesthesiaDosage", "api_description": "Calculate the anesthesia dosage for a patient", "field": "Healthcare/Anesthesiology", "parameters": {"patient_weight": {"type": "float", "description": "The weight of the patient in kilograms"}, "age": {"type": "int", "description": "The age of the patient in years"}, "sex": {"type": "str", "description": "The sex of the patient (e.g., male, female)"}, "surgical_procedure": {"type": "str", "description": "The type of surgical procedure being performed"}}, "required": ["patient_weight", "age", "sex", "surgical_procedure"], "responses": {"anesthesia_dosage": {"type": "float", "description": "The calculated anesthesia dosage for the patient"}}}
{"api_name": "getExerciseDetails", "api_description": "Retrieve details of a specific exercise for physical therapy", "field": "Healthcare/Physical Therapy", "parameters": {"exercise_name": {"type": "str", "description": "The name of the exercise you want to get details for"}}, "required": ["exercise_name"], "responses": {"exercise_name": {"type": "str", "description": "The name of the exercise"}, "description": {"type": "str", "description": "Detailed description of the exercise"}, "duration": {"type": "int", "description": "The duration of the exercise in seconds"}, "repetitions": {"type": "int", "description": "The number of repetitions for the exercise"}, "rest_period": {"type": "int", "description": "The rest period between repetitions in seconds"}}}
{"api_name": "scheduleSession", "api_description": "Schedule a physical therapy session", "field": "Healthcare/Physical Therapy", "parameters": {"patient_name": {"type": "str", "description": "The name of the patient scheduling the session"}, "therapist_name": {"type": "str", "description": "The name of the physical therapist conducting the session"}, "session_date": {"type": "str", "description": "The date of the session (e.g., YYYY-MM-DD)"}, "session_time": {"type": "str", "description": "The time of the session (e.g., HH:MM AM/PM)"}, "session_length": {"type": "int", "description": "The duration of the session in minutes"}}, "required": ["patient_name", "therapist_name", "session_date", "session_time", "session_length"], "responses": {"status": {"type": "str", "description": "The status of the session scheduling (e.g., success, failure)"}}}
{"api_name": "trackProgress", "api_description": "Track progress of a patient's physical therapy sessions", "field": "Healthcare/Physical Therapy", "parameters": {"patient_name": {"type": "str", "description": "The name of the patient whose progress needs to be tracked"}}, "required": ["patient_name"], "responses": {"progress": {"type": "str", "description": "The progress report of the patient's physical therapy sessions"}}}
{"api_name": "updateTherapyNotes", "api_description": "Update the therapy notes for a patient's occupational therapy session", "field": "Healthcare/Occupational Therapy", "parameters": {"session_id": {"type": "str", "description": "The ID of the therapy session"}, "notes": {"type": "str", "description": "The updated therapy notes"}}, "required": ["session_id", "notes"], "responses": {"success": {"type": "bool", "description": "Indicates whether the update was successful"}}}
{"api_name": "scheduleSpeechTherapyAppointment", "api_description": "Schedule a new speech therapy appointment", "field": "Healthcare/Speech Therapy", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient for whom you want to schedule the appointment"}, "date": {"type": "str", "description": "The desired date for the appointment (e.g., yyyy-mm-dd)"}, "time": {"type": "str", "description": "The desired time for the appointment (e.g., hh:mm AM/PM)"}}, "required": ["patient_id", "date", "time"], "responses": {"appointment_id": {"type": "str", "description": "The ID of the scheduled speech therapy appointment"}}}
{"api_name": "completeSpeechTherapyExercise", "api_description": "Mark a speech therapy exercise as completed", "field": "Healthcare/Speech Therapy", "parameters": {"exercise_id": {"type": "str", "description": "The ID of the exercise to mark as completed"}, "patient_id": {"type": "str", "description": "The ID of the patient who completed the exercise"}}, "required": ["exercise_id", "patient_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether marking the exercise as completed was successful"}}}
{"api_name": "getNearestPharmacy", "api_description": "Retrieve information of the nearest pharmacy", "field": "Healthcare/Pharmacy", "parameters": {"location": {"type": "str", "description": "The location for which you want to find the nearest pharmacy (e.g., street address, city, state)"}, "radius": {"type": "int", "description": "The radius within which to search for pharmacies (e.g., 500 meters, 1 mile)"}, "open_now": {"type": "bool", "description": "Specify if the pharmacies should be open at the current time or not"}}, "required": ["location"], "responses": {"pharmacy_name": {"type": "str", "description": "The name of the nearest pharmacy"}, "address": {"type": "str", "description": "The address of the nearest pharmacy"}, "distance": {"type": "float", "description": "The distance to the nearest pharmacy from the specified location"}}}
{"api_name": "checkVitalSigns", "api_description": "Check the vital signs of a patient", "field": "Healthcare/Nursing", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient being assessed"}}, "required": ["patient_id"], "responses": {"heart_rate": {"type": "int", "description": "The patient's heart rate in beats per minute"}, "blood_pressure": {"type": "str", "description": "The patient's blood pressure readings (e.g., 120/80 mmHg)"}, "temperature": {"type": "float", "description": "The patient's body temperature in degrees Celsius"}, "oxygen_saturation": {"type": "float", "description": "The patient's oxygen saturation level in percentage"}}}
{"api_name": "administerMedication", "api_description": "Administer medication to a patient", "field": "Healthcare/Nursing", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient to whom the medication is being administered"}, "medication_name": {"type": "str", "description": "The name of the medication being administered"}}, "required": ["patient_id", "medication_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the medication administration was successful"}}}
{"api_name": "recordPatientSymptoms", "api_description": "Record symptoms reported by a patient", "field": "Healthcare/Nursing", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient reporting the symptoms"}, "symptoms": {"type": "str", "description": "The symptoms reported by the patient (e.g., fever, cough, headache)"}}, "required": ["patient_id", "symptoms"], "responses": {"success": {"type": "bool", "description": "Indicates whether the symptom recording was successful"}}}
{"api_name": "recordVitalSigns", "api_description": "Record the vital signs of a patient", "field": "Healthcare/Nursing", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "temperature": {"type": "float", "description": "The patient's body temperature in Celsius"}, "heart_rate": {"type": "int", "description": "The patient's heart rate in beats per minute"}, "blood_pressure": {"type": "str", "description": "The patient's blood pressure measurement (e.g., 120/80 mmHg)"}, "oxygen_saturation": {"type": "float", "description": "The patient's oxygen saturation level as a percentage"}}, "required": ["patient_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the vital signs were successfully recorded"}}}
{"api_name": "addPatient", "api_description": "Add a new patient to the healthcare system", "field": "Healthcare/Health Administration", "parameters": {"patient_name": {"type": "str", "description": "The name of the patient"}, "age": {"type": "int", "description": "The age of the patient"}, "gender": {"type": "str", "description": "The gender of the patient (e.g., male, female, other)"}}, "required": ["patient_name", "age", "gender"], "responses": {"patient_id": {"type": "str", "description": "The unique identifier assigned to the new patient"}}}
{"api_name": "getAppointmentSlots", "api_description": "Retrieve available appointment slots", "field": "Healthcare/Health Administration", "parameters": {"date": {"type": "str", "description": "The date for which you want to retrieve appointment slots (e.g., YYYY-MM-DD)"}}, "required": ["date"], "responses": {"slots": {"type": "str", "description": "The available appointment slots for the specified date"}}}
{"api_name": "getVaccinationRates", "api_description": "Retrieve vaccination rates for a specific location and time period", "field": "Healthcare/Public Health", "parameters": {"location": {"type": "str", "description": "The location for which you want to get vaccination rates (e.g., country, state, city)"}, "time_period": {"type": "str", "description": "The time period for which you want to retrieve vaccination rates (e.g., last week, last month, last year)"}, "age_group": {"type": "str", "description": "Specify an age group for vaccination rates (e.g., infants, children, adults, elderly)"}}, "required": ["location", "time_period"], "responses": {"vaccination_rate": {"type": "float", "description": "The vaccination rate for the specified location and time period"}, "age_group": {"type": "str", "description": "The age group for which the vaccination rate is provided"}}}
{"api_name": "getTotalCases", "api_description": "Retrieve the total number of COVID-19 cases", "field": "Healthcare/Public Health", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the total cases (e.g., United States, Germany, India)"}}, "required": ["country"], "responses": {"total_cases": {"type": "int", "description": "The total number of COVID-19 cases in the specified country"}}}
{"api_name": "getSymptomChecker", "api_description": "Check possible symptoms and get medical advice", "field": "Healthcare/Public Health", "parameters": {"symptoms": {"type": "str", "description": "The symptoms experienced by the individual (e.g., fever, cough, sore throat)"}}, "required": ["symptoms"], "responses": {"advice": {"type": "str", "description": "Medical advice based on the provided symptoms"}}}
{"api_name": "getHealthEducationInfo", "api_description": "Retrieve health education information", "field": "Healthcare/Health Education", "parameters": {"topic": {"type": "str", "description": "The topic for which you want to get health education information (e.g., nutrition, exercise, mental health)"}, "language": {"type": "str", "description": "The desired language for the health education information (e.g., English, Spanish, French)"}}, "required": ["topic"], "responses": {"info": {"type": "str", "description": "The health education information for the specified topic"}}}
{"api_name": "getHealthPolicy", "api_description": "Retrieve health policy information", "field": "Healthcare/Health Policy", "parameters": {}, "required": [], "responses": {"policy_info": {"type": "str", "description": "Information about the health policy"}}}
{"api_name": "getMarketingMaterials", "api_description": "Retrieve marketing materials related to healthcare", "field": "Healthcare/Healthcare Marketing", "parameters": {"topic": {"type": "str", "description": "The topic of the marketing materials you are looking for (e.g., patient engagement, telemedicine, pharmaceuticals)"}, "language": {"type": "str", "description": "The desired language of the marketing materials (e.g., English, Spanish, French)"}}, "required": ["topic"], "responses": {"materials": {"type": "str", "description": "The marketing materials related to the specified topic and language"}}}
{"api_name": "generateMedicalReport", "api_description": "Generate medical report based on patient's information", "field": "Healthcare/Medical Writing", "parameters": {"patient_name": {"type": "str", "description": "The name of the patient"}, "age": {"type": "int", "description": "The age of the patient"}, "gender": {"type": "str", "description": "The gender of the patient"}, "medical_history": {"type": "str", "description": "The medical history of the patient"}, "symptoms": {"type": "str", "description": "The symptoms experienced by the patient"}, "diagnosis": {"type": "str", "description": "The diagnosis of the patient"}}, "required": ["patient_name", "age", "gender", "medical_history"], "responses": {"report": {"type": "str", "description": "The generated medical report for the patient"}}}
{"api_name": "getSalesByRegion", "api_description": "Retrieve sales information for a specific region", "field": "Healthcare/Medical Sales", "parameters": {"region": {"type": "str", "description": "The name of the region for which you want to get the sales information (e.g., North America, Europe, Asia)"}, "product_category": {"type": "str", "description": "The category of medical products for which you want to get the sales information (e.g., pharmaceuticals, medical devices)"}}, "required": ["region"], "responses": {"sales": {"type": "int", "description": "The total number of sales for the specified region and product category"}, "revenue": {"type": "float", "description": "The total revenue generated by the sales in the specified region and product category"}}}
{"api_name": "getSalesByTimePeriod", "api_description": "Retrieve sales information for a specific time period", "field": "Healthcare/Medical Sales", "parameters": {"start_date": {"type": "str", "description": "The start date of the time period for which you want to get the sales information (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date of the time period for which you want to get the sales information (e.g., 2022-12-31)"}, "product_category": {"type": "str", "description": "The category of medical products for which you want to get the sales information (e.g., pharmaceuticals, medical devices)"}}, "required": ["start_date", "end_date"], "responses": {"sales": {"type": "int", "description": "The total number of sales for the specified time period and product category"}, "revenue": {"type": "float", "description": "The total revenue generated by the sales in the specified time period and product category"}}}
{"api_name": "getCounselingSession", "api_description": "Schedule a genetic counseling session", "field": "Healthcare/Genetic Counseling", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "counselor_id": {"type": "str", "description": "The unique identifier of the genetic counselor"}, "preferred_date": {"type": "str", "description": "The preferred date for the counseling session (e.g., 2022-08-15)"}, "preferred_time": {"type": "str", "description": "The preferred time for the counseling session (e.g., 09:00 AM)"}, "medical_history": {"type": "str", "description": "The patient's medical history related to genetic conditions (e.g., family history of cancer)"}}, "required": ["patient_id", "counselor_id"], "responses": {"session_id": {"type": "str", "description": "The unique identifier of the counseling session"}, "confirmation": {"type": "bool", "description": "A confirmation status indicating whether the counseling session is scheduled successfully"}}}
{"api_name": "getGeriatricPatientInfo", "api_description": "Retrieve geriatric patient information", "field": "Healthcare/Geriatrics", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the geriatric patient"}}, "required": ["patient_id"], "responses": {"patient_info": {"type": "str", "description": "Information about the geriatric patient including medical history, medications, and allergies"}}}
{"api_name": "getInjuryStats", "api_description": "Retrieve statistics about injuries in a specific sport", "field": "Healthcare/Sports Medicine", "parameters": {"sport": {"type": "str", "description": "The sport for which you want to get injury statistics (e.g., football, basketball, soccer)"}, "year": {"type": "int", "description": "The year for which you want to retrieve the statistics"}}, "required": ["sport", "year"], "responses": {"total_injuries": {"type": "int", "description": "The total number of injuries for the specified sport and year"}, "common_injuries": {"type": "str", "description": "The most common types of injuries in the specified sport and year"}}}
{"api_name": "calculateHeartRate", "api_description": "Calculate the target heart rate based on age and fitness level", "field": "Healthcare/Sports Medicine", "parameters": {"age": {"type": "int", "description": "The age of the individual (e.g., 30, 45, 55)"}, "fitness_level": {"type": "str", "description": "The fitness level of the individual (e.g., sedentary, moderately active, highly active)"}, "gender": {"type": "str", "description": "The gender of the individual (e.g., male, female)"}}, "required": ["age"], "responses": {"target_heart_rate": {"type": "int", "description": "The target heart rate for the individual"}}}
{"api_name": "managePain", "api_description": "Manage pain for patients", "field": "Healthcare/Pain Management", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient"}, "location": {"type": "str", "description": "The location of the pain (e.g., head, back, stomach)"}, "intensity": {"type": "float", "description": "The intensity of the pain on a scale of 0 to 10"}, "duration": {"type": "str", "description": "The duration of the pain (e.g., minutes, hours, days)"}, "medication": {"type": "str", "description": "The medication taken for pain relief"}, "treatment": {"type": "str", "description": "The treatment prescribed for pain management"}}, "required": ["patient_id", "location", "intensity"], "responses": {"success": {"type": "bool", "description": "Indicates if the pain management was successful"}, "message": {"type": "str", "description": "Additional information or instructions related to pain management"}}}
{"api_name": "getPainLevel", "api_description": "Retrieve the current pain level of a patient", "field": "Healthcare/Pain Management", "parameters": {"patient_id": {"type": "int", "description": "The ID of the patient for whom you want to get the pain level"}}, "required": ["patient_id"], "responses": {"pain_level": {"type": "int", "description": "The current pain level of the patient"}}}
{"api_name": "recordPainLevel", "api_description": "Record the pain level of a patient", "field": "Healthcare/Pain Management", "parameters": {"patient_id": {"type": "int", "description": "The ID of the patient for whom you want to record the pain level"}, "pain_level": {"type": "int", "description": "The pain level reported by the patient (e.g., 1-10)"}}, "required": ["patient_id", "pain_level"], "responses": {"success": {"type": "bool", "description": "Indicates whether the pain level was successfully recorded"}}}
{"api_name": "updatePainManagementPlan", "api_description": "Update the pain management plan for a patient", "field": "Healthcare/Pain Management", "parameters": {"patient_id": {"type": "int", "description": "The ID of the patient for whom you want to update the pain management plan"}, "plan_description": {"type": "str", "description": "The updated description of the pain management plan"}}, "required": ["patient_id", "plan_description"], "responses": {"success": {"type": "bool", "description": "Indicates whether the pain management plan was successfully updated"}}}
{"api_name": "getMedicalImage", "api_description": "Retrieve a medical image", "field": "Healthcare/Medical Imaging", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient for whom you want to retrieve the medical image"}, "image_type": {"type": "str", "description": "The type of medical image (e.g., X-ray, MRI, CT scan)"}}, "required": ["patient_id", "image_type"], "responses": {"image_data": {"type": "str", "description": "The binary data of the medical image"}, "image_format": {"type": "str", "description": "The format of the medical image file"}}}
{"api_name": "getImage", "api_description": "Retrieve a medical image for a given patient", "field": "Healthcare/Medical Imaging", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient whose image you want to retrieve"}, "image_type": {"type": "str", "description": "The desired type of medical image to retrieve (e.g., X-ray, MRI, CT scan)"}, "date": {"type": "str", "description": "Specify the date on which the image was taken"}}, "required": ["patient_id", "image_type"], "responses": {"image_url": {"type": "str", "description": "The URL or path to access the retrieved medical image"}, "image_metadata": {"type": "str", "description": "Metadata associated with the medical image"}}}
{"api_name": "analyzeMedicalImage", "api_description": "Analyze a medical image for diagnosis", "field": "Healthcare/Medical Imaging", "parameters": {"image_path": {"type": "str", "description": "The file path or URL of the medical image to be analyzed"}, "analysis_type": {"type": "str", "description": "Specify the type of analysis to be performed on the image (e.g., tumor detection, bone density measurement)"}}, "required": ["image_path", "analysis_type"], "responses": {"result": {"type": "str", "description": "The analysis result or diagnosis based on the medical image"}}}
{"api_name": "scheduleAppointment", "api_description": "Schedule an appointment with a doctor for a telemedicine consultation", "field": "Healthcare/Telemedicine", "parameters": {"doctor_id": {"type": "str", "description": "The unique identifier of the doctor"}, "patient_name": {"type": "str", "description": "The name of the patient"}, "appointment_date": {"type": "str", "description": "The preferred date for the appointment (format: YYYY-MM-DD)"}, "appointment_time": {"type": "str", "description": "The preferred time for the appointment (format: HH:MM AM/PM)"}}, "required": ["doctor_id", "patient_name", "appointment_date", "appointment_time"], "responses": {"appointment_id": {"type": "str", "description": "The unique identifier of the scheduled appointment"}}}
{"api_name": "getHealthcareAnalytics", "api_description": "Retrieve healthcare analytics information", "field": "Healthcare/Healthcare Analytics", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve healthcare analytics (e.g., hospital, city, country)"}, "time_period": {"type": "str", "description": "Specify a time period for the healthcare analytics (e.g., last month, last year)"}}, "required": ["location"], "responses": {"analytics_data": {"type": "str", "description": "The healthcare analytics data for the specified location and time period"}}}
{"api_name": "getHealthcareFinanceInfo", "api_description": "Retrieve healthcare finance information", "field": "Healthcare/Healthcare Finance", "parameters": {"country": {"type": "str", "description": "The country for which you want to get healthcare finance information (e.g., United States, Germany, Japan)"}, "year": {"type": "int", "description": "The specific year for which you want to get healthcare finance information (e.g., 2022, 2023, 2024)"}, "currency": {"type": "str", "description": "The desired currency for the finance information (e.g., USD, EUR, JPY)"}}, "required": ["country", "year"], "responses": {"total_expenditure": {"type": "float", "description": "The total healthcare expenditure in the specified country and year"}, "per_capita_expenditure": {"type": "float", "description": "The per capita healthcare expenditure in the specified country and year"}, "government_expenditure": {"type": "float", "description": "The government expenditure on healthcare in the specified country and year"}}}
{"api_name": "getFinancialSummary", "api_description": "Retrieve financial summary information for healthcare", "field": "Healthcare/Healthcare Finance", "parameters": {"organization": {"type": "str", "description": "The name of the healthcare organization for which you want to get financial summary"}}, "required": ["organization"], "responses": {"revenue": {"type": "float", "description": "The total revenue of the healthcare organization"}, "expenses": {"type": "float", "description": "The total expenses of the healthcare organization"}, "profit": {"type": "float", "description": "The profit of the healthcare organization"}}}
{"api_name": "getHealthcareLaw", "api_description": "Retrieve information about healthcare laws", "field": "Healthcare/Healthcare Law", "parameters": {"country": {"type": "str", "description": "The name of the country to get healthcare law information (e.g., United States, Canada, England)"}, "topic": {"type": "str", "description": "The specific topic within healthcare law (e.g., insurance coverage, patient rights, medical malpractice)"}}, "required": ["country"], "responses": {"law": {"type": "str", "description": "The healthcare law details for the specified country and topic"}}}
{"api_name": "getDrugInfo", "api_description": "Retrieve information about a specific drug", "field": "Healthcare/Pharmaceutical Research and Development", "parameters": {"drug_name": {"type": "str", "description": "The name of the drug you want to get information about (e.g., Aspirin, Paracetamol)"}, "brand_name": {"type": "str", "description": "The brand name of the drug (e.g., Tylenol, Advil)"}, "dosage": {"type": "str", "description": "The dosage of the drug (e.g., 500 mg, 10 mg/mL)"}, "patient_age": {"type": "int", "description": "The age of the patient for whom the drug is intended"}}, "required": ["drug_name", "dosage", "patient_age"], "responses": {"drug_info": {"type": "str", "description": "Detailed information about the specified drug"}, "side_effects": {"type": "str", "description": "The potential side effects of the drug"}}}
{"api_name": "searchDrug", "api_description": "Search for information about a specific drug", "field": "Healthcare/Pharmaceutical Research and Development", "parameters": {"drug_name": {"type": "str", "description": "The name of the drug you want to search for information (e.g., Aspirin, Paracetamol)"}, "manufacturer": {"type": "str", "description": "The name of the drug manufacturer (e.g., Pfizer, Novartis)"}, "active_ingredient": {"type": "str", "description": "The active ingredient of the drug (e.g., Acetaminophen, Ibuprofen)"}, "dosage": {"type": "str", "description": "The recommended dosage of the drug (e.g., 500mg, 10mg/ml)"}}, "required": ["drug_name"], "responses": {"drug_info": {"type": "str", "description": "Detailed information about the drug"}, "manufacturer_info": {"type": "str", "description": "Information about the drug manufacturer"}, "active_ingredient_info": {"type": "str", "description": "Information about the active ingredient of the drug"}}}
{"api_name": "transcribeMedicalRecord", "api_description": "Transcribe a medical record into text format", "field": "Healthcare/Medical Transcription", "parameters": {"record": {"type": "str", "description": "The medical record to transcribe into text format"}}, "required": ["record"], "responses": {"transcription": {"type": "str", "description": "The transcribed text of the medical record"}}}
{"api_name": "verifyMedicationDosage", "api_description": "Verify the dosage of a medication mentioned in a medical record", "field": "Healthcare/Medical Transcription", "parameters": {"medication_name": {"type": "str", "description": "The name of the medication mentioned in the medical record"}, "dosage": {"type": "str", "description": "The dosage mentioned in the medical record"}}, "required": ["medication_name", "dosage"], "responses": {"is_dosage_correct": {"type": "bool", "description": "Indicates whether the medication dosage is correct or not"}}}
{"api_name": "getPatientBilling", "api_description": "Retrieve billing information for a patient", "field": "Healthcare/Medical Coding and Billing", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}}, "required": ["patient_id"], "responses": {"billing_info": {"type": "str", "description": "The billing information for the specified patient"}}}
{"api_name": "monitorVitalSigns", "api_description": "Continuously monitor vital signs of a patient receiving home healthcare", "field": "Healthcare/Home Healthcare", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient (e.g., XYZ456)"}}, "required": ["patient_id"], "responses": {"heart_rate": {"type": "int", "description": "The current heart rate of the patient"}, "blood_pressure": {"type": "str", "description": "The current blood pressure of the patient"}, "blood_glucose": {"type": "float", "description": "The current blood glucose level of the patient"}}}
{"api_name": "recordMedication", "api_description": "Record the medication taken by a patient receiving home healthcare", "field": "Healthcare/Home Healthcare", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient (e.g., PQR789)"}, "medication_name": {"type": "str", "description": "The name of the medication taken by the patient (e.g., Tylenol, Lipitor)"}, "dosage": {"type": "str", "description": "The dosage of the medication taken by the patient (e.g., 500mg, 10mg)"}, "timestamp": {"type": "str", "description": "The timestamp of when the medication was taken (e.g., 2022-01-01 08:30:00)"}}, "required": ["patient_id", "medication_name", "dosage", "timestamp"], "responses": {"success": {"type": "bool", "description": "Indicates whether the medication recording was successful"}}}
{"api_name": "getHomeHealthcare", "api_description": "Retrieve information about home healthcare services", "field": "Healthcare/Home Healthcare", "parameters": {"location": {"type": "str", "description": "The location where home healthcare services are needed (e.g., city, address)"}}, "required": ["location"], "responses": {"services": {"type": "str", "description": "A list of available home healthcare services in the specified location"}, "providers": {"type": "str", "description": "A list of providers offering home healthcare services in the specified location"}}}
{"api_name": "scheduleSurgery", "api_description": "Schedule a surgery for a patient", "field": "Healthcare/Healthcare Robotics", "parameters": {"patient_id": {"type": "int", "description": "The unique identifier of the patient"}, "surgery_type": {"type": "str", "description": "The type of surgery to schedule"}, "date": {"type": "str", "description": "The date of the scheduled surgery (e.g., yyyy-mm-dd)"}, "time": {"type": "str", "description": "The time of the scheduled surgery (e.g., hh:mm)"}, "doctor_id": {"type": "int", "description": "The unique identifier of the doctor performing the surgery"}}, "required": ["patient_id", "surgery_type", "date", "doctor_id"], "responses": {"confirmation": {"type": "str", "description": "Confirmation message indicating the surgery scheduling was successful"}}}
{"api_name": "dispenseMedicine", "api_description": "Dispense medicine to a patient", "field": "Healthcare/Healthcare Robotics", "parameters": {"patient_id": {"type": "int", "description": "The unique identifier of the patient"}, "medication": {"type": "str", "description": "The name of the medication to be dispensed"}, "dosage": {"type": "str", "description": "The dosage of the medication to be dispensed"}, "frequency": {"type": "str", "description": "The frequency at which the medication should be taken"}}, "required": ["patient_id", "medication", "dosage", "frequency"], "responses": {"confirmation": {"type": "str", "description": "Confirmation message indicating successful dispensing of medicine"}}}
{"api_name": "getRobotUtilization", "api_description": "Retrieve the utilization rate of healthcare robots", "field": "Healthcare/Healthcare Robotics", "parameters": {"location": {"type": "str", "description": "The location where the healthcare robots are deployed (e.g., hospital, clinic)"}, "time_frame": {"type": "str", "description": "Specify the time frame for utilization calculation (e.g., daily, weekly, monthly)"}}, "required": ["location"], "responses": {"utilization_rate": {"type": "float", "description": "The utilization rate of healthcare robots at the specified location"}}}
{"api_name": "getRobotData", "api_description": "Retrieve data about healthcare robots", "field": "Healthcare/Healthcare Robotics", "parameters": {"robot_id": {"type": "str", "description": "The ID of the healthcare robot you want to get data for"}, "time_range": {"type": "str", "description": "Specify a time range for the robot data (e.g., today, this week, this month)"}}, "required": ["robot_id"], "responses": {"robot_status": {"type": "str", "description": "The current status of the healthcare robot"}, "battery_level": {"type": "int", "description": "The current battery level of the robot"}}}
{"api_name": "getGlobalHealthData", "api_description": "Retrieve global health data", "field": "Healthcare/Global Health", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve health data (e.g., USA, China, India)"}, "indicator": {"type": "str", "description": "The health indicator you are interested in (e.g., life expectancy, infant mortality rate)"}, "year": {"type": "int", "description": "Specify a year for the health data (e.g., 2015, 2018, 2020)"}, "gender": {"type": "str", "description": "Specify a gender for the health data, if applicable (e.g., male, female)"}}, "required": ["country", "indicator"], "responses": {"value": {"type": "float", "description": "The value of the health indicator for the specified country and year"}, "unit": {"type": "str", "description": "The unit of measurement for the health indicator"}}}
{"api_name": "getDiseasePrevalence", "api_description": "Retrieve the prevalence of a specific disease", "field": "Healthcare/Global Health", "parameters": {"disease": {"type": "str", "description": "The name of the disease for which you want to retrieve prevalence information (e.g., malaria, tuberculosis, diabetes)"}, "gender": {"type": "str", "description": "Specify the gender for prevalence estimation (e.g., male, female, both)"}, "age_group": {"type": "str", "description": "Specify the age group for prevalence estimation (e.g., 18-30, 60+, all ages)"}, "country": {"type": "str", "description": "The country for which you want to retrieve the disease prevalence"}}, "required": ["disease"], "responses": {"prevalence": {"type": "float", "description": "The prevalence rate of the specified disease in the given country, gender, and age group"}}}
{"api_name": "getChildHealthStatus", "api_description": "Retrieve health status of a child", "field": "Social Services/Child Welfare", "parameters": {"child_id": {"type": "int", "description": "The ID of the child whose health status you want to retrieve"}}, "required": ["child_id"], "responses": {"weight": {"type": "float", "description": "The current weight of the child"}, "height": {"type": "float", "description": "The current height of the child"}, "vaccination_status": {"type": "str", "description": "The vaccination status of the child (e.g., up-to-date, incomplete)"}}}
{"api_name": "getChildEducation", "api_description": "Retrieve education details of a child", "field": "Social Services/Child Welfare", "parameters": {"child_id": {"type": "int", "description": "The ID of the child whose education details you want to retrieve"}}, "required": ["child_id"], "responses": {"school_name": {"type": "str", "description": "The name of the school where the child is studying"}, "grade": {"type": "str", "description": "The grade in which the child is currently enrolled"}}}
{"api_name": "createCommunity", "api_description": "Create a new community", "field": "Social Services/Community Development", "parameters": {"name": {"type": "str", "description": "The name of the community"}, "location": {"type": "str", "description": "The location where the community is situated"}}, "required": ["name", "location"], "responses": {"message": {"type": "str", "description": "A message indicating the success or failure of community creation"}}}
{"api_name": "joinCommunity", "api_description": "Join an existing community", "field": "Social Services/Community Development", "parameters": {"community_id": {"type": "int", "description": "The ID of the community to join"}, "user_id": {"type": "int", "description": "The ID of the user requesting to join the community"}}, "required": ["community_id", "user_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the user successfully joined the community"}, "message": {"type": "str", "description": "A message providing information about the join request"}}}
{"api_name": "updateCommunityDetails", "api_description": "Update the details of a community", "field": "Social Services/Community Development", "parameters": {"community_id": {"type": "int", "description": "The ID of the community"}, "name": {"type": "str", "description": "The updated name of the community"}, "location": {"type": "str", "description": "The updated location of the community"}}, "required": ["community_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the community details were successfully updated"}, "message": {"type": "str", "description": "A message providing information about the update status"}}}
{"api_name": "requestAssessment", "api_description": "Request an assessment for elderly care needs", "field": "Social Services/Elderly Care", "parameters": {"name": {"type": "str", "description": "Your name"}, "contact": {"type": "str", "description": "Your contact information"}, "location": {"type": "str", "description": "The location where the elderly person resides"}, "details": {"type": "str", "description": "Any additional details or specific requirements to be considered"}}, "required": ["name", "contact", "location"], "responses": {"message": {"type": "str", "description": "A message indicating the status of the assessment request"}}}
{"api_name": "getGenderSupport", "api_description": "Retrieve gender and sexuality support information", "field": "Social Services/Gender and Sexuality Support", "parameters": {}, "required": [], "responses": {"support_resources": {"type": "str", "description": "List of support resources available for gender and sexuality support"}}}
{"api_name": "getGenderAndSexualitySupport", "api_description": "Retrieve information and support related to gender and sexuality", "field": "Social Services/Gender and Sexuality Support", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information and resources related to gender and sexuality support"}, "support": {"type": "str", "description": "Types of support available for individuals in relation to gender and sexuality"}}}
{"api_name": "findShelter", "api_description": "Find a homeless shelter near the specified location", "field": "Social Services/Homelessness Services", "parameters": {"location": {"type": "str", "description": "The location to search for homeless shelters (e.g., city, address, coordinates)"}, "maximum_capacity": {"type": "int", "description": "The maximum capacity of the shelter you are looking for"}, "gender": {"type": "str", "description": "The gender preference for the homeless shelter (e.g., male, female, any)"}, "age_range": {"type": "str", "description": "The age range of individuals the shelter caters to (e.g., children, adults, seniors)"}}, "required": ["location"], "responses": {"shelter_name": {"type": "str", "description": "The name of the homeless shelter"}, "address": {"type": "str", "description": "The address of the homeless shelter"}, "contact_number": {"type": "str", "description": "The contact number of the homeless shelter"}}}
{"api_name": "getRefugeeInfo", "api_description": "Retrieve information about refugees and immigrants", "field": "Social Services/Refugee and Immigrant Support", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information about refugees and immigrants (e.g., United States, Germany, Canada)"}}, "required": ["country"], "responses": {"total_refugees": {"type": "int", "description": "The total number of refugees in the specified country"}, "immigration_policies": {"type": "str", "description": "The immigration policies in place for the specified country"}}}
{"api_name": "createYouthProgram", "api_description": "Create a new youth development program", "field": "Social Services/Youth Development", "parameters": {"name": {"type": "str", "description": "The name of the youth program"}, "age_group": {"type": "str", "description": "The target age group for the program (e.g., 12-15 years, 16-18 years)"}, "location": {"type": "str", "description": "The location of the program"}, "duration": {"type": "str", "description": "The duration of the program (e.g., 6 months, 1 year)"}, "topics": {"type": "str", "description": "The topics covered in the program"}}, "required": ["name", "age_group", "location"], "responses": {"success": {"type": "bool", "description": "Indicates if the program creation was successful"}, "program_id": {"type": "str", "description": "The unique identifier for the created program"}}}
{"api_name": "enrollYouthParticipant", "api_description": "Enroll a youth participant in a program", "field": "Social Services/Youth Development", "parameters": {"program_id": {"type": "str", "description": "The unique identifier of the youth program"}, "participant_name": {"type": "str", "description": "The name of the participant"}, "age": {"type": "int", "description": "The age of the participant"}, "parent_name": {"type": "str", "description": "The name of the participant's parent/guardian"}}, "required": ["program_id", "participant_name", "age"], "responses": {"success": {"type": "bool", "description": "Indicates if the enrollment was successful"}}}
{"api_name": "updateCase", "api_description": "Update an existing case in the social services system", "field": "Social Services/Case Management", "parameters": {"case_id": {"type": "int", "description": "The unique identifier of the case to be updated"}, "assigned_worker": {"type": "str", "description": "The name of the social worker assigned to the case"}, "priority": {"type": "str", "description": "The updated priority level of the case (e.g., high, medium, low)"}}, "required": ["case_id"], "responses": {"status": {"type": "str", "description": "The status of the updated case (e.g., open, closed)"}}}
{"api_name": "getDomesticViolenceHotline", "api_description": "Retrieve the hotline number for domestic violence prevention", "field": "Social Services/Domestic Violence Prevention", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the hotline number for domestic violence prevention (e.g., city, state, country)"}}, "required": ["location"], "responses": {"hotline_number": {"type": "str", "description": "The hotline number for domestic violence prevention in the specified location"}}}
{"api_name": "reportDomesticViolence", "api_description": "Report a case of domestic violence", "field": "Social Services/Domestic Violence Prevention", "parameters": {"victim_name": {"type": "str", "description": "The name of the victim of domestic violence"}, "perpetrator_name": {"type": "str", "description": "The name of the perpetrator of domestic violence"}, "location": {"type": "str", "description": "The location where the domestic violence incident occurred"}}, "required": ["victim_name", "perpetrator_name", "location"], "responses": {"case_number": {"type": "str", "description": "The unique case number assigned to the reported incident"}}}
{"api_name": "applyJob", "api_description": "Apply for a specific job", "field": "Social Services/Employment Services", "parameters": {"job_id": {"type": "int", "description": "The ID of the job you want to apply for (e.g., 12345)"}, "resume": {"type": "str", "description": "The path to your resume file"}}, "required": ["job_id", "resume"], "responses": {"success": {"type": "bool", "description": "Indicates whether the job application was successfully submitted"}}}
{"api_name": "getHealthEducationMaterial", "api_description": "Retrieve health education materials", "field": "Social Services/Public Health Education", "parameters": {"topic": {"type": "str", "description": "The topic of health education material you are looking for (e.g., nutrition, sexual health, mental health)"}, "language": {"type": "str", "description": "The desired language of the health education material (e.g., English, Spanish, French)"}, "age_group": {"type": "str", "description": "The target age group for the health education material (e.g., children, adults, elderly)"}}, "required": ["topic"], "responses": {"material_url": {"type": "str", "description": "The URL or download link for the health education material"}, "language": {"type": "str", "description": "The language in which the health education material is available"}}}
{"api_name": "registerVolunteer", "api_description": "Register as a volunteer for community outreach programs", "field": "Social Services/Community Outreach", "parameters": {"name": {"type": "str", "description": "Your name"}, "age": {"type": "int", "description": "Your age"}, "contact_info": {"type": "str", "description": "Your contact information (e.g., phone number, email address)"}, "availability": {"type": "str", "description": "Your availability to volunteer (e.g., weekdays, weekends, specific days)"}}, "required": ["name", "contact_info"], "responses": {"success": {"type": "bool", "description": "Indicates whether the volunteer registration was successful"}}}
{"api_name": "getCrisisHotline", "api_description": "Retrieve the crisis hotline information", "field": "Social Services/Crisis Intervention", "parameters": {}, "required": [], "responses": {"hotline_number": {"type": "str", "description": "The phone number of the crisis hotline"}, "website": {"type": "str", "description": "The website of the crisis hotline"}}}
{"api_name": "getTraumaSupport", "api_description": "Retrieve trauma support information", "field": "Social Services/Trauma Support", "parameters": {"location": {"type": "str", "description": "The location for which you want to find trauma support services (e.g., city, state)"}, "type_of_trauma": {"type": "str", "description": "Specify the type of trauma for which support is needed (e.g., physical abuse, natural disaster, war)"}}, "required": ["location"], "responses": {"support_services": {"type": "str", "description": "The trauma support services available at the specified location"}}}
{"api_name": "getVehicleSpeed", "api_description": "Retrieve current speed information of a vehicle", "field": "Automotive/Vehicle dynamics", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle"}, "unit": {"type": "str", "description": "The desired unit for speed (e.g., km/h, mph)"}}, "required": ["vehicle_id"], "responses": {"speed": {"type": "float", "description": "The current speed of the specified vehicle"}, "unit": {"type": "str", "description": "The unit of speed in which the speed is provided"}}}
{"api_name": "getSteeringAngle", "api_description": "Retrieve the steering angle information of a vehicle", "field": "Automotive/Vehicle dynamics", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle"}, "unit": {"type": "str", "description": "The desired unit for steering angle (e.g., degrees, radians)"}}, "required": ["vehicle_id"], "responses": {"steering_angle": {"type": "float", "description": "The current steering angle of the specified vehicle"}, "unit": {"type": "str", "description": "The unit in which the steering angle is provided"}}}
{"api_name": "getAccelerometerData", "api_description": "Retrieve accelerometer data of the vehicle", "field": "Automotive/Vehicle dynamics", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle (e.g., ABC123)"}}, "required": ["vehicle_id"], "responses": {"x_axis": {"type": "float", "description": "Acceleration in the X-axis"}, "y_axis": {"type": "float", "description": "Acceleration in the Y-axis"}, "z_axis": {"type": "float", "description": "Acceleration in the Z-axis"}}}
{"api_name": "getSuspensionHeight", "api_description": "Retrieve suspension height information of the vehicle", "field": "Automotive/Vehicle dynamics", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle (e.g., ABC123)"}}, "required": ["vehicle_id"], "responses": {"front_left": {"type": "float", "description": "Suspension height of the front left corner of the vehicle"}, "front_right": {"type": "float", "description": "Suspension height of the front right corner of the vehicle"}, "rear_left": {"type": "float", "description": "Suspension height of the rear left corner of the vehicle"}, "rear_right": {"type": "float", "description": "Suspension height of the rear right corner of the vehicle"}}}
{"api_name": "retrieveVehicleDynamics", "api_description": "Retrieve vehicle dynamics information", "field": "Automotive/Vehicle dynamics", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle (e.g., VIN number)"}, "speed": {"type": "float", "description": "The current speed of the vehicle in km/h"}}, "required": ["vehicle_id"], "responses": {"acceleration": {"type": "float", "description": "The current acceleration of the vehicle in m/s^2"}}}
{"api_name": "getVehicleAcceleration", "api_description": "Retrieve the acceleration information of a vehicle", "field": "Automotive/Vehicle dynamics", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle (e.g., ABC123)"}, "time_interval": {"type": "int", "description": "The time interval for calculating acceleration (e.g., 1, 5, 10 seconds)"}}, "required": ["vehicle_id"], "responses": {"acceleration": {"type": "float", "description": "The calculated acceleration of the vehicle in m/s^2"}}}
{"api_name": "getVehicleYawRate", "api_description": "Retrieve the yaw rate information of a vehicle", "field": "Automotive/Vehicle dynamics", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle (e.g., ABC123)"}, "time_interval": {"type": "int", "description": "The time interval for calculating yaw rate (e.g., 1, 5, 10 seconds)"}}, "required": ["vehicle_id"], "responses": {"yaw_rate": {"type": "float", "description": "The calculated yaw rate of the vehicle in degrees per second"}}}
{"api_name": "getVehicleTirePressure", "api_description": "Retrieve the tire pressure information of a vehicle", "field": "Automotive/Vehicle dynamics", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle (e.g., ABC123)"}, "tire_location": {"type": "str", "description": "The location of the tire for which you want to get the pressure (e.g., front left, front right, rear left, rear right)"}}, "required": ["vehicle_id", "tire_location"], "responses": {"tire_pressure": {"type": "float", "description": "The tire pressure at the specified location in PSI"}}}
{"api_name": "getGripLevel", "api_description": "Retrieve the grip level of a vehicle", "field": "Automotive/Vehicle dynamics", "parameters": {"vehicle_type": {"type": "str", "description": "The type of vehicle (e.g., sedan, SUV, sports car)"}, "road_condition": {"type": "str", "description": "The road condition (e.g., dry, wet, icy)"}, "speed": {"type": "float", "description": "The speed of the vehicle in km/h"}}, "required": ["vehicle_type", "road_condition"], "responses": {"grip_level": {"type": "str", "description": "The grip level of the vehicle on the specified road condition"}}}
{"api_name": "calculateTurnRadius", "api_description": "Calculate the turn radius of a vehicle", "field": "Automotive/Vehicle dynamics", "parameters": {"vehicle_type": {"type": "str", "description": "The type of vehicle (e.g., sedan, SUV, sports car)"}, "speed": {"type": "float", "description": "The speed of the vehicle in km/h"}, "friction_coefficient": {"type": "float", "description": "The friction coefficient between the tires and the road"}}, "required": ["vehicle_type", "speed", "friction_coefficient"], "responses": {"turn_radius": {"type": "float", "description": "The turn radius of the vehicle at the specified speed and friction coefficient"}}}
{"api_name": "getSuspensionResponse", "api_description": "Retrieve the suspension response of a vehicle", "field": "Automotive/Vehicle dynamics", "parameters": {"vehicle_type": {"type": "str", "description": "The type of vehicle (e.g., sedan, SUV, sports car)"}, "road_condition": {"type": "str", "description": "The road condition (e.g., uneven, potholes, smooth)"}, "speed": {"type": "float", "description": "The speed of the vehicle in km/h"}}, "required": ["vehicle_type", "road_condition", "speed"], "responses": {"suspension_response": {"type": "str", "description": "The suspension response of the vehicle on the specified road condition"}}}
{"api_name": "getEngineRPM", "api_description": "Retrieve current engine RPM (Revolutions Per Minute)", "field": "Automotive/Powertrain systems", "parameters": {"vehicle_id": {"type": "int", "description": "The unique identifier of the vehicle"}, "unit": {"type": "str", "description": "The desired unit for engine RPM (e.g., RPM, revolutions per minute)"}}, "required": ["vehicle_id"], "responses": {"engine_rpm": {"type": "int", "description": "The current engine RPM of the specified vehicle"}}}
{"api_name": "getFuelLevel", "api_description": "Retrieve current fuel level", "field": "Automotive/Powertrain systems", "parameters": {"vehicle_id": {"type": "int", "description": "The unique identifier of the vehicle"}, "unit": {"type": "str", "description": "The desired unit for fuel level (e.g., liters, gallons)"}}, "required": ["vehicle_id"], "responses": {"fuel_level": {"type": "float", "description": "The current fuel level of the specified vehicle"}}}
{"api_name": "getThrottlePosition", "api_description": "Retrieve current throttle position", "field": "Automotive/Powertrain systems", "parameters": {"vehicle_id": {"type": "int", "description": "The unique identifier of the vehicle"}, "unit": {"type": "str", "description": "The desired unit for throttle position (e.g., percentage)"}, "time_of_day": {"type": "str", "description": "Specify a time of day for throttle position (e.g., morning, afternoon, night)"}}, "required": ["vehicle_id"], "responses": {"throttle_position": {"type": "float", "description": "The current throttle position of the specified vehicle"}}}
{"api_name": "changeGear", "api_description": "Change the gear of the vehicle", "field": "Automotive/Powertrain systems", "parameters": {"gear": {"type": "int", "description": "The gear value to be set (e.g., 1, 2, 3)"}}, "required": ["gear"], "responses": {"success": {"type": "bool", "description": "Indicates whether the gear was successfully changed"}}}
{"api_name": "setThrottle", "api_description": "Set the throttle position of the engine", "field": "Automotive/Powertrain systems", "parameters": {"position": {"type": "float", "description": "The position of the throttle (e.g., 0.0, 0.5, 1.0)"}}, "required": ["position"], "responses": {"success": {"type": "bool", "description": "Indicates whether the throttle position was successfully set"}}}
{"api_name": "getEnginePower", "api_description": "Retrieve the current power output of the engine", "field": "Automotive/Powertrain systems", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle"}, "unit": {"type": "str", "description": "The desired unit for power output (e.g., horsepower, kilowatts)"}}, "required": ["vehicle_id"], "responses": {"power_output": {"type": "float", "description": "The current power output of the engine"}, "unit": {"type": "str", "description": "The unit in which the power output is provided"}}}
{"api_name": "getVehicleHealth", "api_description": "Retrieve the health status of a vehicle's electronics system", "field": "Automotive/Automotive electronics", "parameters": {"vin": {"type": "str", "description": "The Vehicle Identification Number (VIN) of the vehicle"}, "module": {"type": "str", "description": "The specific electronics module to check the health of (e.g., ECU, ABS, Airbag)"}, "diagnostic_tool": {"type": "str", "description": "The diagnostic tool to be used for retrieving the health status (e.g., OBD-II scanner, manufacturer-specific tool)"}, "language": {"type": "str", "description": "The preferred language for the diagnostic report (e.g., English, Spanish, German)"}}, "required": ["vin", "module", "diagnostic_tool"], "responses": {"health_status": {"type": "str", "description": "The health status of the specified electronics module (e.g., normal, malfunctioning, faulty)"}, "diagnostic_report": {"type": "str", "description": "The complete diagnostic report in the preferred language"}}}
{"api_name": "getEngineStatus", "api_description": "Retrieve the status of the engine in a vehicle", "field": "Automotive/Automotive electronics", "parameters": {}, "required": [], "responses": {"engine_status": {"type": "str", "description": "The status of the engine (e.g., running, stopped, idle)"}}}
{"api_name": "getCarSpecifications", "api_description": "Retrieve specifications of a car model", "field": "Automotive/Automotive manufacturing", "parameters": {"manufacturer": {"type": "str", "description": "The name of the automotive manufacturer (e.g., Toyota, Ford, Volkswagen)"}, "model": {"type": "str", "description": "The model of the car (e.g., Camry, Focus, Golf)"}}, "required": ["manufacturer", "model"], "responses": {"engine_type": {"type": "str", "description": "The type of engine used in the car"}, "horsepower": {"type": "int", "description": "The horsepower of the car's engine"}, "fuel_efficiency": {"type": "float", "description": "The fuel efficiency of the car in miles per gallon (MPG)"}, "seating_capacity": {"type": "int", "description": "The number of seats in the car"}}}
{"api_name": "getCarPricing", "api_description": "Retrieve pricing information for a car model", "field": "Automotive/Automotive manufacturing", "parameters": {"manufacturer": {"type": "str", "description": "The name of the automotive manufacturer (e.g., Toyota, Ford, Volkswagen)"}, "model": {"type": "str", "description": "The model of the car (e.g., Camry, Focus, Golf)"}, "year": {"type": "int", "description": "The year of the car (e.g., 2022, 2023, 2024)"}}, "required": ["manufacturer", "model", "year"], "responses": {"base_price": {"type": "float", "description": "The base price of the car"}, "taxes": {"type": "float", "description": "The taxes applicable on the car price"}, "total_price": {"type": "float", "description": "The total price of the car including taxes"}}}
{"api_name": "getSafetyRating", "api_description": "Retrieve safety rating information for a specific vehicle", "field": "Automotive/Automotive safety", "parameters": {"make": {"type": "str", "description": "The make of the vehicle (e.g., Honda, Toyota, Ford)"}, "model": {"type": "str", "description": "The model of the vehicle (e.g., Accord, Camry, Mustang)"}, "year": {"type": "int", "description": "The manufacturing year of the vehicle (e.g., 2015, 2020, 2018)"}}, "required": ["make", "model", "year"], "responses": {"safety_rating": {"type": "float", "description": "The safety rating of the specified vehicle"}, "crash_test_results": {"type": "str", "description": "Detailed crash test results of the vehicle"}}}
{"api_name": "getVehicleCrashRating", "api_description": "Retrieve the crash safety rating of a vehicle", "field": "Automotive/Automotive safety", "parameters": {"make": {"type": "str", "description": "The make of the vehicle (e.g., Toyota, Honda, Ford)"}, "model": {"type": "str", "description": "The model of the vehicle (e.g., Camry, Civic, Fusion)"}, "year": {"type": "int", "description": "The year of the vehicle (e.g., 2018, 2019, 2020)"}, "country": {"type": "str", "description": "The country where the vehicle is manufactured (e.g., USA, Japan, Germany)"}, "rating_type": {"type": "str", "description": "The type of crash safety rating to retrieve (e.g., Overall, Frontal, Side)"}, "language": {"type": "str", "description": "The desired language for the rating response (e.g., English, Spanish, German)"}}, "required": ["make", "model", "year"], "responses": {"rating": {"type": "float", "description": "The crash safety rating of the specified vehicle"}, "rating_type": {"type": "str", "description": "The type of crash safety rating provided"}}}
{"api_name": "getAirbagStatus", "api_description": "Retrieve information about the airbags in a car", "field": "Automotive/Automotive safety", "parameters": {"car_model": {"type": "str", "description": "The model of the car for which you want to get airbag information (e.g., Honda Civic, BMW X5)"}, "year": {"type": "int", "description": "The year of the car model (e.g., 2021, 2020, 2019)"}}, "required": ["car_model"], "responses": {"airbag_status": {"type": "str", "description": "The status of airbags in the specified car model (e.g., equipped, not equipped)"}}}
{"api_name": "getAerodynamicDrag", "api_description": "Calculate the aerodynamic drag of a vehicle", "field": "Automotive/Automotive aerodynamics", "parameters": {"vehicle_speed": {"type": "float", "description": "The speed of the vehicle in meters per second"}, "frontal_area": {"type": "float", "description": "The frontal area of the vehicle in square meters"}, "coefficient_of_drag": {"type": "float", "description": "The coefficient of drag of the vehicle"}}, "required": ["vehicle_speed", "frontal_area", "coefficient_of_drag"], "responses": {"drag_force": {"type": "float", "description": "The aerodynamic drag force acting on the vehicle"}}}
{"api_name": "getDragCoefficient", "api_description": "Retrieve the drag coefficient of a car", "field": "Automotive/Automotive aerodynamics", "parameters": {"car_model": {"type": "str", "description": "The model of the car for which you want to get the drag coefficient (e.g., Tesla Model S, BMW M3)"}, "speed": {"type": "float", "description": "The speed of the car in km/h (e.g., 100, 120, 150)"}, "temperature": {"type": "float", "description": "The ambient temperature in Celsius (e.g., 20, 25, 30)"}, "altitude": {"type": "float", "description": "The altitude at which the car is being tested in meters (e.g., 0, 100, 500)"}}, "required": ["car_model", "speed"], "responses": {"drag_coefficient": {"type": "float", "description": "The drag coefficient of the specified car at the given speed"}}}
{"api_name": "getErgonomicsData", "api_description": "Retrieve ergonomics data for automotive", "field": "Automotive/Automotive ergonomics", "parameters": {"car_make": {"type": "str", "description": "The make of the car for which you want to retrieve ergonomics data (e.g., Toyota, Ford, BMW)"}, "car_model": {"type": "str", "description": "The model of the car for which you want to retrieve ergonomics data (e.g., Camry, Mustang, X5)"}, "driver_height": {"type": "float", "description": "The height of the driver in inches"}, "driver_seat_position": {"type": "str", "description": "The position of the driver's seat (e.g., forward, backward)"}, "steering_wheel_position": {"type": "str", "description": "The position of the steering wheel (e.g., tilted up, tilted down)"}, "mirror_position": {"type": "str", "description": "The position of the mirrors (e.g., adjusted correctly, adjusted incorrectly)"}}, "required": ["car_make", "car_model"], "responses": {"seat_adjustment_recommendations": {"type": "str", "description": "Recommendations for adjusting the driver's seat for optimal ergonomics"}, "steering_wheel_adjustment_recommendations": {"type": "str", "description": "Recommendations for adjusting the steering wheel for optimal ergonomics"}, "mirror_adjustment_recommendations": {"type": "str", "description": "Recommendations for adjusting the mirrors for optimal ergonomics"}}}
{"api_name": "getSeatComfort", "api_description": "Get the seat comfort level for a given car model", "field": "Automotive/Automotive ergonomics", "parameters": {"model": {"type": "str", "description": "The car model for which you want to get the seat comfort level (e.g., Toyota Camry, BMW 3 Series)"}, "driver_height": {"type": "float", "description": "The height of the driver in centimeters (e.g., 175, 180)"}, "driver_weight": {"type": "float", "description": "The weight of the driver in kilograms (e.g., 70, 85)"}, "seat_type": {"type": "str", "description": "The type of seat (e.g., leather, cloth)"}}, "required": ["model"], "responses": {"seat_comfort_level": {"type": "str", "description": "The seat comfort level of the specified car model (e.g., Poor, Fair, Good, Excellent)"}}}
{"api_name": "checkEngineLight", "api_description": "Check if the engine light is on for a vehicle", "field": "Automotive/Automotive maintenance", "parameters": {"vehicle_identification_number": {"type": "str", "description": "The unique identification number for the vehicle (e.g., ABC123456789)"}, "make": {"type": "str", "description": "The make of the vehicle (e.g., Toyota, Ford)"}, "model": {"type": "str", "description": "The model of the vehicle (e.g., Camry, Mustang)"}, "year": {"type": "int", "description": "The manufacturing year of the vehicle (e.g., 2010, 2022)"}}, "required": ["vehicle_identification_number"], "responses": {"is_engine_light_on": {"type": "bool", "description": "Indicates whether the engine light is on or off for the specified vehicle"}}}
{"api_name": "updateSoftware", "api_description": "Update the software of a vehicle", "field": "Automotive/Automotive software", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle"}, "software_version": {"type": "str", "description": "The version of the software to be updated"}}, "required": ["vehicle_id", "software_version"], "responses": {"success": {"type": "bool", "description": "Indicates whether the software update was successful"}}}
{"api_name": "getOdometer", "api_description": "Retrieve current odometer reading of the vehicle", "field": "Automotive/Automotive software", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle (e.g., VIN number)"}, "unit": {"type": "str", "description": "The desired unit for odometer reading (e.g., kilometers, miles)"}}, "required": ["vehicle_id"], "responses": {"odometer": {"type": "float", "description": "The current reading of the vehicle's odometer"}, "unit": {"type": "str", "description": "The unit in which the odometer reading is provided"}}}
{"api_name": "getSoftwareVersion", "api_description": "Retrieve the software version of a vehicle", "field": "Automotive/Automotive software", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle (e.g., VIN or license plate number)"}}, "required": ["vehicle_id"], "responses": {"software_version": {"type": "str", "description": "The software version installed in the vehicle"}}}
{"api_name": "checkSoftwareUpdate", "api_description": "Check if there is a software update available for a vehicle", "field": "Automotive/Automotive software", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle (e.g., VIN or license plate number)"}, "current_version": {"type": "str", "description": "The current software version installed in the vehicle"}}, "required": ["vehicle_id", "current_version"], "responses": {"update_available": {"type": "bool", "description": "Flag indicating if a software update is available"}, "latest_version": {"type": "str", "description": "The latest software version available for the vehicle"}}}
{"api_name": "downloadSoftwareUpdate", "api_description": "Download and install a software update in a vehicle", "field": "Automotive/Automotive software", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle (e.g., VIN or license plate number)"}, "update_version": {"type": "str", "description": "The software version to be downloaded and installed"}}, "required": ["vehicle_id", "update_version"], "responses": {"success": {"type": "bool", "description": "Flag indicating if the software update was successfully downloaded and installed"}}}
{"api_name": "driveRobot", "api_description": "Control the movement of an automotive robot", "field": "Automotive/Automotive robotics", "parameters": {"robot_id": {"type": "int", "description": "The ID of the robot that needs to be controlled"}, "direction": {"type": "str", "description": "The direction in which the robot needs to move (e.g., forward, backward, left, right)"}}, "required": ["robot_id", "direction"], "responses": {"success": {"type": "bool", "description": "Indicates whether the robot movement was successful or not"}}}
{"api_name": "getRobotSensors", "api_description": "Retrieve data from the sensors of an automotive robot", "field": "Automotive/Automotive robotics", "parameters": {"robot_id": {"type": "int", "description": "The ID of the robot from which you want to retrieve sensor data"}}, "required": ["robot_id"], "responses": {"sensor_data": {"type": "str", "description": "Data collected from the sensors of the robot"}}}
{"api_name": "getRobotErrors", "api_description": "Retrieve the current errors or faults of an automotive robot", "field": "Automotive/Automotive robotics", "parameters": {"robot_id": {"type": "str", "description": "The unique identifier of the robot (e.g., A123, B456, C789)"}}, "required": ["robot_id"], "responses": {"errors": {"type": "str", "description": "The current errors or faults of the robot (e.g., motor malfunction, sensor failure, communication error)"}}}
{"api_name": "lockVehicle", "api_description": "Lock a connected vehicle remotely", "field": "Automotive/Connected vehicles", "parameters": {"vin": {"type": "str", "description": "The unique Vehicle Identification Number of the vehicle"}}, "required": ["vin"], "responses": {"success": {"type": "bool", "description": "Indicates if the vehicle was successfully locked"}}}
{"api_name": "startEngine", "api_description": "Start the engine of a connected vehicle", "field": "Automotive/Connected vehicles", "parameters": {"vin": {"type": "str", "description": "The unique Vehicle Identification Number of the vehicle"}}, "required": ["vin"], "responses": {"success": {"type": "bool", "description": "Indicates if the vehicle engine was successfully started"}}}
{"api_name": "stopEngine", "api_description": "Stop the engine of a connected vehicle", "field": "Automotive/Connected vehicles", "parameters": {"vin": {"type": "str", "description": "The unique Vehicle Identification Number of the vehicle"}}, "required": ["vin"], "responses": {"success": {"type": "bool", "description": "Indicates if the vehicle engine was successfully stopped"}}}
{"api_name": "getOdometerReading", "api_description": "Retrieve the current odometer reading of a connected vehicle", "field": "Automotive/Connected vehicles", "parameters": {"vehicle_id": {"type": "str", "description": "The ID of the connected vehicle for which you want to retrieve the odometer reading"}}, "required": ["vehicle_id"], "responses": {"odometer_reading": {"type": "float", "description": "The current odometer reading of the vehicle"}}}
{"api_name": "getGPSCoordinates", "api_description": "Retrieve the GPS coordinates of an autonomous vehicle", "field": "Automotive/Autonomous vehicles", "parameters": {"vehicle_id": {"type": "str", "description": "The ID of the autonomous vehicle"}, "time_stamp": {"type": "int", "description": "The timestamp at which the GPS coordinates are required"}}, "required": ["vehicle_id"], "responses": {"latitude": {"type": "float", "description": "The latitude coordinate of the autonomous vehicle"}, "longitude": {"type": "float", "description": "The longitude coordinate of the autonomous vehicle"}}}
{"api_name": "getTrafficStatus", "api_description": "Retrieve the traffic status of autonomous vehicles in a specific location", "field": "Automotive/Autonomous vehicles", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the traffic status (e.g., Los Angeles, Tokyo, Berlin)"}}, "required": ["location"], "responses": {"status": {"type": "str", "description": "The traffic status of autonomous vehicles in the specified location"}}}
{"api_name": "getEVChargingStatus", "api_description": "Retrieve the current charging status of an electric vehicle", "field": "Automotive/Electric vehicles", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the electric vehicle"}, "location": {"type": "str", "description": "The location of the electric vehicle charging station"}}, "required": ["vehicle_id"], "responses": {"status": {"type": "str", "description": "The current charging status of the electric vehicle (e.g., charging, idle, disconnected)"}, "charging_duration": {"type": "str", "description": "The duration of the charging session in minutes"}, "battery_percentage": {"type": "float", "description": "The current battery percentage of the electric vehicle"}}}
{"api_name": "toggleHVAC", "api_description": "Toggle the HVAC system of an electric vehicle on or off", "field": "Automotive/Electric vehicles", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the electric vehicle"}}, "required": ["vehicle_id"], "responses": {"status": {"type": "str", "description": "The updated HVAC status of the electric vehicle (e.g., on, off)"}}}
{"api_name": "lockEVDoors", "api_description": "Lock the doors of an electric vehicle", "field": "Automotive/Electric vehicles", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the electric vehicle"}}, "required": ["vehicle_id"], "responses": {"status": {"type": "str", "description": "The updated door lock status of the electric vehicle (e.g., locked, unlocked)"}}}
{"api_name": "getHybridInfo", "api_description": "Retrieve information about hybrid vehicles", "field": "Automotive/Hybrid vehicles", "parameters": {"make": {"type": "str", "description": "The make of the hybrid vehicle (e.g., Toyota, Honda, Ford)"}, "model": {"type": "str", "description": "The model of the hybrid vehicle (e.g., Prius, Insight, Fusion)"}, "year": {"type": "int", "description": "The year of the hybrid vehicle (e.g., 2020, 2019, 2018)"}, "fuel_efficiency": {"type": "str", "description": "The desired fuel efficiency of the hybrid vehicle (e.g., high, moderate, low)"}}, "required": ["make", "model", "year"], "responses": {"hybrid_info": {"type": "str", "description": "Information about the specified hybrid vehicle (e.g., specifications, features, reviews)"}}}
{"api_name": "getHybridVehicleInfo", "api_description": "Retrieve information about hybrid vehicles", "field": "Automotive/Hybrid vehicles", "parameters": {"make": {"type": "str", "description": "The make of the hybrid vehicle (e.g., Toyota, Honda, Ford)"}, "model": {"type": "str", "description": "The model of the hybrid vehicle (e.g., Prius, Insight, Fusion)"}, "year": {"type": "int", "description": "The year of the hybrid vehicle (e.g., 2020, 2019, 2018)"}}, "required": ["make", "model", "year"], "responses": {"vehicle_info": {"type": "str", "description": "Information about the specified hybrid vehicle"}}}
{"api_name": "calculateTotalRange", "api_description": "Calculate the total range of a hybrid vehicle", "field": "Automotive/Hybrid vehicles", "parameters": {"fuel_capacity": {"type": "int", "description": "The capacity of the hybrid vehicle's fuel tank in liters"}, "fuel_efficiency": {"type": "float", "description": "The fuel efficiency of the hybrid vehicle in kilometers per liter"}, "battery_capacity": {"type": "int", "description": "The capacity of the hybrid vehicle's battery in kilowatt-hours"}, "electric_consumption": {"type": "float", "description": "The amount of electricity consumed by the hybrid vehicle in kilowatt-hours per kilometer"}}, "required": ["fuel_capacity", "fuel_efficiency", "battery_capacity", "electric_consumption"], "responses": {"total_range": {"type": "float", "description": "The total range of the hybrid vehicle in kilometers"}}}
{"api_name": "calculateGasolineSavings", "api_description": "Calculate the gasoline savings of a hybrid vehicle compared to a conventional vehicle", "field": "Automotive/Hybrid vehicles", "parameters": {"distance": {"type": "int", "description": "The distance traveled by the hybrid vehicle in kilometers"}, "fuel_efficiency_hybrid": {"type": "float", "description": "The fuel efficiency of the hybrid vehicle in kilometers per liter"}, "fuel_efficiency_conventional": {"type": "float", "description": "The fuel efficiency of the conventional vehicle in kilometers per liter"}}, "required": ["distance", "fuel_efficiency_hybrid", "fuel_efficiency_conventional"], "responses": {"gasoline_savings": {"type": "float", "description": "The gasoline savings of the hybrid vehicle compared to the conventional vehicle in liters"}}}
{"api_name": "getFuelCellVehicleInfo", "api_description": "Retrieve information about fuel cell vehicles", "field": "Automotive/Fuel cell vehicles", "parameters": {"manufacturer": {"type": "str", "description": "The manufacturer of the fuel cell vehicle"}, "model": {"type": "str", "description": "The model of the fuel cell vehicle"}, "year": {"type": "int", "description": "The year of the fuel cell vehicle production"}, "color": {"type": "str", "description": "The color of the fuel cell vehicle"}}, "required": [], "responses": {"manufacturer": {"type": "str", "description": "The manufacturer of the fuel cell vehicle"}, "model": {"type": "str", "description": "The model of the fuel cell vehicle"}, "year": {"type": "int", "description": "The year of the fuel cell vehicle production"}, "color": {"type": "str", "description": "The color of the fuel cell vehicle"}}}
{"api_name": "getCropYield", "api_description": "Retrieve crop yield information", "field": "Agriculture/Crop production", "parameters": {"crop_type": {"type": "str", "description": "The type of crop you want to get yield information for (e.g., corn, wheat, rice)"}, "location": {"type": "str", "description": "The location where the crop is grown (e.g., California, Punjab, Sichuan)"}, "year": {"type": "int", "description": "The year for which you want to get crop yield information"}}, "required": ["crop_type", "location", "year"], "responses": {"yield": {"type": "float", "description": "The yield of the specified crop in the specified location and year"}, "unit": {"type": "str", "description": "The unit of crop yield (e.g., tonnes, bushels)"}}}
{"api_name": "getMilkProduction", "api_description": "Retrieve milk production information for a specific dairy farm", "field": "Agriculture/Dairy farming", "parameters": {"farm_id": {"type": "str", "description": "The unique ID of the dairy farm (e.g., FARM123)"}, "date": {"type": "str", "description": "The date for which you want to get milk production (e.g., 2022-01-01)"}, "unit": {"type": "str", "description": "The desired unit for milk production (e.g., liters, gallons)"}, "fat_content": {"type": "float", "description": "The desired fat content of the milk (e.g., 3.5, 4.0)"}, "protein_content": {"type": "float", "description": "The desired protein content of the milk (e.g., 3.0, 3.5)"}}, "required": ["farm_id", "date"], "responses": {"milk_production": {"type": "float", "description": "The milk production at the specified dairy farm on the given date"}, "unit": {"type": "str", "description": "The unit of milk production in which the milk is provided"}}}
{"api_name": "getPoultryCount", "api_description": "Retrieve the count of poultry animals in a farm", "field": "Agriculture/Poultry farming", "parameters": {"farm_id": {"type": "str", "description": "The unique identifier of the poultry farm"}}, "required": ["farm_id"], "responses": {"count": {"type": "int", "description": "The number of poultry animals in the specified farm"}}}
{"api_name": "getPoultryWeight", "api_description": "Retrieve the average weight of poultry in a farm", "field": "Agriculture/Poultry farming", "parameters": {"farm_id": {"type": "str", "description": "The unique identifier of the poultry farm"}, "animal_type": {"type": "str", "description": "The type of poultry (e.g., chicken, turkey)"}, "age_range": {"type": "str", "description": "Specify an age range for poultry (e.g., young, adult, all)"}}, "required": ["farm_id"], "responses": {"weight": {"type": "float", "description": "The average weight of poultry in the farm"}}}
{"api_name": "getAquacultureData", "api_description": "Retrieve aquaculture data for a specific location", "field": "Agriculture/Aquaculture", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve the aquaculture data (e.g., coastal area, fish farm, lake)"}, "species": {"type": "str", "description": "The specific species of aquaculture you are interested in (e.g., salmon, shrimp, oysters)"}, "time_frame": {"type": "str", "description": "Specify a time frame for the aquaculture data (e.g., monthly, yearly)"}}, "required": ["location", "species"], "responses": {"production": {"type": "float", "description": "The aquaculture production for the specified location and species"}, "unit": {"type": "str", "description": "The unit of measurement for the aquaculture production"}}}
{"api_name": "getPlantCareTips", "api_description": "Retrieve care tips for a specific plant", "field": "Agriculture/Horticulture", "parameters": {"plant_name": {"type": "str", "description": "The name of the plant you need care tips for (e.g., succulent, orchid, fern)"}}, "required": ["plant_name"], "responses": {"tips": {"type": "str", "description": "Useful tips and guidelines for caring for the specified plant"}}}
{"api_name": "getPlantDetails", "api_description": "Retrieve details about a specific plant", "field": "Agriculture/Horticulture", "parameters": {"plant_name": {"type": "str", "description": "The name of the plant you want information for (e.g., Rose, Tomato, Orchid)"}}, "required": ["plant_name"], "responses": {"plant_details": {"type": "str", "description": "Detailed information about the specified plant"}, "growth_period": {"type": "str", "description": "The growth period of the plant (e.g., Annual, Perennial)"}, "care_instructions": {"type": "str", "description": "Instructions on how to care for the plant"}}}
{"api_name": "getWeatherForVineyard", "api_description": "Retrieve current weather information for a vineyard", "field": "Agriculture/Viticulture", "parameters": {"vineyard_id": {"type": "int", "description": "The ID of the vineyard for which you want to get the weather information"}, "unit": {"type": "str", "description": "The desired unit for temperature (e.g., Celsius, Fahrenheit)"}, "time_of_day": {"type": "str", "description": "Specify a time of day for weather information (e.g., morning, afternoon, night)"}}, "required": ["vineyard_id"], "responses": {"temperature": {"type": "float", "description": "The temperature at the vineyard"}, "humidity": {"type": "float", "description": "The humidity at the vineyard"}, "precipitation": {"type": "float", "description": "The precipitation at the vineyard"}, "wind_speed": {"type": "float", "description": "The wind speed at the vineyard"}, "unit": {"type": "str", "description": "The unit of temperature in which the temperature is provided"}}}
{"api_name": "getArboricultureRecommendations", "api_description": "Retrieve recommendations for arboriculture practices", "field": "Agriculture/Arboriculture", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the recommendations (e.g., city, farm, garden)"}, "tree_species": {"type": "str", "description": "The tree species for which you want to get recommendations (e.g., oak, maple, pine)"}, "soil_type": {"type": "str", "description": "The type of soil in the location (e.g., sandy, clay, loam)"}}, "required": ["location", "tree_species"], "responses": {"recommendations": {"type": "str", "description": "Recommended arboriculture practices for the specified location and tree species"}}}
{"api_name": "getTreeHeight", "api_description": "Retrieve the height of a tree", "field": "Agriculture/Arboriculture", "parameters": {"tree_type": {"type": "str", "description": "The type of tree (e.g., oak, pine, maple)"}, "location": {"type": "str", "description": "The location of the tree (e.g., park, garden, forest)"}}, "required": ["tree_type", "location"], "responses": {"height": {"type": "float", "description": "The height of the tree in meters"}}}
{"api_name": "getTreeAge", "api_description": "Retrieve the age of a tree", "field": "Agriculture/Arboriculture", "parameters": {"tree_type": {"type": "str", "description": "The type of tree (e.g., oak, pine, maple)"}, "location": {"type": "str", "description": "The location of the tree (e.g., park, garden, forest)"}}, "required": ["tree_type", "location"], "responses": {"age": {"type": "int", "description": "The age of the tree in years"}}}
{"api_name": "getTreeSpecies", "api_description": "Retrieve the species of a tree", "field": "Agriculture/Arboriculture", "parameters": {"tree_id": {"type": "int", "description": "The ID of the tree"}}, "required": ["tree_id"], "responses": {"species": {"type": "str", "description": "The species of the tree"}}}
{"api_name": "getAgroforestrySustainabilityIndex", "api_description": "Retrieve the sustainability index of agroforestry practices", "field": "Agriculture/Agroforestry", "parameters": {"location": {"type": "str", "description": "The location where agroforestry practices are being implemented (e.g., Brazil, Kenya, Australia)"}, "crop_type": {"type": "str", "description": "Type of crop being cultivated in the agroforestry system (e.g., maize, coffee, rubber)"}, "tree_species": {"type": "str", "description": "Tree species incorporated in the agroforestry system (e.g., Acacia, Eucalyptus, Teak)"}, "management_practices": {"type": "str", "description": "Current management practices applied in the agroforestry system (e.g., pruning, intercropping, mulching)"}}, "required": ["location", "crop_type", "tree_species"], "responses": {"sustainability_index": {"type": "float", "description": "The sustainability index of agroforestry practices at the specified location, crop type, tree species, and management practices"}}}
{"api_name": "getAgroforestryInfo", "api_description": "Retrieve information about agroforestry practices", "field": "Agriculture/Agroforestry", "parameters": {"crop": {"type": "str", "description": "The name of the crop for which you want agroforestry information (e.g., corn, wheat, rice)"}, "region": {"type": "str", "description": "The region where the agroforestry practices are applied (e.g., Europe, Asia, Africa)"}}, "required": ["crop"], "responses": {"info": {"type": "str", "description": "Detailed information about agroforestry practices for the specified crop and region"}}}
{"api_name": "getSoilpH", "api_description": "Retrieve soil pH information", "field": "Agriculture/Soil science", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the soil pH (e.g., field, garden)"}}, "required": ["location"], "responses": {"pH": {"type": "float", "description": "The pH value of the soil at the specified location"}}}
{"api_name": "getAgriculturalPolicy", "api_description": "Retrieve information about agricultural policies", "field": "Agriculture/Agricultural policy", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the agricultural policy information (e.g., United States, France, Brazil)"}}, "required": ["country"], "responses": {"policy": {"type": "str", "description": "The agricultural policy implemented in the specified country"}}}
{"api_name": "getCropGrowthStage", "api_description": "Retrieve current growth stage of a crop", "field": "Agriculture/Precision agriculture", "parameters": {"location": {"type": "str", "description": "The location where the crop is planted (e.g., farm name, coordinates)"}, "crop_type": {"type": "str", "description": "The type of crop you want to check the growth stage for (e.g., wheat, corn, soybeans)"}}, "required": ["location", "crop_type"], "responses": {"growth_stage": {"type": "str", "description": "The current growth stage of the specified crop"}}}
{"api_name": "getPestAlerts", "api_description": "Retrieve pest alerts for a specific location", "field": "Agriculture/Precision agriculture", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the pest alerts (e.g., farm name, coordinates)"}}, "required": ["location"], "responses": {"pests": {"type": "str", "description": "The list of pests that have been reported in the specified location"}, "alert_level": {"type": "str", "description": "The severity level of the pest alert"}}}
{"api_name": "getCropDisease", "api_description": "Retrieve information about crop diseases", "field": "Agriculture/Agricultural biotechnology", "parameters": {"crop": {"type": "str", "description": "The crop for which you want to get disease information (e.g., wheat, rice, corn)"}, "location": {"type": "str", "description": "The location for which you want to get disease information (e.g., farm, greenhouse, field)"}, "season": {"type": "str", "description": "The season for which you want to get disease information (e.g., summer, winter, monsoon)"}}, "required": ["crop", "location"], "responses": {"disease_name": {"type": "str", "description": "The name of the crop disease"}, "symptoms": {"type": "str", "description": "The symptoms of the crop disease"}, "prevention_methods": {"type": "str", "description": "The prevention methods for the crop disease"}}}
{"api_name": "searchCrop", "api_description": "Search for information about a specific crop", "field": "Agriculture/Agricultural biotechnology", "parameters": {"crop_name": {"type": "str", "description": "The name of the crop you want to search for (e.g., Wheat, Corn, Rice)"}, "Genetic_modification": {"type": "str", "description": "Specify if the crop is genetically modified (e.g., Yes, No)"}, "Growth_stage": {"type": "str", "description": "Specify the growth stage of the crop (e.g., Seedling, Vegetative, Reproductive)"}, "Nutrient_requirements": {"type": "str", "description": "Specify the nutrient requirements of the crop (e.g., Nitrogen, Phosphorus, Potassium)"}, "Disease_resistance": {"type": "str", "description": "Specify the disease resistance of the crop (e.g., Fungal, Bacterial, Viral)"}}, "required": ["crop_name"], "responses": {"crop_info": {"type": "str", "description": "Detailed information about the specified crop"}, "genetic_modification": {"type": "str", "description": "Information about the genetic modification of the crop"}, "growth_stage_info": {"type": "str", "description": "Information about the specified growth stage"}, "nutrient_info": {"type": "str", "description": "Information about the nutrient requirements of the crop"}, "disease_resistance_info": {"type": "str", "description": "Information about the disease resistance of the crop"}}}
{"api_name": "getPlantGenotype", "api_description": "Retrieve the genotype information of a specific plant species", "field": "Agriculture/Agricultural biotechnology", "parameters": {"plant_species": {"type": "str", "description": "The specific plant species for which you want to retrieve genotype information (e.g., corn, soybean, tomato)"}, "gene_marker": {"type": "str", "description": "The gene marker used to identify specific genetic traits (e.g., Bt, Roundup Ready)"}, "region": {"type": "str", "description": "The geographic region where the plant genotype is of interest (e.g., North America, Europe)"}}, "required": ["plant_species", "gene_marker"], "responses": {"genotype_data": {"type": "str", "description": "The genotype data of the specified plant species"}, "genetic_traits": {"type": "str", "description": "A list of genetic traits associated with the plant genotype"}}}
{"api_name": "getGMOInfo", "api_description": "Retrieve information about genetically modified organisms (GMOs)", "field": "Agriculture/Agricultural biotechnology", "parameters": {"crop": {"type": "str", "description": "The type of crop you want to get GMO information for (e.g., corn, soybeans, cotton)"}, "country": {"type": "str", "description": "The country for which you want to get GMO information (e.g., United States, Brazil, India)"}, "trait": {"type": "str", "description": "The specific trait you are interested in (e.g., herbicide tolerance, insect resistance)"}, "company": {"type": "str", "description": "The company responsible for the GMO development"}}, "required": ["crop", "country"], "responses": {"information": {"type": "str", "description": "Detailed information about the GMO, including its traits and company responsible"}}}
{"api_name": "getGreenhouseTemperature", "api_description": "Retrieve the current temperature inside a greenhouse", "field": "Agriculture/Greenhouse farming", "parameters": {"greenhouse_id": {"type": "str", "description": "The ID of the greenhouse (e.g., GH123)"}, "unit": {"type": "str", "description": "The desired unit for temperature (e.g., Celsius, Fahrenheit)"}}, "required": ["greenhouse_id"], "responses": {"temperature": {"type": "float", "description": "The current temperature inside the specified greenhouse"}, "unit": {"type": "str", "description": "The unit of temperature in which the temperature is provided"}}}
{"api_name": "getGreenhouseHumidity", "api_description": "Retrieve current humidity information in a greenhouse", "field": "Agriculture/Greenhouse farming", "parameters": {"greenhouse_id": {"type": "int", "description": "The ID of the greenhouse for which you want to get the humidity"}}, "required": ["greenhouse_id"], "responses": {"humidity": {"type": "float", "description": "The humidity inside the greenhouse"}}}
{"api_name": "getGreenhouseLight", "api_description": "Retrieve current light intensity information in a greenhouse", "field": "Agriculture/Greenhouse farming", "parameters": {"greenhouse_id": {"type": "int", "description": "The ID of the greenhouse for which you want to get the light intensity"}}, "required": ["greenhouse_id"], "responses": {"light_intensity": {"type": "float", "description": "The light intensity inside the greenhouse"}}}
{"api_name": "getGreenhouseCO2Level", "api_description": "Retrieve current CO2 level information in a greenhouse", "field": "Agriculture/Greenhouse farming", "parameters": {"greenhouse_id": {"type": "int", "description": "The ID of the greenhouse for which you want to get the CO2 level"}}, "required": ["greenhouse_id"], "responses": {"co2_level": {"type": "float", "description": "The CO2 level inside the greenhouse"}}}
{"api_name": "getGreenhouseSensorData", "api_description": "Retrieve sensor data from greenhouse", "field": "Agriculture/Greenhouse farming", "parameters": {"greenhouse_id": {"type": "str", "description": "The ID of the greenhouse for which you want to retrieve sensor data"}}, "required": ["greenhouse_id"], "responses": {"temperature": {"type": "float", "description": "The current temperature inside the greenhouse"}, "humidity": {"type": "float", "description": "The current humidity inside the greenhouse"}, "light_intensity": {"type": "int", "description": "The current light intensity inside the greenhouse"}}}
{"api_name": "getGreenhouseMoistureLevel", "api_description": "Retrieve current soil moisture level information in a greenhouse", "field": "Agriculture/Greenhouse farming", "parameters": {"greenhouse_id": {"type": "str", "description": "The ID of the greenhouse (e.g., GH001)"}, "zone_id": {"type": "str", "description": "The ID of the specific planting zone in the greenhouse (e.g., Z01)"}, "unit": {"type": "str", "description": "The desired unit for soil moisture level (e.g., Percentage, Volumetric)"}}, "required": ["greenhouse_id", "zone_id"], "responses": {"moisture_level": {"type": "float", "description": "The current soil moisture level in the specified planting zone"}, "unit": {"type": "str", "description": "The unit of soil moisture level in which the value is provided"}}}
{"api_name": "controlGreenhouseVentilation", "api_description": "Control the ventilation system in a greenhouse", "field": "Agriculture/Greenhouse farming", "parameters": {"greenhouse_id": {"type": "str", "description": "The ID of the greenhouse for which you want to control the ventilation"}, "mode": {"type": "str", "description": "The desired mode for the ventilation system (e.g., open, close)"}}, "required": ["greenhouse_id", "mode"], "responses": {"status": {"type": "str", "description": "The status of the ventilation system after the control operation"}}}
{"api_name": "getAgroecology", "api_description": "Retrieve agroecology information", "field": "Agriculture/Agroecology", "parameters": {}, "required": [], "responses": {"agroecology_info": {"type": "str", "description": "Information about agroecology"}}}
{"api_name": "getSeedGerminationRate", "api_description": "Retrieve the germination rate of a specific seed", "field": "Agriculture/Seed technology", "parameters": {"seed_type": {"type": "str", "description": "The type of seed (e.g., corn, wheat, soybean)"}, "temperature": {"type": "float", "description": "The average temperature during seed germination (e.g., in degrees Celsius)"}, "moisture": {"type": "float", "description": "The moisture content required for seed germination (e.g., in percentage)"}, "soil_type": {"type": "str", "description": "The type of soil for seed germination (e.g., loam, clay, sandy)"}, "seed_age": {"type": "int", "description": "The age of the seed in months"}}, "required": ["seed_type"], "responses": {"germination_rate": {"type": "float", "description": "The germination rate of the specified seed type in the given conditions"}}}
{"api_name": "simulateSeedGrowth", "api_description": "Simulate the growth of a seed in a given environment", "field": "Agriculture/Seed technology", "parameters": {"seed_type": {"type": "str", "description": "The type of seed (e.g., tomato, cucumber, lettuce)"}, "temperature": {"type": "float", "description": "The average temperature during seed growth (e.g., in degrees Celsius)"}, "moisture": {"type": "float", "description": "The moisture content required for seed growth (e.g., in percentage)"}, "sunlight_hours": {"type": "int", "description": "The number of hours of sunlight received per day"}, "soil_type": {"type": "str", "description": "The type of soil for seed growth (e.g., loam, clay, sandy)"}}, "required": ["seed_type", "temperature", "moisture"], "responses": {"growth_status": {"type": "str", "description": "The current growth status of the seed"}, "fruit_production": {"type": "float", "description": "The estimated fruit production volume in the given conditions"}}}
{"api_name": "getSeedInfo", "api_description": "Retrieve information about a specific seed", "field": "Agriculture/Seed technology", "parameters": {"seed_type": {"type": "str", "description": "The type of seed you want information about (e.g., corn, wheat, rice)"}, "region": {"type": "str", "description": "The region in which you want information about the seed (e.g., North America, Europe, Asia)"}}, "required": ["seed_type"], "responses": {"seed_properties": {"type": "str", "description": "The properties of the seed, such as growth rate, yield, disease resistance"}, "region_specific_info": {"type": "str", "description": "Specific information about the seed in the given region"}}}
{"api_name": "getMarketPrice", "api_description": "Retrieve current market price for agricultural products", "field": "Agriculture/Agricultural marketing", "parameters": {"product": {"type": "str", "description": "The agricultural product you want to get market price for (e.g., corn, wheat, soybeans)"}, "region": {"type": "str", "description": "The region for which you want to get the market price (e.g., Asia, Europe, North America)"}}, "required": ["product", "region"], "responses": {"market_price": {"type": "float", "description": "The current market price for the specified agricultural product in the given region"}}}
{"api_name": "updateFarmArea", "api_description": "Update the area of a farm", "field": "Agriculture/Farm management", "parameters": {"farm_id": {"type": "int", "description": "The ID of the farm for which you want to update the area"}, "new_area": {"type": "float", "description": "The new total area of the farm in hectares"}}, "required": ["farm_id", "new_area"], "responses": {"success": {"type": "bool", "description": "Indicates whether the update was successful"}}}
{"api_name": "deleteFarm", "api_description": "Delete a farm", "field": "Agriculture/Farm management", "parameters": {"farm_id": {"type": "int", "description": "The ID of the farm you want to delete"}}, "required": ["farm_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the deletion was successful"}}}
{"api_name": "addCropToFarm", "api_description": "Add a crop to a farm", "field": "Agriculture/Farm management", "parameters": {"farm_id": {"type": "int", "description": "The unique identifier of the farm"}, "crop_name": {"type": "str", "description": "The name of the crop"}, "quantity": {"type": "int", "description": "The quantity of the crop planted"}}, "required": ["farm_id", "crop_name", "quantity"], "responses": {"success": {"type": "bool", "description": "Indicates if the crop addition was successful"}}}
{"api_name": "addLivestockToFarm", "api_description": "Add a livestock to a farm", "field": "Agriculture/Farm management", "parameters": {"farm_id": {"type": "int", "description": "The unique identifier of the farm"}, "livestock_name": {"type": "str", "description": "The name of the livestock"}, "quantity": {"type": "int", "description": "The quantity of the livestock present in the farm"}}, "required": ["farm_id", "livestock_name", "quantity"], "responses": {"success": {"type": "bool", "description": "Indicates if the livestock addition was successful"}}}
{"api_name": "getFarm", "api_description": "Retrieve farm information", "field": "Agriculture/Farm management", "parameters": {"farm_id": {"type": "int", "description": "The ID of the farm you want to retrieve information for"}}, "required": ["farm_id"], "responses": {"farm_name": {"type": "str", "description": "The name of the farm"}, "location": {"type": "str", "description": "The location of the farm"}, "crop_type": {"type": "str", "description": "The type of crops grown in the farm"}, "farm_area": {"type": "float", "description": "The total area of the farm in hectares"}}}
{"api_name": "addCrop", "api_description": "Add a new crop to the farm", "field": "Agriculture/Farm management", "parameters": {"farm_id": {"type": "int", "description": "The ID of the farm where the crop will be added"}, "crop_name": {"type": "str", "description": "The name of the crop to be added"}, "crop_type": {"type": "str", "description": "The type of the crop (e.g., wheat, corn, rice)"}, "crop_area": {"type": "float", "description": "The area to be allocated for the new crop in hectares"}}, "required": ["farm_id", "crop_name", "crop_type", "crop_area"], "responses": {"success": {"type": "bool", "description": "Indicates whether the crop was successfully added"}}}
{"api_name": "getHarvest", "api_description": "Retrieve harvest details", "field": "Agriculture/Farm management", "parameters": {"farm_id": {"type": "int", "description": "The ID of the farm from which to retrieve harvest details"}, "crop_id": {"type": "int", "description": "The ID of the crop for which to retrieve harvest details"}}, "required": ["farm_id", "crop_id"], "responses": {"crop_name": {"type": "str", "description": "The name of the crop"}, "crop_yield": {"type": "float", "description": "The yield of the crop in kilograms"}, "harvest_date": {"type": "str", "description": "The date of the harvest"}, "quality_grade": {"type": "str", "description": "The quality grade of the harvested crop"}}}
{"api_name": "getFarmLoan", "api_description": "Retrieve farm loan information", "field": "Agriculture/Agricultural finance", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the farm loan information (e.g., county, state)"}, "crop": {"type": "str", "description": "The crop for which you need the loan (e.g., wheat, corn, soybean)"}, "loan_amount": {"type": "int", "description": "The desired loan amount in USD (e.g., 10000, 50000, 100000)"}}, "required": ["location", "crop"], "responses": {"interest_rate": {"type": "float", "description": "The interest rate for the farm loan"}, "loan_term": {"type": "int", "description": "The loan term in years"}, "loan_approval": {"type": "bool", "description": "Indicates whether the farm loan is approved or not"}}}
{"api_name": "getAgriculturalLoans", "api_description": "Retrieve information on agricultural loans", "field": "Agriculture/Agricultural finance", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information on agricultural loans (e.g., USA, India, Brazil)"}, "financial_institution": {"type": "str", "description": "The financial institution providing the agricultural loans (e.g., Bank of America, ICICI Bank, Banco do Brasil)"}}, "required": ["country"], "responses": {"loan_amount": {"type": "float", "description": "The loan amount provided for agricultural purposes"}, "interest_rate": {"type": "float", "description": "The interest rate for the agricultural loan"}, "currency": {"type": "str", "description": "The currency in which the loan amount is provided"}}}
{"api_name": "getNutrientRequirements", "api_description": "Retrieve the nutrient requirements for a specific crop", "field": "Agriculture/Agronomy", "parameters": {"crop": {"type": "str", "description": "The name of the crop (e.g., rice, potatoes, cotton)"}}, "required": ["crop"], "responses": {"nutrients": {"type": "str", "description": "The nutrient requirements for the specified crop"}}}
{"api_name": "getAgroclimatologyData", "api_description": "Retrieve agroclimatology data for a specific location", "field": "Agriculture/Agroclimatology", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve agroclimatology data (e.g., city, country)"}, "year": {"type": "int", "description": "The year for which you want to retrieve agroclimatology data"}, "crop_type": {"type": "str", "description": "The type of crop for which you want to retrieve agroclimatology data (e.g., wheat, corn, rice)"}}, "required": ["location", "year", "crop_type"], "responses": {"temperature": {"type": "float", "description": "The average temperature for the specified location, year, and crop type"}, "rainfall": {"type": "float", "description": "The average rainfall for the specified location, year, and crop type"}, "humidity": {"type": "float", "description": "The average humidity for the specified location, year, and crop type"}}}
{"api_name": "getAgriculturalStatistics", "api_description": "Retrieve agricultural statistics information", "field": "Agriculture/Agricultural statistics", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the agricultural statistics (e.g., USA, China, Brazil)"}, "crop_type": {"type": "str", "description": "The type of crop for which you want to get the statistics (e.g., wheat, rice, corn)"}, "year": {"type": "int", "description": "The year for which you want to get the statistics (e.g., 2020, 2021)"}, "region": {"type": "str", "description": "Specify a region for which you want to get the statistics (e.g., Midwest, Asia, North America)"}, "type": {"type": "str", "description": "Specify the type of statistics you want (e.g., production, yield, acreage)"}}, "required": ["country"], "responses": {"statistics": {"type": "float", "description": "The agricultural statistics for the specified parameters"}}}
{"api_name": "getAgribusinessData", "api_description": "Retrieve agribusiness data", "field": "Agriculture/Agribusiness", "parameters": {"region": {"type": "str", "description": "The region for which you want to get the agribusiness data (e.g., US, Europe, Asia)"}, "crop": {"type": "str", "description": "The specific crop for which you want to retrieve the agribusiness data (e.g., corn, wheat, rice)"}, "year": {"type": "int", "description": "The year for which you want to get the agribusiness data"}}, "required": ["region", "crop", "year"], "responses": {"production": {"type": "float", "description": "The production amount of the specified crop in the given region and year"}, "export": {"type": "float", "description": "The export amount of the specified crop from the given region in the given year"}, "import": {"type": "float", "description": "The import amount of the specified crop to the given region in the given year"}}}
{"api_name": "getWeedDensity", "api_description": "Retrieve weed density information in a specific location", "field": "Agriculture/Weed science", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the weed density (e.g., farm, field, garden)"}, "crop_type": {"type": "str", "description": "The type of crop being grown (e.g., corn, wheat, soybean)"}, "planting_date": {"type": "str", "description": "The date of crop planting (e.g., yyyy-mm-dd)"}, "sample_size": {"type": "int", "description": "The number of sample points to be considered for weed density estimation"}}, "required": ["location", "crop_type"], "responses": {"weed_density": {"type": "float", "description": "The estimated density of weeds in the specified location"}, "units": {"type": "str", "description": "The unit of weed density (e.g., plants per square meter)"}}}
{"api_name": "calculateWeedControlIndex", "api_description": "Calculate the weed control index of a herbicide", "field": "Agriculture/Weed science", "parameters": {"herbicide_name": {"type": "str", "description": "The name of the herbicide for calculating the weed control index (e.g., Glyphosate, Atrazine)"}, "dosage": {"type": "float", "description": "The dosage of the herbicide applied in the field (e.g., 2.5, 5.0, 7.5)"}, "weed_species": {"type": "str", "description": "The target weed species for which the herbicide is intended"}}, "required": ["herbicide_name", "dosage", "weed_species"], "responses": {"weed_control_index": {"type": "float", "description": "The calculated weed control index for the specified herbicide and dosage"}}}
{"api_name": "applyFertilizer", "api_description": "Apply fertilizer to a specific crop", "field": "Agriculture/Agricultural technology", "parameters": {"crop_name": {"type": "str", "description": "The name of the crop (e.g., wheat, rice, corn)"}, "fertilizer_type": {"type": "str", "description": "The type of fertilizer to be applied (e.g., nitrogen-based, phosphorus-based)"}}, "required": ["crop_name", "fertilizer_type"], "responses": {"success": {"type": "bool", "description": "Indicates whether the fertilizer application was successful"}}}
{"api_name": "monitorPestInfestation", "api_description": "Monitor the infestation of pests in a specific crop", "field": "Agriculture/Agricultural technology", "parameters": {"crop_name": {"type": "str", "description": "The name of the crop (e.g., wheat, rice, corn)"}}, "required": ["crop_name"], "responses": {"pest_type": {"type": "str", "description": "The type of pest infesting the crop"}, "pest_count": {"type": "int", "description": "The count of pests in the crop"}}}
{"api_name": "irrigateCrop", "api_description": "Irrigate a specific crop", "field": "Agriculture/Agricultural technology", "parameters": {"crop_name": {"type": "str", "description": "The name of the crop (e.g., wheat, rice, corn)"}}, "required": ["crop_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the irrigation was successful"}}}
{"api_name": "getPlantingInstructions", "api_description": "Retrieve planting instructions for specific crop", "field": "Agriculture/Agricultural technology", "parameters": {"crop_name": {"type": "str", "description": "The name of the crop you want planting instructions for (e.g., tomatoes, corn, wheat)"}, "soil_type": {"type": "str", "description": "The type of soil in which the crop will be planted (e.g., loam, clay, sandy)"}, "climate_zone": {"type": "str", "description": "The climate zone in which the crop will be planted (e.g., tropical, temperate, arid)"}, "growth_stage": {"type": "str", "description": "The growth stage of the crop for which you want instructions (e.g., germination, flowering, harvesting)"}}, "required": ["crop_name"], "responses": {"instructions": {"type": "str", "description": "The detailed planting instructions for the specified crop at the given growth stage"}}}
{"api_name": "getFertilizerRecommendation", "api_description": "Get fertilizer recommendation for a specific crop", "field": "Agriculture/Agricultural technology", "parameters": {"crop_name": {"type": "str", "description": "The name of the crop for which you want fertilizer recommendation (e.g., lettuce, rice, soybeans)"}, "soil_type": {"type": "str", "description": "The type of soil in which the crop will be planted (e.g., loam, clay, sandy)"}, "nutrient_level": {"type": "str", "description": "The expected level of nutrients in the soil (e.g., low, medium, high)"}, "growth_stage": {"type": "str", "description": "The growth stage of the crop for which you want fertilizer recommendation (e.g., seedling, vegetative, flowering)"}, "target_yield": {"type": "float", "description": "The desired yield of the crop in kilograms"}}, "required": ["crop_name"], "responses": {"recommendation": {"type": "str", "description": "The recommended type and amount of fertilizer for the specified crop at the given growth stage and target yield"}}}
{"api_name": "getCropHarvestTime", "api_description": "Retrieve crop harvest time information", "field": "Agriculture/Agricultural technology", "parameters": {"crop_name": {"type": "str", "description": "The name of the crop you want to get harvest time information for (e.g., apples, grapes, pears)"}, "planting_date": {"type": "str", "description": "The date when the crop was planted (e.g., yyyy-mm-dd)"}, "location": {"type": "str", "description": "The location where the crop is planted (e.g., city, country)"}, "climate_conditions": {"type": "str", "description": "The climate conditions in which the crop is planted (e.g., temperate, tropical, arid)"}}, "required": ["crop_name", "planting_date"], "responses": {"harvest_time": {"type": "str", "description": "The estimated time for harvesting the specified crop based on planting date, location, and climate conditions"}}}
{"api_name": "getCropData", "api_description": "Retrieve information about a specific crop", "field": "Agriculture/Agroinformatics", "parameters": {"crop_name": {"type": "str", "description": "The name of the crop you want data for (e.g., corn, wheat, rice)"}, "location": {"type": "str", "description": "The location for which you want crop data (e.g., Iowa, Punjab, Mato Grosso)"}, "year": {"type": "int", "description": "The year for which you want crop data (e.g., 2020, 2019, 2018)"}}, "required": ["crop_name", "location"], "responses": {"yield": {"type": "float", "description": "The yield of the specified crop in the given location (in metric tons per hectare)"}, "price": {"type": "float", "description": "The average price of the specified crop in the given location (in local currency per ton)"}, "production": {"type": "float", "description": "The total production of the specified crop in the given location (in metric tons)"}}}
{"api_name": "analyzeCompostingProcess", "api_description": "Analyze the composting process of agricultural waste", "field": "Agriculture/Agricultural waste management", "parameters": {"compost_type": {"type": "str", "description": "The type of composting process (e.g., open windrow, aerated static pile)"}, "waste_type": {"type": "str", "description": "The type of agricultural waste being composted (e.g., crop residues, manure, food waste)"}}, "required": ["compost_type", "waste_type"], "responses": {"compost_quality": {"type": "str", "description": "The quality of the compost produced from the specified composting process"}}}
{"api_name": "calculateSustainabilityIndex", "api_description": "Calculate the sustainability index of an agricultural system", "field": "Agriculture/Agricultural sustainability", "parameters": {"crop_yield": {"type": "float", "description": "The average yield of crops per acre (e.g., 5000 kg/acre)"}, "water_usage": {"type": "float", "description": "The amount of water used for irrigation per acre (e.g., 10000 liters/acre)"}, "pesticide_usage": {"type": "float", "description": "The amount of pesticides used per acre (e.g., 5 kg/acre)"}, "fertilizer_usage": {"type": "float", "description": "The amount of fertilizers used per acre (e.g., 50 kg/acre)"}}, "required": ["crop_yield", "water_usage", "pesticide_usage", "fertilizer_usage"], "responses": {"sustainability_index": {"type": "float", "description": "The sustainability index calculated for the agricultural system (ranging from 0 to 1)"}}}
{"api_name": "calculateCropWaterRequirement", "api_description": "Calculate the water requirement for a specific crop", "field": "Agriculture/Agricultural sustainability", "parameters": {"crop_name": {"type": "str", "description": "The name of the crop for which the water requirement needs to be calculated"}}, "required": ["crop_name"], "responses": {"water_requirement": {"type": "float", "description": "The amount of water required for the specified crop"}}}
{"api_name": "convertToMP3", "api_description": "Convert a digital media file to MP3 format", "field": "Media/Digital Media", "parameters": {"file_path": {"type": "str", "description": "The path of the input media file"}, "bit_rate": {"type": "int", "description": "The desired audio bit rate in kbps (e.g., 128, 256, 320)"}, "output_path": {"type": "str", "description": "The path where the converted MP3 file will be saved"}}, "required": ["file_path", "output_path"], "responses": {"converted_file_path": {"type": "str", "description": "The path of the converted MP3 file"}}}
{"api_name": "resizeImage", "api_description": "Resize a digital image to a specific width and height", "field": "Media/Digital Media", "parameters": {"image_path": {"type": "str", "description": "The path of the input image file"}, "width": {"type": "int", "description": "The desired width of the resized image in pixels"}, "height": {"type": "int", "description": "The desired height of the resized image in pixels"}, "output_path": {"type": "str", "description": "The path where the resized image will be saved"}}, "required": ["image_path", "width", "height", "output_path"], "responses": {"resized_image_path": {"type": "str", "description": "The path of the resized image"}}}
{"api_name": "getDigitalMediaInfo", "api_description": "Retrieve information about a digital media item", "field": "Media/Digital Media", "parameters": {"media_id": {"type": "str", "description": "The unique identifier of the digital media item"}}, "required": ["media_id"], "responses": {"title": {"type": "str", "description": "The title of the digital media item"}, "duration": {"type": "int", "description": "The duration of the digital media item in seconds"}, "file_type": {"type": "str", "description": "The file type of the digital media item"}}}
{"api_name": "getNews", "api_description": "Retrieve news information", "field": "Media/Journalism", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the news (e.g., USA, UK, China)"}, "category": {"type": "str", "description": "The desired news category (e.g., politics, sports, entertainment)"}, "language": {"type": "str", "description": "Specify the language of the news (e.g., English, Spanish, French)"}}, "required": ["location"], "responses": {"news": {"type": "str", "description": "The news article or headlines"}, "source": {"type": "str", "description": "The source of the news article"}, "publish_date": {"type": "str", "description": "The date of publication"}}}
{"api_name": "cropImage", "api_description": "Crop an image to a desired size and aspect ratio", "field": "Media/Editing", "parameters": {"image_path": {"type": "str", "description": "The path of the image to be cropped"}, "width": {"type": "int", "description": "The desired width of the cropped image in pixels"}, "height": {"type": "int", "description": "The desired height of the cropped image in pixels"}, "aspect_ratio": {"type": "float", "description": "The desired aspect ratio of the cropped image"}}, "required": ["image_path", "width", "height"], "responses": {"cropped_image_path": {"type": "str", "description": "The path where the cropped image is saved"}}}
{"api_name": "recordVideo", "api_description": "Record a video using a camera", "field": "Media/Cinematography", "parameters": {"camera": {"type": "str", "description": "The camera used to record the video (e.g., DSLR, smartphone, action camera)"}, "resolution": {"type": "str", "description": "The desired resolution of the video (e.g., 1080p, 4K, 8K)"}, "fps": {"type": "int", "description": "The frames per second (FPS) of the video (e.g., 24, 30, 60)"}, "duration": {"type": "str", "description": "The duration of the video recording (e.g., 10 seconds, 2 minutes, 1 hour)"}}, "required": ["camera", "resolution"], "responses": {"video_file": {"type": "str", "description": "The file path or URL of the recorded video"}}}
{"api_name": "getMediaCoverage", "api_description": "Retrieve media coverage information", "field": "Media/Public Relations", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to get media coverage"}, "start_date": {"type": "str", "description": "The start date of the media coverage (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the media coverage (e.g., YYYY-MM-DD)"}}, "required": ["company_name"], "responses": {"articles": {"type": "str", "description": "The list of media articles related to the company"}}}
{"api_name": "getPublicRelations", "api_description": "Retrieve public relations information about a media outlet", "field": "Media/Public Relations", "parameters": {"media_outlet": {"type": "str", "description": "The name of the media outlet for which you want to retrieve public relations information (e.g., CNN, BBC, New York Times)"}}, "required": ["media_outlet"], "responses": {"contacts": {"type": "str", "description": "Contact information of public relations personnel for the media outlet"}, "recent_press_releases": {"type": "str", "description": "Links or summaries of recent press releases from the media outlet"}, "social_media_handles": {"type": "str", "description": "Social media handles of the media outlet"}}}
{"api_name": "analyzeMedia", "api_description": "Analyze media content to extract information and insights", "field": "Media/Media Analysis", "parameters": {"media_file": {"type": "str", "description": "The file path or URL of the media content you want to analyze"}, "language": {"type": "str", "description": "The language of the content (e.g., English, Spanish)"}, "analysis_type": {"type": "str", "description": "Specify the type of analysis to perform on the media (e.g., sentiment analysis, content categorization)"}, "time_frame": {"type": "str", "description": "Specify a time frame for the analysis (e.g., daily, weekly, monthly)"}}, "required": ["media_file", "analysis_type"], "responses": {"insights": {"type": "str", "description": "The extracted information and insights from the media analysis"}}}
{"api_name": "createMediaProject", "api_description": "Create a new media project", "field": "Media/Media Production", "parameters": {"project_name": {"type": "str", "description": "The name of the media project"}, "start_date": {"type": "str", "description": "The start date of the project (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the project (e.g., YYYY-MM-DD)"}, "client": {"type": "str", "description": "The name of the client or organization for the project"}}, "required": ["project_name", "start_date", "end_date"], "responses": {"project_id": {"type": "str", "description": "The unique ID assigned to the created media project"}}}
{"api_name": "assessEthicality", "api_description": "Assess the ethicality of media content", "field": "Media/Media Ethics", "parameters": {"content": {"type": "str", "description": "The media content to assess for ethicality"}, "source": {"type": "str", "description": "The source of the media content"}, "country": {"type": "str", "description": "The country where the media content originates"}}, "required": ["content"], "responses": {"ethicality_score": {"type": "float", "description": "The ethicality score of the media content"}, "is_ethical": {"type": "bool", "description": "Flag indicating whether the media content is considered ethical"}, "recommendations": {"type": "str", "description": "Recommendations for improving the ethicality of the media content"}}}
{"api_name": "checkMediaLaw", "api_description": "Check if the given media content complies with media law regulations", "field": "Media/Media Law", "parameters": {"content": {"type": "str", "description": "The media content that needs to be checked for legal compliance"}}, "required": ["content"], "responses": {"compliance": {"type": "bool", "description": "Boolean value indicating whether the media content complies with media law regulations"}}}
{"api_name": "getMediaRights", "api_description": "Retrieve information about media laws and regulations", "field": "Media/Media Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to get media law information (e.g., United States, United Kingdom, Australia)"}}, "required": ["country"], "responses": {"laws": {"type": "str", "description": "The media laws and regulations in the specified country"}}}
{"api_name": "getMediaLaws", "api_description": "Retrieve information about media laws", "field": "Media/Media Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the media laws (e.g., United States, United Kingdom, Australia)"}, "language": {"type": "str", "description": "The desired language for the media laws (e.g., English, French, Spanish)"}}, "required": ["country"], "responses": {"laws": {"type": "str", "description": "The media laws in the specified country"}}}
{"api_name": "getAudienceDemographics", "api_description": "Retrieve audience demographics for a media organization", "field": "Media/Media Economics", "parameters": {"organization": {"type": "str", "description": "The name of the media organization for which you want to get audience demographics (e.g., Fox News, The New York Times, BBC)"}, "location": {"type": "str", "description": "The location for which you want to get audience demographics (e.g., United States, United Kingdom, Germany)"}}, "required": ["organization", "location"], "responses": {"gender_ratio": {"type": "str", "description": "The gender ratio of the audience"}, "age_distribution": {"type": "str", "description": "The age distribution of the audience"}, "income_level": {"type": "str", "description": "The income level of the audience"}}}
{"api_name": "getMediaEffects", "api_description": "Retrieve media effects information", "field": "Media/Media Effects", "parameters": {"media_type": {"type": "str", "description": "The type of media (e.g., movie, TV show, music video)"}, "genre": {"type": "str", "description": "The genre of the media (e.g., comedy, action, romance)"}, "duration": {"type": "int", "description": "The duration of the media in minutes"}, "release_year": {"type": "int", "description": "The year the media was released"}}, "required": ["media_type"], "responses": {"effects": {"type": "str", "description": "The special effects used in the media"}, "genre": {"type": "str", "description": "The genre of the media"}, "rating": {"type": "float", "description": "The rating of the media (out of 10)"}}}
{"api_name": "playMedia", "api_description": "Play media files with advanced media technology", "field": "Media/Media Technology", "parameters": {"file_path": {"type": "str", "description": "The path of the media file to be played"}}, "required": ["file_path"], "responses": {"status": {"type": "str", "description": "The status of the media player (e.g., playing, paused, stopped)"}, "duration": {"type": "int", "description": "The duration of the media file in seconds"}, "current_time": {"type": "int", "description": "The current playback time of the media file in seconds"}}}
{"api_name": "convertFormat", "api_description": "Convert the format of a media file", "field": "Media/Media Technology", "parameters": {"file_path": {"type": "str", "description": "The path of the media file to be converted"}, "output_format": {"type": "str", "description": "The desired output format of the media file (e.g., mp4, avi, mkv)"}, "resolution": {"type": "str", "description": "Specify the resolution of the converted media file (e.g., 720p, 1080p)"}, "bitrate": {"type": "int", "description": "Set the bitrate of the output media file in kbps (e.g., 128, 256, 512)"}, "frame_rate": {"type": "float", "description": "Define the frame rate of the converted media file (e.g., 24.0, 30.0, 60.0)"}}, "required": ["file_path", "output_format"], "responses": {"converted_file": {"type": "str", "description": "The path of the converted media file"}}}
{"api_name": "deleteMedia", "api_description": "Delete an existing media file", "field": "Media/Media Management", "parameters": {"media_id": {"type": "int", "description": "The unique identifier of the media file to be deleted"}}, "required": ["media_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the deletion operation was successful"}}}
{"api_name": "createMediaStartup", "api_description": "Create a new media startup", "field": "Media/Media Entrepreneurship", "parameters": {"name": {"type": "str", "description": "Name of the media startup"}, "founder": {"type": "str", "description": "Name of the founder"}, "location": {"type": "str", "description": "Location of the startup"}, "target_audience": {"type": "str", "description": "Target audience for the media startup"}, "budget": {"type": "float", "description": "Budget for the media startup in USD"}}, "required": ["name", "founder", "location"], "responses": {"success": {"type": "bool", "description": "Indicates whether the media startup creation was successful"}, "message": {"type": "str", "description": "Additional information or error message"}}}
{"api_name": "getMediaArt", "api_description": "Retrieve information about a specific media art piece", "field": "Media/Media Arts", "parameters": {"artist": {"type": "str", "description": "The artist's name of the media art piece"}, "title": {"type": "str", "description": "The title of the media art piece"}, "year": {"type": "int", "description": "The year the media art piece was created"}}, "required": ["artist", "title"], "responses": {"description": {"type": "str", "description": "The description of the media art piece"}, "medium": {"type": "str", "description": "The medium used in the art piece (e.g., video, installation)"}, "image_url": {"type": "str", "description": "The URL of an image representing the media art piece"}}}
{"api_name": "getMediaTheory", "api_description": "Retrieve media theory information", "field": "Media/Media Theory", "parameters": {}, "required": [], "responses": {"theory": {"type": "str", "description": "The media theory"}}}
{"api_name": "getMediaStudies", "api_description": "Retrieve information on media studies", "field": "Media/Media Studies", "parameters": {}, "required": [], "responses": {"topics": {"type": "str", "description": "A list of media study topics"}}}
{"api_name": "getHeadlines", "api_description": "Retrieve current headlines from news sources", "field": "Media/Media and Journalism", "parameters": {"category": {"type": "str", "description": "The category of news (e.g., sports, politics, entertainment)"}, "country": {"type": "str", "description": "The country from which news sources are selected (e.g., US, UK, IN)"}}, "required": [], "responses": {"headlines": {"type": "str", "description": "A list of current headlines from the selected category and country"}}}
{"api_name": "getTVSchedule", "api_description": "Retrieve the TV schedule for a specific date and channel", "field": "Media/Media and Television", "parameters": {"date": {"type": "str", "description": "The date for which you want to get the schedule (e.g., 2022-01-01)"}, "channel": {"type": "str", "description": "The TV channel for which you want to get the schedule (e.g., HBO, NBC, BBC)"}, "timezone": {"type": "str", "description": "The timezone in which you want to get the schedule (e.g., PST, EST, GMT)"}}, "required": ["date", "channel"], "responses": {"schedule": {"type": "str", "description": "The TV schedule for the specified date and channel"}}}
{"api_name": "playRadio", "api_description": "Play a radio station", "field": "Media/Media and Radio", "parameters": {"station": {"type": "str", "description": "The name or frequency of the radio station to be played"}}, "required": ["station"], "responses": {"status": {"type": "str", "description": "The status of the radio playback (e.g., playing, paused, stopped, buffering)"}}}
{"api_name": "getMediaMetadata", "api_description": "Retrieve metadata information about a media file", "field": "Media/Media and Education", "parameters": {"file_path": {"type": "str", "description": "The path of the media file"}, "extension": {"type": "str", "description": "The desired file extension of the media file (e.g., mp4, avi, mkv)"}, "include_thumbnail": {"type": "bool", "description": "Specify if the response should include a thumbnail of the media file"}}, "required": ["file_path"], "responses": {"title": {"type": "str", "description": "The title of the media file"}, "duration": {"type": "float", "description": "The duration of the media file in seconds"}, "resolution": {"type": "str", "description": "The resolution of the media file (e.g., 1080p, 720p)"}, "thumbnail": {"type": "str", "description": "The URL or base64 encoded thumbnail image of the media file"}}}
{"api_name": "getFoodMenu", "api_description": "Retrieve the menu of a catering service", "field": "Food and Beverage/Catering", "parameters": {"catering_name": {"type": "str", "description": "The name of the catering service"}, "event_type": {"type": "str", "description": "The type of event for which the menu is required (e.g., wedding, corporate event)"}, "guest_count": {"type": "int", "description": "The number of guests attending the event"}}, "required": ["catering_name"], "responses": {"menu": {"type": "str", "description": "The menu for the specified catering service and event type"}}}
{"api_name": "addMenu", "api_description": "Add a menu item to the restaurant's menu", "field": "Food and Beverage/Restaurant management", "parameters": {"item_name": {"type": "str", "description": "The name of the menu item to be added"}, "item_price": {"type": "float", "description": "The price of the menu item"}, "category": {"type": "str", "description": "The category of the menu item (e.g., Appetizers, Main Course, Desserts)"}, "is_vegetarian": {"type": "bool", "description": "Specify if the menu item is vegetarian or not"}}, "required": ["item_name", "item_price"], "responses": {"success": {"type": "bool", "description": "Indicates if the menu item was successfully added"}}}
{"api_name": "removeMenu", "api_description": "Remove a menu item from the restaurant's menu", "field": "Food and Beverage/Restaurant management", "parameters": {"item_name": {"type": "str", "description": "The name of the menu item to be removed"}, "category": {"type": "str", "description": "The category of the menu item (e.g., Appetizers, Main Course, Desserts)"}}, "required": ["item_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the menu item was successfully removed"}}}
{"api_name": "updateMenu", "api_description": "Update information of a menu item in the restaurant's menu", "field": "Food and Beverage/Restaurant management", "parameters": {"item_name": {"type": "str", "description": "The name of the menu item to be updated"}, "new_price": {"type": "float", "description": "The new price of the menu item"}, "new_category": {"type": "str", "description": "The new category of the menu item (e.g., Appetizers, Main Course, Desserts)"}, "is_vegetarian": {"type": "bool", "description": "Specify if the menu item is vegetarian or not"}}, "required": ["item_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the menu item was successfully updated"}}}
{"api_name": "makeCocktail", "api_description": "Create a cocktail drink", "field": "Food and Beverage/Bartending", "parameters": {"cocktail_name": {"type": "str", "description": "The name of the cocktail to be made"}, "ingredients": {"type": "str", "description": "The list of ingredients required to make the cocktail (e.g., vodka, orange juice, grenadine)"}, "garnish": {"type": "str", "description": "The desired garnish for the cocktail (e.g., lemon peel, cherry)"}, "glass_type": {"type": "str", "description": "The type of glass to serve the cocktail in (e.g., martini glass, highball glass)"}, "ice": {"type": "bool", "description": "Specify if ice should be added to the cocktail (True/False)"}}, "required": ["cocktail_name", "ingredients"], "responses": {"cocktail": {"type": "str", "description": "The final recipe and instructions for the cocktail"}}}
{"api_name": "convertMeasurement", "api_description": "Convert measurement units for baking and pastry", "field": "Food and Beverage/Baking and pastry", "parameters": {"value": {"type": "float", "description": "The value to convert"}, "from_unit": {"type": "str", "description": "The current unit of measurement (e.g., cups, grams, ounces)"}, "to_unit": {"type": "str", "description": "The desired unit of measurement (e.g., tablespoons, kilograms, pounds)"}}, "required": ["value", "from_unit", "to_unit"], "responses": {"converted_value": {"type": "float", "description": "The converted value in the desired unit"}}}
{"api_name": "checkFoodSafety", "api_description": "Check the safety and sanitation of a specific food item", "field": "Food and Beverage/Food safety and sanitation", "parameters": {"food_item": {"type": "str", "description": "The name of the food item to check (e.g., chicken, lettuce, cheese)"}, "country": {"type": "str", "description": "The country where the food item is produced (e.g., USA, Germany, China)"}, "batch_number": {"type": "str", "description": "The batch number or production code of the food item"}}, "required": ["food_item", "country"], "responses": {"safety_status": {"type": "str", "description": "The safety status of the food item (e.g., safe, potentially contaminated, recall issued)"}, "sanitation_level": {"type": "str", "description": "The sanitation level of the production facility that produced the food item (e.g., high, moderate, low)"}}}
{"api_name": "getFoodSafetyStandards", "api_description": "Retrieve the food safety standards and regulations for a specific region", "field": "Food and Beverage/Food safety and sanitation", "parameters": {"region": {"type": "str", "description": "The region for which you want to retrieve the food safety standards (e.g., Europe, United States, Asia)"}, "language": {"type": "str", "description": "The language in which the standards should be provided (e.g., English, Spanish, Chinese)"}}, "required": ["region"], "responses": {"standards": {"type": "str", "description": "The food safety standards and regulations applicable to the specified region"}}}
{"api_name": "getWineInfo", "api_description": "Retrieve information about a specific wine", "field": "Food and Beverage/Wine and spirits", "parameters": {"wine_name": {"type": "str", "description": "The name of the wine you want information about (e.g., Cabernet Sauvignon, Chardonnay)"}, "country": {"type": "str", "description": "The country of origin of the wine (e.g., France, Italy)"}, "vintage": {"type": "int", "description": "The year the wine was made"}}, "required": ["wine_name"], "responses": {"wine_name": {"type": "str", "description": "The name of the wine"}, "country": {"type": "str", "description": "The country of origin"}, "vintage": {"type": "int", "description": "The year the wine was made"}, "description": {"type": "str", "description": "A description of the wine"}, "winery": {"type": "str", "description": "The name of the winery that produces the wine"}}}
{"api_name": "makeCoffee", "api_description": "Make a cup of coffee according to the specified parameters", "field": "Food and Beverage/Barista", "parameters": {"coffee_type": {"type": "str", "description": "Specify the type of coffee to be made (e.g., espresso, cappuccino, latte)"}, "milk": {"type": "str", "description": "Specify the type of milk to be used (e.g., whole milk, almond milk, soy milk)"}, "sugar": {"type": "int", "description": "Specify the amount of sugar to be added in grams (e.g., 5, 10, 15)"}, "size": {"type": "str", "description": "Specify the size of the coffee cup (e.g., small, medium, large)"}, "toppings": {"type": "str", "description": "Specify any additional toppings or flavors to be added (e.g., caramel, vanilla, hazelnut)"}}, "required": ["coffee_type"], "responses": {"coffee": {"type": "str", "description": "The prepared coffee according to the specified parameters"}}}
{"api_name": "getWinePairing", "api_description": "Retrieve wine pairing recommendation for a specific food dish", "field": "Food and Beverage/Sommelier", "parameters": {"dish": {"type": "str", "description": "The name of the food dish for wine pairing recommendation (e.g., steak, salmon, pasta)"}, "cuisine": {"type": "str", "description": "The cuisine type of the food dish (e.g., Italian, French, Chinese)"}, "budget": {"type": "str", "description": "The budget range for the recommended wine (e.g., affordable, moderate, luxury)"}, "occasion": {"type": "str", "description": "The occasion for the wine pairing (e.g., romantic dinner, casual lunch, formal event)"}}, "required": ["dish"], "responses": {"wine": {"type": "str", "description": "The recommended wine for the specified food dish"}, "region": {"type": "str", "description": "The wine region from where the recommended wine originates"}, "price_range": {"type": "str", "description": "The price range of the recommended wine"}}}
{"api_name": "getFoodPhoto", "api_description": "Retrieve a photo of a specific food item", "field": "Food and Beverage/Food photography", "parameters": {"food_name": {"type": "str", "description": "The name of the food item for which you want to get the photo (e.g., Pizza, Burger, Salad)"}, "style": {"type": "str", "description": "The desired photography style for the food photo (e.g., close-up, aerial view, natural lighting)"}, "resolution": {"type": "str", "description": "Specify the resolution of the photo (e.g., high, medium, low)"}}, "required": ["food_name"], "responses": {"photo_url": {"type": "str", "description": "The URL of the retrieved food photo"}}}
{"api_name": "styleFood", "api_description": "Enhance the visual appeal of food items through styling techniques", "field": "Food and Beverage/Food styling", "parameters": {"food_item": {"type": "str", "description": "The name of the food item to be styled (e.g., pizza, salad, cake)"}, "arrangement": {"type": "str", "description": "The desired arrangement or composition of the food items (e.g., stacked, scattered, layered)"}, "color_palette": {"type": "str", "description": "The preferred color palette for the food styling (e.g., vibrant, pastel, monochromatic)"}, "garnish": {"type": "str", "description": "The type of garnish to be used for decoration (e.g., fresh herbs, edible flowers, sauce drizzle)"}}, "required": ["food_item"], "responses": {"stylized_food_image": {"type": "str", "description": "The URL or path to the image of the styled food item"}, "arrangement_description": {"type": "str", "description": "A brief description of the food item arrangement"}, "color_palette": {"type": "str", "description": "The color palette used for styling the food item"}, "garnish_description": {"type": "str", "description": "A brief description of the garnish used for decoration"}}}
{"api_name": "getFoodStylingTips", "api_description": "Retrieve food styling tips and techniques", "field": "Food and Beverage/Food styling", "parameters": {"food_category": {"type": "str", "description": "The category of food you want styling tips for (e.g., desserts, salads, main courses)"}, "occasion": {"type": "str", "description": "The occasion or event for which you want food styling ideas (e.g., birthday party, wedding, picnic)"}, "cuisine": {"type": "str", "description": "The cuisine or type of food you want styling ideas for (e.g., Italian, Mexican, Asian)"}}, "required": ["food_category"], "responses": {"styling_tips": {"type": "str", "description": "Tips and techniques for food styling"}, "inspiration_images": {"type": "str", "description": "Images for food styling inspiration"}}}
{"api_name": "createRecipe", "api_description": "Create a new recipe", "field": "Food and Beverage/Recipe development", "parameters": {"recipe_name": {"type": "str", "description": "The name of the recipe"}, "ingredients": {"type": "str", "description": "The list of ingredients required for the recipe (e.g., flour, sugar, eggs, milk)"}, "instructions": {"type": "str", "description": "The step-by-step instructions to prepare the recipe"}}, "required": ["recipe_name", "ingredients", "instructions"], "responses": {"status": {"type": "str", "description": "The status of the recipe creation"}}}
{"api_name": "checkFoodAllergens", "api_description": "Check if a food item contains any common allergens", "field": "Food and Beverage/Food technology", "parameters": {"food_item": {"type": "str", "description": "The name of the food item to check for allergens (e.g., peanuts, milk, gluten)"}}, "required": ["food_item"], "responses": {"contains_allergens": {"type": "bool", "description": "A boolean value indicating whether the food item contains any common allergens"}, "allergens": {"type": "str", "description": "A list of common allergens found in the food item"}}}
{"api_name": "findSubstituteIngredients", "api_description": "Find substitute ingredients for a particular food item", "field": "Food and Beverage/Food technology", "parameters": {"food_item": {"type": "str", "description": "The name of the food item for which you want to find substitute ingredients (e.g., butter, sugar, flour)"}}, "required": ["food_item"], "responses": {"substitute_ingredients": {"type": "str", "description": "A list of substitute ingredients that can replace the specified food item"}}}
{"api_name": "calculateCookingTime", "api_description": "Calculate the estimated cooking time for a specific food item", "field": "Food and Beverage/Food technology", "parameters": {"food_item": {"type": "str", "description": "The name of the food item (e.g., chicken, pasta, cake)"}, "weight": {"type": "float", "description": "The weight of the food item in grams (e.g., 500, 1000, 250)"}, "cooking_method": {"type": "str", "description": "The preferred cooking method for the food item (e.g., baking, grilling, boiling)"}, "desired_doneness": {"type": "str", "description": "The desired level of doneness for the food item (e.g., rare, medium, well-done)"}, "oven_temperature": {"type": "int", "description": "The temperature of the oven in degrees Celsius (e.g., 180, 200, 220)"}}, "required": ["food_item", "weight", "cooking_method", "oven_temperature"], "responses": {"cooking_time": {"type": "int", "description": "The estimated cooking time for the food item in minutes"}}}
{"api_name": "getFoodNutrition", "api_description": "Retrieve nutrition information for a specific food item", "field": "Food and Beverage/Food technology", "parameters": {"food_item": {"type": "str", "description": "The name of the food item for which you want to get nutrition information (e.g., apple, pizza, chicken)"}, "weight": {"type": "float", "description": "The weight of the food item in grams (e.g., 100, 250, 500)"}}, "required": ["food_item"], "responses": {"calories": {"type": "int", "description": "The total calories in the specified food item"}, "protein": {"type": "float", "description": "The amount of protein in the specified food item"}, "carbohydrates": {"type": "float", "description": "The amount of carbohydrates in the specified food item"}, "fat": {"type": "float", "description": "The amount of fat in the specified food item"}}}
{"api_name": "analyzeNutrition", "api_description": "Analyze the nutrition content of a food item", "field": "Food and Beverage/Food technology", "parameters": {"food_item": {"type": "str", "description": "The name of the food item to analyze (e.g., apple, pizza, chicken)"}, "servings": {"type": "int", "description": "The number of servings of the food item (e.g., 1, 2, 3)"}}, "required": ["food_item"], "responses": {"calories": {"type": "int", "description": "The number of calories in the specified food item"}, "protein": {"type": "float", "description": "The amount of protein in the specified food item"}, "carbohydrates": {"type": "float", "description": "The amount of carbohydrates in the specified food item"}, "fat": {"type": "float", "description": "The amount of fat in the specified food item"}}}
{"api_name": "getFoodRegulations", "api_description": "Retrieve information on food regulations and compliance", "field": "Food and Beverage/Food regulations and compliance", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the food regulations (e.g., United States, Canada, Australia)"}, "food_type": {"type": "str", "description": "Specify a type of food for regulations (e.g., meat, dairy, seafood)"}, "product": {"type": "str", "description": "Specify a product for regulations (e.g., canned foods, frozen foods, infant formula)"}, "language": {"type": "str", "description": "Specify the language in which the regulations should be provided (e.g., English, Spanish, French)"}}, "required": ["country"], "responses": {"regulations": {"type": "str", "description": "The food regulations for the specified country and food type"}, "compliance": {"type": "str", "description": "The compliance guidelines for the specified product"}}}
{"api_name": "getVintageYear", "api_description": "Retrieve the vintage year of a wine", "field": "Food and Beverage/Wine production and viticulture", "parameters": {"wine_name": {"type": "str", "description": "The name of the wine (e.g., Chardonnay, Merlot, Cabernet Sauvignon)"}}, "required": ["wine_name"], "responses": {"vintage_year": {"type": "int", "description": "The vintage year of the specified wine"}}}
{"api_name": "getWineRegion", "api_description": "Retrieve information about the wine region", "field": "Food and Beverage/Wine production and viticulture", "parameters": {"wine_name": {"type": "str", "description": "The name of the wine (e.g., Chardonnay, Merlot, Cabernet Sauvignon)"}}, "required": ["wine_name"], "responses": {"region": {"type": "str", "description": "The wine region where the specified wine is produced"}}}
{"api_name": "getFoodWasteData", "api_description": "Retrieve data on food waste management", "field": "Food and Beverage/Food waste management", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve food waste data (e.g., city name, country)"}, "year": {"type": "int", "description": "The year for which you want to retrieve food waste data (e.g., 2020, 2021)"}, "category": {"type": "str", "description": "Specify a specific category for food waste data (e.g., residential, commercial, industrial)"}}, "required": ["location", "year"], "responses": {"food_waste_weight": {"type": "float", "description": "The total weight of food waste in tons at the specified location and year"}, "food_waste_category": {"type": "str", "description": "The category of food waste data retrieved"}}}
{"api_name": "getFoodWasteStatistics", "api_description": "Retrieve statistics on food waste management", "field": "Food and Beverage/Food waste management", "parameters": {"location": {"type": "str", "description": "The location for which you want to get food waste statistics (e.g., city, country)"}, "time_period": {"type": "str", "description": "Specify a time period for food waste statistics (e.g., monthly, annually)"}}, "required": ["location"], "responses": {"food_waste_amount": {"type": "float", "description": "The amount of food waste generated in the specified location"}, "food_waste_reduction": {"type": "float", "description": "The percentage of food waste reduced in the specified location"}}}
{"api_name": "getMenuItemDetails", "api_description": "Retrieve details of a specific menu item", "field": "Food and Beverage/Menu engineering", "parameters": {"menu_item_id": {"type": "str", "description": "The unique identifier of the menu item"}}, "required": ["menu_item_id"], "responses": {"name": {"type": "str", "description": "The name of the menu item"}, "description": {"type": "str", "description": "Detailed description of the menu item"}, "price": {"type": "float", "description": "The price of the menu item"}}}
{"api_name": "getFoodHistory", "api_description": "Retrieve historical information about a specific food item", "field": "Food and Beverage/Food history", "parameters": {"food_item": {"type": "str", "description": "The name of the food item for which you want to retrieve historical information (e.g., pizza, sushi, chocolate)"}, "time_period": {"type": "str", "description": "Specify a time period to get food history (e.g., ancient, medieval, modern)"}, "country": {"type": "str", "description": "The country or region associated with the food item (e.g., Italy, Japan, Belgium)"}}, "required": ["food_item"], "responses": {"history": {"type": "str", "description": "The historical information about the specified food item"}}}
{"api_name": "getFoodCulture", "api_description": "Retrieve food culture and traditions information", "field": "Food and Beverage/Food culture and traditions", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the food culture information (e.g., Italy, Japan, Mexico)"}, "dish": {"type": "str", "description": "Specify a traditional dish to learn more about its culture and background (e.g., Sushi, Paella, Tacos)"}, "occasion": {"type": "str", "description": "Specify an occasion or festival to explore the related food traditions (e.g., Christmas, Lunar New Year, Thanksgiving)"}}, "required": ["country"], "responses": {"food_culture": {"type": "str", "description": "Information about the food culture and traditions of the specified country"}, "dish_culture": {"type": "str", "description": "Information about the culture and background of the specified traditional dish"}, "occasion_food": {"type": "str", "description": "Food traditions related to the specified occasion or festival"}}}
{"api_name": "getPropertyValue", "api_description": "Retrieve the current value of a property", "field": "Real Estate/Real estate investing", "parameters": {"property_type": {"type": "str", "description": "The type of property (e.g., residential, commercial)"}, "location": {"type": "str", "description": "The location of the property (e.g., city, state, country)"}, "property_size": {"type": "int", "description": "The size of the property in square feet"}}, "required": ["property_type", "location"], "responses": {"value": {"type": "float", "description": "The current value of the property in USD"}}}
{"api_name": "getAppraisalValue", "api_description": "Retrieve the appraisal value of a real estate property", "field": "Real Estate/Real estate appraisal", "parameters": {"property_address": {"type": "str", "description": "The address of the property for which you want to get the appraisal value"}}, "required": ["property_address"], "responses": {"appraisal_value": {"type": "float", "description": "The appraisal value of the specified property in USD"}}}
{"api_name": "analyzeRealEstateData", "api_description": "Perform analysis on real estate data", "field": "Real Estate/Real estate data analysis", "parameters": {"location": {"type": "str", "description": "The location for which you want to analyze real estate data (e.g., New York, London, Sydney)"}, "property_type": {"type": "str", "description": "The type of property to analyze (e.g., apartment, house, commercial)"}, "time_period": {"type": "str", "description": "The time period to consider for analysis (e.g., yearly, quarterly, monthly)"}, "price_range": {"type": "str", "description": "The price range for the properties to include in the analysis (e.g., $100,000 - $500,000, $1 million+)"}}, "required": ["location"], "responses": {"average_price": {"type": "float", "description": "The average price of the properties in the specified location"}, "highest_price": {"type": "float", "description": "The highest price of a property in the specified location"}, "lowest_price": {"type": "float", "description": "The lowest price of a property in the specified location"}, "property_count": {"type": "int", "description": "The total count of properties analyzed in the specified location"}}}
{"api_name": "getAirportInfo", "api_description": "Retrieve information about an airport", "field": "Transportation/Air Transportation", "parameters": {"code": {"type": "str", "description": "The airport code (e.g., LHR, JFK)"}}, "required": ["code"], "responses": {"name": {"type": "str", "description": "The name of the airport"}, "city": {"type": "str", "description": "The city where the airport is located"}, "country": {"type": "str", "description": "The country where the airport is located"}}}
{"api_name": "getTravelTime", "api_description": "Retrieve travel time information for land transportation", "field": "Transportation/Land Transportation", "parameters": {"origin": {"type": "str", "description": "The starting location for the journey (e.g., New York City, London)"}, "destination": {"type": "str", "description": "The destination location for the journey (e.g., San Francisco, Paris)"}, "mode": {"type": "str", "description": "Specify the mode of transportation (e.g., car, bike, walking)"}}, "required": ["origin", "destination"], "responses": {"travel_time": {"type": "int", "description": "The estimated travel time in minutes"}}}
{"api_name": "getRoute", "api_description": "Retrieve the route information for land transportation", "field": "Transportation/Land Transportation", "parameters": {"origin": {"type": "str", "description": "The starting point of the journey (e.g., New York, London, Tokyo)"}, "destination": {"type": "str", "description": "The destination of the journey (e.g., Paris, Beijing, Sydney)"}, "mode": {"type": "str", "description": "The mode of transportation (e.g., car, bike, public transport)"}}, "required": ["origin", "destination"], "responses": {"route": {"type": "str", "description": "The recommended route for the journey"}}}
{"api_name": "getTrafficInfo", "api_description": "Retrieve current traffic information", "field": "Transportation/Land Transportation", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the traffic information (e.g., city name, address)"}, "time": {"type": "str", "description": "Specify a time for traffic information (e.g., morning rush hour, afternoon, night)"}}, "required": ["location"], "responses": {"traffic_data": {"type": "str", "description": "The current traffic data at the specified location"}}}
{"api_name": "getWaterTransportationInfo", "api_description": "Retrieve information about water transportation", "field": "Transportation/Water Transportation", "parameters": {"location": {"type": "str", "description": "The location for which you want to get water transportation information (e.g., port name, city, country)"}, "type": {"type": "str", "description": "Specify the type of water transportation (e.g., ferry, cruise, cargo ship)"}}, "required": ["location"], "responses": {"transportation_info": {"type": "str", "description": "Detailed information about water transportation at the specified location"}}}
{"api_name": "getShipLocation", "api_description": "Retrieve the current location of a ship", "field": "Transportation/Water Transportation", "parameters": {"ship_id": {"type": "str", "description": "The ID of the ship for which you want to get the location"}}, "required": ["ship_id"], "responses": {"latitude": {"type": "float", "description": "The latitude coordinate of the ship's location"}, "longitude": {"type": "float", "description": "The longitude coordinate of the ship's location"}}}
{"api_name": "getPublicTransportSchedule", "api_description": "Retrieve the schedule of public transportation", "field": "Transportation/Public Transportation", "parameters": {"location": {"type": "str", "description": "The location of the public transportation station (e.g., New York, London, Tokyo)"}}, "required": ["location"], "responses": {"schedule": {"type": "str", "description": "The schedule of public transportation at the specified location"}}}
{"api_name": "getPublicTransportationInfo", "api_description": "Retrieve information about public transportation", "field": "Transportation/Public Transportation", "parameters": {"city": {"type": "str", "description": "The city for which you want to get public transportation information (e.g., London, New York, Tokyo)"}, "transportation_type": {"type": "str", "description": "Specify the type of public transportation you are interested in (e.g., bus, subway, tram)"}, "time": {"type": "str", "description": "Specify the time for which you want to get the transportation schedule (e.g., morning, evening, night)"}, "route": {"type": "str", "description": "Specify the route or line number for the transportation (e.g., line 1, bus route 10)"}}, "required": ["city", "transportation_type"], "responses": {"schedule": {"type": "str", "description": "The schedule or timetable of the specified public transportation"}, "route_info": {"type": "str", "description": "Information about the specified route or line"}}}
{"api_name": "getSubwaySchedule", "api_description": "Retrieve the schedule information of subway trains", "field": "Transportation/Urban Transportation", "parameters": {"city": {"type": "str", "description": "The city for which you want to get the subway schedule (e.g., New York, Tokyo, London)"}, "line": {"type": "str", "description": "The subway line for which you want to get the schedule (e.g., Line 1, Central Line, Red Line)"}}, "required": ["city", "line"], "responses": {"schedule": {"type": "str", "description": "The schedule of subway trains for the specified city and line"}}}
{"api_name": "planRoute", "api_description": "Plan a transportation route", "field": "Transportation/Transportation Planning", "parameters": {"start_location": {"type": "str", "description": "The starting location for the route planning (e.g., New York City, London)"}, "end_location": {"type": "str", "description": "The destination location for the route planning (e.g., Tokyo, Paris)"}, "mode": {"type": "str", "description": "The transportation mode for the route planning (e.g., car, bicycle, public transportation)", "example": "car, bicycle, public transportation"}}, "required": ["start_location", "end_location"], "responses": {"route": {"type": "str", "description": "The planned route for transportation"}, "duration": {"type": "int", "description": "The estimated duration of the planned route in minutes"}, "distance": {"type": "float", "description": "The total distance of the planned route in kilometers"}}}
{"api_name": "checkTransportationSafety", "api_description": "Check the safety level of a transportation method", "field": "Transportation/Transportation Safety", "parameters": {"method": {"type": "str", "description": "The transportation method to check (e.g., car, bus, train, airplane)"}, "passenger_count": {"type": "int", "description": "The number of passengers on board the transportation method (e.g., 1, 10, 100)"}, "destination": {"type": "str", "description": "The destination of the transportation (e.g., Paris, Tokyo, New York)"}}, "required": ["method"], "responses": {"safety_level": {"type": "str", "description": "The safety level of the specified transportation method"}}}
{"api_name": "getTransportationLogistics", "api_description": "Retrieve transportation logistics information", "field": "Transportation/Transportation Logistics", "parameters": {"origin": {"type": "str", "description": "The origin of the transportation (e.g., city, address)"}, "destination": {"type": "str", "description": "The destination of the transportation (e.g., city, address)"}, "mode": {"type": "str", "description": "The mode of transportation (e.g., car, public transport, bicycle)"}}, "required": ["origin", "destination"], "responses": {"duration": {"type": "int", "description": "The duration of the transportation in minutes"}, "distance": {"type": "float", "description": "The distance of the transportation in kilometers"}, "route": {"type": "str", "description": "The recommended route for the transportation"}}}
{"api_name": "findNearestGasStation", "api_description": "Find the nearest gas station", "field": "Transportation/Transportation Logistics", "parameters": {"location": {"type": "str", "description": "The location from where to find the nearest gas station (e.g., Los Angeles, Berlin, Sydney)"}}, "required": ["location"], "responses": {"gas_station": {"type": "str", "description": "The name of the nearest gas station"}, "distance": {"type": "float", "description": "The distance between the location and the nearest gas station"}, "address": {"type": "str", "description": "The address of the nearest gas station"}}}
{"api_name": "calculateETA", "api_description": "Calculate the estimated time of arrival", "field": "Transportation/Transportation Logistics", "parameters": {"origin": {"type": "str", "description": "The starting point of the transportation (e.g., Chicago, Paris, Sydney)"}, "destination": {"type": "str", "description": "The destination of the transportation (e.g., London, Beijing, New York)"}, "mode": {"type": "str", "description": "The mode of transportation (e.g., car, public transportation, walking)"}}, "required": ["origin", "destination"], "responses": {"eta": {"type": "str", "description": "The estimated time of arrival"}, "distance": {"type": "float", "description": "The distance between the origin and the destination"}, "duration": {"type": "str", "description": "The duration of the journey"}}}
{"api_name": "getTrafficFlow", "api_description": "Retrieve current traffic flow information", "field": "Transportation/Intelligent Transportation Systems", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the traffic flow information (e.g., city, highway)"}, "time": {"type": "str", "description": "Specify a time for traffic flow (e.g., peak hours, off-peak hours)"}}, "required": ["location"], "responses": {"traffic_flow": {"type": "str", "description": "The current traffic flow at the specified location (e.g., smooth, moderate, heavy)"}}}
{"api_name": "getFlightSchedule", "api_description": "Retrieve the schedule information of flights", "field": "Transportation/Aviation", "parameters": {"departure": {"type": "str", "description": "The departure airport for the flight (e.g., JFK, LAX, Heathrow)"}, "destination": {"type": "str", "description": "The destination airport for the flight (e.g., CDG, Dubai, Sydney)"}, "date": {"type": "str", "description": "The date of the flight (e.g., 2022-09-30)"}, "time": {"type": "str", "description": "The time of the flight (e.g., 14:30, 21:45)"}}, "required": ["departure", "destination", "date"], "responses": {"flight_number": {"type": "str", "description": "The number of the flight"}, "departure_time": {"type": "str", "description": "The scheduled departure time of the flight"}, "arrival_time": {"type": "str", "description": "The scheduled arrival time of the flight"}}}
{"api_name": "getVesselInfo", "api_description": "Retrieve information about a specific vessel", "field": "Transportation/Maritime Transportation", "parameters": {"vessel_name": {"type": "str", "description": "The name of the vessel for which you want to get information (e.g., MSC Seaview, Ever Given)"}}, "required": ["vessel_name"], "responses": {"vessel_type": {"type": "str", "description": "The type of the vessel (e.g., container ship, oil tanker)"}, "country": {"type": "str", "description": "The country to which the vessel belongs"}, "length": {"type": "float", "description": "The length of the vessel in meters"}, "capacity": {"type": "int", "description": "The capacity of the vessel in TEUs (Twenty-foot Equivalent Units)"}}}
{"api_name": "getAverageSpeed", "api_description": "Retrieve the average speed on a specific highway", "field": "Transportation/Highway Engineering", "parameters": {"highway_name": {"type": "str", "description": "The name of the highway (e.g., I-95, A1, M1)"}, "direction": {"type": "str", "description": "The direction of travel on the highway (e.g., northbound, southbound, eastbound, westbound)"}}, "required": ["highway_name"], "responses": {"average_speed": {"type": "int", "description": "The average speed on the specified highway in miles per hour"}}}
{"api_name": "getTollPrice", "api_description": "Retrieve the toll price for a particular highway", "field": "Transportation/Highway Engineering", "parameters": {"highway_name": {"type": "str", "description": "The name of the highway (e.g., I-95, A1, M1)"}, "exit_number": {"type": "int", "description": "The exit number for which you want to get the toll price"}}, "required": ["highway_name", "exit_number"], "responses": {"toll_price": {"type": "float", "description": "The toll price for the specified exit in dollars"}}}
{"api_name": "getBicycleRoutes", "api_description": "Retrieve bicycle routes information", "field": "Transportation/Bicycle Transportation", "parameters": {"starting_location": {"type": "str", "description": "The starting location of the bicycle route (e.g., London, New York)"}, "destination": {"type": "str", "description": "The destination of the bicycle route (e.g., Beijing, Paris)"}, "difficulty_level": {"type": "str", "description": "Specify the difficulty level of the bicycle route (e.g., easy, moderate, difficult)"}}, "required": ["starting_location", "destination"], "responses": {"route": {"type": "str", "description": "The recommended bicycle route from the starting location to the destination"}}}
{"api_name": "findBikeStation", "api_description": "Find a nearby bike station and retrieve available bicycles information", "field": "Transportation/Bicycle Transportation", "parameters": {"latitude": {"type": "float", "description": "The latitude of the user's location"}, "longitude": {"type": "float", "description": "The longitude of the user's location"}, "radius": {"type": "int", "description": "The radius within which to search for bike stations (in meters)"}}, "required": ["latitude", "longitude"], "responses": {"station_name": {"type": "str", "description": "The name of the bike station"}, "available_bicycles": {"type": "int", "description": "The number of available bicycles at the bike station"}}}
{"api_name": "estimateWalkingTime", "api_description": "Estimate the walking time between two locations", "field": "Transportation/Pedestrian Transportation", "parameters": {"origin": {"type": "str", "description": "The starting point of the walking route (e.g., Central Park, Statue of Liberty)"}, "destination": {"type": "str", "description": "The ending point of the walking route (e.g., Empire State Building, Times Square)"}}, "required": ["origin", "destination"], "responses": {"time": {"type": "int", "description": "The estimated walking time in minutes"}}}
{"api_name": "runTransportationModel", "api_description": "Run a transportation model to simulate traffic patterns and optimize transportation systems", "field": "Transportation/Transportation Modeling", "parameters": {"origin": {"type": "str", "description": "The origin of the transportation model"}, "destination": {"type": "str", "description": "The destination of the transportation model"}, "departure_time": {"type": "str", "description": "The desired departure time for the model simulation"}}, "required": ["origin", "destination"], "responses": {"route": {"type": "str", "description": "The optimized route from the origin to the destination"}, "travel_time": {"type": "float", "description": "The estimated travel time for the optimized route"}}}
{"api_name": "getPublicWorkStatus", "api_description": "Retrieve the status of public works", "field": "Transportation/Public Works", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the public work status (e.g., city, town, village)"}}, "required": ["location"], "responses": {"status": {"type": "str", "description": "The status of public works in the specified location"}}}
{"api_name": "getPublicWorksInfo", "api_description": "Retrieve information about public works related to transportation", "field": "Transportation/Public Works", "parameters": {"location": {"type": "str", "description": "The location for which you want to get public works information (e.g., city, town)"}, "type": {"type": "str", "description": "The type of public works (e.g., road construction, bridge maintenance, sidewalk repair)"}, "date_range": {"type": "str", "description": "Specify a date range for public works (e.g., last week, next month)"}, "status": {"type": "str", "description": "Filter by status of public works (e.g., in progress, completed)"}}, "required": ["location"], "responses": {"info": {"type": "str", "description": "Information about the specified public works"}}}
{"api_name": "scheduleMaintenance", "api_description": "Schedule maintenance for transportation vehicles", "field": "Transportation/Transportation Maintenance", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the vehicle to schedule maintenance for"}, "maintenance_type": {"type": "str", "description": "The type of maintenance to be performed (e.g., regular service, repair, inspection)"}, "maintenance_date": {"type": "str", "description": "The date when the maintenance is scheduled to occur"}}, "required": ["vehicle_id", "maintenance_type", "maintenance_date"], "responses": {"success": {"type": "bool", "description": "A flag indicating if the maintenance schedule was successfully created"}}}
{"api_name": "getAccessibility", "api_description": "Retrieve transportation accessibility information", "field": "Transportation/Transportation Accessibility", "parameters": {"location": {"type": "str", "description": "The location for which you want to get accessibility information (e.g., city, address)"}}, "required": ["location"], "responses": {"accessibility": {"type": "str", "description": "The accessibility status of transportation in the specified location"}}}
{"api_name": "getDrugSideEffects", "api_description": "Retrieve the side effects of a specific drug", "field": "Pharmaceutical/Pharmacology", "parameters": {"drug_name": {"type": "str", "description": "The name of the drug for which you want to retrieve side effects"}}, "required": ["drug_name"], "responses": {"side_effects": {"type": "str", "description": "A list of side effects associated with the specified drug"}}}
{"api_name": "getDosageForm", "api_description": "Retrieve the dosage form of a pharmaceutical product", "field": "Pharmaceutical/Pharmaceutical manufacturing", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product for which you want to retrieve the dosage form"}}, "required": ["product_name"], "responses": {"dosage_form": {"type": "str", "description": "The dosage form of the specified pharmaceutical product"}}}
{"api_name": "getManufacturer", "api_description": "Retrieve the manufacturer information of a pharmaceutical product", "field": "Pharmaceutical/Pharmaceutical manufacturing", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product for which you want to retrieve the manufacturer information"}}, "required": ["product_name"], "responses": {"manufacturer": {"type": "str", "description": "The manufacturer of the specified pharmaceutical product"}}}
{"api_name": "getPharmaceuticalTechnology", "api_description": "Retrieve information about pharmaceutical technology", "field": "Pharmaceutical/Pharmaceutical technology", "parameters": {"drug_name": {"type": "str", "description": "Name of the drug for which you want to get the pharmaceutical technology information (e.g., Aspirin, Paracetamol)"}, "company": {"type": "str", "description": "Name of the pharmaceutical company (e.g., Pfizer, Johnson & Johnson)"}, "country": {"type": "str", "description": "Country where the pharmaceutical company is located (e.g., United States, Germany)"}, "year": {"type": "int", "description": "Year of the pharmaceutical technology development (e.g., 2005, 2012, 2018)"}, "patent_number": {"type": "str", "description": "Patent number for the pharmaceutical technology"}}, "required": ["drug_name"], "responses": {"technology_description": {"type": "str", "description": "Description of the pharmaceutical technology"}, "patent_expiration": {"type": "str", "description": "Date of expiration of the patent for the pharmaceutical technology"}}}
{"api_name": "getFDAApprovalStatus", "api_description": "Retrieve FDA approval status for a pharmaceutical product", "field": "Pharmaceutical/Pharmaceutical biotechnology", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product for which you want to retrieve FDA approval status"}}, "required": ["product_name"], "responses": {"approval_status": {"type": "str", "description": "The FDA approval status of the specified pharmaceutical product"}}}
{"api_name": "getMicrobialGrowth", "api_description": "Retrieve information on microbial growth in pharmaceutical products", "field": "Pharmaceutical/Pharmaceutical microbiology", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product (e.g., Antibiotic, Antiviral)"}, "batch_number": {"type": "str", "description": "The batch number of the product"}, "sampling_time": {"type": "str", "description": "The time at which the sample was taken for microbial analysis (e.g., before production, during production, post-production)"}, "test_type": {"type": "str", "description": "The type of test performed on the product (e.g., Total viable count, Sterility testing, Microbial limit testing)"}}, "required": ["product_name", "batch_number"], "responses": {"microbial_count": {"type": "int", "description": "The count of microbial colonies in the sample"}, "test_result": {"type": "str", "description": "The result of the microbial test (e.g., Pass, Fail)"}}}
{"api_name": "validateProductCleanliness", "api_description": "Validate cleanliness of pharmaceutical products", "field": "Pharmaceutical/Pharmaceutical microbiology", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product (e.g., Tablet, Syringe)"}, "batch_number": {"type": "str", "description": "The batch number of the product"}, "sampling_time": {"type": "str", "description": "The time at which the sample was taken for cleanliness validation (e.g., before production, after production)"}, "method": {"type": "str", "description": "The method used for cleanliness validation (e.g., Visual inspection, Swab test, Particulate matter analysis)"}}, "required": ["product_name", "batch_number"], "responses": {"cleanliness_result": {"type": "str", "description": "The result of the cleanliness validation (e.g., Clean, Contaminated)"}, "contaminants_detected": {"type": "str", "description": "The type of contaminants detected in the sample (if any)"}}}
{"api_name": "detectMicrobialContamination", "api_description": "Detect microbial contamination in pharmaceutical products", "field": "Pharmaceutical/Pharmaceutical microbiology", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product (e.g., Injectable, Inhaler)"}, "batch_number": {"type": "str", "description": "The batch number of the product"}, "sampling_time": {"type": "str", "description": "The time at which the sample was taken for microbial contamination detection (e.g., during production, post-production)"}, "detection_method": {"type": "str", "description": "The method used for detecting microbial contamination (e.g., Bioburden testing, Microbial identification)"}}, "required": ["product_name", "batch_number"], "responses": {"contamination_detected": {"type": "bool", "description": "Indicates whether microbial contamination was detected in the sample"}, "contaminant_type": {"type": "str", "description": "The type of microbial contaminant detected (if any)"}}}
{"api_name": "calculateSterilityAssuranceLevel", "api_description": "Calculate the sterility assurance level of pharmaceutical products", "field": "Pharmaceutical/Pharmaceutical microbiology", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product (e.g., Ophthalmic solution, Implantable medical device)"}, "production_duration": {"type": "int", "description": "The duration of product manufacturing in days"}, "sterilization_method": {"type": "str", "description": "The method used for product sterilization (e.g., Steam sterilization, Gamma radiation)"}}, "required": ["product_name", "sterilization_method"], "responses": {"sterility_assurance_level": {"type": "float", "description": "The calculated sterility assurance level of the product"}}}
{"api_name": "getRegulatoryRequirements", "api_description": "Retrieve regulatory requirements for pharmaceutical products", "field": "Pharmaceutical/Pharmaceutical regulatory affairs", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve regulatory requirements (e.g., USA, Germany, Japan)"}, "product_type": {"type": "str", "description": "The type of pharmaceutical product (e.g., drug, medical device, biologic)"}, "document_type": {"type": "str", "description": "The type of regulatory document (e.g., marketing authorization application, post-marketing surveillance report)"}}, "required": ["country"], "responses": {"requirements": {"type": "str", "description": "The regulatory requirements for the specified country, product type, and document type"}}}
{"api_name": "getPackagingType", "api_description": "Retrieve the type of packaging used for a pharmaceutical product", "field": "Pharmaceutical/Pharmaceutical packaging", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product for which you want to get the packaging type"}}, "required": ["product_name"], "responses": {"packaging_type": {"type": "str", "description": "The type of packaging used for the specified pharmaceutical product"}}}
{"api_name": "getPackagingMaterial", "api_description": "Retrieve information about the packaging material used for pharmaceutical products", "field": "Pharmaceutical/Pharmaceutical packaging", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product for which you want to get the packaging material"}}, "required": ["product_name"], "responses": {"packaging_material": {"type": "str", "description": "The type of packaging material used for the specified pharmaceutical product"}}}
{"api_name": "getExpirationDate", "api_description": "Retrieve the expiration date of a pharmaceutical product", "field": "Pharmaceutical/Pharmaceutical packaging", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product for which you want to get the expiration date"}}, "required": ["product_name"], "responses": {"expiration_date": {"type": "str", "description": "The expiration date of the specified pharmaceutical product"}}}
{"api_name": "getBatchNumber", "api_description": "Retrieve the batch number of a pharmaceutical product", "field": "Pharmaceutical/Pharmaceutical packaging", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product for which you want to get the batch number"}}, "required": ["product_name"], "responses": {"batch_number": {"type": "str", "description": "The batch number of the specified pharmaceutical product"}}}
{"api_name": "getBarcode", "api_description": "Retrieve the barcode of a pharmaceutical product", "field": "Pharmaceutical/Pharmaceutical packaging", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product for which you want to get the barcode"}}, "required": ["product_name"], "responses": {"barcode": {"type": "str", "description": "The barcode of the specified pharmaceutical product"}}}
{"api_name": "getPackagingSpecifications", "api_description": "Retrieve the specifications of packaging used for pharmaceuticals", "field": "Pharmaceutical/Pharmaceutical packaging", "parameters": {"medication_name": {"type": "str", "description": "The name of the medication for which you want to retrieve packaging information (e.g., Aspirin, Paracetamol)"}, "manufacturer": {"type": "str", "description": "The name of the manufacturer producing the medication (e.g., Pfizer, Novartis)"}}, "required": ["medication_name"], "responses": {"material": {"type": "str", "description": "The material used for the packaging of the specified medication"}, "size": {"type": "str", "description": "The size of the packaging"}, "dosage_form": {"type": "str", "description": "The dosage form of the medication (e.g., tablet, capsule)"}}}
{"api_name": "generateQRCode", "api_description": "Generate a QR code for a pharmaceutical product", "field": "Pharmaceutical/Pharmaceutical supply chain management", "parameters": {"product_code": {"type": "str", "description": "The unique code of the product for which you want to generate a QR code"}}, "required": ["product_code"], "responses": {"qrcode_image": {"type": "str", "description": "The base64 encoded image of the generated QR code"}}}
{"api_name": "getPharmaceuticalDistribution", "api_description": "Retrieve pharmaceutical distribution information", "field": "Pharmaceutical/Pharmaceutical distribution", "parameters": {"medicine_name": {"type": "str", "description": "The name of the medicine you want to track (e.g., Aspirin, Paracetamol)"}, "location": {"type": "str", "description": "The location for which you want to get the distribution information (e.g., city, state, country)"}}, "required": ["medicine_name", "location"], "responses": {"distribution_status": {"type": "str", "description": "The current status of pharmaceutical distribution at the specified location"}, "estimated_delivery_time": {"type": "str", "description": "The estimated time for the medicine to be delivered at the specified location"}}}
{"api_name": "calculateDosage", "api_description": "Calculate the dosage of a specific drug", "field": "Pharmaceutical/Pharmaceutical informatics", "parameters": {"drug_name": {"type": "str", "description": "The name of the drug you want to calculate the dosage for (e.g., Ibuprofen, Amoxicillin)"}, "age": {"type": "int", "description": "The age of the patient in years"}, "weight": {"type": "float", "description": "The weight of the patient in kilograms"}}, "required": ["drug_name", "age", "weight"], "responses": {"dosage": {"type": "str", "description": "The recommended dosage of the drug for the patient"}}}
{"api_name": "reportAdverseEvent", "api_description": "Report an adverse event related to a pharmaceutical product", "field": "Pharmaceutical/Pharmacovigilance", "parameters": {"product_name": {"type": "str", "description": "The name of the pharmaceutical product"}, "event_date": {"type": "str", "description": "The date on which the adverse event occurred (e.g., yyyy-mm-dd)"}, "event_description": {"type": "str", "description": "A description of the adverse event"}, "patient_age": {"type": "int", "description": "The age of the patient experiencing the adverse event (e.g., 25)"}, "patient_gender": {"type": "str", "description": "The gender of the patient experiencing the adverse event (e.g., Male, Female)"}, "contact_email": {"type": "str", "description": "The email address of the person reporting the adverse event"}}, "required": ["product_name", "event_date", "event_description"], "responses": {"report_id": {"type": "str", "description": "The unique identifier of the reported adverse event"}, "confirmation_message": {"type": "str", "description": "A confirmation message acknowledging the successful submission of the adverse event report"}}}
{"api_name": "getArchitecturalTheory", "api_description": "Retrieve information about architectural theories", "field": "Architecture/Architectural theory", "parameters": {"theory_name": {"type": "str", "description": "The name of the architectural theory you want to retrieve information about (e.g., Functionalism, Postmodernism, Deconstructivism)"}}, "required": ["theory_name"], "responses": {"theory_description": {"type": "str", "description": "A brief description of the architectural theory"}, "key_figures": {"type": "str", "description": "The key figures associated with the architectural theory"}}}
{"api_name": "getArchTheory", "api_description": "Retrieve architectural theory information", "field": "Architecture/Architectural theory", "parameters": {}, "required": [], "responses": {"theory": {"type": "str", "description": "The architectural theory regarding the specified topic"}}}
{"api_name": "getBuildingIndoorAirQuality", "api_description": "Retrieve the indoor air quality information of a building", "field": "Architecture/Building science", "parameters": {"building_name": {"type": "str", "description": "The name of the building"}, "time_of_day": {"type": "str", "description": "Specify a time of day for indoor air quality (e.g., morning, afternoon, night)"}}, "required": ["building_name"], "responses": {"indoor_air_quality": {"type": "float", "description": "The indoor air quality of the building"}}}
{"api_name": "getUrbanDesignScore", "api_description": "Retrieve urban design score for a given location", "field": "Architecture/Urban design", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the urban design score (e.g., New York, Paris, Tokyo)"}, "time_period": {"type": "str", "description": "The time period for which you want to retrieve the urban design score (e.g., past 10 years, last year, current year)"}}, "required": ["location"], "responses": {"score": {"type": "float", "description": "The urban design score at the specified location for the given time period"}, "rank": {"type": "str", "description": "The rank of the location based on its urban design score"}}}
{"api_name": "getLandscapeDesign", "api_description": "Retrieve landscape design information", "field": "Architecture/Landscape architecture", "parameters": {"location": {"type": "str", "description": "The location for which you want to get landscape design information (e.g., parks, gardens, resorts)"}, "style": {"type": "str", "description": "Specify a style for landscape design (e.g., modern, traditional)"}, "budget": {"type": "int", "description": "Specify the budget for landscape design in USD"}}, "required": ["location"], "responses": {"design": {"type": "str", "description": "The landscape design at the specified location"}, "cost": {"type": "int", "description": "The estimated cost of the landscape design in USD"}}}
{"api_name": "getLandscapeProjects", "api_description": "Retrieve information about landscape architecture projects", "field": "Architecture/Landscape architecture", "parameters": {"location": {"type": "str", "description": "The location of the landscape project (e.g., city, country)"}, "style": {"type": "str", "description": "The architectural style of the landscape project (e.g., modern, traditional, organic)"}, "area_size": {"type": "str", "description": "The size of the landscape project area (e.g., small, medium, large)"}}, "required": ["location"], "responses": {"project_name": {"type": "str", "description": "The name of the landscape project"}, "project_description": {"type": "str", "description": "A brief description of the landscape project"}, "location": {"type": "str", "description": "The location of the landscape project"}, "style": {"type": "str", "description": "The architectural style of the landscape project"}, "area_size": {"type": "str", "description": "The size of the landscape project area"}}}
{"api_name": "getLandscapeArchitecture", "api_description": "Retrieve information about landscape architecture", "field": "Architecture/Landscape architecture", "parameters": {"location": {"type": "str", "description": "The location for which you want to get landscape architecture information (e.g., city, park, garden)"}, "style": {"type": "str", "description": "The desired architectural style for landscape architecture (e.g., modern, traditional, minimalist)"}, "features": {"type": "str", "description": "Specific features you want to find in the landscape architecture (e.g., waterfalls, sculptures, walkways)"}}, "required": ["location"], "responses": {"architecture": {"type": "str", "description": "The landscape architecture at the specified location"}, "style": {"type": "str", "description": "The architectural style of the landscape architecture"}, "features": {"type": "str", "description": "The features present in the landscape architecture"}}}
{"api_name": "getFloorPlan", "api_description": "Retrieve the floor plan of an interior space", "field": "Architecture/Interior architecture", "parameters": {"building": {"type": "str", "description": "The name of the building where the interior space is located (e.g., office building, residential building)"}, "room": {"type": "str", "description": "The name or number of the room for which you want to get the floor plan (e.g., living room, bedroom, room 301)"}}, "required": ["building", "room"], "responses": {"floor_plan": {"type": "str", "description": "The floor plan of the specified interior space"}}}
{"api_name": "getProjectTimeline", "api_description": "Retrieve the timeline of a construction project", "field": "Architecture/Construction management", "parameters": {"project_id": {"type": "str", "description": "The unique identifier of the construction project"}}, "required": ["project_id"], "responses": {"timeline": {"type": "str", "description": "The timeline of the project"}}}
{"api_name": "getBudgetStatus", "api_description": "Retrieve the budget status of a construction project", "field": "Architecture/Construction management", "parameters": {"project_id": {"type": "str", "description": "The unique identifier of the construction project"}}, "required": ["project_id"], "responses": {"budget_status": {"type": "str", "description": "The current budget status of the project"}}}
{"api_name": "getPreservationStatus", "api_description": "Retrieve the preservation status of a specific architectural site", "field": "Architecture/Architectural preservation", "parameters": {"site_name": {"type": "str", "description": "The name of the architectural site (e.g., Taj Mahal, Great Wall of China, Eiffel Tower)"}, "location": {"type": "str", "description": "The location of the architectural site (e.g., Agra, Beijing, Paris)"}}, "required": ["site_name", "location"], "responses": {"status": {"type": "str", "description": "The preservation status of the architectural site (e.g., well-maintained, partially ruined, under renovation)"}}}
{"api_name": "getHVACSystemInfo", "api_description": "Retrieve information about the HVAC (Heating, Ventilation, and Air Conditioning) system of a building", "field": "Architecture/Building systems", "parameters": {"building_id": {"type": "str", "description": "The unique identifier of the building"}, "system_type": {"type": "str", "description": "The type of HVAC system (e.g., central, split, variable refrigerant flow)"}}, "required": ["building_id"], "responses": {"system_info": {"type": "str", "description": "Information about the HVAC system of the specified building"}}}
{"api_name": "getHVACData", "api_description": "Retrieve HVAC (Heating, Ventilation, and Air Conditioning) data for a building", "field": "Architecture/Building systems", "parameters": {"building_id": {"type": "str", "description": "The unique identifier of the building"}, "start_date": {"type": "str", "description": "The start date for the HVAC data"}, "end_date": {"type": "str", "description": "The end date for the HVAC data"}}, "required": ["building_id"], "responses": {"temperature": {"type": "float", "description": "The temperature recorded by the HVAC system"}, "humidity": {"type": "float", "description": "The humidity level recorded by the HVAC system"}, "energy_consumption": {"type": "float", "description": "The energy consumption recorded by the HVAC system"}, "airflow_rate": {"type": "float", "description": "The airflow rate recorded by the HVAC system"}}}
{"api_name": "getBlueprint", "api_description": "Retrieve architectural blueprint information", "field": "Architecture/Architectural drafting", "parameters": {"building_type": {"type": "str", "description": "The type of building for which you want the blueprint (e.g., house, office building)"}, "scale": {"type": "str", "description": "The scale of the blueprint (e.g., 1:100, 1:200)"}, "dimensions": {"type": "str", "description": "The dimensions of the building (e.g., length x width x height)"}}, "required": ["building_type", "scale"], "responses": {"blueprint_url": {"type": "str", "description": "URL to the architectural blueprint of the specified building"}}}
{"api_name": "getDraftingStandards", "api_description": "Retrieve drafting standards used in architectural drafting", "field": "Architecture/Architectural drafting", "parameters": {}, "required": [], "responses": {"drafting_standards": {"type": "str", "description": "The drafting standards used in architectural drafting"}}}
{"api_name": "getLineTypes", "api_description": "Retrieve line types used in architectural drafting", "field": "Architecture/Architectural drafting", "parameters": {}, "required": [], "responses": {"line_types": {"type": "str", "description": "The line types used in architectural drafting"}}}
{"api_name": "createDraftingElement", "api_description": "Create a new drafting element in architectural drafting", "field": "Architecture/Architectural drafting", "parameters": {"element_type": {"type": "str", "description": "The type of drafting element to create (e.g., line, circle, rectangle)"}, "properties": {"type": "str", "description": "Specific properties of the drafting element (e.g., length, radius, coordinates)"}}, "required": ["element_type", "properties"], "responses": {"status": {"type": "str", "description": "The status message indicating the success or failure of creating the drafting element"}}}
{"api_name": "getDrawing", "api_description": "Retrieve architectural drafting drawing", "field": "Architecture/Architectural drafting", "parameters": {"building_type": {"type": "str", "description": "Type of building (e.g., residential, commercial, industrial)"}, "scale": {"type": "str", "description": "Scale of the drawing (e.g., 1:50, 1:100)"}, "paper_size": {"type": "str", "description": "Size of the paper for the drawing (e.g., A4, A3, A2)"}, "detail_level": {"type": "str", "description": "Level of detail required in the drawing (e.g., basic, detailed)"}, "colors": {"type": "str", "description": "Colors to be used in the drawing (e.g., grayscale, full color)"}, "annotation": {"type": "bool", "description": "Include annotation in the drawing (e.g., true, false)"}}, "required": ["building_type", "scale", "paper_size"], "responses": {"drawing_file": {"type": "str", "description": "Link to download the architectural drafting drawing"}}}
{"api_name": "getArchitecturalDrafting", "api_description": "Retrieve information about architectural drafting", "field": "Architecture/Architectural drafting", "parameters": {"building_type": {"type": "str", "description": "The type of building for which you want to create architectural drafting (e.g., residential, commercial, industrial)"}, "scale": {"type": "str", "description": "The scale at which the architectural drafting should be created (e.g., 1:50, 1:100, 1:200)"}, "layout_type": {"type": "str", "description": "The type of layout required for architectural drafting (e.g., floor plan, elevation, section)"}}, "required": ["building_type", "scale", "layout_type"], "responses": {"drafting_details": {"type": "str", "description": "The details of the architectural drafting including dimensions, symbols, and annotations"}}}
{"api_name": "getVisualization", "api_description": "Retrieve architectural visualization information", "field": "Architecture/Architectural visualization", "parameters": {"location": {"type": "str", "description": "The location of the architectural project (e.g., New York, Paris, Tokyo)"}, "style": {"type": "str", "description": "The desired architectural style (e.g., modern, classical, contemporary)"}, "render_quality": {"type": "str", "description": "Specify the quality of the visualization output (e.g., low, medium, high)"}}, "required": ["location"], "responses": {"visualization_url": {"type": "str", "description": "The URL of the architectural visualization image"}, "description": {"type": "str", "description": "A brief description of the architectural visualization"}}}
{"api_name": "getBuildingInfo", "api_description": "Retrieve building information using BIM", "field": "Architecture/Building information modeling (BIM)", "parameters": {"building_id": {"type": "str", "description": "The unique identifier of the building"}, "component": {"type": "str", "description": "Specify a specific component of the building (e.g., walls, windows, doors)"}, "area": {"type": "float", "description": "Specify the area of the building component in square meters"}}, "required": ["building_id"], "responses": {"component_info": {"type": "str", "description": "Detailed information about the specified building component"}, "material": {"type": "str", "description": "The material used for the specified building component"}}}
{"api_name": "getArchitecturalCriticism", "api_description": "Retrieve architectural criticism for a specific building or structure", "field": "Architecture/Architectural criticism", "parameters": {"building_name": {"type": "str", "description": "The name of the building or structure to retrieve criticism for (e.g., Empire State Building, Sagrada Familia, Taj Mahal)"}, "critic_name": {"type": "str", "description": "The name of the critic who provided the criticism for the building or structure (e.g., Frank Lloyd Wright, Zaha Hadid)"}, "year": {"type": "int", "description": "The year when the architectural criticism was provided"}}, "required": ["building_name"], "responses": {"criticism": {"type": "str", "description": "The architectural criticism for the specific building or structure"}, "critic_name": {"type": "str", "description": "The name of the critic who provided the criticism"}, "year": {"type": "int", "description": "The year when the architectural criticism was provided"}}}
{"api_name": "getSociologicalAnalysis", "api_description": "Retrieve sociological analysis of architecture", "field": "Architecture/Architectural sociology", "parameters": {"building_type": {"type": "str", "description": "Type of building for analysis (e.g., residential, commercial, public)"}, "location": {"type": "str", "description": "The location of the building for analysis"}}, "required": ["building_type", "location"], "responses": {"sociological_analysis": {"type": "str", "description": "The sociological analysis of the architectural impact on society"}}}
{"api_name": "getArchitecturalSociology", "api_description": "Retrieve information related to architectural sociology", "field": "Architecture/Architectural sociology", "parameters": {"architects": {"type": "str", "description": "The name of the architect whose work you want to explore"}, "city": {"type": "str", "description": "The city in which you want to investigate architectural sociology"}, "time_period": {"type": "str", "description": "Specify a time period to study architectural sociology (e.g., ancient, medieval, modern)"}}, "required": ["architects"], "responses": {"sociological_aspect": {"type": "str", "description": "The sociological aspect related to the specified architect and city"}, "influence": {"type": "str", "description": "The influence of architectural sociology in the specified time period"}}}
{"api_name": "getArchPsychologyInfo", "api_description": "Retrieve information about architectural psychology", "field": "Architecture/Architectural psychology", "parameters": {}, "required": [], "responses": {"info": {"type": "str", "description": "Information about architectural psychology"}}}
{"api_name": "getProjectCost", "api_description": "Retrieve the estimated project cost", "field": "Architecture/Architectural economics", "parameters": {"project_name": {"type": "str", "description": "The name of the architectural project"}, "location": {"type": "str", "description": "The location of the architectural project"}, "project_type": {"type": "str", "description": "The type of architectural project (e.g., residential, commercial, institutional)"}}, "required": ["project_name", "location"], "responses": {"estimated_cost": {"type": "float", "description": "The estimated cost of the architectural project in the specified location"}}}
{"api_name": "getArchitecturalLaw", "api_description": "Retrieve information about architectural laws and regulations", "field": "Architecture/Architectural law", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the architectural laws (e.g., United States, France, Australia)"}, "city": {"type": "str", "description": "The city within the country for which you want to get the architectural laws (e.g., New York, Paris, Sydney)"}}, "required": ["country"], "responses": {"laws": {"type": "str", "description": "The architectural laws and regulations in the specified country and city"}}}
{"api_name": "getArchLaw", "api_description": "Retrieve information on architectural laws and regulations", "field": "Architecture/Architectural law", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the architectural laws and regulations"}, "city": {"type": "str", "description": "The city for which you want to get the architectural laws and regulations"}}, "required": ["country"], "responses": {"laws": {"type": "str", "description": "The architectural laws and regulations for the specified country and city"}}}
{"api_name": "getInteriorDesign", "api_description": "Retrieve interior design information for a given building", "field": "Architecture/Interior design", "parameters": {"building_name": {"type": "str", "description": "The name of the building (e.g., Taj Mahal, Burj Khalifa, Sydney Opera House)"}, "style": {"type": "str", "description": "Specify a design style (e.g., modern, traditional, minimalist)"}, "area": {"type": "float", "description": "The total interior area of the building in square meters"}, "budget": {"type": "float", "description": "The allocated budget for interior design in US dollars"}}, "required": ["building_name"], "responses": {"design_elements": {"type": "str", "description": "The key design elements incorporated in the interior design"}, "color_scheme": {"type": "str", "description": "The color scheme used in the interior design"}, "furniture_types": {"type": "str", "description": "The types of furniture used in the interior design"}, "budget_allocated": {"type": "float", "description": "The allocated budget for the interior design"}, "budget_spent": {"type": "float", "description": "The amount of budget already spent on the interior design"}}}
{"api_name": "getRoomLayout", "api_description": "Retrieve the layout of a room in a building", "field": "Architecture/Interior design", "parameters": {"building_name": {"type": "str", "description": "The name of the building where the room is located (e.g., Taj Mahal, Empire State Building)"}, "room_number": {"type": "str", "description": "The number or identifier of the room (e.g., 101, A302)"}}, "required": ["building_name", "room_number"], "responses": {"room_layout": {"type": "str", "description": "The detailed layout and design of the specified room"}}}
{"api_name": "getFacadeEngineeringInfo", "api_description": "Retrieve information about facade engineering", "field": "Architecture/Facade engineering", "parameters": {"building_name": {"type": "str", "description": "The name of the building (e.g., Burj Khalifa, Empire State Building)"}, "city": {"type": "str", "description": "The city where the building is located (e.g., Dubai, New York)"}, "material": {"type": "str", "description": "Specify the type of facade material used (e.g., glass, stone)"}, "height": {"type": "float", "description": "The height of the building in meters"}}, "required": ["building_name", "city"], "responses": {"facade_info": {"type": "str", "description": "Information about the facade engineering of the specified building"}}}
{"api_name": "getGreenBuildingDesign", "api_description": "Retrieve information on green building design", "field": "Architecture/Green building design", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the green building design information (e.g., New York, London, Beijing)"}, "rating_system": {"type": "str", "description": "Specify the rating system for green buildings (e.g., LEED, BREEAM, Green Star)"}, "building_type": {"type": "str", "description": "Specify the type of building for green design information (e.g., residential, commercial, institutional)"}}, "required": ["location"], "responses": {"green_design_features": {"type": "str", "description": "The green design features available at the specified location"}, "rating": {"type": "str", "description": "The green building rating achieved at the specified location"}}}
{"api_name": "getFacilityCapacity", "api_description": "Retrieve the current capacity of a healthcare facility", "field": "Architecture/Healthcare architecture", "parameters": {"facility_id": {"type": "str", "description": "The unique identifier of the healthcare facility"}}, "required": ["facility_id"], "responses": {"capacity": {"type": "int", "description": "The current capacity of the healthcare facility"}, "occupancy": {"type": "int", "description": "The number of occupied spaces in the healthcare facility"}, "bed_type": {"type": "str", "description": "The type of beds available in the facility (e.g., medical, surgical)"}}}
{"api_name": "getWaitingTime", "api_description": "Retrieve the estimated waiting time for a healthcare service", "field": "Architecture/Healthcare architecture", "parameters": {"facility_id": {"type": "str", "description": "The unique identifier of the healthcare facility"}, "service_type": {"type": "str", "description": "The type of healthcare service (e.g., consultation, surgery)"}}, "required": ["facility_id", "service_type"], "responses": {"waiting_time": {"type": "str", "description": "The estimated waiting time for the specified healthcare service"}}}
{"api_name": "getFacilityLocation", "api_description": "Retrieve the location information of a healthcare facility", "field": "Architecture/Healthcare architecture", "parameters": {"facility_id": {"type": "str", "description": "The unique identifier of the healthcare facility"}}, "required": ["facility_id"], "responses": {"latitude": {"type": "float", "description": "The latitude coordinate of the healthcare facility location"}, "longitude": {"type": "float", "description": "The longitude coordinate of the healthcare facility location"}, "address": {"type": "str", "description": "The address of the healthcare facility"}}}
{"api_name": "getOfficeLayout", "api_description": "Retrieve the layout of an office space", "field": "Architecture/Office design", "parameters": {"building": {"type": "str", "description": "The name of the building where the office is located"}, "floor_level": {"type": "int", "description": "The floor level of the office"}, "room_number": {"type": "str", "description": "The room number of the office"}}, "required": ["building", "room_number"], "responses": {"layout": {"type": "str", "description": "The detailed layout and design of the specified office"}}}
{"api_name": "getOfficeDesign", "api_description": "Retrieve office design information", "field": "Architecture/Office design", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to get office design information"}, "location": {"type": "str", "description": "The location of the office (e.g., New York, London, Paris)"}, "number_of_employees": {"type": "int", "description": "The total number of employees working in the office"}}, "required": ["company_name", "location"], "responses": {"design_type": {"type": "str", "description": "The type of office design (e.g., open space, cubicles, co-working)"}, "seating_capacity": {"type": "int", "description": "The maximum seating capacity of the office"}}}
{"api_name": "getReligiousArchitectureInfo", "api_description": "Retrieve information about religious architecture", "field": "Architecture/Religious architecture", "parameters": {"location": {"type": "str", "description": "The location of the religious architecture (e.g., Rome, Istanbul, Kyoto)"}, "religion": {"type": "str", "description": "The specific religion associated with the architecture (e.g., Christianity, Islam, Buddhism)"}}, "required": ["location"], "responses": {"architecture_info": {"type": "str", "description": "Information about the religious architecture at the specified location"}}}
{"api_name": "getTransportationArchitecture", "api_description": "Retrieve information about transportation architecture", "field": "Architecture/Transportation architecture", "parameters": {"location": {"type": "str", "description": "The location for which you want to get information about transportation architecture (e.g., Tokyo, Singapore, New York)"}, "mode_of_transport": {"type": "str", "description": "The mode of transportation for which you want to get information (e.g., road, rail, air, water)"}, "capacity": {"type": "int", "description": "The desired capacity for transportation (e.g., number of passengers, volume of cargo)"}}, "required": ["location", "mode_of_transport"], "responses": {"infrastructure": {"type": "str", "description": "The transportation infrastructure available at the specified location for the specified mode of transport"}, "capacity": {"type": "int", "description": "The capacity of transportation infrastructure for the specified mode of transport"}}}
{"api_name": "getFacilitiesDesign", "api_description": "Retrieve sports facilities design information", "field": "Architecture/Sports facilities design", "parameters": {"sport": {"type": "str", "description": "The sport for which you want to get the facilities design (e.g., football, basketball, swimming)"}, "location": {"type": "str", "description": "The location of the facilities (e.g., city, country)"}}, "required": ["sport", "location"], "responses": {"design": {"type": "str", "description": "The design of the sports facilities"}}}
{"api_name": "getMuseumDesign", "api_description": "Retrieve information about museum design", "field": "Architecture/Museum design", "parameters": {"museum_name": {"type": "str", "description": "The name of the museum for which you want to get the design"}, "architect": {"type": "str", "description": "The architect's name of the museum design"}, "year": {"type": "int", "description": "The year when the museum design was completed"}}, "required": ["museum_name"], "responses": {"design_features": {"type": "str", "description": "Features of the museum design"}, "architect": {"type": "str", "description": "The architect's name of the museum design"}, "year": {"type": "int", "description": "The year when the museum design was completed"}}}
{"api_name": "getAcoustics", "api_description": "Retrieve information about the acoustics in a theater", "field": "Architecture/Theater design", "parameters": {"theater_name": {"type": "str", "description": "The name of the theater for which you want to get the acoustics information"}, "theater_location": {"type": "str", "description": "The location of the theater"}}, "required": ["theater_name", "theater_location"], "responses": {"acoustics": {"type": "str", "description": "Information about the acoustics in the theater"}}}
{"api_name": "getTheaterLayout", "api_description": "Retrieve the layout of a theater", "field": "Architecture/Theater design", "parameters": {"theater_name": {"type": "str", "description": "The name of the theater you want to get the layout for (e.g., Royal Opera House, Sydney Opera House, Teatro alla Scala)"}}, "required": ["theater_name"], "responses": {"layout": {"type": "str", "description": "The layout of the specified theater"}}}
{"api_name": "getLandUse", "api_description": "Retrieve the land use of a specific area", "field": "Architecture/Urban planning", "parameters": {"area": {"type": "str", "description": "The specific area for which you want to retrieve the land use"}}, "required": ["area"], "responses": {"land_use": {"type": "str", "description": "The land use of the specified area"}}}
{"api_name": "getCityDensity", "api_description": "Retrieve the population density of a city", "field": "Architecture/Urban planning", "parameters": {"city": {"type": "str", "description": "The name of the city for which you want to retrieve the population density (e.g., London, Beijing, Sydney)"}}, "required": ["city"], "responses": {"density": {"type": "float", "description": "The population density of the specified city"}}}
{"api_name": "getDraftingSoftware", "api_description": "Retrieve information about architectural drafting software", "field": "Architecture/Architectural drafting software", "parameters": {}, "required": [], "responses": {"software": {"type": "str", "description": "The name of the architectural drafting software"}, "version": {"type": "str", "description": "The version of the software"}}}
{"api_name": "createModel", "api_description": "Create a 3D model", "field": "Architecture/3D modeling and rendering", "parameters": {"name": {"type": "str", "description": "The name of the 3D model"}, "dimensions": {"type": "str", "description": "The dimensions of the 3D model (e.g., length x width x height)"}, "render_quality": {"type": "str", "description": "The desired rendering quality of the model (e.g., low, medium, high)"}, "textures": {"type": "str", "description": "The textures to be applied to the model (e.g., wood, metal, glass)"}, "scale": {"type": "float", "description": "The scale factor to apply to the model"}}, "required": ["name", "dimensions"], "responses": {"model_id": {"type": "str", "description": "The unique ID of the created model"}, "render_time": {"type": "float", "description": "The time taken to render the model in seconds"}}}
{"api_name": "renderModel", "api_description": "Render a 3D model with specified parameters", "field": "Architecture/3D modeling and rendering", "parameters": {"model_file": {"type": "str", "description": "The file path or URL of the 3D model to be rendered"}, "output_format": {"type": "str", "description": "The desired output format of the rendered image (e.g., PNG, JPEG)"}, "quality": {"type": "str", "description": "The desired quality level of the rendered image (e.g., low, medium, high)"}, "camera_position": {"type": "str", "description": "The position of the camera for rendering (e.g., front, top, side)"}, "lighting_conditions": {"type": "str", "description": "The lighting conditions for the rendered scene (e.g., day, night, indoor)"}, "background_color": {"type": "str", "description": "The desired background color of the rendered image"}}, "required": ["model_file"], "responses": {"rendered_image": {"type": "str", "description": "The URL or file path of the rendered image"}}}
{"api_name": "getAnalysisResult", "api_description": "Retrieve architectural analysis result", "field": "Architecture/Architectural analysis software", "parameters": {"project": {"type": "str", "description": "The name or ID of the architectural project to analyze"}}, "required": ["project"], "responses": {"result": {"type": "str", "description": "The analysis result of the architectural project"}}}
{"api_name": "getHealthInsuranceCoverage", "api_description": "Retrieve information about health insurance coverage", "field": "Insurance/Health Insurance", "parameters": {"age": {"type": "int", "description": "The age of the person who needs health insurance (e.g., 30, 45, 55)"}, "annual_income": {"type": "float", "description": "The annual income of the person who needs health insurance (e.g., 50000.00, 75000.00, 100000.00)"}, "region": {"type": "str", "description": "The region where the person resides (e.g., North America, Europe, Asia)"}}, "required": ["age", "annual_income", "region"], "responses": {"coverage_percentage": {"type": "int", "description": "The percentage of health insurance coverage the person is eligible for"}, "deductible_amount": {"type": "float", "description": "The deductible amount that needs to be paid before the insurance coverage begins"}, "premium_amount": {"type": "float", "description": "The premium amount that needs to be paid for the health insurance plan"}}}
{"api_name": "getDisabilityQuote", "api_description": "Retrieve a disability insurance quote", "field": "Insurance/Disability Insurance", "parameters": {"age": {"type": "int", "description": "The age of the person applying for disability insurance"}, "gender": {"type": "str", "description": "The gender of the person applying for disability insurance (e.g., male, female)"}, "occupation": {"type": "str", "description": "The occupation of the person applying for disability insurance (e.g., engineer, teacher)"}}, "required": ["age", "gender", "occupation"], "responses": {"quote": {"type": "float", "description": "The disability insurance quote for the person"}}}
{"api_name": "getMarineInsurancePremium", "api_description": "Calculate the premium for marine insurance", "field": "Insurance/Marine Insurance", "parameters": {"cargo_value": {"type": "float", "description": "The value of the cargo to be insured in USD"}, "voyage_type": {"type": "str", "description": "The type of voyage for the cargo (e.g., import, export, coastal)"}, "cargo_type": {"type": "str", "description": "The type of cargo to be insured (e.g., perishable, hazardous, general)"}, "shipping_company": {"type": "str", "description": "The name of the shipping company"}, "coverage_type": {"type": "str", "description": "The type of coverage required for the marine insurance (e.g., all risk, named perils)"}}, "required": ["cargo_value", "voyage_type"], "responses": {"premium": {"type": "float", "description": "The calculated premium for the marine insurance"}}}
{"api_name": "calculateInsurancePremium", "api_description": "Calculate the premium for a marine insurance policy", "field": "Insurance/Marine Insurance", "parameters": {"ship_value": {"type": "float", "description": "The value of the insured ship in USD"}, "cargo_value": {"type": "float", "description": "The value of the insured cargo in USD"}, "voyage_distance": {"type": "float", "description": "The distance of the voyage in nautical miles (e.g., 5000, 10000, 15000)"}, "vessel_type": {"type": "str", "description": "The type of vessel (e.g., container ship, tanker, fishing vessel)"}, "insured_area": {"type": "str", "description": "The geographical area in which the policy will be valid (e.g., Asia, Europe)"}, "policy_duration": {"type": "int", "description": "The duration of the policy in months (e.g., 3, 6, 12)"}}, "required": ["ship_value", "cargo_value", "voyage_distance"], "responses": {"premium_amount": {"type": "float", "description": "The calculated premium amount in USD"}}}
{"api_name": "getFireInsuranceStatus", "api_description": "Retrieve the status of fire insurance for a given property", "field": "Insurance/Fire Insurance", "parameters": {"property_id": {"type": "str", "description": "The ID of the property for which you want to get the fire insurance status"}, "insurance_provider": {"type": "str", "description": "The insurance provider of the fire insurance (e.g., ABC Insurance, XYZ Insurance)"}}, "required": ["property_id"], "responses": {"status": {"type": "str", "description": "The status of the fire insurance for the specified property (e.g., Active, Expired)"}, "expiry_date": {"type": "str", "description": "The expiry date of the fire insurance for the specified property"}}}
{"api_name": "updateFireInsuranceCoverage", "api_description": "Update the coverage amount for fire insurance of a given property", "field": "Insurance/Fire Insurance", "parameters": {"property_id": {"type": "str", "description": "The ID of the property for which you want to update the fire insurance coverage"}, "coverage_amount": {"type": "float", "description": "The new coverage amount for fire insurance of the specified property"}}, "required": ["property_id", "coverage_amount"], "responses": {"success": {"type": "bool", "description": "Indicates whether the update was successful or not"}}}
{"api_name": "getFloodPolicy", "api_description": "Retrieve flood insurance policy information", "field": "Insurance/Flood Insurance", "parameters": {"property_type": {"type": "str", "description": "The type of property for which you want to get flood insurance policy information (e.g., residential, commercial)"}, "property_location": {"type": "str", "description": "The location of the property for which you want to get flood insurance policy information"}}, "required": ["property_location"], "responses": {"policy_details": {"type": "str", "description": "The details of the flood insurance policy for the specified property"}}}
{"api_name": "getFloodInsuranceRate", "api_description": "Retrieve the flood insurance rate for a given location", "field": "Insurance/Flood Insurance", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the flood insurance rate (e.g., New York City, Los Angeles, Miami)"}}, "required": ["location"], "responses": {"rate": {"type": "float", "description": "The flood insurance rate for the specified location"}}}
{"api_name": "applyCropInsurance", "api_description": "Apply for crop insurance coverage", "field": "Insurance/Crop Insurance", "parameters": {"crop_type": {"type": "str", "description": "The type of crop for which you want to apply insurance (e.g., corn, wheat, soybean)"}, "acres": {"type": "int", "description": "The number of acres to be insured"}}, "required": ["crop_type", "acres"], "responses": {"policy_number": {"type": "str", "description": "The policy number assigned for the crop insurance"}}}
{"api_name": "getCropInsuranceClaim", "api_description": "Retrieve information about a crop insurance claim", "field": "Insurance/Crop Insurance", "parameters": {"policy_number": {"type": "str", "description": "The policy number of the crop insurance claim"}, "crop_type": {"type": "str", "description": "The type of crop for which the insurance claim was made"}, "location": {"type": "str", "description": "The location of the crop field"}}, "required": ["policy_number", "crop_type", "location"], "responses": {"claim_amount": {"type": "float", "description": "The amount claimed in the crop insurance"}, "status": {"type": "str", "description": "The status of the insurance claim"}}}
{"api_name": "calculateSuretyBondPremium", "api_description": "Calculate the premium for a surety bond", "field": "Insurance/Surety Insurance", "parameters": {"bond_amount": {"type": "float", "description": "The amount of the surety bond (e.g., 10000.0, 25000.0, 50000.0)"}, "bond_type": {"type": "str", "description": "The type of surety bond (e.g., performance bond, payment bond, bid bond)"}, "credit_score": {"type": "int", "description": "The credit score of the applicant (e.g., 600, 700, 800)"}}, "required": ["bond_amount", "bond_type"], "responses": {"premium_amount": {"type": "float", "description": "The calculated premium amount for the surety bond"}}}
{"api_name": "getWorkersCompensationInsuranceQuote", "api_description": "Get a quote for Worker's Compensation Insurance", "field": "Insurance/Worker's Compensation Insurance", "parameters": {"business_type": {"type": "str", "description": "The type of business for which the insurance quote is needed (e.g., restaurant, construction, retail)"}, "employee_count": {"type": "int", "description": "The number of employees in the business"}, "state": {"type": "str", "description": "The state where the business is located (e.g., California, New York)"}}, "required": ["business_type", "employee_count", "state"], "responses": {"quote": {"type": "float", "description": "The estimated quote for Worker's Compensation Insurance"}}}
{"api_name": "getProfessionalLiabilityInsuranceQuotes", "api_description": "Retrieve insurance quotes for professional liability insurance", "field": "Insurance/Professional Liability Insurance", "parameters": {"occupation": {"type": "str", "description": "The occupation for which you need professional liability insurance (e.g., doctor, lawyer, architect)"}, "coverage_amount": {"type": "float", "description": "The desired coverage amount in monetary value (e.g., 1000000.00, 500000.00)"}, "years_of_experience": {"type": "int", "description": "The number of years of professional experience"}, "age": {"type": "int", "description": "The age of the insured person"}}, "required": ["occupation", "coverage_amount"], "responses": {"quote": {"type": "float", "description": "The insurance quote for professional liability insurance"}}}
{"api_name": "getCyberInsurancePolicy", "api_description": "Retrieve information about a cyber insurance policy", "field": "Insurance/Cyber Insurance", "parameters": {"policy_id": {"type": "str", "description": "The ID of the cyber insurance policy to retrieve"}}, "required": ["policy_id"], "responses": {"policy_holder": {"type": "str", "description": "The name of the policy holder"}, "coverage_limit": {"type": "float", "description": "The limit of coverage for cyber incidents"}, "premium_amount": {"type": "float", "description": "The amount of premium paid for the policy"}, "expiry_date": {"type": "str", "description": "The date when the policy expires"}}}
{"api_name": "getInsuranceInfo", "api_description": "Retrieve information about aviation insurance", "field": "Insurance/Aviation Insurance", "parameters": {"policy_number": {"type": "str", "description": "The policy number for which you want to get information"}, "flight_number": {"type": "str", "description": "The flight number for which you want to get insurance details"}, "departure_date": {"type": "str", "description": "The departure date of the flight for which you want to get insurance details"}}, "required": ["policy_number"], "responses": {"policy_status": {"type": "str", "description": "The current status of the insurance policy (e.g., active, expired)"}, "insurance_coverage": {"type": "float", "description": "The coverage amount provided by the insurance policy in case of an event"}}}
{"api_name": "getMotorcycleInsuranceQuote", "api_description": "Retrieve a motorcycle insurance quote", "field": "Insurance/Motorcycle Insurance", "parameters": {"bike_make": {"type": "str", "description": "The make of the motorcycle (e.g., Yamaha, Honda, Harley-Davidson)"}, "bike_model": {"type": "str", "description": "The model of the motorcycle (e.g., MT-07, CBR600RR, Street Glide)"}, "bike_year": {"type": "int", "description": "The manufacturing year of the motorcycle"}}, "required": ["bike_make", "bike_model", "bike_year"], "responses": {"quote": {"type": "float", "description": "The insurance quote amount"}}}
{"api_name": "cancelMotorcycleInsurancePolicy", "api_description": "Cancel an existing motorcycle insurance policy", "field": "Insurance/Motorcycle Insurance", "parameters": {"policy_number": {"type": "str", "description": "The policy number for the motorcycle insurance"}}, "required": ["policy_number"], "responses": {"cancellation_message": {"type": "str", "description": "A cancellation message confirming the cancellation of the policy"}}}
{"api_name": "getCICoverage", "api_description": "Retrieve critical illness insurance coverage information", "field": "Insurance/Critical Illness Insurance", "parameters": {"age": {"type": "int", "description": "The age of the policyholder"}, "gender": {"type": "str", "description": "The gender of the policyholder"}, "smoking_status": {"type": "str", "description": "The smoking status of the policyholder (e.g., smoker, non-smoker)"}}, "required": ["age", "gender"], "responses": {"coverage": {"type": "float", "description": "The coverage amount for critical illness insurance in case of diagnosis"}, "premium": {"type": "float", "description": "The premium amount for the critical illness insurance policy"}}}
{"api_name": "getCriticalIllnessInsuranceCoverage", "api_description": "Retrieve the coverage details for critical illness insurance", "field": "Insurance/Critical Illness Insurance", "parameters": {"policy_holder_age": {"type": "int", "description": "Age of the policy holder (e.g., 35, 45, 50)"}, "gender": {"type": "str", "description": "Gender of the policy holder (e.g., Male, Female)"}, "smoker": {"type": "bool", "description": "Specify if the policy holder is a smoker or non-smoker (e.g., true, false)"}}, "required": ["policy_holder_age", "gender"], "responses": {"coverage_amount": {"type": "int", "description": "The coverage amount for critical illness insurance"}, "premium_amount": {"type": "float", "description": "The premium amount to be paid for the insurance"}}}
{"api_name": "getPolicyCoverage", "api_description": "Retrieve coverage details of a critical illness insurance policy", "field": "Insurance/Critical Illness Insurance", "parameters": {"policy_number": {"type": "str", "description": "The policy number of the critical illness insurance policy"}}, "required": ["policy_number"], "responses": {"coverage_details": {"type": "str", "description": "The coverage details of the specified critical illness insurance policy"}}}
{"api_name": "getPremium", "api_description": "Calculate the premium for long-term care insurance", "field": "Insurance/Long-term Care Insurance", "parameters": {"age": {"type": "int", "description": "The age of the insured person (e.g., 40, 50, 60)"}, "gender": {"type": "str", "description": "The gender of the insured person (e.g., male, female)"}}, "required": ["age", "gender"], "responses": {"premium": {"type": "float", "description": "The calculated premium for long-term care insurance"}}}
{"api_name": "validateBenefits", "api_description": "Validate the eligibility for long-term care insurance benefits", "field": "Insurance/Long-term Care Insurance", "parameters": {"age": {"type": "int", "description": "The age of the insured person (e.g., 55, 65, 75)"}, "income": {"type": "float", "description": "The annual income of the insured person (e.g., 50000, 75000, 100000)"}, "health_conditions": {"type": "str", "description": "The pre-existing health conditions of the insured person (e.g., diabetes, heart disease, cancer)"}, "family_history": {"type": "str", "description": "The family history of chronic illnesses (e.g., Alzheimer's, Parkinson's)"}}, "required": ["age", "income"], "responses": {"eligible_benefits": {"type": "str", "description": "The eligible benefits for long-term care insurance"}}}
{"api_name": "getPolicyInfo", "api_description": "Retrieve policy information for long-term care insurance", "field": "Insurance/Long-term Care Insurance", "parameters": {"policy_number": {"type": "str", "description": "The policy number of the long-term care insurance policy"}, "customer_id": {"type": "str", "description": "The ID of the customer who owns the policy"}}, "required": ["policy_number", "customer_id"], "responses": {"policy_info": {"type": "str", "description": "Information about the long-term care insurance policy"}}}
{"api_name": "getPremiumAmount", "api_description": "Retrieve the premium amount for an insurance policy", "field": "Insurance/Insurance Underwriting", "parameters": {"policy_number": {"type": "str", "description": "The policy number for which you want to retrieve the premium amount"}, "coverage_amount": {"type": "float", "description": "The coverage amount desired for the policy"}}, "required": ["policy_number", "coverage_amount"], "responses": {"premium": {"type": "float", "description": "The premium amount for the policy"}}}
{"api_name": "checkEligibility", "api_description": "Check the eligibility of an individual for an insurance policy", "field": "Insurance/Insurance Underwriting", "parameters": {"age": {"type": "int", "description": "The age of the individual (e.g., 30, 40, 55)"}, "gender": {"type": "str", "description": "The gender of the individual (e.g., male, female)"}, "health_condition": {"type": "str", "description": "The health condition of the individual (e.g., excellent, good, fair)"}}, "required": ["age", "gender", "health_condition"], "responses": {"eligible": {"type": "bool", "description": "Indicates whether the individual is eligible for the policy"}}}
{"api_name": "fileInsuranceClaim", "api_description": "File an insurance claim for a specific incident", "field": "Insurance/Insurance Claims", "parameters": {"policy_number": {"type": "str", "description": "The policy number associated with the insurance"}, "incident_date": {"type": "str", "description": "The date on which the incident occurred (e.g., yyyy-mm-dd)"}, "incident_location": {"type": "str", "description": "The location where the incident occurred"}, "description": {"type": "str", "description": "A brief description of the incident"}, "item_value": {"type": "float", "description": "The value of the item(s) affected by the incident"}}, "required": ["policy_number", "incident_date", "incident_location"], "responses": {"claim_number": {"type": "str", "description": "The unique claim number assigned to the filed claim"}, "status": {"type": "str", "description": "The status of the insurance claim (e.g., pending, processing, approved)"}}}
{"api_name": "submitInsuranceClaim", "api_description": "Submit an insurance claim", "field": "Insurance/Insurance Claims", "parameters": {"policy_number": {"type": "str", "description": "The policy number associated with the claim"}, "claim_description": {"type": "str", "description": "A description of the insurance claim"}, "claim_amount": {"type": "float", "description": "The amount claimed in the insurance"}, "claim_date": {"type": "str", "description": "The date the claim was made"}}, "required": ["policy_number", "claim_description", "claim_amount"], "responses": {"claim_id": {"type": "str", "description": "Unique ID assigned to the insurance claim"}, "status": {"type": "str", "description": "The status of the claim (e.g., pending, processing, approved)"}}}
{"api_name": "getRiskScore", "api_description": "Calculate the risk score for a specific insurance policy", "field": "Insurance/Insurance Risk Management", "parameters": {"policy_number": {"type": "str", "description": "The policy number for which you want to calculate the risk score"}, "customer_age": {"type": "int", "description": "Age of the customer who owns the policy"}, "previous_claims": {"type": "int", "description": "Number of previous claims made by the customer"}, "coverage_amount": {"type": "float", "description": "The coverage amount of the insurance policy"}}, "required": ["policy_number", "customer_age", "previous_claims"], "responses": {"risk_score": {"type": "float", "description": "The calculated risk score for the insurance policy"}}}
{"api_name": "analyzeInsurancePolicy", "api_description": "Analyze an insurance policy to provide insights and recommendations", "field": "Insurance/Insurance Policy Analysis", "parameters": {"policy_number": {"type": "str", "description": "The policy number of the insurance policy to analyze"}, "customer_age": {"type": "int", "description": "The age of the customer who holds the insurance policy"}, "coverage_limit": {"type": "float", "description": "The coverage limit amount of the insurance policy"}, "deductible_amount": {"type": "float", "description": "The deductible amount of the insurance policy"}}, "required": ["policy_number"], "responses": {"policy_analysis": {"type": "str", "description": "The analysis report of the insurance policy providing insights and recommendations"}, "customer_risk_level": {"type": "str", "description": "The risk level assigned to the customer based on their insurance policy"}}}
{"api_name": "getPolicyAnalysis", "api_description": "Retrieve insurance policy analysis", "field": "Insurance/Insurance Policy Analysis", "parameters": {"policy_number": {"type": "str", "description": "The policy number for which you want to get the analysis"}, "customer_name": {"type": "str", "description": "The name of the customer who owns the policy"}, "coverage_type": {"type": "str", "description": "Specify the coverage type (e.g., life, health, auto)"}}, "required": ["policy_number"], "responses": {"analysis": {"type": "str", "description": "The analysis of the insurance policy"}}}
{"api_name": "createPolicy", "api_description": "Create a new insurance policy for a customer", "field": "Insurance/Insurance Administration", "parameters": {"customer_id": {"type": "str", "description": "The ID of the customer for whom the policy is being created"}, "policy_type": {"type": "str", "description": "The type of insurance policy to be created (e.g., life, health, auto)"}}, "required": ["customer_id", "policy_type"], "responses": {"policy_id": {"type": "str", "description": "The ID assigned to the newly created insurance policy"}}}
{"api_name": "cancelPolicy", "api_description": "Cancel an existing insurance policy", "field": "Insurance/Insurance Administration", "parameters": {"policy_id": {"type": "str", "description": "The ID of the policy to be canceled"}}, "required": ["policy_id"], "responses": {"status": {"type": "str", "description": "The status of the policy after cancellation (e.g., canceled, expired)"}}}
{"api_name": "updatePolicy", "api_description": "Update an existing insurance policy", "field": "Insurance/Insurance Administration", "parameters": {"policy_id": {"type": "str", "description": "The ID of the policy to be updated"}, "new_details": {"type": "str", "description": "The updated details of the policy"}}, "required": ["policy_id", "new_details"], "responses": {"success": {"type": "bool", "description": "Indicates whether the policy update was successful"}}}
{"api_name": "updatePolicyDetails", "api_description": "Update the details of an existing insurance policy", "field": "Insurance/Insurance Administration", "parameters": {"policy_number": {"type": "str", "description": "The unique identifier of the insurance policy"}, "policy_details": {"type": "str", "description": "Updated details or terms for the insurance policy"}}, "required": ["policy_number", "policy_details"], "responses": {"success": {"type": "bool", "description": "Boolean indicating if the update was successful"}}}
{"api_name": "getClaimAmount", "api_description": "Retrieve the total claim amount for a specific policy", "field": "Insurance/Insurance Data Analysis", "parameters": {"policy_number": {"type": "str", "description": "The policy number for which to retrieve the claim amount (e.g., POL001, POL002, POL003)"}}, "required": ["policy_number"], "responses": {"claim_amount": {"type": "float", "description": "The total claim amount for the specified policy"}}}
{"api_name": "updateInsurancePolicy", "api_description": "Update information of an existing insurance policy", "field": "Insurance/Insurance Operations", "parameters": {"policy_number": {"type": "str", "description": "The unique identifier for the insurance policy"}, "premium_amount": {"type": "float", "description": "The new premium amount"}, "end_date": {"type": "str", "description": "The new end date of the insurance policy (e.g., YYYY-MM-DD)"}}, "required": ["policy_number"], "responses": {"status": {"type": "str", "description": "The status of the operation (e.g., success, error)"}, "message": {"type": "str", "description": "A message providing information about the operation"}}}
{"api_name": "addPolicy", "api_description": "Add a new insurance policy", "field": "Insurance/Insurance Operations", "parameters": {"policy_details": {"type": "str", "description": "Details of the insurance policy to add (e.g., policy number, coverage amount, start date)"}, "customer_id": {"type": "int", "description": "Unique ID of the customer associated with the policy"}}, "required": ["policy_details", "customer_id"], "responses": {"policy_id": {"type": "int", "description": "Unique ID assigned to the newly added policy"}}}
{"api_name": "getUnderwriter", "api_description": "Retrieve information about an insurance underwriter", "field": "Insurance/Insurance Underwriter", "parameters": {"name": {"type": "str", "description": "The name of the insurance underwriter (e.g., John Smith, Jane Doe)"}}, "required": ["name"], "responses": {"company": {"type": "str", "description": "The company the underwriter works for"}, "experience": {"type": "int", "description": "The number of years of experience the underwriter has"}, "specialization": {"type": "str", "description": "The area of insurance specialization of the underwriter (e.g., life insurance, property insurance)"}}}
{"api_name": "addNotesToClaim", "api_description": "Add notes or comments to a specific insurance claim", "field": "Insurance/Insurance Fraud Investigator", "parameters": {"claim_number": {"type": "str", "description": "The unique identifier of the insurance claim"}, "notes": {"type": "str", "description": "The notes or comments to be added to the claim"}}, "required": ["claim_number", "notes"], "responses": {"success": {"type": "bool", "description": "Indicates if the notes were successfully added to the claim"}}}
{"api_name": "getAgentInfo", "api_description": "Retrieve information about an insurance sales agent", "field": "Insurance/Insurance Sales Agent", "parameters": {"agent_id": {"type": "int", "description": "The ID of the insurance agent"}}, "required": ["agent_id"], "responses": {"name": {"type": "str", "description": "The name of the insurance agent"}, "email": {"type": "str", "description": "The email address of the insurance agent"}, "phone": {"type": "str", "description": "The phone number of the insurance agent"}, "specialty": {"type": "str", "description": "The specialty or focus area of the insurance agent"}, "rating": {"type": "float", "description": "The rating of the insurance agent"}}}
{"api_name": "createInsuranceAdministrator", "api_description": "Create a new insurance administrator", "field": "Insurance/Insurance Administrator", "parameters": {"name": {"type": "str", "description": "The name of the insurance administrator"}, "email": {"type": "str", "description": "The email address of the insurance administrator"}, "address": {"type": "str", "description": "The address of the insurance administrator"}}, "required": ["name", "email"], "responses": {"id": {"type": "int", "description": "The unique identifier of the created insurance administrator"}}}
{"api_name": "getInsuranceData", "api_description": "Retrieve insurance data for analysis", "field": "Insurance/Insurance Data Analyst", "parameters": {"start_date": {"type": "str", "description": "The start date of the data period for analysis (e.g., yyyy-mm-dd)"}, "end_date": {"type": "str", "description": "The end date of the data period for analysis (e.g., yyyy-mm-dd)"}, "policy_type": {"type": "str", "description": "The type of insurance policy to analyze (e.g., life, health, auto)"}, "age_group": {"type": "str", "description": "The age group to segment the insurance data (e.g., 18-25, 26-35, 36-50)"}, "location": {"type": "str", "description": "The location of the insured individuals for analysis (e.g., city, state)"}}, "required": ["start_date", "end_date"], "responses": {"policy_count": {"type": "int", "description": "The number of insurance policies in the specified period and criteria"}, "average_premium": {"type": "float", "description": "The average premium amount for the specified period, policy type, age group, and location"}, "claims_count": {"type": "int", "description": "The total number of insurance claims made within the specified period and criteria"}}}
{"api_name": "provideHumanitarianAid", "api_description": "Provide humanitarian aid to those in need", "field": "Non-profit/Humanitarian Aid", "parameters": {"location": {"type": "str", "description": "The location where the humanitarian aid is needed (e.g., Syria, Haiti, Somalia)"}, "aid_type": {"type": "str", "description": "The type of aid to be provided (e.g., food, medical supplies, shelter)"}, "quantity": {"type": "int", "description": "The quantity/size of aid to be provided (e.g., 1000, 10, 5)"}}, "required": ["location", "aid_type", "quantity"], "responses": {"success": {"type": "bool", "description": "Indicates whether the humanitarian aid was successfully provided"}}}
{"api_name": "getConservationProjectDetails", "api_description": "Retrieve detailed information about a specific environmental conservation project", "field": "Non-profit/Environmental Conservation", "parameters": {"project_id": {"type": "int", "description": "The ID of the project for which you want to retrieve details"}}, "required": ["project_id"], "responses": {"project_name": {"type": "str", "description": "The name of the environmental conservation project"}, "organization": {"type": "str", "description": "The organization responsible for the project"}, "country": {"type": "str", "description": "The country where the project is located"}, "focus_area": {"type": "str", "description": "The focus area of the project"}, "start_date": {"type": "str", "description": "The start date of the project"}, "end_date": {"type": "str", "description": "The end date of the project"}, "description": {"type": "str", "description": "A detailed description of the project"}, "contact_email": {"type": "str", "description": "The contact email address for the project"}}}
{"api_name": "getPovertyLevel", "api_description": "Retrieve the poverty level of a specific region", "field": "Non-profit/Poverty Alleviation", "parameters": {"location": {"type": "str", "description": "The region for which you want to get the poverty level (e.g., country, city, district)"}, "year": {"type": "int", "description": "The year for which you want to get the poverty level (e.g., 2020, 2021)"}}, "required": ["location"], "responses": {"poverty_level": {"type": "float", "description": "The poverty level of the specified region"}, "year": {"type": "int", "description": "The year in which the poverty level is provided"}}}
{"api_name": "getPovertyPrograms", "api_description": "Retrieve a list of poverty alleviation programs", "field": "Non-profit/Poverty Alleviation", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the poverty alleviation programs"}}, "required": ["country"], "responses": {"programs": {"type": "str", "description": "A list of poverty alleviation programs in the specified country"}}}
{"api_name": "donateToPovertyCause", "api_description": "Donate to a specific poverty alleviation cause", "field": "Non-profit/Poverty Alleviation", "parameters": {"cause": {"type": "str", "description": "The poverty alleviation cause you want to donate to (e.g., education, healthcare, food security)"}, "amount": {"type": "float", "description": "The amount you want to donate (e.g., 50.00, 100.00)"}, "payment_method": {"type": "str", "description": "The payment method you want to use for the donation (e.g., credit card, PayPal)", "examples": ["credit card", "PayPal"]}}, "required": ["cause", "amount", "payment_method"], "responses": {"status": {"type": "str", "description": "The status of the donation"}}}
{"api_name": "getPovertyRate", "api_description": "Retrieve the poverty rate of a certain location", "field": "Non-profit/Poverty Alleviation", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the poverty rate (e.g., New York, Tokyo, Johannesburg)"}}, "required": ["location"], "responses": {"poverty_rate": {"type": "float", "description": "The poverty rate at the specified location"}}}
{"api_name": "adoptAnimal", "api_description": "Allows users to adopt an animal for companionship", "field": "Non-profit/Animal Welfare", "parameters": {"animal_type": {"type": "str", "description": "The type of animal for adoption (e.g., cat, dog, rabbit)"}, "age": {"type": "int", "description": "The desired age of the animal for adoption (e.g., 1, 2, 3)"}, "gender": {"type": "str", "description": "The desired gender of the animal for adoption (e.g., male, female)"}}, "required": ["animal_type"], "responses": {"adopted": {"type": "bool", "description": "Indicates whether the animal has been successfully adopted"}}}
{"api_name": "donateMoney", "api_description": "Allows users to donate money for animal welfare", "field": "Non-profit/Animal Welfare", "parameters": {"amount": {"type": "float", "description": "The amount of money to be donated (e.g., 10.0, 20.5, 50.75)"}, "currency": {"type": "str", "description": "The currency in which the donation is made (e.g., USD, EUR, GBP)"}}, "required": ["amount"], "responses": {"donation_status": {"type": "str", "description": "Indicates the status of the donation"}}}
{"api_name": "getDisasterPreparednessTips", "api_description": "Retrieve disaster preparedness tips for a specific location", "field": "Non-profit/Disaster Preparedness", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve disaster preparedness tips (e.g., California, Tokyo, Sydney)"}}, "required": ["location"], "responses": {"tips": {"type": "str", "description": "Tips and guidelines for disaster preparedness in the specified location"}}}
{"api_name": "getRefugeeStatistics", "api_description": "Retrieve statistics on refugee population", "field": "Non-profit/Refugee Support", "parameters": {"country": {"type": "str", "description": "The country for which you want to get refugee statistics (e.g., Jordan, Turkey, Uganda)"}, "year": {"type": "int", "description": "The year for which you want to retrieve statistics"}}, "required": ["country"], "responses": {"total_population": {"type": "int", "description": "The total number of refugees in the specified country"}, "gender_distribution": {"type": "str", "description": "The distribution of refugees by gender"}, "age_distribution": {"type": "str", "description": "The distribution of refugees by age group"}}}
{"api_name": "donateToRefugees", "api_description": "Donate items or funds to support refugees", "field": "Non-profit/Refugee Support", "parameters": {"donation_type": {"type": "str", "description": "Specify the type of donation (e.g., monetary, goods, services)"}, "donation_details": {"type": "str", "description": "Provide specific details about the donation (e.g., amount, items, services)"}, "contact_info": {"type": "str", "description": "Provide contact information for further coordination"}}, "required": ["donation_type", "donation_details"], "responses": {"status": {"type": "str", "description": "Confirmation of donation status"}}}
{"api_name": "volunteerForRefugees", "api_description": "Sign up as a volunteer for refugee support initiatives", "field": "Non-profit/Refugee Support", "parameters": {"name": {"type": "str", "description": "Your full name"}, "location": {"type": "str", "description": "The location where you wish to volunteer"}, "availability": {"type": "str", "description": "Specify your availability (e.g., weekdays, weekends)"}, "skills": {"type": "str", "description": "Provide details of any relevant skills or experience"}}, "required": ["name", "location", "availability"], "responses": {"status": {"type": "str", "description": "Confirmation of volunteer registration"}}}
{"api_name": "enrollYouth", "api_description": "Enroll a youth in a specific program", "field": "Non-profit/Youth Development", "parameters": {"program_id": {"type": "str", "description": "The ID of the youth program to enroll in"}, "youth_id": {"type": "str", "description": "The ID of the youth to be enrolled"}}, "required": ["program_id", "youth_id"], "responses": {"enrollment_id": {"type": "str", "description": "The ID of the enrollment"}, "status": {"type": "str", "description": "The status of the enrollment"}}}
{"api_name": "getVoterRegistrationInfo", "api_description": "Retrieve voter registration information", "field": "Non-profit/Civic Engagement", "parameters": {"state": {"type": "str", "description": "The state for which you want to retrieve voter registration information (e.g., California, New York)"}, "county": {"type": "str", "description": "The county within the state for which you want to retrieve voter registration information (e.g., Los Angeles County, Cook County)"}, "party_affiliation": {"type": "str", "description": "The political party affiliation of the voter (e.g., Democrat, Republican, Independent)"}}, "required": ["state"], "responses": {"registration_status": {"type": "str", "description": "The voter registration status of the specified individual in the given state and county (e.g., active, inactive, not registered)"}, "voting_location": {"type": "str", "description": "The designated voting location for the specified individual in the given state and county"}, "ballot_information": {"type": "str", "description": "Information on the upcoming electoral ballot for the specified individual in the given state and county"}}}
{"api_name": "getNonprofitAdvocacy", "api_description": "Retrieve advocacy and policy information for non-profit organizations", "field": "Non-profit/Advocacy and Policy", "parameters": {"organization": {"type": "str", "description": "The name of the non-profit organization"}}, "required": ["organization"], "responses": {"advocacy_info": {"type": "str", "description": "Information about the advocacy and policy efforts of the specified non-profit organization"}}}
{"api_name": "getSocialEnterpriseInfo", "api_description": "Retrieve information about a social enterprise", "field": "Non-profit/Social Enterprise", "parameters": {"enterprise_name": {"type": "str", "description": "The name of the social enterprise"}}, "required": ["enterprise_name"], "responses": {"overview": {"type": "str", "description": "Overview of the social enterprise"}, "services": {"type": "str", "description": "Services offered by the social enterprise"}, "impact": {"type": "str", "description": "Social impact created by the social enterprise"}}}
{"api_name": "addVolunteer", "api_description": "Add a new volunteer to the database", "field": "Non-profit/Volunteer Management", "parameters": {"name": {"type": "str", "description": "The name of the volunteer"}, "age": {"type": "int", "description": "The age of the volunteer"}, "contact": {"type": "str", "description": "Contact information of the volunteer (e.g., email, phone number)"}, "availability": {"type": "str", "description": "The availability of the volunteer (e.g., weekdays, weekends, evenings)"}, "skills": {"type": "str", "description": "Skills possessed by the volunteer (e.g., teaching, event planning, fundraising)"}, "interests": {"type": "str", "description": "Interests of the volunteer (e.g., environment, education, healthcare)"}}, "required": ["name", "age", "contact"], "responses": {"success": {"type": "bool", "description": "Indicates whether the volunteer was successfully added to the database"}}}
{"api_name": "submitGrantProposal", "api_description": "Submit a grant proposal for funding", "field": "Non-profit/Grant Writing and Fundraising", "parameters": {"organization_name": {"type": "str", "description": "The name of the non-profit organization submitting the grant proposal"}, "project_name": {"type": "str", "description": "The name of the project for which funding is sought"}, "budget": {"type": "float", "description": "The total budget required for the project in USD"}, "proposal_document": {"type": "str", "description": "The path or URL of the proposal document"}, "contact_email": {"type": "str", "description": "The email address to receive communication related to the grant proposal"}}, "required": ["organization_name", "project_name", "budget", "proposal_document", "contact_email"], "responses": {"submission_status": {"type": "str", "description": "The status of the grant proposal submission"}}}
{"api_name": "getAvailableTechnology", "api_description": "Retrieve the available technology options for non-profit organizations", "field": "Non-profit/Technology for Non-profits", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the technology options (e.g., United States, Canada, Australia)"}, "budget": {"type": "str", "description": "The budget range for technology implementation (e.g., low, medium, high)"}, "organization_type": {"type": "str", "description": "The type of non-profit organization (e.g., education, healthcare, environment)"}, "specific_needs": {"type": "str", "description": "Specific technology needs of the organization (e.g., communication, data management, website development)"}}, "required": ["country"], "responses": {"technology_options": {"type": "str", "description": "The available technology options for the specified country and organization type"}}}
{"api_name": "evaluateProgram", "api_description": "Evaluate the effectiveness of a specific program", "field": "Non-profit/Research and Evaluation", "parameters": {"program_name": {"type": "str", "description": "The name of the program you want to evaluate"}, "outcome_measurement": {"type": "str", "description": "The specific outcome or impact you want to measure"}, "data_sources": {"type": "str", "description": "The sources of data for evaluation (e.g., surveys, interviews, observations)"}, "evaluation_methods": {"type": "str", "description": "The methods used for evaluation (e.g., randomized control trials, case studies)"}, "time_period": {"type": "int", "description": "The time period over which the evaluation was conducted"}}, "required": ["program_name", "outcome_measurement"], "responses": {"evaluation_result": {"type": "str", "description": "The result of the program evaluation"}}}
{"api_name": "compareNonprofits", "api_description": "Compare the performance of different non-profit organizations", "field": "Non-profit/Research and Evaluation", "parameters": {"organization1": {"type": "str", "description": "The first organization for comparison"}, "organization2": {"type": "str", "description": "The second organization for comparison"}, "metrics": {"type": "str", "description": "The metrics to be considered for comparison (e.g., funds raised, impact achieved)"}, "year": {"type": "int", "description": "The year for which the comparison is to be done"}}, "required": ["organization1", "organization2"], "responses": {"comparison_result": {"type": "str", "description": "The result of the comparison between the two organizations"}}}
{"api_name": "getEvaluationReports", "api_description": "Retrieve evaluation reports of non-profit initiatives", "field": "Non-profit/Research and Evaluation", "parameters": {"initiative": {"type": "str", "description": "The name of the non-profit initiative being evaluated"}, "year": {"type": "int", "description": "The year of the evaluation report"}, "outcomes": {"type": "str", "description": "Specific outcomes being evaluated for (e.g., impact, effectiveness, efficiency)"}}, "required": ["initiative", "year"], "responses": {"report": {"type": "str", "description": "The evaluation report for the specified initiative and year"}}}
{"api_name": "getCSRInfo", "api_description": "Retrieve information about a company's corporate social responsibility efforts", "field": "Non-profit/Corporate Social Responsibility", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to get the CSR information"}, "location": {"type": "str", "description": "The location of the company (e.g., city, country)"}, "industry": {"type": "str", "description": "The industry to which the company belongs"}, "year": {"type": "int", "description": "The year for which you want to retrieve CSR information"}}, "required": ["company_name"], "responses": {"information": {"type": "str", "description": "The corporate social responsibility information of the specified company"}}}
{"api_name": "getDiseaseStats", "api_description": "Retrieve statistics about the prevalence of diseases", "field": "Non-profit/Public Health", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve the disease statistics (e.g., United States, China, Brazil)"}, "disease": {"type": "str", "description": "The name of the disease for which you want to retrieve the statistics (e.g., COVID-19, Malaria, HIV)"}, "time_period": {"type": "str", "description": "Specify a time period for which you want to retrieve the statistics (e.g., last week, last year, overall)"}}, "required": ["country", "disease"], "responses": {"cases": {"type": "int", "description": "The number of reported cases of the specified disease in the specified country and time period"}, "deaths": {"type": "int", "description": "The number of deaths caused by the specified disease in the specified country and time period"}, "recovery_rate": {"type": "float", "description": "The recovery rate of the specified disease in the specified country and time period"}}}
{"api_name": "getCrisisIntervention", "api_description": "Retrieve crisis intervention information", "field": "Non-profit/Mental Health", "parameters": {"location": {"type": "str", "description": "The location for which you want to get crisis intervention information (e.g., city, state, country)"}}, "required": ["location"], "responses": {"intervention_info": {"type": "str", "description": "Information about crisis intervention services in the specified location"}}}
{"api_name": "getSupportGroups", "api_description": "Retrieve a list of support groups for mental health", "field": "Non-profit/Mental Health", "parameters": {"location": {"type": "str", "description": "The location where you want to find support groups for mental health (e.g., city, state, country)"}, "language": {"type": "str", "description": "The desired language in which the support groups provide services (e.g., English, Spanish, French)"}}, "required": ["location"], "responses": {"support_group_name": {"type": "str", "description": "The name of the support group for mental health"}, "support_group_type": {"type": "str", "description": "The type of support group (e.g., peer support, therapy-based)"}, "support_group_description": {"type": "str", "description": "A brief description of the support group"}, "support_group_contact": {"type": "str", "description": "Contact information for the support group (e.g., phone number, email)"}, "support_group_location": {"type": "str", "description": "The location where the support group takes place"}}}
{"api_name": "getLegalServicesInfo", "api_description": "Retrieve information about legal services provided by a non-profit organization", "field": "Non-profit/Legal Services", "parameters": {"organization": {"type": "str", "description": "The name of the non-profit organization that provides legal services"}, "location": {"type": "str", "description": "The location for which you want to get legal services (e.g., city, state, country)"}, "service_type": {"type": "str", "description": "Specify the type of legal services needed (e.g., immigration, family law, employment law)"}}, "required": ["organization"], "responses": {"services": {"type": "str", "description": "The legal services provided by the specified non-profit organization"}}}
{"api_name": "resolveConflict", "api_description": "Resolve conflicts between two parties", "field": "Non-profit/Conflict Resolution", "parameters": {"party1_name": {"type": "str", "description": "The name of the first party involved in the conflict"}, "party2_name": {"type": "str", "description": "The name of the second party involved in the conflict"}, "issue": {"type": "str", "description": "The specific issue or topic causing the conflict"}}, "required": ["party1_name", "party2_name", "issue"], "responses": {"resolution": {"type": "str", "description": "The proposed resolution to the conflict"}, "success": {"type": "bool", "description": "True if the conflict was successfully resolved, False otherwise"}}}
{"api_name": "provideDisasterRecoveryAssistance", "api_description": "Offer assistance for disaster recovery", "field": "Non-profit/Disaster Recovery", "parameters": {"location": {"type": "str", "description": "The location affected by the disaster (e.g., city, state, country)"}, "disaster_type": {"type": "str", "description": "The type of disaster occurred (e.g., flood, earthquake, hurricane)"}, "resources_needed": {"type": "str", "description": "The resources required for the recovery process (e.g., food, water, shelter)"}, "urgency_level": {"type": "str", "description": "The urgency level of the assistance required (e.g., high, medium, low)"}, "contact_info": {"type": "str", "description": "Contact information (e.g., phone number, email) for the requester"}}, "required": ["location", "resources_needed"], "responses": {"assistance_provided": {"type": "bool", "description": "Indicates if the requested assistance can be provided"}, "availability": {"type": "str", "description": "Availability of the requested resources (e.g., in stock, out of stock)"}, "estimated_delivery_time": {"type": "str", "description": "Estimated time for delivery of the resources"}}}
{"api_name": "calculateWaterNeeds", "api_description": "Calculate the water needs of a population in a specific location", "field": "Non-profit/Water and Sanitation", "parameters": {"location": {"type": "str", "description": "The location for which you want to calculate water needs (e.g., village, town, city)"}, "population": {"type": "int", "description": "The total population of the specified location"}}, "required": ["location", "population"], "responses": {"water_needs": {"type": "float", "description": "The estimated water needs (in liters) of the population in the specified location"}}}
{"api_name": "getWildlifeSpecies", "api_description": "Retrieve a list of wildlife species for conservation", "field": "Non-profit/Wildlife Conservation", "parameters": {"habitat": {"type": "str", "description": "The habitat for which you want to get the wildlife species (e.g., forest, ocean, grassland)"}, "location": {"type": "str", "description": "The geographical location for which you want to get the wildlife species (e.g., Africa, Asia, North America)"}, "threatened": {"type": "bool", "description": "Filter species based on threatened status (e.g., true, false)"}, "endangered": {"type": "bool", "description": "Filter species based on endangered status (e.g., true, false)"}, "limit": {"type": "int", "description": "The maximum number of species to retrieve (e.g., 10, 50, 100)"}}, "required": ["habitat", "location"], "responses": {"species": {"type": "str", "description": "The list of wildlife species found in the specified habitat and location"}}}
{"api_name": "getWildlifeInfo", "api_description": "Retrieve information about wildlife species", "field": "Non-profit/Wildlife Conservation", "parameters": {"species": {"type": "str", "description": "The name of the wildlife species you want to get information about (e.g., lion, tiger, elephant)"}, "region": {"type": "str", "description": "The region where the wildlife species is found (e.g., Africa, Asia, South America)"}}, "required": ["species"], "responses": {"description": {"type": "str", "description": "A brief description of the wildlife species"}, "habitat": {"type": "str", "description": "The natural habitat of the wildlife species"}, "threat_level": {"type": "str", "description": "The conservation status of the wildlife species (e.g., endangered, vulnerable)"}}}
{"api_name": "donateToWildlife", "api_description": "Donate funds to support wildlife conservation efforts", "field": "Non-profit/Wildlife Conservation", "parameters": {"donation_amount": {"type": "float", "description": "The amount of money you want to donate for wildlife conservation (e.g., 50.00, 100.00, 200.00)"}, "donor_name": {"type": "str", "description": "Your name"}, "email": {"type": "str", "description": "Your email address"}}, "required": ["donation_amount", "donor_name", "email"], "responses": {"donation_id": {"type": "str", "description": "A unique identifier for the donation"}, "thank_you_email": {"type": "str", "description": "A thank you email sent to the donor"}}}
{"api_name": "getGenderEqualityIndex", "api_description": "Retrieve the gender equality index for a specific country or region", "field": "Non-profit/Gender Equality", "parameters": {"location": {"type": "str", "description": "The country or region for which you want to get the gender equality index (e.g., United States, Europe, Africa)"}, "year": {"type": "int", "description": "The year for which you want to get the gender equality index (e.g., 2020, 2021, 2022)"}}, "required": ["location"], "responses": {"gender_equality_index": {"type": "float", "description": "The gender equality index score for the specified country or region"}, "rank": {"type": "int", "description": "The ranking of the specified country or region in terms of gender equality"}}}
{"api_name": "getGenderEqualityStatistics", "api_description": "Retrieve statistics on gender equality", "field": "Non-profit/Gender Equality", "parameters": {"country": {"type": "str", "description": "The country for which you want to get gender equality statistics (e.g., USA, Australia, France)"}, "year": {"type": "int", "description": "The year for which you want to get the statistics"}}, "required": ["country", "year"], "responses": {"gender_equality_index": {"type": "float", "description": "The gender equality index for the specified country and year"}, "female_employment_rate": {"type": "float", "description": "The percentage of female employment in the specified country and year"}, "male_employment_rate": {"type": "float", "description": "The percentage of male employment in the specified country and year"}}}
{"api_name": "getDiverseRepresentation", "api_description": "Retrieve information about diverse representation in non-profit organizations", "field": "Non-profit/Equity and Inclusion", "parameters": {"location": {"type": "str", "description": "The location for which you want to get information about diverse representation in non-profit organizations (e.g., New York, London, Sydney)"}, "sector": {"type": "str", "description": "The sector of non-profit organizations for which you want to get information about diverse representation (e.g., Education, Healthcare, Environment)"}, "demographic": {"type": "str", "description": "The demographic group for which you want to get information about diverse representation (e.g., Women, LGBTQ+, People with Disabilities)"}}, "required": ["location", "sector"], "responses": {"representation": {"type": "float", "description": "The percentage representation of the specified demographic group in non-profit organizations at the specified location and sector"}, "total_organizations": {"type": "int", "description": "The total number of non-profit organizations in the specified location and sector"}}}
{"api_name": "getDonationTotal", "api_description": "Retrieve total donations received by a non-profit organization", "field": "Non-profit/Income Generation", "parameters": {"organization_name": {"type": "str", "description": "The name of the non-profit organization"}}, "required": ["organization_name"], "responses": {"donation_total": {"type": "float", "description": "The total amount of donations received by the specified non-profit organization"}}}
{"api_name": "getAdvocacyCost", "api_description": "Retrieve the cost of advocacy services", "field": "Non-profit/Education Advocacy", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the cost (e.g., city, state, country)"}, "service_type": {"type": "str", "description": "The type of educational advocacy service needed (e.g., counseling, legal support)"}, "income_level": {"type": "str", "description": "Specify an income level to determine cost (e.g., low-income, middle-income, high-income)"}}, "required": ["location", "service_type"], "responses": {"cost": {"type": "float", "description": "The cost of educational advocacy services at the specified location and for the specified service type"}}}
{"api_name": "findAdvocacyOrganization", "api_description": "Find educational advocacy organizations", "field": "Non-profit/Education Advocacy", "parameters": {"location": {"type": "str", "description": "The location for which you want to find educational advocacy organizations (e.g., city, state, country)"}, "issue_area": {"type": "str", "description": "Specify the issue area of educational advocacy (e.g., special education, school funding)"}, "language": {"type": "str", "description": "Specify a language requirement for the organization (e.g., English, Spanish, Mandarin)"}}, "required": ["location"], "responses": {"organizations": {"type": "str", "description": "A list of educational advocacy organizations in the specified location and issue area"}}}
{"api_name": "deleteOrphan", "api_description": "Delete a specific orphan from the system", "field": "Non-profit/Orphan Care", "parameters": {"orphan_id": {"type": "str", "description": "The ID of the orphan you want to delete (e.g., 12345)"}}, "required": ["orphan_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the orphan was successfully deleted"}}}
{"api_name": "getPrograms", "api_description": "Retrieve information about youth empowerment programs", "field": "Non-profit/Youth Empowerment", "parameters": {"location": {"type": "str", "description": "The location in which you want to get information about youth empowerment programs (e.g., city, country)"}, "age_range": {"type": "str", "description": "Specify the age range of the targeted youth (e.g., 12-18, 18-25)"}, "program_type": {"type": "str", "description": "Specify the type of youth empowerment program (e.g., educational, vocational, leadership)"}}, "required": ["location"], "responses": {"programs": {"type": "str", "description": "A list of youth empowerment programs available at the specified location"}}}
{"api_name": "getDigitalSkills", "api_description": "Retrieve digital skills information for non-profit organizations", "field": "Non-profit/Digital Literacy", "parameters": {"organization": {"type": "str", "description": "The name of the non-profit organization"}}, "required": ["organization"], "responses": {"digital_skills": {"type": "str", "description": "The digital skills provided by the non-profit organization"}}}
{"api_name": "registerForSTEMWorkshop", "api_description": "Register for a STEM workshop", "field": "Non-profit/STEM Education", "parameters": {"name": {"type": "str", "description": "Your full name"}, "age": {"type": "int", "description": "Your age"}, "email": {"type": "str", "description": "Your email address"}, "workshop_id": {"type": "str", "description": "The ID of the workshop you wish to register for"}}, "required": ["name", "age", "email", "workshop_id"], "responses": {"registration_status": {"type": "str", "description": "The registration status (e.g., Success, Workshop Full)"}}}
{"api_name": "reportChildAbuse", "api_description": "Report a case of child abuse", "field": "Non-profit/Child Protection", "parameters": {"child_name": {"type": "str", "description": "The name of the child who is being abused"}, "reporter_name": {"type": "str", "description": "Your name as the person reporting the abuse"}, "contact_number": {"type": "str", "description": "Your contact number for further communication"}}, "required": ["child_name", "reporter_name", "contact_number"], "responses": {"report_status": {"type": "str", "description": "The status of the report (e.g., pending, investigated, resolved)"}, "case_id": {"type": "str", "description": "The unique identifier for the reported case"}}}
{"api_name": "getSupplyChainStatus", "api_description": "Retrieve the current status of the humanitarian supply chain", "field": "Non-profit/Humanitarian Logistics", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the supply chain status (e.g., disaster-stricken area, refugee camp)"}}, "required": ["location"], "responses": {"status": {"type": "str", "description": "The current status of the humanitarian supply chain at the specified location"}}}
{"api_name": "requestReliefItem", "api_description": "Request a specific relief item for distribution", "field": "Non-profit/Humanitarian Logistics", "parameters": {"item_name": {"type": "str", "description": "The name of the relief item requested (e.g., food, blankets, medical supplies)"}, "quantity": {"type": "int", "description": "The quantity of the relief item requested"}}, "required": ["item_name", "quantity"], "responses": {"request_id": {"type": "str", "description": "The unique identifier for the relief item request"}}}
{"api_name": "getAdvocacyEmail", "api_description": "Retrieve email address for advocacy inquiries", "field": "Non-profit/Advocacy and Lobbying", "parameters": {"organization": {"type": "str", "description": "The name of the non-profit organization"}, "topic": {"type": "str", "description": "The topic of the advocacy inquiry"}}, "required": ["organization", "topic"], "responses": {"email": {"type": "str", "description": "The email address for advocacy inquiries"}}}
{"api_name": "getAdvocacyPhone", "api_description": "Retrieve phone number for advocacy inquiries", "field": "Non-profit/Advocacy and Lobbying", "parameters": {"organization": {"type": "str", "description": "The name of the non-profit organization"}, "topic": {"type": "str", "description": "The topic of the advocacy inquiry"}}, "required": ["organization", "topic"], "responses": {"phone": {"type": "str", "description": "The phone number for advocacy inquiries"}}}
{"api_name": "getLoanApplicationStatus", "api_description": "Retrieve the status of a loan application", "field": "Non-profit/Microcredit and Microloans", "parameters": {"application_id": {"type": "int", "description": "The unique identifier of the loan application"}}, "required": ["application_id"], "responses": {"status": {"type": "str", "description": "The current status of the loan application"}}}
{"api_name": "getLoanEligibility", "api_description": "Check the eligibility of an individual for a microloan", "field": "Non-profit/Microcredit and Microloans", "parameters": {"applicant_id": {"type": "int", "description": "The unique identifier of the loan applicant"}, "income": {"type": "float", "description": "The monthly income of the applicant (in USD)"}, "credit_score": {"type": "int", "description": "The credit score of the applicant"}}, "required": ["applicant_id", "income", "credit_score"], "responses": {"eligible": {"type": "bool", "description": "Indicates if the applicant is eligible for a microloan"}}}
{"api_name": "applyMicroloan", "api_description": "Apply for a microloan from a non-profit organization", "field": "Non-profit/Microcredit and Microloans", "parameters": {"borrower_name": {"type": "str", "description": "The name of the person applying for the microloan"}, "loan_amount": {"type": "float", "description": "The desired amount of the microloan"}, "purpose": {"type": "str", "description": "The purpose for which the microloan will be used (e.g., education, business startup)"}, "credit_score": {"type": "int", "description": "The credit score of the borrower"}}, "required": ["borrower_name", "loan_amount"], "responses": {"status": {"type": "str", "description": "The status of the microloan application (e.g., approved, rejected)"}, "interest_rate": {"type": "float", "description": "The interest rate associated with the microloan"}}}
{"api_name": "getInclusiveCurriculum", "api_description": "Retrieve information about the inclusive curriculum followed by schools", "field": "Non-profit/Inclusive Education", "parameters": {"level": {"type": "str", "description": "The level of the curriculum (e.g., national, state, district)"}, "subject": {"type": "str", "description": "The subject for which you want to retrieve inclusive curriculum (e.g., math, science)"}, "grade_level": {"type": "str", "description": "The grade level for which you want to retrieve the curriculum (e.g., elementary, middle, high)"}}, "required": ["level", "subject"], "responses": {"curriculum": {"type": "str", "description": "The inclusive curriculum for the specified subject and grade level"}}}
{"api_name": "bookArtTherapySession", "api_description": "Book an arts therapy session", "field": "Non-profit/Arts Therapy", "parameters": {"therapist_name": {"type": "str", "description": "The name of the arts therapist for the session"}}, "required": ["therapist_name"], "responses": {"status": {"type": "str", "description": "Status of the booking (e.g., success, failure)"}, "session_time": {"type": "str", "description": "Time and date of the booked arts therapy session"}}}
{"api_name": "getFoodSecurityData", "api_description": "Retrieve data related to food security", "field": "Non-profit/Food Security", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get the food security data (e.g., USA, India, Brazil)"}, "year": {"type": "int", "description": "The year for which you want to get the data (e.g., 2019, 2020, 2021)"}}, "required": ["country"], "responses": {"food_insecurity_index": {"type": "float", "description": "The food insecurity index of the specified country and year"}, "undernourishment_rate": {"type": "float", "description": "The percentage of the population that is undernourished in the specified country and year"}, "malnutrition_rate": {"type": "float", "description": "The rate of malnutrition in the specified country and year"}}}
{"api_name": "getNearestFoodPantry", "api_description": "Retrieve the nearest food pantry to a specific location", "field": "Non-profit/Food Security", "parameters": {"location": {"type": "str", "description": "The location from which you want to find the nearest food pantry (e.g., address, coordinates)"}}, "required": ["location"], "responses": {"name": {"type": "str", "description": "The name of the nearest food pantry"}, "distance": {"type": "float", "description": "The distance to the nearest food pantry from the specified location"}}}
{"api_name": "getProjectPartners", "api_description": "Retrieve the partners involved in a specific humanitarian architecture project", "field": "Non-profit/Humanitarian Architecture", "parameters": {"project_id": {"type": "str", "description": "The unique identifier of the project"}}, "required": ["project_id"], "responses": {"partners": {"type": "str", "description": "The list of partners involved in the project"}}}
{"api_name": "volunteerForProject", "api_description": "Sign up as a volunteer for a humanitarian technology project", "field": "Non-profit/Humanitarian Technology", "parameters": {"project_id": {"type": "str", "description": "The ID of the project you want to volunteer for"}, "name": {"type": "str", "description": "Your full name"}, "email": {"type": "str", "description": "Your email address"}}, "required": ["project_id", "name", "email"], "responses": {"success": {"type": "bool", "description": "Indicates whether the volunteer sign-up was successful"}}}
{"api_name": "getLearningProgress", "api_description": "Retrieve learning progress of a student", "field": "Non-profit/Education Technology", "parameters": {"student_id": {"type": "str", "description": "The ID of the student for whom you want to get learning progress"}, "subject": {"type": "str", "description": "The specific subject for learning progress (e.g., mathematics, science)"}}, "required": ["student_id"], "responses": {"progress": {"type": "float", "description": "The learning progress of the specified student in the given subject"}}}
{"api_name": "getPressCoverage", "api_description": "Retrieve press coverage information for a non-profit organization", "field": "Non-profit/Public Relations", "parameters": {"organization": {"type": "str", "description": "The name of the non-profit organization for which you want to get press coverage"}}, "required": ["organization"], "responses": {"press_coverage": {"type": "str", "description": "The press coverage information for the specified non-profit organization"}}}
{"api_name": "updateGrantStatus", "api_description": "Update the status of a grant proposal", "field": "Non-profit/Grant Management", "parameters": {"grant_id": {"type": "str", "description": "The unique identifier of the grant proposal"}, "status": {"type": "str", "description": "The new status of the grant proposal"}}, "required": ["grant_id", "status"], "responses": {"success": {"type": "bool", "description": "Indicates if the grant status was successfully updated"}}}
{"api_name": "getViolenceStatistics", "api_description": "Retrieve statistics on gender-based violence incidents", "field": "Non-profit/Gender-based Violence Prevention", "parameters": {"region": {"type": "str", "description": "The region for which you want to retrieve statistics (e.g., country, state, city)"}, "time_period": {"type": "str", "description": "Specify a time period for which you want to retrieve statistics (e.g., monthly, yearly)"}, "type": {"type": "str", "description": "Specify a type of gender-based violence (e.g., domestic violence, sexual harassment)"}, "age_group": {"type": "str", "description": "Specify an age group for the statistics (e.g., children, adolescents, adults)"}, "gender": {"type": "str", "description": "Specify a gender for the statistics (e.g., male, female, non-binary)"}}, "required": ["region"], "responses": {"incidents": {"type": "int", "description": "The total number of gender-based violence incidents in the specified region and time period"}, "trends": {"type": "str", "description": "An analysis of the trends in gender-based violence incidents in the specified region and time period"}}}
{"api_name": "getSustainableTourismData", "api_description": "Retrieve data related to sustainable tourism", "field": "Non-profit/Sustainable Tourism", "parameters": {"location": {"type": "str", "description": "The location for which you want to get sustainable tourism data (e.g., Bali, Costa Rica, Maldives)"}, "time_period": {"type": "str", "description": "Specify a time period to retrieve sustainable tourism data (e.g., past year, last 5 years, current month)"}}, "required": ["location"], "responses": {"number_of_tourists": {"type": "int", "description": "The number of tourists who visited the specified location during the specified time period"}, "sustainability_rating": {"type": "float", "description": "The sustainability rating of the specified location's tourism industry"}, "eco-friendly_hotels": {"type": "int", "description": "The number of eco-friendly hotels available in the specified location"}}}
{"api_name": "getDisabilityRights", "api_description": "Retrieve information about disability rights", "field": "Non-profit/Disability Rights", "parameters": {}, "required": [], "responses": {"rights": {"type": "str", "description": "Information about disability rights"}}}
{"api_name": "getCarbonNeutralCertificate", "api_description": "Retrieve carbon neutral certificate information for sustainable forestry projects", "field": "Non-profit/Sustainable Forestry", "parameters": {"project_id": {"type": "str", "description": "The unique identifier of the sustainable forestry project"}}, "required": ["project_id"], "responses": {"certificate_number": {"type": "str", "description": "The certificate number of the carbon neutral certificate"}, "valid_from": {"type": "str", "description": "The start date of the certificate validity", "example": "2022-01-01"}, "valid_until": {"type": "str", "description": "The end date of the certificate validity", "example": "2023-12-31"}, "offset_amount": {"type": "int", "description": "The amount of carbon offset in metric tons"}}}
{"api_name": "getHumanitarianLaw", "api_description": "Retrieve information about humanitarian law", "field": "Non-profit/Humanitarian Law", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about humanitarian law"}}}
{"api_name": "getEducationStats", "api_description": "Retrieve education statistics for a specific location", "field": "Non-profit/Education for All", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the education statistics (e.g., country, city)"}, "year": {"type": "int", "description": "The specific year for which you want to get the education statistics (e.g., 2020, 2021)"}}, "required": ["location"], "responses": {"enrollment_rate": {"type": "float", "description": "The percentage of children enrolled in schools in the specified location"}, "literacy_rate": {"type": "float", "description": "The literacy rate among the population in the specified location"}}}
{"api_name": "getUrbanData", "api_description": "Retrieve urban data for a specified location", "field": "Non-profit/Urban Planning", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve urban data (e.g., city name, coordinates)"}}, "required": ["location"], "responses": {"population": {"type": "int", "description": "The population of the specified location"}, "area": {"type": "float", "description": "The area of the specified location in square kilometers"}, "green_space": {"type": "float", "description": "The percentage of green space in the specified location"}}}
{"api_name": "getConflictCases", "api_description": "Retrieve information about conflict cases", "field": "Non-profit/Conflict Transformation", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve conflict cases (e.g., Afghanistan, Colombia, Syria)"}, "year": {"type": "int", "description": "The year for which you want to retrieve conflict cases (e.g., 2010, 2015, 2020)"}, "cause": {"type": "str", "description": "The specific cause of conflict you are interested in (e.g., Ethnic, Political, Economic)"}, "region": {"type": "str", "description": "The region in the country where the conflict occurred (e.g., North, South, East, West)"}, "severity": {"type": "str", "description": "The severity level of the conflict (e.g., Low, Medium, High)"}}, "required": ["country"], "responses": {"cases": {"type": "int", "description": "The number of conflict cases matching the specified criteria"}, "details": {"type": "str", "description": "Detailed information about the conflict cases"}}}
{"api_name": "getYouthAtRisk", "api_description": "Retrieve information about youth at risk", "field": "Non-profit/Youth at Risk", "parameters": {"location": {"type": "str", "description": "The location for which you want to get information about youth at risk (e.g., city, state, country)"}, "age_range": {"type": "str", "description": "Specify the age range of the youth at risk (e.g., 13-18, 18-25)"}}, "required": ["location"], "responses": {"youth_count": {"type": "int", "description": "The number of youth at risk in the specified location"}, "programs_available": {"type": "str", "description": "The programs available for youth at risk"}}}
{"api_name": "getShelter", "api_description": "Retrieve shelter information for a specific location", "field": "Non-profit/Housing and Shelter", "parameters": {"location": {"type": "str", "description": "The location for which you want to get shelter information (e.g., city, state, country)"}}, "required": ["location"], "responses": {"shelter": {"type": "str", "description": "The available shelter options at the specified location"}}}
{"api_name": "enrollInAdvocacyTrainingCourse", "api_description": "Enroll in an advocacy training course", "field": "Non-profit/Advocacy Training", "parameters": {"course_id": {"type": "str", "description": "The unique identifier of the course you want to enroll in (e.g., ABC123)"}, "participant_name": {"type": "str", "description": "Your name"}, "participant_email": {"type": "str", "description": "Your email address"}, "payment_method": {"type": "str", "description": "The preferred payment method (e.g., credit card, PayPal)"}, "additional_info": {"type": "str", "description": "Any additional information you would like to provide"}}, "required": ["course_id", "participant_name", "participant_email", "payment_method"], "responses": {"enrollment_id": {"type": "str", "description": "The unique identifier of your enrollment"}}}
{"api_name": "registerPlayer", "api_description": "Register a new player for a youth sports program", "field": "Non-profit/Youth Sports", "parameters": {"name": {"type": "str", "description": "The name of the player"}, "age": {"type": "int", "description": "The age of the player"}, "gender": {"type": "str", "description": "The gender of the player (e.g., male, female)"}, "sport": {"type": "str", "description": "The sport the player wants to participate in (e.g., soccer, basketball)"}, "parent_contact": {"type": "str", "description": "The contact information of the player's parent (e.g., email, phone)"}, "medical_conditions": {"type": "str", "description": "Any existing medical conditions of the player (e.g., asthma, allergies)"}}, "required": ["name", "age", "sport", "parent_contact"], "responses": {"success": {"type": "bool", "description": "Indicates whether the registration process was successful"}, "message": {"type": "str", "description": "A message providing clarification about the registration status"}}}
{"api_name": "getYouthSportsProgramDetails", "api_description": "Retrieve detailed information about a specific youth sports program", "field": "Non-profit/Youth Sports", "parameters": {"program_id": {"type": "str", "description": "The unique identifier of the youth sports program"}}, "required": ["program_id"], "responses": {"program_details": {"type": "str", "description": "Detailed information about the youth sports program"}}}
{"api_name": "deletePlayer", "api_description": "Delete a registered player", "field": "Non-profit/Youth Sports", "parameters": {"player_id": {"type": "str", "description": "The unique identifier of the player"}}, "required": ["player_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the player was successfully deleted"}}}
{"api_name": "getDisasterSummary", "api_description": "Retrieve summary information about recent disasters", "field": "Non-profit/Disaster Response", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the disaster summary (e.g., California, Japan, Australia)"}}, "required": ["location"], "responses": {"summary": {"type": "str", "description": "A summary of recent disasters in the specified location"}}}
{"api_name": "reportEmergency", "api_description": "Report an emergency situation", "field": "Non-profit/Disaster Response", "parameters": {"location": {"type": "str", "description": "The location of the emergency situation (e.g., address, coordinates)"}, "type": {"type": "str", "description": "The type of emergency situation (e.g., fire, accident, collapse)"}, "description": {"type": "str", "description": "Provide a brief description of the emergency situation"}}, "required": ["location", "type"], "responses": {"success": {"type": "bool", "description": "Indicates if the emergency report was successful"}}}
{"api_name": "getDisasterResponse", "api_description": "Retrieve disaster response information", "field": "Non-profit/Disaster Response", "parameters": {"disaster_type": {"type": "str", "description": "The type of disaster for which you want to get the response information (e.g., earthquake, hurricane, flood)"}, "location": {"type": "str", "description": "The location affected by the disaster (e.g., California, New Orleans, Asia)"}, "resources_needed": {"type": "str", "description": "Specify the resources needed for the response (e.g., food, water, medical supplies)"}}, "required": ["disaster_type", "location"], "responses": {"response_info": {"type": "str", "description": "Information about the response to the specified disaster at the given location"}, "resources_available": {"type": "str", "description": "The resources available for the disaster response"}}}
{"api_name": "getVolunteerOpportunities", "api_description": "Retrieve volunteer opportunities for disaster response", "field": "Non-profit/Disaster Response", "parameters": {"location": {"type": "str", "description": "The location for which you want to get volunteer opportunities (e.g., New Orleans, Nepal, Puerto Rico)"}, "skills_required": {"type": "str", "description": "The specific skills required for the volunteer work (e.g., medical, construction, counseling)"}, "time_commitment": {"type": "str", "description": "The time commitment expected from volunteers (e.g., full-time, part-time, flexible)"}, "age_requirement": {"type": "str", "description": "The minimum age requirement for volunteers (e.g., 18 and above, 21 and above)"}}, "required": ["location"], "responses": {"volunteer_opportunities": {"type": "str", "description": "Information about the available volunteer opportunities"}, "organization": {"type": "str", "description": "The organization coordinating the volunteer efforts"}, "contact_details": {"type": "str", "description": "Contact details to inquire about the volunteer opportunities"}}}
{"api_name": "getLeadership", "api_description": "Retrieve information about humanitarian leaders", "field": "Non-profit/Humanitarian Leadership", "parameters": {"country": {"type": "str", "description": "The country where the humanitarian leader is based (e.g., United States, Kenya, Brazil)"}, "organization": {"type": "str", "description": "The organization the leader is affiliated with (e.g., Red Cross, UNICEF)"}, "focus_area": {"type": "str", "description": "The area of focus for the leader (e.g., healthcare, education, disaster relief)"}}, "required": [], "responses": {"name": {"type": "str", "description": "The name of the humanitarian leader"}, "country": {"type": "str", "description": "The country where the leader is based"}, "organization": {"type": "str", "description": "The organization the leader is affiliated with"}, "focus_area": {"type": "str", "description": "The area of focus for the leader"}}}
{"api_name": "getArtisticExpression", "api_description": "Retrieve artistic expression information", "field": "Non-profit/Artistic Expression", "parameters": {"art_form": {"type": "str", "description": "Specify the art form you are interested in (e.g., painting, dancing, music)"}, "location": {"type": "str", "description": "The location where the artistic expression event is happening (e.g., New York, Paris)"}}, "required": ["art_form"], "responses": {"artists": {"type": "str", "description": "List of artists performing or displaying their work"}, "event_location": {"type": "str", "description": "Location where the artistic expression event is happening"}}}
{"api_name": "sendNewsletter", "api_description": "Send a newsletter to community members", "field": "Non-profit/Community Outreach", "parameters": {"subject": {"type": "str", "description": "The subject of the newsletter"}, "content": {"type": "str", "description": "The content of the newsletter"}, "recipients": {"type": "str", "description": "The email addresses of the recipients (e.g., email1@example.com, email2@example.com)"}}, "required": ["subject", "content", "recipients"], "responses": {"status": {"type": "str", "description": "The status of the newsletter sending process"}}}
{"api_name": "organizeVolunteerEvent", "api_description": "Organize a volunteer event in the community", "field": "Non-profit/Community Outreach", "parameters": {"name": {"type": "str", "description": "The name of the volunteer event"}, "date": {"type": "str", "description": "The date of the volunteer event (e.g., yyyy-mm-dd)"}, "location": {"type": "str", "description": "The location of the volunteer event"}, "description": {"type": "str", "description": "A description of the volunteer event"}}, "required": ["name", "date", "location", "description"], "responses": {"event_id": {"type": "int", "description": "The ID of the volunteer event"}}}
{"api_name": "createFundraisingCampaign", "api_description": "Create a fundraising campaign for the community", "field": "Non-profit/Community Outreach", "parameters": {"title": {"type": "str", "description": "The title of the fundraising campaign"}, "description": {"type": "str", "description": "A description of the fundraising campaign"}, "goal_amount": {"type": "float", "description": "The desired amount to raise in the campaign"}, "end_date": {"type": "str", "description": "The end date of the campaign (e.g., yyyy-mm-dd)"}}, "required": ["title", "description", "goal_amount", "end_date"], "responses": {"campaign_id": {"type": "int", "description": "The ID of the fundraising campaign"}}}
{"api_name": "donateItem", "api_description": "Donate an item for community outreach", "field": "Non-profit/Community Outreach", "parameters": {"item_name": {"type": "str", "description": "The name of the item to donate"}, "quantity": {"type": "int", "description": "The quantity of items being donated"}, "condition": {"type": "str", "description": "The condition of the donated item (e.g., new, used)"}, "donor_name": {"type": "str", "description": "The name of the donor"}, "donor_address": {"type": "str", "description": "The address of the donor"}}, "required": ["item_name", "quantity", "donor_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the donation was successful"}}}
{"api_name": "getWaterUsage", "api_description": "Retrieve information about water usage in a specific area", "field": "Non-profit/Water Management", "parameters": {"location": {"type": "str", "description": "The location for which you want to get water usage information (e.g., city, town)"}}, "required": ["location"], "responses": {"water_usage": {"type": "float", "description": "The water usage in the specified area"}}}
{"api_name": "getWaterSupply", "api_description": "Retrieve information about water supply in a specific location", "field": "Non-profit/Water Management", "parameters": {"location": {"type": "str", "description": "The location where you want to get water supply information (e.g., city, town, village)"}}, "required": ["location"], "responses": {"water_supply": {"type": "str", "description": "The current status of water supply in the specified location (e.g., fully functional, limited supply, no supply)"}}}
{"api_name": "getChildProtectionInfo", "api_description": "Retrieve information about child protection programs and initiatives", "field": "Non-profit/Child Protection", "parameters": {"country": {"type": "str", "description": "The country for which you want to get child protection information (e.g., United States, India, Australia)"}, "program_type": {"type": "str", "description": "Specify the type of child protection program (e.g., education, healthcare, advocacy)"}, "age_group": {"type": "str", "description": "Specify the age group for which child protection is required (e.g., 0-5 years, 6-12 years, 13-18 years)"}}, "required": ["country"], "responses": {"program_description": {"type": "str", "description": "Description of the child protection program/initiative"}, "program_location": {"type": "str", "description": "Location(s) where the child protection program is implemented"}, "program_contact": {"type": "str", "description": "Contact details for more information about the program"}, "program_website": {"type": "str", "description": "Website link to learn more about the child protection program"}}}
{"api_name": "getYouthEmployment", "api_description": "Retrieve information about youth employment", "field": "Non-profit/Youth Employment", "parameters": {"location": {"type": "str", "description": "The location for which you want to get youth employment information (e.g., city, state, country)"}, "age_range": {"type": "str", "description": "Specify the age range for youth employment (e.g., 15-24 years, 18-30 years)"}, "industry": {"type": "str", "description": "Specify the industry or sector for youth employment (e.g., technology, hospitality, construction)"}}, "required": ["location"], "responses": {"youth_employment_rate": {"type": "float", "description": "The youth employment rate in the specified location"}, "job_opportunities": {"type": "int", "description": "The number of job opportunities available for youth in the specified location"}, "average_salary": {"type": "float", "description": "The average salary for youth in the specified location"}}}
{"api_name": "getIncomeInequality", "api_description": "Retrieve income inequality information", "field": "Non-profit/Income Inequality", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the income inequality information (e.g., United States, China, Germany)"}}, "required": ["country"], "responses": {"income_inequality_index": {"type": "float", "description": "The income inequality index of the specified country"}, "gini_coefficient": {"type": "float", "description": "The Gini coefficient measuring income inequality in the specified country"}}}
{"api_name": "getClimateJusticeFunding", "api_description": "Retrieve information about funding for climate justice projects", "field": "Non-profit/Climate Justice", "parameters": {"country": {"type": "str", "description": "The country for which you want to get climate justice funding information"}, "project_type": {"type": "str", "description": "The type of climate justice project you are interested in (e.g., renewable energy, afforestation)"}, "funding_source": {"type": "str", "description": "The source from which the funding is provided (e.g., government, private foundations)"}}, "required": ["country"], "responses": {"funding_amount": {"type": "float", "description": "The amount of funding available for climate justice projects"}, "funding_source": {"type": "str", "description": "The source from which the funding is provided"}, "project_description": {"type": "str", "description": "A brief description of the climate justice project"}}}
{"api_name": "getCrisisStatus", "api_description": "Retrieve current crisis status information", "field": "Non-profit/Crisis Management", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the crisis status (e.g., city, country)", "example": "New York"}, "disaster_type": {"type": "str", "description": "Specify the type of disaster to retrieve status (e.g., earthquake, flood, fire)", "example": "earthquake"}}, "required": ["location"], "responses": {"status": {"type": "str", "description": "The current crisis status at the specified location", "example": "alert"}, "affected_population": {"type": "int", "description": "The number of affected population due to the crisis at the specified location", "example": 1000}, "emergency_resources_available": {"type": "bool", "description": "Indicates if there are enough emergency resources available at the specified location", "example": true}}}
{"api_name": "resolveCrisis", "api_description": "Mark a crisis as resolved", "field": "Non-profit/Crisis Management", "parameters": {"crisis_id": {"type": "int", "description": "The ID of the crisis to be marked as resolved"}}, "required": ["crisis_id"], "responses": {"status": {"type": "str", "description": "The status of the crisis resolution", "example": "Crisis resolved successfully"}}}
{"api_name": "getRecyclingGuide", "api_description": "Retrieve a recycling guide for a specific location", "field": "Non-profit/Sustainable Waste Management", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the recycling guide (e.g., city name, address)"}}, "required": ["location"], "responses": {"recycling_guide": {"type": "str", "description": "A comprehensive guide on recycling, including accepted materials, sorting instructions, and disposal methods"}}}
{"api_name": "getChildRightsInfo", "api_description": "Retrieve information about child rights", "field": "Non-profit/Child Rights", "parameters": {}, "required": [], "responses": {"rights": {"type": "str", "description": "Information about child rights"}}}
{"api_name": "enrollInCourse", "api_description": "Enroll a user in a specific course", "field": "Non-profit/Education Technology", "parameters": {"course_id": {"type": "int", "description": "The unique identifier of the course"}, "user_id": {"type": "int", "description": "The unique identifier of the user enrolling in the course"}}, "required": ["course_id", "user_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the enrollment was successful"}}}
{"api_name": "purifyWater", "api_description": "Purify water for non-profit organizations", "field": "Non-profit/Water Purification", "parameters": {"water_source": {"type": "str", "description": "The source of water that needs to be purified (e.g., tap water, river water, well water)"}, "target_use": {"type": "str", "description": "The intended use of the purified water (e.g., drinking, irrigation, industrial processes)"}, "treatment_method": {"type": "str", "description": "The method to be used for water purification (e.g., filtration, disinfection, reverse osmosis)"}}, "required": ["water_source", "target_use"], "responses": {"purified_water": {"type": "str", "description": "The purified water ready for use"}}}
{"api_name": "getSocialImpact", "api_description": "Retrieve social impact assessment information of a non-profit organization", "field": "Non-profit/Social Impact Assessment", "parameters": {"organization_name": {"type": "str", "description": "The name of the non-profit organization for which you want to get the social impact assessment"}}, "required": ["organization_name"], "responses": {"impact_score": {"type": "float", "description": "The social impact score of the specified non-profit organization"}, "impact_areas": {"type": "str", "description": "The areas in which the organization has made a significant social impact"}, "beneficiaries": {"type": "str", "description": "The groups of people or communities who have benefited from the organization's efforts"}}}
{"api_name": "assessImpact", "api_description": "Assess the social impact of a non-profit organization", "field": "Non-profit/Social Impact Assessment", "parameters": {"organization": {"type": "str", "description": "The name of the non-profit organization"}, "activities": {"type": "str", "description": "The activities undertaken by the organization (e.g., education, healthcare, environmental conservation)"}, "time_period": {"type": "str", "description": "The time period for which the social impact is being assessed (e.g., last year, past 5 years)"}, "geographic_coverage": {"type": "str", "description": "The geographic coverage of the organization's activities (e.g., local, national, international)"}, "evaluation_criteria": {"type": "str", "description": "The criteria used to evaluate the social impact (e.g., number of beneficiaries, positive outcomes achieved)"}}, "required": ["organization", "activities"], "responses": {"impact_score": {"type": "float", "description": "The social impact score of the non-profit organization"}, "evaluation_results": {"type": "str", "description": "The detailed evaluation results of the social impact"}}}
{"api_name": "calculateSocialImpact", "api_description": "Calculate the social impact of a non-profit organization", "field": "Non-profit/Social Impact Assessment", "parameters": {"mission": {"type": "str", "description": "The mission statement of the organization"}, "target_audience": {"type": "str", "description": "The specific group of people the organization aims to help (e.g., children, elderly, refugees)"}, "program_duration": {"type": "int", "description": "The duration of the organization's programs in months"}, "funding_source": {"type": "str", "description": "The source of funding for the organization"}, "geographical_reach": {"type": "str", "description": "The geographical area the organization operates in"}}, "required": ["mission", "target_audience"], "responses": {"social_impact_score": {"type": "float", "description": "A score representing the social impact of the organization"}}}
{"api_name": "donateFunds", "api_description": "Donate funds to support community development", "field": "Non-profit/Community Development", "parameters": {"amount": {"type": "float", "description": "The amount of funds to donate (e.g., 100, 500, 1000)"}, "currency": {"type": "str", "description": "The currency in which the funds will be donated (e.g., USD, EUR, GBP)"}, "donor_name": {"type": "str", "description": "The name of the donor (e.g., John Doe)"}, "donor_email": {"type": "str", "description": "The email address of the donor (e.g., example@example.com)"}, "donor_address": {"type": "str", "description": "The address of the donor (e.g., 123 Main St, City, Country)"}}, "required": ["amount", "currency", "donor_name", "donor_email"], "responses": {"status": {"type": "str", "description": "The status of the donation (e.g., success, error)"}, "donation_id": {"type": "str", "description": "The unique identifier of the donation"}}}
{"api_name": "takePartInVolunteering", "api_description": "Register an individual for volunteering", "field": "Non-profit/Civic Engagement", "parameters": {"name": {"type": "str", "description": "The full name of the individual"}, "age": {"type": "int", "description": "The age of the individual"}, "area_of_interest": {"type": "str", "description": "The area of interest for volunteering (e.g., environment, healthcare)"}}, "required": ["name", "age"], "responses": {"success": {"type": "bool", "description": "Indicates whether the individual's registration for volunteering was successful"}}}
{"api_name": "getHumanRightsViolations", "api_description": "Retrieve information about human rights violations", "field": "Non-profit/Human Rights", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information on human rights violations (e.g., United States, China, Nigeria)"}, "year": {"type": "int", "description": "The year for which you want to get information on human rights violations (e.g., 2020, 2021, 2022)"}, "violations_type": {"type": "str", "description": "Specify the type of human rights violations you're interested in (e.g., freedom of speech, torture, discrimination)"}}, "required": ["country"], "responses": {"violations_count": {"type": "int", "description": "The number of human rights violations recorded"}, "violations_details": {"type": "str", "description": "Detailed information about the human rights violations"}}}
{"api_name": "getHumanRightsInfo", "api_description": "Retrieve information related to human rights", "field": "Non-profit/Human Rights", "parameters": {}, "required": [], "responses": {"info": {"type": "str", "description": "Information on human rights"}}}
{"api_name": "getSocialEnterpriseDetails", "api_description": "Retrieve details of a social enterprise", "field": "Non-profit/Social Enterprise", "parameters": {"enterprise_id": {"type": "int", "description": "The ID of the social enterprise you want to get details about"}}, "required": ["enterprise_id"], "responses": {"name": {"type": "str", "description": "The name of the social enterprise"}, "category": {"type": "str", "description": "The category of the social enterprise"}, "description": {"type": "str", "description": "A description of the social enterprise"}, "location": {"type": "str", "description": "The location of the social enterprise"}}}
{"api_name": "requestMentor", "api_description": "Request a mentor for capacity building", "field": "Non-profit/Capacity Building", "parameters": {"organization": {"type": "str", "description": "The name of the non-profit organization requesting a mentor"}, "location": {"type": "str", "description": "The location where the mentorship is needed (e.g., city, country)"}, "area_of_expertise": {"type": "str", "description": "Specify the area of expertise required in a mentor"}}, "required": ["organization"], "responses": {"mentor": {"type": "str", "description": "The assigned mentor for capacity building"}}}
{"api_name": "registerForTraining", "api_description": "Register for a specific training course", "field": "Non-profit/Capacity Building", "parameters": {"course_id": {"type": "str", "description": "The ID of the training course to register for"}, "participant_name": {"type": "str", "description": "The name of the participant"}, "participant_email": {"type": "str", "description": "The email address of the participant"}}, "required": ["course_id", "participant_name", "participant_email"], "responses": {"registration_status": {"type": "str", "description": "The status of the registration (e.g., Success, Error)", "content": {"status_message": {"type": "str", "description": "The message indicating the result of the registration"}}}}}
{"api_name": "sendThankYouLetter", "api_description": "Send a personalized thank you letter to a donor", "field": "Non-profit/Grant Writing and Fundraising", "parameters": {"donor_name": {"type": "str", "description": "The name of the donor"}, "donation_amount": {"type": "float", "description": "The amount donated by the donor"}}, "required": ["donor_name", "donation_amount"], "responses": {"letter_sent": {"type": "bool", "description": "Indicates whether the thank you letter was successfully sent"}}}
{"api_name": "getCSRInformation", "api_description": "Retrieve information about a company's corporate social responsibility initiatives", "field": "Non-profit/Corporate Social Responsibility", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to get CSR information"}}, "required": ["company_name"], "responses": {"initiatives": {"type": "str", "description": "Details about the company's CSR initiatives"}, "impact": {"type": "str", "description": "The social and environmental impact of the company's CSR activities"}}}
{"api_name": "getHealthStatistics", "api_description": "Retrieve public health statistics", "field": "Non-profit/Public Health", "parameters": {"country": {"type": "str", "description": "The country for which you want to get health statistics (e.g., USA, China, Brazil)"}, "year": {"type": "int", "description": "The specific year for which you want to retrieve health data"}}, "required": ["country"], "responses": {"infant_mortality_rate": {"type": "float", "description": "The infant mortality rate in the specified country and year"}, "life_expectancy": {"type": "int", "description": "The life expectancy in the specified country and year"}}}
{"api_name": "donateToSocialService", "api_description": "Make a donation to a non-profit social service", "field": "Non-profit/Social Services", "parameters": {"service_id": {"type": "str", "description": "The unique ID of the social service to which you want to donate"}, "amount": {"type": "float", "description": "The amount you want to donate (e.g., 50.0)"}, "currency": {"type": "str", "description": "The currency in which the donation is made (e.g., USD, EUR)"}}, "required": ["service_id", "amount", "currency"], "responses": {"status": {"type": "str", "description": "The status of the donation (e.g., success, failed)"}}}
{"api_name": "volunteerAtSocialService", "api_description": "Sign up as a volunteer at a non-profit social service", "field": "Non-profit/Social Services", "parameters": {"service_id": {"type": "str", "description": "The unique ID of the social service at which you want to volunteer"}}, "required": ["service_id"], "responses": {"status": {"type": "str", "description": "The status of the volunteer sign-up (e.g., success, failed)"}}}
{"api_name": "findWaterSource", "api_description": "Find a water source near a given location", "field": "Non-profit/Water and Sanitation", "parameters": {"location": {"type": "str", "description": "The location for which you want to find a water source (e.g., city, village)"}, "type": {"type": "str", "description": "The type of water source (e.g., well, spring, river)"}}, "required": ["location"], "responses": {"latitude": {"type": "float", "description": "The latitude of the water source"}, "longitude": {"type": "float", "description": "The longitude of the water source"}, "name": {"type": "str", "description": "The name of the water source"}, "type": {"type": "str", "description": "The type of water source (e.g., well, spring, river)"}}}
{"api_name": "findSanitationFacility", "api_description": "Find a sanitation facility near a given location", "field": "Non-profit/Water and Sanitation", "parameters": {"location": {"type": "str", "description": "The location for which you want to find a sanitation facility (e.g., city, village)"}, "type": {"type": "str", "description": "The type of sanitation facility (e.g., public toilet, community bathroom)"}}, "required": ["location"], "responses": {"latitude": {"type": "float", "description": "The latitude of the sanitation facility"}, "longitude": {"type": "float", "description": "The longitude of the sanitation facility"}, "name": {"type": "str", "description": "The name of the sanitation facility"}, "type": {"type": "str", "description": "The type of sanitation facility (e.g., public toilet, community bathroom)"}}}
{"api_name": "getClimateData", "api_description": "Retrieve climate change data for a specific region", "field": "Non-profit/Climate Change", "parameters": {"region": {"type": "str", "description": "The specific region for which you want to retrieve climate change data (e.g., Europe, Asia, North America)"}, "start_year": {"type": "int", "description": "The starting year for the climate change data"}, "end_year": {"type": "int", "description": "The ending year for the climate change data"}}, "required": ["region"], "responses": {"temperature_change": {"type": "float", "description": "The average temperature change in the specified region"}, "sea_level_rise": {"type": "float", "description": "The average sea level rise in the specified region"}}}
{"api_name": "getSustainableAgricultureData", "api_description": "Retrieve data related to sustainable agriculture practices", "field": "Non-profit/Sustainable Agriculture", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve data about sustainable agriculture practices (e.g., country, city, region)"}, "crop_type": {"type": "str", "description": "The type of crop for which you want to retrieve data (e.g., wheat, corn, rice)"}, "year": {"type": "int", "description": "The year for which you want to retrieve data (e.g., 2020, 2021)"}}, "required": ["location", "crop_type", "year"], "responses": {"yield": {"type": "float", "description": "The average yield of the specified crop in the specified location for the specified year (in tons/ha)"}, "water_consumption": {"type": "float", "description": "The amount of water consumed by the specified crop in the specified location for the specified year (in liters/ha)"}, "fertilizer_usage": {"type": "float", "description": "The amount of fertilizer used for the specified crop in the specified location for the specified year (in kg/ha)"}}}
{"api_name": "getGenderPayGap", "api_description": "Retrieve gender pay gap information for a specific country", "field": "Non-profit/Gender Equality", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the gender pay gap information (e.g., United States, United Kingdom, Australia)"}, "year": {"type": "int", "description": "The year for which you want to get the gender pay gap information"}}, "required": ["country"], "responses": {"gender_pay_gap": {"type": "float", "description": "The gender pay gap percentage in the specified country"}}}
{"api_name": "getGenderStats", "api_description": "Retrieve gender statistics", "field": "Non-profit/Gender Equality", "parameters": {"country": {"type": "str", "description": "The country for which you want to get gender statistics (e.g., United States, India, Australia)"}, "year": {"type": "int", "description": "The year for which you want to retrieve gender statistics (e.g., 2020, 2021)"}, "category": {"type": "str", "description": "Specify a category for gender statistics (e.g., education, workforce, politics)"}}, "required": ["country", "year"], "responses": {"male_percentage": {"type": "float", "description": "The percentage of males in the specified category and year"}, "female_percentage": {"type": "float", "description": "The percentage of females in the specified category and year"}}}
{"api_name": "joinEvent", "api_description": "Allows users to join a community event", "field": "Non-profit/Community Engagement", "parameters": {"event_id": {"type": "int", "description": "The ID of the event that the user wants to join"}}, "required": ["event_id"], "responses": {"status": {"type": "str", "description": "The status of the user's request"}}}
{"api_name": "getArtsEducationPrograms", "api_description": "Retrieve information about arts education programs provided by non-profit organizations", "field": "Non-profit/Arts Education", "parameters": {"location": {"type": "str", "description": "The location for which you want to search arts education programs (e.g., city, state)"}, "age_group": {"type": "str", "description": "Specify an age group for arts education programs (e.g., children, teenagers, adults)"}}, "required": ["location"], "responses": {"programs": {"type": "str", "description": "A list of arts education programs available at the specified location"}}}
{"api_name": "getIncomeSources", "api_description": "Retrieve a list of income sources for a non-profit organization", "field": "Non-profit/Income Generation", "parameters": {"organization_id": {"type": "str", "description": "The ID of the non-profit organization for which you want to retrieve income sources"}}, "required": ["organization_id"], "responses": {"income_sources": {"type": "str", "description": "A list of income sources for the specified non-profit organization"}}}
{"api_name": "enrollStudent", "api_description": "Enroll a student into a STEM education program", "field": "Non-profit/STEM Education", "parameters": {"student_name": {"type": "str", "description": "The name of the student being enrolled"}, "age": {"type": "int", "description": "The age of the student"}, "parent_name": {"type": "str", "description": "The name of the parent/guardian"}, "program_id": {"type": "str", "description": "The unique ID of the STEM education program the student is being enrolled into"}}, "required": ["student_name", "age", "parent_name", "program_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the enrollment was successful"}, "message": {"type": "str", "description": "Additional information or error message"}}}
{"api_name": "getDisasterRisk", "api_description": "Retrieve disaster risk information for a specific location", "field": "Non-profit/Disaster Risk Reduction", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the disaster risk information (e.g., city, country)"}, "disaster_type": {"type": "str", "description": "Specify the type of disaster for risk assessment (e.g., earthquake, flood, hurricane)"}, "timeframe": {"type": "str", "description": "Specify the timeframe for risk assessment (e.g., 1 month, 3 months, 1 year)"}, "population_density": {"type": "float", "description": "Provide the population density of the location in persons per square kilometer"}}, "required": ["location"], "responses": {"disaster_risk": {"type": "float", "description": "The risk level of the specified location for the given disaster type and timeframe"}, "recommendations": {"type": "str", "description": "Recommendations for disaster risk reduction in the specified location"}}}
{"api_name": "getChildProtectionServices", "api_description": "Retrieve information about child protection services", "field": "Non-profit/Child Protection", "parameters": {"location": {"type": "str", "description": "The location where you want to find child protection services (e.g., city, state, country)"}, "services_needed": {"type": "str", "description": "Specific services needed for child protection (e.g., counseling, foster care, education)"}, "age_group": {"type": "str", "description": "Age group of the child requiring protection (e.g., infants, preschoolers, teenagers)"}}, "required": ["location", "services_needed"], "responses": {"services": {"type": "str", "description": "List of child protection services available in the specified location"}, "contact_info": {"type": "str", "description": "Contact details of organizations providing child protection services"}}}
{"api_name": "addPeacebuildingProject", "api_description": "Add a new peacebuilding project", "field": "Non-profit/Peacebuilding", "parameters": {"project_name": {"type": "str", "description": "The name of the project"}, "country": {"type": "str", "description": "The country where the project is implemented"}, "start_date": {"type": "str", "description": "The start date of the project (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date of the project (e.g., 2022-12-31)"}, "description": {"type": "str", "description": "A brief description of the project"}}, "required": ["project_name", "country", "start_date", "end_date"], "responses": {"success": {"type": "bool", "description": "Indicates whether the project was successfully added"}}}
{"api_name": "getMicroloans", "api_description": "Retrieve information about microcredit and microloans for non-profit organizations", "field": "Non-profit/Microcredit and Microloans", "parameters": {"organization_name": {"type": "str", "description": "The name of the non-profit organization"}, "loan_amount": {"type": "float", "description": "The desired loan amount in USD"}, "loan_duration": {"type": "int", "description": "The desired loan duration in months"}}, "required": ["organization_name", "loan_amount", "loan_duration"], "responses": {"loan_approval": {"type": "bool", "description": "Indicates if the loan is approved or not"}, "interest_rate": {"type": "float", "description": "The interest rate for the approved loan"}}}
{"api_name": "getTherapySession", "api_description": "Retrieve information about a therapy session", "field": "Non-profit/Arts Therapy", "parameters": {"client_name": {"type": "str", "description": "The name of the client participating in the therapy session"}, "therapy_type": {"type": "str", "description": "The type of therapy being conducted (e.g., music therapy, dance therapy)", "examples": "music therapy, dance therapy"}, "session_length": {"type": "int", "description": "The duration of the therapy session in minutes"}, "therapist_name": {"type": "str", "description": "The name of the therapist conducting the session"}}, "required": ["client_name", "therapy_type", "session_length", "therapist_name"], "responses": {"session_id": {"type": "str", "description": "The unique identifier for the therapy session"}, "client_name": {"type": "str", "description": "The name of the client participating in the therapy session"}, "therapy_type": {"type": "str", "description": "The type of therapy being conducted"}, "session_length": {"type": "int", "description": "The duration of the therapy session in minutes"}, "therapist_name": {"type": "str", "description": "The name of the therapist conducting the session"}}}
{"api_name": "createLeadershipProgram", "api_description": "Create a new youth leadership program", "field": "Non-profit/Youth Leadership", "parameters": {"name": {"type": "str", "description": "The name of the leadership program"}, "start_date": {"type": "str", "description": "The start date of the program (e.g., yyyy-mm-dd)"}, "end_date": {"type": "str", "description": "The end date of the program (e.g., yyyy-mm-dd)"}, "location": {"type": "str", "description": "The location where the program will take place"}, "participants_limit": {"type": "int", "description": "The maximum number of participants allowed in the program"}, "age_limit": {"type": "int", "description": "The age limit for participants in the program"}}, "required": ["name", "start_date", "end_date", "location", "participants_limit"], "responses": {"program_id": {"type": "str", "description": "The unique identifier assigned to the created program"}}}
{"api_name": "donateToCause", "api_description": "Donate to a social justice cause", "field": "Non-profit/Social Justice", "parameters": {"cause_name": {"type": "str", "description": "The name of the social justice cause to donate to"}, "amount": {"type": "float", "description": "The amount of donation in your desired currency"}}, "required": ["cause_name", "amount"], "responses": {"confirmation": {"type": "str", "description": "A confirmation message for the donation"}}}
{"api_name": "getRefugeesInNeed", "api_description": "Retrieve information about refugees in need of education", "field": "Non-profit/Refugee Education", "parameters": {}, "required": [], "responses": {"refugee_count": {"type": "int", "description": "The total count of refugees in need of education"}}}
{"api_name": "applyForGrant", "api_description": "Apply for a specific grant", "field": "Non-profit/Grant Management", "parameters": {"grant_id": {"type": "int", "description": "The unique identifier of the grant"}, "organization_name": {"type": "str", "description": "The name of the organization applying for the grant"}, "contact_email": {"type": "str", "description": "The email address of the contact person for the organization"}}, "required": ["grant_id", "organization_name", "contact_email"], "responses": {"success": {"type": "bool", "description": "Indicates if the grant application was successful"}, "message": {"type": "str", "description": "Feedback message regarding the grant application"}}}
{"api_name": "getChildMarriageData", "api_description": "Retrieve child marriage data and statistics", "field": "Non-profit/Child Marriage Prevention", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve child marriage data (e.g., country, region, city)"}}, "required": ["location"], "responses": {"statistics": {"type": "str", "description": "Child marriage statistics for the specified location"}}}
{"api_name": "getCarbonSequestration", "api_description": "Retrieve the amount of carbon sequestration in a specified forest area", "field": "Non-profit/Sustainable Forestry", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the carbon sequestration (e.g., city, region)"}, "year": {"type": "int", "description": "The year for which you want to retrieve the carbon sequestration (e.g., 2020)"}, "unit": {"type": "str", "description": "The unit of the provided carbon sequestration (e.g., tons, kilograms)"}}, "required": ["location", "year"], "responses": {"sequestration": {"type": "float", "description": "The amount of carbon sequestration in the specified forest area and year"}, "unit": {"type": "str", "description": "The unit of the provided carbon sequestration"}}}
{"api_name": "getStudentCount", "api_description": "Retrieve the total number of students receiving education for all", "field": "Non-profit/Education for All", "parameters": {"location": {"type": "str", "description": "The location to get student count (e.g., city, state, country)"}}, "required": ["location"], "responses": {"count": {"type": "int", "description": "The total number of students receiving education for all"}}}
{"api_name": "getUrbanPlanner", "api_description": "Retrieve information about an urban planner", "field": "Non-profit/Urban Planning", "parameters": {"name": {"type": "str", "description": "The name of the urban planner"}, "location": {"type": "str", "description": "The location of the urban planning project"}, "specialization": {"type": "str", "description": "The area of specialization of the urban planner (e.g., transportation, housing, sustainability)"}, "experience": {"type": "int", "description": "The number of years of experience of the urban planner"}}, "required": ["name", "location"], "responses": {"name": {"type": "str", "description": "The name of the urban planner"}, "location": {"type": "str", "description": "The location of the urban planning project"}, "specialization": {"type": "str", "description": "The area of specialization of the urban planner"}, "experience": {"type": "int", "description": "The number of years of experience of the urban planner"}}}
{"api_name": "getNeighborhoodCharacteristics", "api_description": "Retrieve characteristics and demographics of a specific neighborhood", "field": "Non-profit/Urban Planning", "parameters": {"neighborhood": {"type": "str", "description": "The name or ID of the neighborhood you want to retrieve information about"}}, "required": ["neighborhood"], "responses": {"characteristics": {"type": "str", "description": "Characteristics and demographics of the specified neighborhood"}}}
{"api_name": "getRefugeeServices", "api_description": "Retrieve the available services for refugees in a specific location", "field": "Non-profit/Immigrant and Refugee Services", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the available services (e.g., Houston, Seattle, Atlanta)"}}, "required": ["location"], "responses": {"services": {"type": "str", "description": "The available services for refugees in the specified location"}}}
{"api_name": "donate", "api_description": "Donate to a non-profit organization", "field": "Non-profit/Humanitarian Journalism", "parameters": {"organization": {"type": "str", "description": "Name of the non-profit organization to donate to"}, "amount": {"type": "float", "description": "Amount to donate in a specified currency (e.g., USD, EUR)"}, "currency": {"type": "str", "description": "Currency in which the donation is made"}}, "required": ["organization", "amount", "currency"], "responses": {"success": {"type": "bool", "description": "Indicates whether the donation was successful"}, "message": {"type": "str", "description": "Response message"}}}
{"api_name": "getConflictData", "api_description": "Retrieve data related to conflicts", "field": "Non-profit/Conflict Transformation", "parameters": {"location": {"type": "str", "description": "The location for which you want to get conflict data (e.g., Africa, Middle East, South America)"}, "year": {"type": "int", "description": "The year for which you want to retrieve conflict data (e.g., 2019, 2020)"}, "type": {"type": "str", "description": "Specify the type of conflict data to retrieve (e.g., fatalities, displacement, peace agreements)"}, "scale": {"type": "str", "description": "Specify the scale of conflicts to retrieve data from (e.g., global, regional, local)"}}, "required": ["location", "year"], "responses": {"data": {"type": "str", "description": "The conflict data for the specified location and year"}}}
{"api_name": "donateToShelter", "api_description": "Make a donation to a specific shelter or transitional housing", "field": "Non-profit/Housing and Shelter", "parameters": {"shelter_id": {"type": "int", "description": "The ID of the shelter to which you want to donate"}, "amount": {"type": "float", "description": "The amount of donation in USD"}}, "required": ["shelter_id", "amount"], "responses": {"donation_status": {"type": "str", "description": "The status of the donation"}}}
{"api_name": "getSustainableLivelihoods", "api_description": "Retrieve sustainable livelihoods information for a non-profit organization", "field": "Non-profit/Sustainable Livelihoods", "parameters": {"organization": {"type": "str", "description": "The name of the non-profit organization"}}, "required": ["organization"], "responses": {"livelihoods": {"type": "str", "description": "The sustainable livelihoods initiatives implemented by the organization"}}}
{"api_name": "volunteerSignUps", "api_description": "Allow users to sign up for volunteer opportunities in a non-profit organization", "field": "Non-profit/Philanthropy", "parameters": {"organization": {"type": "str", "description": "The name of the non-profit organization offering volunteer opportunities"}}, "required": ["organization"], "responses": {"signup_status": {"type": "str", "description": "The status of the volunteer sign-up"}, "confirmation_code": {"type": "str", "description": "The confirmation code for the volunteer sign-up"}}}
{"api_name": "getCharitableOrganization", "api_description": "Retrieve information about a charitable organization", "field": "Non-profit/Philanthropy", "parameters": {"organization_name": {"type": "str", "description": "The name of the charitable organization"}}, "required": ["organization_name"], "responses": {"name": {"type": "str", "description": "The name of the organization"}, "mission": {"type": "str", "description": "The mission or purpose of the organization"}, "website": {"type": "str", "description": "The website URL of the organization"}, "donation_options": {"type": "str", "description": "The available options for making a donation (e.g., monetary, in-kind, volunteer)"}}}
{"api_name": "getDonationImpact", "api_description": "Retrieve the impact of donations", "field": "Non-profit/Philanthropy", "parameters": {"donation_id": {"type": "int", "description": "The unique identifier of the donation"}}, "required": ["donation_id"], "responses": {"impact_description": {"type": "str", "description": "A description of the impact created by the donation"}}}
{"api_name": "makeDonation", "api_description": "Make a donation to a non-profit organization", "field": "Non-profit/Philanthropy", "parameters": {"organization": {"type": "str", "description": "The name of the non-profit organization to donate to"}, "amount": {"type": "float", "description": "The amount of money to donate"}, "currency": {"type": "str", "description": "The currency in which the donation amount is given (e.g., USD, EUR)"}, "donor_name": {"type": "str", "description": "The name of the donor making the donation"}}, "required": ["organization", "amount", "donor_name"], "responses": {"donation_id": {"type": "int", "description": "A unique identifier for the donation"}, "confirmation_message": {"type": "str", "description": "A confirmation message for the successful donation"}}}
{"api_name": "getNonProfitInfo", "api_description": "Retrieve information about a non-profit organization", "field": "Non-profit/Philanthropy", "parameters": {"organization": {"type": "str", "description": "The name of the non-profit organization to retrieve information about"}}, "required": ["organization"], "responses": {"name": {"type": "str", "description": "The name of the non-profit organization"}, "mission": {"type": "str", "description": "The mission statement of the organization"}, "website": {"type": "str", "description": "The website URL of the non-profit organization"}, "contact_email": {"type": "str", "description": "The email address for contacting the organization"}}}
{"api_name": "donateToNonProfit", "api_description": "Donate to a non-profit organization", "field": "Non-profit/Philanthropy", "parameters": {"organization_name": {"type": "str", "description": "The name of the non-profit organization to donate to (e.g., UNICEF, Salvation Army)"}, "donation_amount": {"type": "float", "description": "The amount to donate in USD (e.g., 50.0, 100.0, 500.0)"}}, "required": ["organization_name", "donation_amount"], "responses": {"donation_id": {"type": "str", "description": "Unique identifier for the donation"}, "thank_you_message": {"type": "str", "description": "A message expressing gratitude for the donation"}}}
{"api_name": "getVaccinationCoverage", "api_description": "Retrieve vaccination coverage data", "field": "Non-profit/Global Health", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve vaccination coverage data (e.g., Canada, Nigeria, Australia)"}, "vaccine": {"type": "str", "description": "The vaccine to retrieve coverage data for (e.g., measles, polio)"}, "age_group": {"type": "str", "description": "Specify the age group for which you want to retrieve coverage data (e.g., infants, school children)"}}, "required": ["country"], "responses": {"coverage": {"type": "float", "description": "The percentage of vaccination coverage for the specified country, vaccine, and age group"}}}
{"api_name": "getEmergencyHotline", "api_description": "Retrieve the contact information for a mental health emergency hotline", "field": "Non-profit/Mental Health Counseling", "parameters": {}, "required": [], "responses": {"hotline_number": {"type": "str", "description": "The phone number for the mental health emergency hotline"}}}
{"api_name": "submitWriting", "api_description": "Submit a creative writing piece to a non-profit organization", "field": "Non-profit/Creative Writing", "parameters": {"title": {"type": "str", "description": "The title of the writing piece"}, "author": {"type": "str", "description": "The name of the author"}, "content": {"type": "str", "description": "The content of the creative writing piece"}, "genre": {"type": "str", "description": "The genre of the writing piece (e.g., poetry, fiction, essay)"}}, "required": ["title", "author", "content"], "responses": {"submission_id": {"type": "str", "description": "The unique ID assigned to the submitted writing piece"}}}
{"api_name": "getRefugeeData", "api_description": "Retrieve data on refugees in a certain location", "field": "Non-profit/Refugee Integration", "parameters": {"location": {"type": "str", "description": "The location for which you want to get refugee data (e.g., city, country)"}, "year": {"type": "int", "description": "The year of refugee data (e.g., 2020, 2021)", "example": "2020"}}, "required": ["location"], "responses": {"refugee_count": {"type": "int", "description": "The count of refugees in the specified location and year"}}}
{"api_name": "getRefugeeIntegrationStatus", "api_description": "Retrieve the integration status of refugees", "field": "Non-profit/Refugee Integration", "parameters": {"country": {"type": "str", "description": "The country of interest for refugee integration (e.g., Germany, Canada, Australia)"}, "language": {"type": "str", "description": "The preferred language for integration (e.g., English, Arabic, Spanish)"}, "duration": {"type": "int", "description": "The duration of integration in months"}}, "required": ["country"], "responses": {"integration_status": {"type": "str", "description": "The integration status of refugees in the specified country"}, "language_support": {"type": "bool", "description": "Whether language support is available for the preferred language"}}}
{"api_name": "getWomenHealth", "api_description": "Retrieve information related to women's health", "field": "Non-profit/Women's Health", "parameters": {"age": {"type": "int", "description": "The age of the women (e.g., 25, 35, 50)"}, "location": {"type": "str", "description": "The location of the women (e.g., United States, Canada, Australia)"}, "concern": {"type": "str", "description": "The specific health concern of the women (e.g., breast cancer, menstrual disorders)"}, "language": {"type": "str", "description": "The preferred language of information (e.g., English, Spanish, French)"}}, "required": ["age", "location", "concern"], "responses": {"information": {"type": "str", "description": "The relevant information related to women's health"}}}
{"api_name": "getIHLStatus", "api_description": "Retrieve the status of International Humanitarian Law", "field": "Non-profit/International Humanitarian Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the International Humanitarian Law status (e.g., USA, France, Japan)"}, "year": {"type": "int", "description": "The year for which you want to get the status of International Humanitarian Law (e.g., 2020, 2021)"}}, "required": ["country", "year"], "responses": {"status": {"type": "str", "description": "The status of International Humanitarian Law in the specified country for the specified year"}}}
{"api_name": "getIHLPrinciples", "api_description": "Retrieve the principles of International Humanitarian Law", "field": "Non-profit/International Humanitarian Law", "parameters": {}, "required": [], "responses": {"principles": {"type": "str", "description": "The principles of International Humanitarian Law"}}}
{"api_name": "getIHLViolations", "api_description": "Retrieve the violations of International Humanitarian Law", "field": "Non-profit/International Humanitarian Law", "parameters": {}, "required": [], "responses": {"violations": {"type": "str", "description": "The violations of International Humanitarian Law"}}}
{"api_name": "getIHLConventions", "api_description": "Retrieve the conventions of International Humanitarian Law", "field": "Non-profit/International Humanitarian Law", "parameters": {}, "required": [], "responses": {"conventions": {"type": "str", "description": "The conventions of International Humanitarian Law"}}}
{"api_name": "getIHLGuidelines", "api_description": "Retrieve guidelines for International Humanitarian Law", "field": "Non-profit/International Humanitarian Law", "parameters": {}, "required": [], "responses": {"guidelines": {"type": "str", "description": "The guidelines for International Humanitarian Law"}}}
{"api_name": "sendReliefSupplies", "api_description": "Send relief supplies to a specific location for humanitarian assistance", "field": "Non-profit/Humanitarian Logistics", "parameters": {"location": {"type": "str", "description": "The location to which the relief supplies will be sent (e.g., disaster-stricken area, refugee camp)"}, "supplies_needed": {"type": "str", "description": "The type of supplies needed for assistance (e.g., food, medicine, shelter)"}, "quantity": {"type": "int", "description": "The quantity of supplies to be sent"}}, "required": ["location", "supplies_needed", "quantity"], "responses": {"success": {"type": "bool", "description": "Indicates whether the relief supplies were successfully sent"}}}
{"api_name": "requestTransportation", "api_description": "Request transportation services for humanitarian logistics", "field": "Non-profit/Humanitarian Logistics", "parameters": {"pickup_location": {"type": "str", "description": "The location from where the transportation services are required (e.g., warehouse, distribution center)"}, "delivery_location": {"type": "str", "description": "The destination location to where the supplies need to be transported (e.g., affected area, hospital)"}, "cargo_type": {"type": "str", "description": "The type of cargo requiring transportation (e.g., medical supplies, relief materials)"}, "quantity": {"type": "int", "description": "The quantity of cargo to be transported"}}, "required": ["pickup_location", "delivery_location", "cargo_type", "quantity"], "responses": {"transportation_status": {"type": "str", "description": "Current status of transportation (e.g., dispatched, in transit, delivered)"}, "eta": {"type": "str", "description": "Estimated time of arrival at the delivery location"}}}
{"api_name": "reportNeedsAssessment", "api_description": "Report needs assessment for humanitarian assistance", "field": "Non-profit/Humanitarian Logistics", "parameters": {"location": {"type": "str", "description": "The location where needs assessment is conducted (e.g., disaster-affected area, refugee camp)"}, "assessment_type": {"type": "str", "description": "The type of needs assessment conducted (e.g., health, infrastructure, water supply)"}, "findings": {"type": "str", "description": "The findings of the needs assessment conducted"}}, "required": ["location", "assessment_type", "findings"], "responses": {"report_id": {"type": "str", "description": "Unique identifier for the needs assessment report"}, "status": {"type": "str", "description": "Current status of the report (e.g., submitted, under review, approved)"}}}
{"api_name": "getHumanitarianLogistics", "api_description": "Retrieve information about humanitarian logistics", "field": "Non-profit/Humanitarian Logistics", "parameters": {"location": {"type": "str", "description": "The location where the humanitarian logistics are required (e.g., Syria, Haiti, Sudan)"}, "items_needed": {"type": "str", "description": "Specify the items needed for humanitarian aid (e.g., food, water, medical supplies)"}, "urgency": {"type": "str", "description": "Specify the urgency level of the humanitarian logistics (e.g., high, medium, low)"}}, "required": ["location", "items_needed"], "responses": {"logistics_info": {"type": "str", "description": "Information about the available humanitarian logistics in the specified location and for the required items"}, "urgency_level": {"type": "str", "description": "The urgency level of the logistics provided"}}}
{"api_name": "trackHumanitarianAid", "api_description": "Track the delivery progress of humanitarian aid", "field": "Non-profit/Humanitarian Logistics", "parameters": {"shipment_id": {"type": "str", "description": "The unique ID of the humanitarian aid shipment"}}, "required": ["shipment_id"], "responses": {"current_location": {"type": "str", "description": "The current location of the humanitarian aid shipment"}, "status": {"type": "str", "description": "The status of the humanitarian aid shipment"}}}
{"api_name": "getEarlyChildhoodEducationInfo", "api_description": "Retrieve information about early childhood education", "field": "Education/Early Childhood Education", "parameters": {"location": {"type": "str", "description": "The location for which you want to get information (e.g., city, state, country)"}, "age": {"type": "int", "description": "The age range of children for information retrieval (e.g., 1-3, 4-6, 2-5)"}}, "required": ["location"], "responses": {"school_name": {"type": "str", "description": "The name of the early childhood education school"}, "curriculum": {"type": "str", "description": "The curriculum followed in the school"}}}
{"api_name": "getSpecialEducationNeeds", "api_description": "Retrieve information on special education needs", "field": "Education/Special Education", "parameters": {"student_id": {"type": "int", "description": "The ID of the student you want to get special education information for (e.g., 12345)"}, "year_level": {"type": "str", "description": "The year level of the student (e.g., primary school, high school)"}, "area_of_need": {"type": "str", "description": "Specify the area of special education need (e.g., learning disabilities, autism spectrum disorder)"}, "location": {"type": "str", "description": "The location of the educational institution (e.g., city, state)"}, "teacher_id": {"type": "int", "description": "The ID of the teacher responsible for special education"}}, "required": ["student_id", "area_of_need"], "responses": {"information": {"type": "str", "description": "Detailed information on the special education needs"}}}
{"api_name": "getCurriculum", "api_description": "Retrieve curriculum information", "field": "Education/Curriculum Design", "parameters": {"grade": {"type": "str", "description": "Specify the grade for the curriculum (e.g., Grade 1, Grade 5, Grade 10)"}, "subject": {"type": "str", "description": "Specify the subject for the curriculum (e.g., Math, Science, English)"}}, "required": ["grade", "subject"], "responses": {"curriculum_details": {"type": "str", "description": "The details of the curriculum for the specified grade and subject"}}}
{"api_name": "getLearningObjectives", "api_description": "Retrieve the learning objectives for a specific course", "field": "Education/Instructional Design", "parameters": {"course_id": {"type": "int", "description": "The ID of the course for which you want to get the learning objectives"}}, "required": ["course_id"], "responses": {"learning_objectives": {"type": "str", "description": "The learning objectives of the specified course"}}}
{"api_name": "getCourseMaterials", "api_description": "Retrieve the course materials for a specific course", "field": "Education/Instructional Design", "parameters": {"course_id": {"type": "str", "description": "The unique identifier of the course you want to get the course materials for (e.g., ENG101, MATH202)"}}, "required": ["course_id"], "responses": {"course_materials": {"type": "str", "description": "The course materials for the specified course"}}}
{"api_name": "getAssessmentMethods", "api_description": "Retrieve the assessment methods for a specific learning objective", "field": "Education/Instructional Design", "parameters": {"learning_objective": {"type": "str", "description": "The learning objective you want to get the assessment methods for (e.g., Writing a persuasive essay, Solving quadratic equations)"}}, "required": ["learning_objective"], "responses": {"assessment_methods": {"type": "str", "description": "The assessment methods for the specified learning objective"}}}
{"api_name": "getCourseContent", "api_description": "Retrieve the content of a specific course", "field": "Education/Instructional Design", "parameters": {"course": {"type": "str", "description": "The name or identifier of the course for which you want to retrieve the content"}}, "required": ["course"], "responses": {"course_content": {"type": "str", "description": "The content of the specified course"}}}
{"api_name": "getCourseProgress", "api_description": "Retrieve the progress of a specific student in a course", "field": "Education/Instructional Design", "parameters": {"student_id": {"type": "str", "description": "The unique identifier of the student"}, "course": {"type": "str", "description": "The name or identifier of the course for which you want to retrieve the progress"}}, "required": ["student_id", "course"], "responses": {"course_progress": {"type": "float", "description": "The progress of the specified student in the course"}}}
{"api_name": "getStudyHabits", "api_description": "Retrieve study habits and techniques for effective learning", "field": "Education/Educational Psychology", "parameters": {"learning_style": {"type": "str", "description": "The learning style of the student (e.g., visual, auditory, kinesthetic)"}, "time_of_day": {"type": "str", "description": "The desired time of day for studying (e.g., morning, afternoon, evening)"}, "subject": {"type": "str", "description": "The subject for which study habits are required (e.g., math, science, language)"}, "grade_level": {"type": "int", "description": "The grade level of the student (e.g., 1, 2, 3, ...)"}}, "required": ["learning_style"], "responses": {"study_habits": {"type": "str", "description": "Effective study habits and techniques for the specified learning style"}}}
{"api_name": "getMotivationLevel", "api_description": "Retrieve the motivation level of a student", "field": "Education/Educational Psychology", "parameters": {"student_id": {"type": "int", "description": "The ID of the student for which you want to retrieve the motivation level"}, "subject": {"type": "str", "description": "The subject for which motivation level is required (e.g., math, science, language)"}, "grade_level": {"type": "int", "description": "The grade level of the student (e.g., 1, 2, 3, ...)"}}, "required": ["student_id"], "responses": {"motivation_level": {"type": "str", "description": "The motivation level of the student"}}}
{"api_name": "getStudentMotivation", "api_description": "Retrieve the level of motivation of a student", "field": "Education/Educational Psychology", "parameters": {"student_id": {"type": "int", "description": "The unique identifier of the student"}, "time_period": {"type": "str", "description": "Specify a time period for student motivation (e.g., last month, last semester)"}}, "required": ["student_id"], "responses": {"motivation_level": {"type": "str", "description": "The level of motivation of the student (high, medium, low)"}}}
{"api_name": "getClassroomEnvironment", "api_description": "Retrieve the classroom environment factors", "field": "Education/Educational Psychology", "parameters": {"classroom_id": {"type": "int", "description": "The unique identifier of the classroom"}}, "required": ["classroom_id"], "responses": {"classroom_factors": {"type": "str", "description": "The factors affecting the classroom environment (temperature, lighting, seating arrangement)"}}}
{"api_name": "getStudentAttendance", "api_description": "Retrieve the attendance of a student", "field": "Education/Educational Assessment and Evaluation", "parameters": {"student_id": {"type": "str", "description": "The ID of the student for whom you want to retrieve the attendance"}}, "required": ["student_id"], "responses": {"attendance": {"type": "float", "description": "The attendance percentage of the student"}}}
{"api_name": "getMulticulturalEducation", "api_description": "Retrieve information about multicultural education", "field": "Education/Multicultural Education", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information about multicultural education (e.g., USA, Canada, Australia)"}, "language": {"type": "str", "description": "Specify the language in which the information should be provided (e.g., English, Spanish, French)"}, "topic": {"type": "str", "description": "Specify the topic of multicultural education (e.g., history, literature, arts)"}}, "required": ["country"], "responses": {"information": {"type": "str", "description": "The information about multicultural education as per the specified parameters"}}}
{"api_name": "solveEquation", "api_description": "Solve a mathematical equation", "field": "Education/Mathematics Education", "parameters": {"equation": {"type": "str", "description": "The equation to be solved (e.g., 3x + 5 = 10)"}}, "required": ["equation"], "responses": {"solution": {"type": "float", "description": "The solution to the given equation"}}}
{"api_name": "convertUnits", "api_description": "Convert units of measurement", "field": "Education/Mathematics Education", "parameters": {"value": {"type": "float", "description": "The value to be converted (e.g., 10.5)"}, "from_unit": {"type": "str", "description": "The unit to convert from (e.g., meter, pound, liter)"}, "to_unit": {"type": "str", "description": "The unit to convert to (e.g., centimeter, kilogram, gallon)"}}, "required": ["value", "from_unit", "to_unit"], "responses": {"converted_value": {"type": "float", "description": "The converted value in the desired unit"}}}
{"api_name": "solveMathProblem", "api_description": "Solve a given math problem", "field": "Education/Mathematics Education", "parameters": {"problem": {"type": "str", "description": "The math problem to be solved (e.g., solve for x in 2x + 5 = 15)"}}, "required": ["problem"], "responses": {"solution": {"type": "str", "description": "The solution to the given math problem"}}}
{"api_name": "getHistoricalTimeline", "api_description": "Retrieve a historical timeline for a specific period in social studies", "field": "Education/Social Studies Education", "parameters": {"period": {"type": "str", "description": "The specific period for which you want to retrieve a historical timeline"}}, "required": ["period"], "responses": {"timeline": {"type": "str", "description": "The historical timeline for the specified period in social studies"}}}
{"api_name": "getScholarshipInfo", "api_description": "Retrieve information about scholarships for international students", "field": "Education/International Education", "parameters": {"country": {"type": "str", "description": "The country for which you want to get scholarship information (e.g., Canada, Germany, Japan)"}, "study_level": {"type": "str", "description": "The desired study level for the scholarship (e.g., Undergraduate, Master's, PhD)"}, "field_study": {"type": "str", "description": "The specific field of study for the scholarship (e.g., Engineering, Medicine, Business)"}}, "required": ["country"], "responses": {"scholarship_info": {"type": "str", "description": "Information about available scholarships for international students in the specified country"}}}
{"api_name": "getVisaRequirements", "api_description": "Retrieve visa requirements for studying abroad", "field": "Education/International Education", "parameters": {"destination_country": {"type": "str", "description": "The country you intend to study in (e.g., United States, United Kingdom, Australia)"}, "home_country": {"type": "str", "description": "Your current country of residence (e.g., China, India, Brazil)"}, "study_duration": {"type": "int", "description": "The duration of your intended study abroad (e.g., 1, 2, 4, ...)"}}, "required": ["destination_country", "home_country"], "responses": {"visa_requirements": {"type": "str", "description": "Visa requirements and procedures for studying in the destination country"}}}
{"api_name": "getStudentPerformance", "api_description": "Retrieve a student's performance data in a specific subject", "field": "Education/Education Technology Integration", "parameters": {"student_name": {"type": "str", "description": "The name of the student for whom you want to retrieve performance data"}, "subject": {"type": "str", "description": "The specific subject for which you want to retrieve performance data (e.g., Math, Science, English)"}}, "required": ["student_name", "subject"], "responses": {"performance": {"type": "float", "description": "The performance score of the student in the specified subject"}, "grade": {"type": "str", "description": "The grade of the student in the specified subject"}}}
{"api_name": "getSchoolSchedule", "api_description": "Retrieve the schedule of a specific school", "field": "Education/Education Technology Integration", "parameters": {"school_name": {"type": "str", "description": "The name of the school for which you want to retrieve the schedule"}}, "required": ["school_name"], "responses": {"schedule": {"type": "str", "description": "The schedule of the specified school"}}}
{"api_name": "getGiftedPrograms", "api_description": "Retrieve information about gifted education programs", "field": "Education/Gifted Education", "parameters": {"location": {"type": "str", "description": "The location for which you want to get information about gifted education programs (e.g., New York, Los Angeles)"}, "grade_level": {"type": "str", "description": "Specify the grade level for which you are interested in gifted education programs (e.g., elementary, middle school, high school)"}, "subject_area": {"type": "str", "description": "Specify the subject area for which you are interested in gifted education programs (e.g., mathematics, language arts, science)"}}, "required": ["location"], "responses": {"programs": {"type": "str", "description": "A list of gifted education programs available at the specified location"}, "eligibility_criteria": {"type": "str", "description": "The eligibility criteria for the gifted education programs"}}}
{"api_name": "getSpecialEdLaw", "api_description": "Retrieve information about special education laws", "field": "Education/Special Education Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information about special education laws (e.g., United States, United Kingdom, Australia)"}, "state": {"type": "str", "description": "The state within the country for which you want to get information about special education laws (e.g., California, New York, Queensland)"}}, "required": ["country"], "responses": {"laws": {"type": "str", "description": "The special education laws applicable in the specified country and state"}}}
{"api_name": "getHistoryOfEducation", "api_description": "Retrieve the history of education information", "field": "Education/History of Education", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the history of education (e.g., United States, France, China)"}, "time_period": {"type": "str", "description": "The time period for which you want to get the history of education (e.g., Ancient Times, Medieval Period, Modern Era)"}}, "required": ["country"], "responses": {"history": {"type": "str", "description": "The history of education in the specified country and time period"}}}
{"api_name": "getPhilosophy", "api_description": "Retrieve the philosophy of education", "field": "Education/Philosophy of Education", "parameters": {}, "required": [], "responses": {"philosophy": {"type": "str", "description": "The philosophy of education"}}}
{"api_name": "getTeacherCertification", "api_description": "Retrieve the certification information of a teacher", "field": "Education/Teacher Training and Development", "parameters": {"teacher_id": {"type": "str", "description": "The unique identifier of the teacher"}}, "required": ["teacher_id"], "responses": {"certification": {"type": "str", "description": "The certification achieved by the teacher"}}}
{"api_name": "findConsultant", "api_description": "Find an education consultant to provide professional advice and guidance", "field": "Education/Education Consulting", "parameters": {"location": {"type": "str", "description": "The location where you want to find a consultant (e.g., city, state, country)"}, "specialization": {"type": "str", "description": "The area of specialization you require guidance in (e.g., college admissions, career counseling)"}, "experience": {"type": "int", "description": "Minimum years of experience the consultant should have in the field"}}, "required": ["location", "specialization"], "responses": {"consultant": {"type": "str", "description": "The name of the relevant education consultant"}, "contact": {"type": "str", "description": "Contact details of the consultant (e.g., email or phone)"}}}
{"api_name": "updateProgram", "api_description": "Update details of an education program", "field": "Education/Education Program Management", "parameters": {"program_id": {"type": "int", "description": "The ID of the program"}, "name": {"type": "str", "description": "The updated name of the program"}, "start_date": {"type": "str", "description": "The updated start date of the program"}, "end_date": {"type": "str", "description": "The updated end date of the program"}, "location": {"type": "str", "description": "The updated location of the program"}, "instructors": {"type": "str", "description": "The updated names of the instructors for the program"}}, "required": ["program_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the update was successful"}}}
{"api_name": "getLawsuitStatus", "api_description": "Retrieve the status of a lawsuit", "field": "Law/Civil Law", "parameters": {"lawsuit_id": {"type": "str", "description": "The ID of the lawsuit"}}, "required": ["lawsuit_id"], "responses": {"status": {"type": "str", "description": "The current status of the lawsuit (e.g., pending, ongoing, closed)"}}}
{"api_name": "getCivilLaw", "api_description": "Retrieve information about civil law", "field": "Law/Civil Law", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get civil law information (e.g., United States, France, Germany)"}, "topic": {"type": "str", "description": "Specify a specific topic within civil law (e.g., contracts, property, family law)"}}, "required": ["country"], "responses": {"information": {"type": "str", "description": "The information about civil law in the specified country"}}}
{"api_name": "getAdministrativeLaw", "api_description": "Retrieve information on administrative law", "field": "Law/Administrative Law", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information on administrative law"}}}
{"api_name": "getTortLaw", "api_description": "Retrieve information about tort law", "field": "Law/Tort Law", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about tort law"}}}
{"api_name": "getPropertyOwnership", "api_description": "Retrieve property ownership information", "field": "Law/Property Law", "parameters": {"property_address": {"type": "str", "description": "The address of the property for which you want to get ownership information"}, "property_type": {"type": "str", "description": "Specify the type of property (e.g., residential, commercial, industrial)"}}, "required": ["property_address"], "responses": {"ownership_status": {"type": "str", "description": "The ownership status of the specified property"}, "owner_name": {"type": "str", "description": "The name of the owner of the property"}, "owner_contact": {"type": "str", "description": "Contact details of the property owner"}}}
{"api_name": "getPropertyRights", "api_description": "Retrieve information about property rights", "field": "Law/Property Law", "parameters": {"property_id": {"type": "str", "description": "The unique identifier of the property"}, "property_type": {"type": "str", "description": "The type of property (e.g., land, building, vehicle)"}, "owner_name": {"type": "str", "description": "The name of the property owner"}, "location": {"type": "str", "description": "The location of the property (e.g., address, coordinates)"}}, "required": ["property_id", "property_type"], "responses": {"property_rights": {"type": "str", "description": "The legal rights associated with the property"}, "owner_name": {"type": "str", "description": "The name of the property owner"}, "location": {"type": "str", "description": "The location of the property"}}}
{"api_name": "getDivorceProcess", "api_description": "Retrieve information about the process of getting a divorce", "field": "Law/Family Law", "parameters": {"location": {"type": "str", "description": "The location where the divorce process will take place"}}, "required": ["location"], "responses": {"process_steps": {"type": "str", "description": "The step-by-step process of getting a divorce in the specified location"}}}
{"api_name": "getChildCustodyLaws", "api_description": "Retrieve information about child custody laws", "field": "Law/Family Law", "parameters": {"location": {"type": "str", "description": "The location where child custody laws are being checked"}}, "required": ["location"], "responses": {"laws": {"type": "str", "description": "The child custody laws applicable in the specified location"}}}
{"api_name": "getCommercialLaws", "api_description": "Retrieve information about commercial laws", "field": "Law/Commercial Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information about commercial laws (e.g., United States, United Kingdom, Germany)"}, "industry": {"type": "str", "description": "The specific industry you are interested in (e.g., finance, technology, retail)"}}, "required": ["country"], "responses": {"laws": {"type": "str", "description": "The commercial laws applicable to the specified country and industry"}}}
{"api_name": "getBankingLaw", "api_description": "Retrieve banking law information", "field": "Law/Banking Law", "parameters": {}, "required": [], "responses": {"banking_law_info": {"type": "str", "description": "Information about banking law"}}}
{"api_name": "getTaxRate", "api_description": "Retrieve the tax rate for a specific jurisdiction", "field": "Law/Tax Law", "parameters": {"jurisdiction": {"type": "str", "description": "The jurisdiction for which you want to get the tax rate (e.g., United States, Germany, Australia)"}}, "required": ["jurisdiction"], "responses": {"rate": {"type": "float", "description": "The tax rate for the specified jurisdiction"}}}
{"api_name": "checkTaxExemption", "api_description": "Check if a specific entity is eligible for tax exemption", "field": "Law/Tax Law", "parameters": {"entity_type": {"type": "str", "description": "The type of entity (e.g., individual, nonprofit organization, corporation)"}, "jurisdiction": {"type": "str", "description": "The jurisdiction under which the entity operates"}}, "required": ["entity_type", "jurisdiction"], "responses": {"eligible": {"type": "bool", "description": "Indicates if the entity is eligible for tax exemption"}}}
{"api_name": "getCompanyInfo", "api_description": "Retrieve information about a specific company based on its name or registration number", "field": "Law/Corporate Law", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to get information"}, "registration_number": {"type": "str", "description": "The registration number of the company"}}, "required": ["company_name"], "responses": {"company_info": {"type": "str", "description": "The information about the specified company"}}}
{"api_name": "getFileAnnualReport", "api_description": "Retrieve the annual report of a company", "field": "Law/Corporate Law", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to retrieve the annual report (e.g., Google, Apple, Microsoft)"}, "year": {"type": "int", "description": "The year of the annual report"}}, "required": ["company_name", "year"], "responses": {"report_file": {"type": "str", "description": "The file containing the annual report"}}}
{"api_name": "checkCompanyCompliance", "api_description": "Check if a company is compliant with all legal requirements", "field": "Law/Corporate Law", "parameters": {"company_name": {"type": "str", "description": "The name of the company to check compliance for (e.g., Google, Apple, Microsoft)"}}, "required": ["company_name"], "responses": {"compliance_status": {"type": "bool", "description": "The compliance status of the company"}}}
{"api_name": "getCorporateLaws", "api_description": "Retrieve information about corporate laws", "field": "Law/Corporate Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the corporate laws (e.g., USA, UK, India)"}, "type": {"type": "str", "description": "The type of corporate law (e.g., Public, Private, Non-profit)"}, "year": {"type": "int", "description": "The year of the corporate law enactment"}}, "required": ["country"], "responses": {"laws": {"type": "str", "description": "The details of the corporate laws for the specified country"}}}
{"api_name": "getSportsLawExperts", "api_description": "Retrieve a list of sports law experts", "field": "Law/Sports Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve sports law experts"}}, "required": ["country"], "responses": {"experts": {"type": "str", "description": "A list of sports law experts in the specified country"}}}
{"api_name": "getHumanRightsLaws", "api_description": "Retrieve information on human rights laws", "field": "Law/Human Rights Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to obtain human rights laws (e.g., United States, France, Japan)"}, "language": {"type": "str", "description": "The language in which you want to retrieve the laws (e.g., English, French, Spanish)"}, "category": {"type": "str", "description": "Specify a category of human rights laws to filter results (e.g., civil rights, labor rights)"}, "year": {"type": "int", "description": "The year of the laws you want to retrieve (e.g., 2005, 2010, 2015)"}}, "required": ["country"], "responses": {"laws": {"type": "str", "description": "The human rights laws of the specified country"}, "language": {"type": "str", "description": "The language in which the laws are provided"}}}
{"api_name": "getRealEstateLaw", "api_description": "Retrieve real estate law information", "field": "Law/Real Estate Law", "parameters": {"country": {"type": "str", "description": "The country regarding which you want to retrieve real estate law information (e.g., USA, Canada, Australia)"}, "state": {"type": "str", "description": "The state or province within the country for which you want to retrieve real estate law information (e.g., California, Ontario, Queensland)"}, "city": {"type": "str", "description": "The city within the state or province for which you want to retrieve real estate law information (e.g., Los Angeles, Toronto, Brisbane)"}, "property_type": {"type": "str", "description": "The type of property for which you want to retrieve real estate law information (e.g., residential, commercial, industrial)"}}, "required": ["country", "state"], "responses": {"law_information": {"type": "str", "description": "The real estate law information applicable to the specified country, state, city, and property type"}}}
{"api_name": "getCyberLaw", "api_description": "Retrieve information about cyber laws", "field": "Law/Cyber Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to obtain cyber law information (e.g., United States, Germany, India)"}}, "required": ["country"], "responses": {"cyber_laws": {"type": "str", "description": "The cyber laws of the specified country"}}}
{"api_name": "addToCart", "api_description": "Add a product to the user's shopping cart", "field": "Retail/E-commerce", "parameters": {"product_id": {"type": "str", "description": "The ID of the product to add to the cart"}, "quantity": {"type": "int", "description": "The quantity of the product to add to the cart (e.g., 1, 2, 3)"}}, "required": ["product_id", "quantity"], "responses": {"success": {"type": "bool", "description": "Indicates if the product was successfully added to the cart"}}}
{"api_name": "addProductToStore", "api_description": "Add a new product to a specific store", "field": "Retail/Store management", "parameters": {"store_id": {"type": "int", "description": "The unique identifier of the store"}, "product_name": {"type": "str", "description": "The name of the product"}, "price": {"type": "float", "description": "The price of the product"}, "quantity": {"type": "int", "description": "The initial quantity of the product in stock"}}, "required": ["store_id", "product_name", "price"], "responses": {"success": {"type": "bool", "description": "Indicates whether the product was successfully added to the store"}}}
{"api_name": "addProduct", "api_description": "Add a new product to the store", "field": "Retail/Store management", "parameters": {"store_id": {"type": "str", "description": "The unique identifier of the store"}, "product_name": {"type": "str", "description": "The name of the product"}, "price": {"type": "float", "description": "The price of the product"}}, "required": ["store_id", "product_name", "price"], "responses": {"success": {"type": "bool", "description": "Indicates if the product was successfully added"}}}
{"api_name": "updateMerchandising", "api_description": "Update merchandising information for a retail store", "field": "Retail/Merchandising", "parameters": {"store_id": {"type": "str", "description": "The unique identifier of the retail store"}, "product_id": {"type": "str", "description": "The unique identifier of the product to be updated"}, "new_price": {"type": "float", "description": "The new price of the product"}, "stock": {"type": "int", "description": "The updated stock count of the product"}}, "required": ["store_id", "product_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the merchandising update was successful"}}}
{"api_name": "processPayment", "api_description": "Process a payment for an ongoing sale at a point of sale system", "field": "Retail/Point of sale systems", "parameters": {"transaction_id": {"type": "int", "description": "The unique identifier of the ongoing transaction"}, "payment_amount": {"type": "float", "description": "The amount to be paid by the customer"}, "payment_method": {"type": "str", "description": "The payment method used by the customer (e.g., cash, credit card, mobile payment)"}, "customer_id": {"type": "int", "description": "The identifier of the customer making the payment"}}, "required": ["transaction_id", "payment_amount", "payment_method"], "responses": {"success": {"type": "bool", "description": "Indicates whether the payment was successfully processed"}}}
{"api_name": "getOrderTracking", "api_description": "Retrieve the tracking information of an order", "field": "Retail/Supply chain management", "parameters": {"order_id": {"type": "str", "description": "The unique identifier of the order"}, "carrier": {"type": "str", "description": "The shipping carrier used for delivery (e.g., FedEx, UPS, DHL)"}}, "required": ["order_id"], "responses": {"tracking_status": {"type": "str", "description": "The current status of the order shipment"}, "estimated_delivery_date": {"type": "str", "description": "The estimated delivery date of the order"}}}
{"api_name": "deleteCategory", "api_description": "Delete a product category from the system", "field": "Retail/Category management", "parameters": {"category_name": {"type": "str", "description": "The name of the product category to delete"}}, "required": ["category_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the category was successfully deleted"}}}
{"api_name": "updateCategoryName", "api_description": "Update the name of a product category", "field": "Retail/Category management", "parameters": {"current_name": {"type": "str", "description": "The current name of the product category"}, "new_name": {"type": "str", "description": "The new name for the product category"}}, "required": ["current_name", "new_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the category name was successfully updated"}}}
{"api_name": "getSignalStrength", "api_description": "Retrieve the current signal strength of a wireless connection", "field": "Telecommunications/Wireless Communications", "parameters": {"network": {"type": "str", "description": "The name of the wireless network (e.g., Verizon, AT&T, T-Mobile)"}, "device": {"type": "str", "description": "The device for which you want to get the signal strength (e.g., iPhone, Samsung Galaxy)"}}, "required": ["network", "device"], "responses": {"signal_strength": {"type": "int", "description": "The signal strength of the wireless connection"}, "unit": {"type": "str", "description": "The unit of the signal strength measurement (e.g., dBm, bars)"}}}
{"api_name": "getNetworkCoverage", "api_description": "Check the network coverage in a specific area", "field": "Telecommunications/Wireless Communications", "parameters": {"area": {"type": "str", "description": "The area for which you want to check the network coverage (e.g., city, neighborhood)"}}, "required": ["area"], "responses": {"network_coverage": {"type": "str", "description": "The network coverage in the specified area"}}}
{"api_name": "sendMessage", "api_description": "Send a text message through a wireless network", "field": "Telecommunications/Wireless Communications", "parameters": {"recipient": {"type": "str", "description": "The recipient's phone number or email address"}, "message": {"type": "str", "description": "The content of the message"}}, "required": ["recipient", "message"], "responses": {"status": {"type": "str", "description": "The status of the message sending process"}}}
{"api_name": "sendSatelliteMessage", "api_description": "Send a message via satellite communication", "field": "Telecommunications/Satellite Communications", "parameters": {"message": {"type": "str", "description": "The message to be sent via satellite communication"}}, "required": ["message"], "responses": {"status": {"type": "str", "description": "The status of the message transmission"}}}
{"api_name": "getBandwidthUtilization", "api_description": "Retrieve the bandwidth utilization of a telecommunications network", "field": "Telecommunications/Network Design and Planning", "parameters": {"network_type": {"type": "str", "description": "The type of network (e.g., 4G, 5G)"}, "time_period": {"type": "str", "description": "The time period for which you want to get the bandwidth utilization (e.g., daily, weekly, monthly)"}}, "required": ["network_type", "time_period"], "responses": {"bandwidth_utilization": {"type": "float", "description": "The bandwidth utilization of the specified telecommunications network"}}}
{"api_name": "getLatency", "api_description": "Retrieve the latency of a telecommunications network", "field": "Telecommunications/Network Design and Planning", "parameters": {"network_type": {"type": "str", "description": "The type of network (e.g., 4G, 5G)"}, "location1": {"type": "str", "description": "The first location for which you want to calculate latency"}, "location2": {"type": "str", "description": "The second location for which you want to calculate latency"}}, "required": ["network_type", "location1", "location2"], "responses": {"latency": {"type": "float", "description": "The latency between the specified locations in the telecommunications network"}}}
{"api_name": "getNetworkCapacity", "api_description": "Retrieve the network capacity of a telecommunications network", "field": "Telecommunications/Network Design and Planning", "parameters": {"network_type": {"type": "str", "description": "The type of network (e.g., 4G, 5G)"}, "area_size": {"type": "str", "description": "The size of the area for which you want to calculate network capacity (e.g., city, region)"}}, "required": ["network_type", "area_size"], "responses": {"network_capacity": {"type": "int", "description": "The network capacity of the specified telecommunications network"}}}
{"api_name": "checkCoverage", "api_description": "Check the telecommunication coverage in a specific area", "field": "Telecommunications/Telecom Infrastructure", "parameters": {"latitude": {"type": "float", "description": "The latitude of the area for which you want to check the coverage"}, "longitude": {"type": "float", "description": "The longitude of the area for which you want to check the coverage"}, "radius": {"type": "int", "description": "The radius in meters around the specified latitude and longitude to check for coverage"}}, "required": ["latitude", "longitude"], "responses": {"coverage": {"type": "bool", "description": "Indicates whether the specified area has telecommunication coverage"}}}
{"api_name": "makeCall", "api_description": "Initiate a VoIP call", "field": "Telecommunications/Voice over IP (VoIP)", "parameters": {"caller_id": {"type": "str", "description": "The caller's identifier"}, "callee_id": {"type": "str", "description": "The callee's identifier"}}, "required": ["caller_id", "callee_id"], "responses": {"call_status": {"type": "str", "description": "The status of the call (e.g., connected, busy, unavailable)"}, "call_duration": {"type": "int", "description": "The duration of the call in seconds"}}}
{"api_name": "endCall", "api_description": "Terminate an ongoing VoIP call", "field": "Telecommunications/Voice over IP (VoIP)", "parameters": {"call_id": {"type": "str", "description": "The unique identifier of the ongoing call"}}, "required": ["call_id"], "responses": {"call_status": {"type": "str", "description": "The status of the call (e.g., terminated, disconnected)"}}}
{"api_name": "checkDataSpeed", "api_description": "Check the speed of data communications", "field": "Telecommunications/Data Communications", "parameters": {"connection_type": {"type": "str", "description": "Type of connection for data communications (e.g., wired, wireless)"}, "location": {"type": "str", "description": "The location for which you want to check the data speed (e.g., home, office, cafe)"}, "time_of_day": {"type": "str", "description": "Specify a time of day for data speed (e.g., morning, afternoon, night)"}}, "required": ["connection_type", "location"], "responses": {"speed": {"type": "float", "description": "The speed of data communications at the specified location and connection type"}, "unit": {"type": "str", "description": "The unit of data speed in which the speed is provided"}}}
{"api_name": "sendData", "api_description": "Send data through a telecommunications network", "field": "Telecommunications/Data Communications", "parameters": {"data": {"type": "str", "description": "The data to be sent"}, "destination": {"type": "str", "description": "The destination of the data (e.g., IP address, phone number)"}}, "required": ["data", "destination"], "responses": {"success": {"type": "bool", "description": "Indicates whether the data was successfully sent"}}}
{"api_name": "checkConnection", "api_description": "Check the connection status of data communications", "field": "Telecommunications/Data Communications", "parameters": {"connection_id": {"type": "str", "description": "The identifier of the connection"}}, "required": ["connection_id"], "responses": {"status": {"type": "str", "description": "The status of the connection"}}}
{"api_name": "setBandwidthLimit", "api_description": "Set the bandwidth limit for data communications", "field": "Telecommunications/Data Communications", "parameters": {"connection_id": {"type": "str", "description": "The identifier of the connection"}, "bandwidth_limit": {"type": "float", "description": "The desired bandwidth limit in Mbps"}}, "required": ["connection_id", "bandwidth_limit"], "responses": {"success": {"type": "bool", "description": "Indicates whether the bandwidth limit was successfully set"}}}
{"api_name": "simulateDataPacketLoss", "api_description": "Simulate data packet loss for testing purposes", "field": "Telecommunications/Data Communications", "parameters": {"connection_id": {"type": "str", "description": "The identifier of the connection"}, "packet_loss_rate": {"type": "float", "description": "The desired rate of data packet loss as a percentage"}}, "required": ["connection_id", "packet_loss_rate"], "responses": {"success": {"type": "bool", "description": "Indicates whether the data packet loss simulation was successful"}}}
{"api_name": "getIPAddress", "api_description": "Retrieve the IP address of the device", "field": "Telecommunications/Network Protocols", "parameters": {}, "required": [], "responses": {"ip_address": {"type": "str", "description": "The IP address of the device"}}}
{"api_name": "getTelecomPolicy", "api_description": "Retrieve telecom policy information", "field": "Telecommunications/Telecom Policy and Regulation", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve telecom policy information"}}, "required": ["country"], "responses": {"policy": {"type": "str", "description": "The telecom policy of the specified country"}}}
{"api_name": "calculateBill", "api_description": "Calculate the bill for a particular telecom service", "field": "Telecommunications/Telecom Billing and Revenue Management", "parameters": {"service_type": {"type": "str", "description": "Type of telecom service (e.g., voice call, data usage, SMS)"}, "usage": {"type": "float", "description": "Amount of service used (e.g., minutes of call, data consumed in GB, number of SMS)"}, "rate": {"type": "float", "description": "Rate per unit of service (e.g., price per minute call, price per GB data, price per SMS)"}, "tax_percentage": {"type": "float", "description": "Percentage of tax to be applied on the bill amount"}}, "required": ["service_type", "usage", "rate"], "responses": {"bill_amount": {"type": "float", "description": "Final bill amount including taxes"}}}
{"api_name": "optimizeNetwork", "api_description": "Optimize the performance of a telecommunications network", "field": "Telecommunications/Network Optimization", "parameters": {"network_type": {"type": "str", "description": "The type of network to be optimized (e.g., 4G, 5G, fiber-optic)"}, "region": {"type": "str", "description": "The region in which the network is located"}, "bandwidth": {"type": "int", "description": "The desired bandwidth capacity for the network in Mbps (e.g., 100, 500, 1000)"}, "latency_threshold": {"type": "float", "description": "The maximum acceptable latency for network connections in milliseconds (e.g., 10, 20, 50)"}, "coverage_area": {"type": "float", "description": "The desired coverage area of the network in square kilometers (e.g., 100, 500, 1000)"}}, "required": ["network_type", "region"], "responses": {"optimized_network": {"type": "str", "description": "The optimized network configuration for improved performance and efficiency"}, "network_performance": {"type": "float", "description": "The performance score of the optimized network on a scale of 0 to 100"}}}
{"api_name": "getCustomerBalance", "api_description": "Retrieve the current balance of a customer", "field": "Telecommunications/Telecom Analytics", "parameters": {"customer_id": {"type": "str", "description": "The ID of the customer to retrieve the balance"}}, "required": ["customer_id"], "responses": {"balance": {"type": "float", "description": "The current balance of the customer"}}}
{"api_name": "getSMSCount", "api_description": "Retrieve the count of SMS sent by a customer", "field": "Telecommunications/Telecom Analytics", "parameters": {"customer_id": {"type": "str", "description": "The ID of the customer to retrieve the SMS count"}}, "required": ["customer_id"], "responses": {"sms_count": {"type": "int", "description": "The count of SMS sent by the customer"}}}
{"api_name": "getCallCost", "api_description": "Calculate the cost of a call based on rates", "field": "Telecommunications/Telecom Analytics", "parameters": {"call_id": {"type": "str", "description": "The unique identifier of the call"}, "call_duration": {"type": "int", "description": "The duration of the call in minutes"}, "rate": {"type": "float", "description": "The rate per minute for the call"}}, "required": ["call_id", "call_duration", "rate"], "responses": {"cost": {"type": "float", "description": "The cost of the call"}}}
{"api_name": "getDeviceData", "api_description": "Retrieve the data from a specific IoT device", "field": "Telecommunications/Internet of Things (IoT)", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the IoT device"}, "start_time": {"type": "str", "description": "The start time to retrieve data from (e.g., YYYY-MM-DD HH:MM:SS)"}, "end_time": {"type": "str", "description": "The end time to retrieve data until (e.g., YYYY-MM-DD HH:MM:SS)"}}, "required": ["device_id"], "responses": {"data": {"type": "str", "description": "The data collected by the IoT device"}}}
{"api_name": "getSubscriberInfo", "api_description": "Retrieve information about a specific subscriber", "field": "Telecommunications/Telecom Software Development", "parameters": {"subscriber_id": {"type": "str", "description": "The ID of the subscriber for whom you want to retrieve information"}}, "required": ["subscriber_id"], "responses": {"info": {"type": "str", "description": "The information of the specified subscriber"}}}
{"api_name": "activateSIMCard", "api_description": "Activate a SIM card for a specific phone number", "field": "Telecommunications/Telecom Software Development", "parameters": {"phone_number": {"type": "str", "description": "The phone number for which you want to activate the SIM card"}, "sim_card_id": {"type": "str", "description": "The ID of the SIM card to be activated"}}, "required": ["phone_number", "sim_card_id"], "responses": {"status": {"type": "str", "description": "The status of the SIM card activation process"}}}
{"api_name": "createSMS", "api_description": "Create a new SMS message", "field": "Telecommunications/Telecom Software Development", "parameters": {"phone_number": {"type": "str", "description": "The phone number to which the SMS message will be sent (e.g., +1234567890)"}, "message": {"type": "str", "description": "The content of the SMS message"}}, "required": ["phone_number", "message"], "responses": {"success": {"type": "bool", "description": "Indicates if the SMS message was successfully created"}}}
{"api_name": "recordCall", "api_description": "Record a phone call", "field": "Telecommunications/Telecom Software Development", "parameters": {"phone_number": {"type": "str", "description": "The phone number to be called (e.g., +1234567890)"}}, "required": ["phone_number"], "responses": {"recording_url": {"type": "str", "description": "URL of the recorded phone call"}}}
{"api_name": "createTelecomApp", "api_description": "Create a new telecom software application", "field": "Telecommunications/Telecom Software Development", "parameters": {"app_name": {"type": "str", "description": "The name of the telecom software application"}, "app_type": {"type": "str", "description": "The type of the telecom software application (e.g., VoIP, network management)"}, "programming_language": {"type": "str", "description": "The programming language used to develop the application (e.g., Python, Java)"}, "platform": {"type": "str", "description": "The platform on which the application will run (e.g., Windows, Linux)"}, "database": {"type": "str", "description": "The database used in the application (e.g., MySQL, MongoDB)"}, "version_control": {"type": "str", "description": "The version control system used for the application's code (e.g., Git, SVN)"}}, "required": ["app_name", "app_type", "programming_language"], "responses": {"success": {"type": "bool", "description": "Flag indicating whether the telecom software application was created successfully"}, "message": {"type": "str", "description": "A message providing information about the status of the application creation process"}}}
{"api_name": "getNetworkSpeed", "api_description": "Retrieve the current network speed", "field": "Telecommunications/Next-Generation Networks", "parameters": {"location": {"type": "str", "description": "The location where the network speed is required (e.g., New York, Tokyo, London)"}, "provider": {"type": "str", "description": "The network provider (e.g., Verizon, AT&T, T-Mobile)"}}, "required": ["location"], "responses": {"speed": {"type": "float", "description": "The current network speed at the specified location"}, "unit": {"type": "str", "description": "The unit of network speed (e.g., Mbps, Gbps)"}}}
{"api_name": "getBandwidth", "api_description": "Retrieve the available bandwidth at a specific location", "field": "Telecommunications/Next-Generation Networks", "parameters": {"location": {"type": "str", "description": "The location where the bandwidth information is required (e.g., London, Seoul, Sydney)"}}, "required": ["location"], "responses": {"bandwidth": {"type": "float", "description": "The available bandwidth at the specified location"}, "unit": {"type": "str", "description": "The unit of bandwidth (e.g., Mbps, Gbps)"}}}
{"api_name": "getNetworkThroughput", "api_description": "Retrieve the throughput of a next-generation network", "field": "Telecommunications/Next-Generation Networks", "parameters": {"network_id": {"type": "str", "description": "The ID of the network for which you want to get the throughput"}, "time": {"type": "str", "description": "The time at which you want to check the throughput"}}, "required": ["network_id"], "responses": {"throughput": {"type": "float", "description": "The current network throughput in Mbps"}, "time": {"type": "str", "description": "The time the throughput was checked"}}}
{"api_name": "startCall", "api_description": "Initiate a call between two parties", "field": "Telecommunications/Unified Communications", "parameters": {"caller": {"type": "str", "description": "The caller's phone number or username"}, "callee": {"type": "str", "description": "The callee's phone number or username"}, "call_type": {"type": "str", "description": "Specify the type of call (e.g., voice, video)"}}, "required": ["caller", "callee"], "responses": {"call_id": {"type": "str", "description": "The unique identifier for the initiated call"}, "status": {"type": "str", "description": "The status of the call (e.g., ringing, in-progress)"}}}
{"api_name": "muteCall", "api_description": "Mute audio in an ongoing call", "field": "Telecommunications/Unified Communications", "parameters": {"call_id": {"type": "str", "description": "The unique identifier of the call to be muted"}}, "required": ["call_id"], "responses": {"status": {"type": "str", "description": "The status of audio muting operation (e.g., success, failure)"}}}
{"api_name": "activateService", "api_description": "Activate a telecom service", "field": "Telecommunications/Telecom Service Management", "parameters": {"service_id": {"type": "str", "description": "The ID of the telecom service to be activated"}}, "required": ["service_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the service activation was successful"}}}
{"api_name": "suspendService", "api_description": "Suspend a telecom service", "field": "Telecommunications/Telecom Service Management", "parameters": {"service_id": {"type": "str", "description": "The ID of the telecom service to be suspended"}}, "required": ["service_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the service suspension was successful"}}}
{"api_name": "getNetworkPerformance", "api_description": "Retrieve the performance metrics of the network", "field": "Telecommunications/Network Operations and Maintenance", "parameters": {}, "required": [], "responses": {"packet_loss": {"type": "float", "description": "The percentage of packets lost in network transmission"}, "latency": {"type": "int", "description": "The time taken for a packet to travel from source to destination in milliseconds"}}}
{"api_name": "addVendor", "api_description": "Add a new telecom vendor", "field": "Telecommunications/Telecom Vendor Management", "parameters": {"vendor_name": {"type": "str", "description": "The name of the new telecom vendor to be added"}, "contact_name": {"type": "str", "description": "The name of the contact person for the new vendor"}}, "required": ["vendor_name", "contact_name"], "responses": {"status": {"type": "str", "description": "The status of the vendor addition process"}}}
{"api_name": "troubleshootConnection", "api_description": "Run diagnostics and troubleshoot network connection issues", "field": "Telecommunications/Troubleshooting and Technical Support", "parameters": {"connection_type": {"type": "str", "description": "The type of connection to troubleshoot (e.g., wired, wireless)"}, "device_type": {"type": "str", "description": "The type of device experiencing connection issues (e.g., modem, router, smartphone)"}, "location": {"type": "str", "description": "The physical location where the connection issue is occurring (e.g., home, office)"}, "network_provider": {"type": "str", "description": "The network provider responsible for the connection"}, "diagnosis_method": {"type": "str", "description": "The preferred method for diagnostics (e.g., automatic, manual)"}, "additional_info": {"type": "str", "description": "Any additional information or details about the connection issue"}}, "required": ["connection_type", "device_type", "location"], "responses": {"diagnosis_results": {"type": "str", "description": "The results of the connection troubleshooting and diagnostics"}, "recommended_actions": {"type": "str", "description": "Recommended actions to resolve the connection issue"}}}
{"api_name": "getCallQuality", "api_description": "Retrieve the call quality metrics for a specific phone call", "field": "Telecommunications/Troubleshooting and Technical Support", "parameters": {"call_id": {"type": "str", "description": "The unique identifier of the phone call for which you want to retrieve the call quality metrics"}}, "required": ["call_id"], "responses": {"call_quality": {"type": "float", "description": "The call quality score for the specified phone call"}}}
{"api_name": "getTechnicalSupportContact", "api_description": "Get contact information for technical support in case of telecommunications issues", "field": "Telecommunications/Troubleshooting and Technical Support", "parameters": {}, "required": [], "responses": {"contact_info": {"type": "str", "description": "Contact information for technical support"}}}
{"api_name": "resolveConnectionIssues", "api_description": "Resolve common connection issues for telecommunications services", "field": "Telecommunications/Troubleshooting and Technical Support", "parameters": {}, "required": [], "responses": {"status": {"type": "str", "description": "Status of connection issue resolution"}}}
{"api_name": "checkInternetConnectivity", "api_description": "Check if there is an active internet connection", "field": "Telecommunications/Troubleshooting and Technical Support", "parameters": {"website": {"type": "str", "description": "A website URL to test internet connectivity (e.g., www.google.com, www.example.com)"}, "timeout": {"type": "int", "description": "Timeout in seconds for checking internet connectivity"}}, "required": ["website"], "responses": {"is_connected": {"type": "bool", "description": "A boolean indicating if there is an active internet connection"}}}
{"api_name": "analyzeCallQuality", "api_description": "Analyze the call quality of a voice call", "field": "Telecommunications/Troubleshooting and Technical Support", "parameters": {"phone_number": {"type": "str", "description": "The phone number of the call to be analyzed (e.g., +1234567890)"}, "duration": {"type": "int", "description": "The duration of the call in seconds"}}, "required": ["phone_number", "duration"], "responses": {"call_quality": {"type": "str", "description": "The call quality analysis result (e.g., excellent, good, fair, poor)"}}}
{"api_name": "resetDeviceSettings", "api_description": "Reset the settings of a telecommunications device", "field": "Telecommunications/Troubleshooting and Technical Support", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the device for which you want to reset the settings"}}, "required": ["device_id"], "responses": {"success": {"type": "bool", "description": "A boolean value indicating whether the device settings were successfully reset"}}}
{"api_name": "getAIFeatures", "api_description": "Retrieve features of artificial intelligence technology", "field": "Technology/Artificial Intelligence", "parameters": {}, "required": [], "responses": {"features": {"type": "str", "description": "The features of artificial intelligence technology"}}}
{"api_name": "analyzeText", "api_description": "Analyze text using artificial intelligence technology", "field": "Technology/Artificial Intelligence", "parameters": {"text": {"type": "str", "description": "The text to be analyzed"}}, "required": ["text"], "responses": {"result": {"type": "str", "description": "The analysis result of the text"}}}
{"api_name": "classifyImage", "api_description": "Classify an image using artificial intelligence technology", "field": "Technology/Artificial Intelligence", "parameters": {"image": {"type": "str", "description": "The image to be classified"}}, "required": ["image"], "responses": {"class": {"type": "str", "description": "The class label of the image"}}}
{"api_name": "predict", "api_description": "Make predictions using a trained machine learning model", "field": "Technology/Machine Learning", "parameters": {"data": {"type": "str", "description": "The input data for making predictions"}, "model": {"type": "str", "description": "The trained machine learning model"}}, "required": ["data", "model"], "responses": {"predictions": {"type": "str", "description": "The predicted outputs based on the input data"}}}
{"api_name": "evaluateModel", "api_description": "Evaluate the performance of a machine learning model", "field": "Technology/Machine Learning", "parameters": {"data": {"type": "str", "description": "The input data for evaluation"}, "labels": {"type": "str", "description": "The true labels corresponding to the input data"}, "model": {"type": "str", "description": "The trained machine learning model"}}, "required": ["data", "labels", "model"], "responses": {"accuracy": {"type": "float", "description": "The accuracy of the model predictions"}}}
{"api_name": "featureSelection", "api_description": "Perform feature selection on input data for machine learning", "field": "Technology/Machine Learning", "parameters": {"data": {"type": "str", "description": "The input data for feature selection"}, "method": {"type": "str", "description": "The method for feature selection (e.g., 'Wrapper', 'Filter')"}}, "required": ["data", "method"], "responses": {"selected_features": {"type": "str", "description": "The selected features based on the chosen method"}}}
{"api_name": "analyzeSentiment", "api_description": "Analyze sentiment in textual data", "field": "Technology/Data Science", "parameters": {"text": {"type": "str", "description": "The text to be analyzed for sentiment (e.g., I love this product, This movie is terrible)"}, "language": {"type": "str", "description": "The language of the text (e.g., English, Spanish)"}, "domain": {"type": "str", "description": "The specific domain or context of the text (e.g., social media, customer reviews)"}}, "required": ["text"], "responses": {"sentiment": {"type": "str", "description": "The predicted sentiment of the text (e.g., positive, negative, neutral)"}}}
{"api_name": "startInstance", "api_description": "Start a stopped instance in a cloud computing environment", "field": "Technology/Cloud Computing", "parameters": {"instance_id": {"type": "str", "description": "The ID of the instance to be started (e.g., i-12345678)"}}, "required": ["instance_id"], "responses": {"status": {"type": "str", "description": "The current status of the instance after starting"}}}
{"api_name": "encryptData", "api_description": "Encrypt sensitive data using a cryptographic algorithm", "field": "Technology/Cybersecurity", "parameters": {"data": {"type": "str", "description": "The sensitive data to be encrypted"}, "encryption_algorithm": {"type": "str", "description": "The cryptographic algorithm to be used for encryption (e.g., AES, RSA)"}, "encryption_key": {"type": "str", "description": "The encryption key required for encryption"}}, "required": ["data", "encryption_algorithm", "encryption_key"], "responses": {"encrypted_data": {"type": "str", "description": "The encrypted data"}}}
{"api_name": "generateRandomPassword", "api_description": "Generate a random password with specified length and complexity", "field": "Technology/Cybersecurity", "parameters": {"length": {"type": "int", "description": "The length of the password"}, "complexity": {"type": "str", "description": "The complexity level of the password (e.g., Low, Medium, High)"}}, "required": ["length"], "responses": {"password": {"type": "str", "description": "The generated random password"}}}
{"api_name": "checkVulnerability", "api_description": "Check if a system has any vulnerabilities", "field": "Technology/Cybersecurity", "parameters": {"ip_address": {"type": "str", "description": "The IP address of the system to be checked for vulnerabilities"}, "port": {"type": "int", "description": "The port number to be scanned for vulnerabilities"}, "scan_type": {"type": "str", "description": "Specify the type of scan to be performed (e.g., quick, full, stealth)"}}, "required": ["ip_address"], "responses": {"vulnerabilities_found": {"type": "bool", "description": "Indicates whether any vulnerabilities were found during the scan"}, "vulnerability_details": {"type": "str", "description": "Details about the vulnerabilities found (if any)"}}}
{"api_name": "configureNetwork", "api_description": "Configure network settings", "field": "Technology/Network Administration", "parameters": {"network_interface": {"type": "str", "description": "The network interface to be configured (e.g., eth0, wlan0)"}, "ip_address": {"type": "str", "description": "The desired IP address for the network interface"}, "subnet_mask": {"type": "str", "description": "The subnet mask for the network interface"}, "gateway": {"type": "str", "description": "The default gateway for the network"}, "dns_server": {"type": "str", "description": "The DNS server for domain name resolution"}}, "required": ["network_interface", "ip_address"], "responses": {"status": {"type": "str", "description": "The status of the network configuration"}}}
{"api_name": "getWebPage", "api_description": "Retrieve the content of a web page", "field": "Technology/Web Development", "parameters": {"url": {"type": "str", "description": "The URL of the web page"}}, "required": ["url"], "responses": {"content": {"type": "str", "description": "The content of the web page"}}}
{"api_name": "validateEmail", "api_description": "Validate an email address", "field": "Technology/Web Development", "parameters": {"email": {"type": "str", "description": "The email address to be validated"}}, "required": ["email"], "responses": {"valid": {"type": "bool", "description": "Indicator of whether the email address is valid"}}}
{"api_name": "getMobileAppInfo", "api_description": "Retrieve information about a mobile app", "field": "Technology/Mobile Development", "parameters": {"app_id": {"type": "str", "description": "The unique identifier of the mobile app"}, "platform": {"type": "str", "description": "The platform on which the app is available (e.g., iOS, Android)"}, "version": {"type": "str", "description": "The version of the app"}}, "required": ["app_id"], "responses": {"name": {"type": "str", "description": "The name of the mobile app"}, "description": {"type": "str", "description": "A brief description of the app"}, "author": {"type": "str", "description": "The name of the app author"}, "platform": {"type": "str", "description": "The platform on which the app is available"}, "version": {"type": "str", "description": "The version of the app"}}}
{"api_name": "createDatabase", "api_description": "Create a new database", "field": "Technology/Database Management", "parameters": {"database_name": {"type": "str", "description": "The name of the database"}, "username": {"type": "str", "description": "The username to access the database"}, "password": {"type": "str", "description": "The password to access the database"}}, "required": ["database_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the database creation was successful"}}}
{"api_name": "deleteDatabase", "api_description": "Delete an existing database", "field": "Technology/Database Management", "parameters": {"database_name": {"type": "str", "description": "The name of the database"}, "username": {"type": "str", "description": "The username to access the database"}, "password": {"type": "str", "description": "The password to access the database"}}, "required": ["database_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the database deletion was successful"}}}
{"api_name": "dropDatabase", "api_description": "Drop an existing database", "field": "Technology/Database Management", "parameters": {"database_name": {"type": "str", "description": "The name of the database to be dropped"}}, "required": ["database_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the database drop was successful"}}}
{"api_name": "createTable", "api_description": "Create a new table in a database", "field": "Technology/Database Management", "parameters": {"database_name": {"type": "str", "description": "The name of the database"}, "table_name": {"type": "str", "description": "The name of the new table"}, "columns": {"type": "str", "description": "The columns of the new table in the format 'column1 datatype, column2 datatype'"}}, "required": ["database_name", "table_name", "columns"], "responses": {"success": {"type": "bool", "description": "Indicates if the table creation was successful"}}}
{"api_name": "dropTable", "api_description": "Drop an existing table from a database", "field": "Technology/Database Management", "parameters": {"database_name": {"type": "str", "description": "The name of the database"}, "table_name": {"type": "str", "description": "The name of the table to be dropped"}}, "required": ["database_name", "table_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the table drop was successful"}}}
{"api_name": "insertData", "api_description": "Insert data into a table", "field": "Technology/Database Management", "parameters": {"database_name": {"type": "str", "description": "The name of the database"}, "table_name": {"type": "str", "description": "The name of the table"}, "data": {"type": "str", "description": "The data to be inserted in the format 'value1, value2, value3'"}}, "required": ["database_name", "table_name", "data"], "responses": {"success": {"type": "bool", "description": "Indicates if the data insertion was successful"}}}
{"api_name": "updateData", "api_description": "Update data in a table", "field": "Technology/Database Management", "parameters": {"database_name": {"type": "str", "description": "The name of the database"}, "table_name": {"type": "str", "description": "The name of the table"}, "column": {"type": "str", "description": "The name of the column to be updated"}, "value": {"type": "str", "description": "The new value for the specified column"}, "condition": {"type": "str", "description": "The condition to filter the data to be updated"}}, "required": ["database_name", "table_name", "column", "value", "condition"], "responses": {"success": {"type": "bool", "description": "Indicates if the data update was successful"}}}
{"api_name": "deleteTable", "api_description": "Delete an existing table from a database", "field": "Technology/Database Management", "parameters": {"database_name": {"type": "str", "description": "The name of the database that contains the table"}, "table_name": {"type": "str", "description": "The name of the table to be deleted"}}, "required": ["database_name", "table_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the table deletion was successful"}}}
{"api_name": "executeQuery", "api_description": "Execute a query on a database", "field": "Technology/Database Management", "parameters": {"database_name": {"type": "str", "description": "Name of the database on which to execute the query"}, "query": {"type": "str", "description": "The query string to be executed"}, "user_credentials": {"type": "str", "description": "Credentials of the user executing the query"}}, "required": ["database_name", "query"], "responses": {"result": {"type": "str", "description": "The result of the executed query"}}}
{"api_name": "getTable", "api_description": "Retrieve a table from a database", "field": "Technology/Database Management", "parameters": {"database_name": {"type": "str", "description": "The name of the database"}, "table_name": {"type": "str", "description": "The name of the table to retrieve"}}, "required": ["database_name", "table_name"], "responses": {"table_data": {"type": "str", "description": "The data of the retrieved table"}}}
{"api_name": "createARObject", "api_description": "Create a new Augmented Reality object", "field": "Technology/Augmented Reality (AR)", "parameters": {"object_name": {"type": "str", "description": "The name of the AR object"}, "dimensions": {"type": "str", "description": "The dimensions of the object (e.g., width, height, depth)"}, "color": {"type": "str", "description": "The color of the AR object"}}, "required": ["object_name", "dimensions"], "responses": {"object_id": {"type": "int", "description": "The unique identifier of the created AR object"}}}
{"api_name": "deleteARObject", "api_description": "Delete an existing AR object", "field": "Technology/Augmented Reality (AR)", "parameters": {"object_id": {"type": "int", "description": "The identifier of the AR object"}}, "required": ["object_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the deletion was successful"}}}
{"api_name": "runARSimulation", "api_description": "Run a simulation of an augmented reality scene", "field": "Technology/Augmented Reality (AR)", "parameters": {"scene_name": {"type": "str", "description": "The name of the augmented reality scene to simulate (e.g., outdoor, indoor, underwater)"}, "lighting_conditions": {"type": "str", "description": "The lighting conditions of the simulation (e.g., bright sunlight, dimly lit room, night)"}, "object_count": {"type": "int", "description": "The number of augmented reality objects to place in the simulation"}, "animation_speed": {"type": "float", "description": "The speed at which animations in the scene should be played (e.g., 0.5, 1.0, 2.0)"}}, "required": ["scene_name", "lighting_conditions", "object_count"], "responses": {"simulation_result": {"type": "str", "description": "The result of the augmented reality simulation (e.g., success, failure)"}, "simulation_time": {"type": "float", "description": "The duration of the augmented reality simulation in seconds"}}}
{"api_name": "placeObject", "api_description": "Place virtual objects in the real world using augmented reality", "field": "Technology/Augmented Reality (AR)", "parameters": {"object_model": {"type": "str", "description": "The 3D model or image representing the virtual object to be placed"}, "position": {"type": "str", "description": "The position coordinates for placing the virtual object in the real world (e.g., latitude, longitude)"}, "scale": {"type": "float", "description": "The scaling factor for the virtual object to adjust its size in the real world (e.g., 0.5, 1.0, 2.0)"}}, "required": ["object_model", "position"], "responses": {"success": {"type": "bool", "description": "Indicates whether the virtual object was successfully placed in the real world"}}}
{"api_name": "getARDeviceDetails", "api_description": "Retrieve details of augmented reality device", "field": "Technology/Augmented Reality (AR)", "parameters": {"device_name": {"type": "str", "description": "The name of the AR device (e.g., HoloLens, Magic Leap)", "examples": ["HoloLens", "Magic Leap"]}}, "required": ["device_name"], "responses": {"device_name": {"type": "str", "description": "The name of the AR device"}, "manufacturer": {"type": "str", "description": "The manufacturer of the AR device"}, "year_of_release": {"type": "int", "description": "The year of release of the AR device"}}}
{"api_name": "generateSummary", "api_description": "Generate a summary of a given text", "field": "Technology/Natural Language Processing", "parameters": {"text": {"type": "str", "description": "The text to be summarized"}, "max_length": {"type": "int", "description": "The maximum length of the summary in characters"}}, "required": ["text"], "responses": {"summary": {"type": "str", "description": "The generated summary of the given text"}}}
{"api_name": "translateText", "api_description": "Translate a given text from one language to another", "field": "Technology/Natural Language Processing", "parameters": {"text": {"type": "str", "description": "The text to be translated (e.g., Hello, how are you?)", "example": "Hello, how are you?"}, "source_language": {"type": "str", "description": "The source language of the text (e.g., English, Spanish)", "example": "English"}, "target_language": {"type": "str", "description": "The target language for translation (e.g., Spanish, French)", "example": "Spanish"}}, "required": ["text", "source_language", "target_language"], "responses": {"translated_text": {"type": "str", "description": "The translated text in the target language"}}}
{"api_name": "summarizeText", "api_description": "Summarize a given text into a concise form", "field": "Technology/Natural Language Processing", "parameters": {"text": {"type": "str", "description": "The input text to be summarized"}}, "required": ["text"], "responses": {"summary": {"type": "str", "description": "A summarized version of the input text"}}}
{"api_name": "getBlockchainInfo", "api_description": "Retrieve information about blockchain technology", "field": "Technology/Blockchain Technology", "parameters": {"blockchain_name": {"type": "str", "description": "The name of the blockchain platform (e.g., Ethereum, Bitcoin)"}, "block_number": {"type": "int", "description": "The block number to retrieve information about"}, "transaction_id": {"type": "str", "description": "The unique identifier of a transaction to retrieve details"}}, "required": ["blockchain_name"], "responses": {"block_info": {"type": "str", "description": "Information about the requested block"}, "transaction_info": {"type": "str", "description": "Information about the requested transaction"}}}
{"api_name": "createBlockchain", "api_description": "Create a new blockchain", "field": "Technology/Blockchain Technology", "parameters": {"name": {"type": "str", "description": "The name of the blockchain"}, "version": {"type": "str", "description": "The version of the blockchain"}, "consensus": {"type": "str", "description": "The consensus algorithm used in the blockchain (e.g., Proof of Work, Proof of Stake)"}}, "required": ["name", "version"], "responses": {"blockchain_id": {"type": "str", "description": "The unique identifier of the created blockchain"}}}
{"api_name": "verifyTransaction", "api_description": "Verify the authenticity of a transaction on the blockchain", "field": "Technology/Blockchain Technology", "parameters": {"transaction_id": {"type": "str", "description": "The ID of the transaction to be verified"}, "blockchain_id": {"type": "str", "description": "The ID of the blockchain on which the transaction occurred"}}, "required": ["transaction_id", "blockchain_id"], "responses": {"verification_result": {"type": "bool", "description": "The result of the verification (true if the transaction is authentic, false otherwise)"}}}
{"api_name": "getAccountBalance", "api_description": "Get the balance of an account on the blockchain", "field": "Technology/Blockchain Technology", "parameters": {"account_id": {"type": "str", "description": "The ID of the account"}, "blockchain_id": {"type": "str", "description": "The ID of the blockchain on which the account exists"}}, "required": ["account_id", "blockchain_id"], "responses": {"balance": {"type": "float", "description": "The current balance of the account"}}}
{"api_name": "createSmartContract", "api_description": "Create a new smart contract on the blockchain", "field": "Technology/Blockchain Technology", "parameters": {"contract_name": {"type": "str", "description": "The name of the smart contract"}, "contract_code": {"type": "str", "description": "The code of the smart contract"}}, "required": ["contract_name", "contract_code"], "responses": {"contract_address": {"type": "str", "description": "The address of the deployed smart contract"}}}
{"api_name": "transferFunds", "api_description": "Transfer funds from one account to another on the blockchain", "field": "Technology/Blockchain Technology", "parameters": {"sender_account_id": {"type": "str", "description": "The ID of the account from which you want to transfer funds"}, "receiver_account_id": {"type": "str", "description": "The ID of the account to which you want to transfer funds"}, "amount": {"type": "float", "description": "The amount of funds to transfer"}}, "required": ["sender_account_id", "receiver_account_id", "amount"], "responses": {"success": {"type": "bool", "description": "Indicates whether the funds transfer was successful or not"}}}
{"api_name": "renderImage", "api_description": "Render an image using computer graphics techniques", "field": "Technology/Computer Graphics", "parameters": {"image_width": {"type": "int", "description": "Width of the output image in pixels"}, "image_height": {"type": "int", "description": "Height of the output image in pixels"}, "render_quality": {"type": "str", "description": "Quality of the rendered image (e.g., low, medium, high)"}, "camera_position": {"type": "str", "description": "Position of the camera in the 3D scene (e.g., front, top, right)"}, "lighting_conditions": {"type": "str", "description": "Environmental lighting conditions for the scene (e.g., daylight, artificial)"}, "render_mode": {"type": "str", "description": "Mode of rendering (e.g., wireframe, shaded, textured)"}}, "required": ["image_width", "image_height"], "responses": {"rendered_image": {"type": "str", "description": "Base64 encoded image data of the rendered image"}}}
{"api_name": "getOperatingSystemDetails", "api_description": "Retrieve detailed information about an operating system", "field": "Technology/Operating Systems", "parameters": {"os_name": {"type": "str", "description": "The name of the operating system (e.g., Windows, macOS, Linux)"}, "version": {"type": "str", "description": "The version of the operating system (e.g., 10, 11, Ubuntu 20.04)"}}, "required": ["os_name"], "responses": {"os_details": {"type": "str", "description": "Detailed information about the specified operating system"}}}
{"api_name": "runAlgorithm", "api_description": "Run a specified algorithm on a given dataset", "field": "Technology/Algorithms", "parameters": {"algorithm_name": {"type": "str", "description": "The name of the algorithm to run (e.g., K-means, Decision Tree, Neural Network)"}, "dataset": {"type": "str", "description": "The dataset on which the algorithm is to be run"}}, "required": ["algorithm_name", "dataset"], "responses": {"result": {"type": "str", "description": "The result generated by the algorithm"}}}
{"api_name": "generateRandomNumber", "api_description": "Generate a random number within a specified range", "field": "Technology/Algorithms", "parameters": {"minimum": {"type": "int", "description": "The minimum value of the range"}, "maximum": {"type": "int", "description": "The maximum value of the range"}}, "required": ["minimum", "maximum"], "responses": {"random_number": {"type": "int", "description": "A random number within the specified range"}}}
{"api_name": "getUserPreferences", "api_description": "Retrieve the user's preferences for human-computer interaction", "field": "Technology/Human-Computer Interaction", "parameters": {}, "required": [], "responses": {"preferences": {"type": "str", "description": "The user's preferences for human-computer interaction"}}}
{"api_name": "connectToWiFi", "api_description": "Connect to a WiFi network", "field": "Technology/Wireless Communication", "parameters": {"network_name": {"type": "str", "description": "The name of the WiFi network you want to connect to"}, "password": {"type": "str", "description": "The password for the WiFi network"}}, "required": ["network_name", "password"], "responses": {"success": {"type": "bool", "description": "A flag indicating whether the connection to the WiFi network was successful"}}}
{"api_name": "controlDevice", "api_description": "Control an embedded system device", "field": "Technology/Embedded Systems", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the embedded system"}, "device_name": {"type": "str", "description": "The name of the device to control"}, "action": {"type": "str", "description": "The action to perform on the device, such as 'on', 'off', or 'toggle'"}}, "required": ["device_id", "device_name", "action"], "responses": {"success": {"type": "bool", "description": "Indicates whether the device control action was successful"}, "message": {"type": "str", "description": "Additional information or error message"}}}
{"api_name": "searchGenes", "api_description": "Retrieve information about genes", "field": "Technology/Bioinformatics", "parameters": {"gene_name": {"type": "str", "description": "The name of the gene you want to search for"}, "organism": {"type": "str", "description": "The organism in which the gene is found (e.g., human, mouse, yeast)"}}, "required": ["gene_name"], "responses": {"gene_description": {"type": "str", "description": "The description of the gene"}, "sequence": {"type": "str", "description": "The DNA sequence of the gene"}}}
{"api_name": "simulateQuantumCircuit", "api_description": "Simulate a quantum circuit with a specified number of qubits", "field": "Technology/Quantum Computing", "parameters": {"num_qubits": {"type": "int", "description": "The number of qubits in the quantum circuit"}, "gate_sequence": {"type": "str", "description": "The sequence of quantum gates to apply to the circuit"}}, "required": ["num_qubits"], "responses": {"final_state": {"type": "str", "description": "The final state of the quantum circuit after applying the gate sequence"}}}
{"api_name": "fetchData", "api_description": "Retrieve big data information", "field": "Technology/Big Data", "parameters": {"dataset": {"type": "str", "description": "The name of the specific dataset you want to fetch (e.g., customer data, sales data)"}}, "required": ["dataset"], "responses": {"data": {"type": "str", "description": "The fetched data from the specified dataset"}}}
{"api_name": "getDataSize", "api_description": "Retrieve the size of big data", "field": "Technology/Big Data", "parameters": {"data": {"type": "str", "description": "The big data for which you want to retrieve the size"}}, "required": ["data"], "responses": {"size": {"type": "int", "description": "The size of the big data in bytes"}}}
{"api_name": "simulateHardware", "api_description": "Perform hardware simulation to validate design and identify potential issues", "field": "Technology/Hardware Design", "parameters": {"schematic": {"type": "str", "description": "The hardware schematic to simulate"}}, "required": ["schematic"], "responses": {"simulation_results": {"type": "str", "description": "Results of the hardware simulation"}}}
{"api_name": "getGraphicsCardInfo", "api_description": "Retrieve graphics card information", "field": "Technology/Hardware Design", "parameters": {"device_type": {"type": "str", "description": "The type of device (e.g., desktop, laptop, server)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the device"}, "graphics_card_model": {"type": "str", "description": "The model of the graphics card"}}, "required": ["device_type", "manufacturer", "graphics_card_model"], "responses": {"graphics_card_memory": {"type": "int", "description": "The amount of memory in the graphics card"}, "graphics_card_clock_speed": {"type": "int", "description": "The clock speed of the graphics card"}, "graphics_card_interface": {"type": "str", "description": "The interface used by the graphics card"}}}
{"api_name": "getHardwareSpecs", "api_description": "Retrieve hardware specifications of a device", "field": "Technology/Hardware Design", "parameters": {"device_name": {"type": "str", "description": "The name of the device for which you want to get hardware specifications (e.g., iPhone X, Samsung Galaxy S20)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the device (e.g., Apple, Samsung)"}}, "required": ["device_name"], "responses": {"processor": {"type": "str", "description": "The type and model of the processor in the device"}, "memory": {"type": "str", "description": "The amount of RAM and storage capacity in the device"}, "display": {"type": "str", "description": "The size and resolution of the display in the device"}}}
{"api_name": "adjustTemperature", "api_description": "Adjust the temperature of a control system", "field": "Technology/Control Systems", "parameters": {"system_id": {"type": "str", "description": "The ID of the control system"}, "temperature": {"type": "int", "description": "The desired temperature in Celsius"}}, "required": ["system_id", "temperature"], "responses": {"success": {"type": "bool", "description": "Indicates whether the temperature adjustment was successful"}, "message": {"type": "str", "description": "Additional information about the temperature adjustment"}}}
{"api_name": "setControlParameters", "api_description": "Set control parameters for a system", "field": "Technology/Control Systems", "parameters": {"system_name": {"type": "str", "description": "The name of the control system (e.g., HVAC, robotic arm)"}, "parameters": {"type": "str", "description": "The parameters to be set for the control system (e.g., temperature, speed)"}, "value": {"type": "float", "description": "The desired value for the parameter to be set (e.g., 25.5, 50.0, 0.75)"}}, "required": ["system_name", "parameters", "value"], "responses": {"success": {"type": "bool", "description": "Indicates if the parameters were successfully set"}}}
{"api_name": "createMobileApp", "api_description": "Create a new mobile app", "field": "Technology/Mobile App Development", "parameters": {"app_name": {"type": "str", "description": "The name of the app being created"}, "platform": {"type": "str", "description": "The targeted platform for the app development (e.g., iOS, Android)"}, "framework": {"type": "str", "description": "The framework to be used for app development (e.g., React Native, Flutter)"}}, "required": ["app_name", "platform"], "responses": {"success": {"type": "bool", "description": "Indicates whether the app creation was successful or not"}, "app_id": {"type": "int", "description": "The unique identifier assigned to the created app"}}}
{"api_name": "getVersion", "api_description": "Retrieve the version of a frontend technology library/framework", "field": "Technology/Frontend Development", "parameters": {"library": {"type": "str", "description": "The name of the library/framework (e.g., React, Angular, Vue)"}, "type": {"type": "str", "description": "Specify the type of version (e.g., major, minor, patch)"}}, "required": ["library"], "responses": {"version": {"type": "str", "description": "The version number of the specified library"}}}
{"api_name": "generateComponent", "api_description": "Generate a new component in a frontend technology library/framework", "field": "Technology/Frontend Development", "parameters": {"library": {"type": "str", "description": "The name of the library/framework (e.g., React, Angular, Vue)"}, "component_name": {"type": "str", "description": "The name of the component to be generated"}}, "required": ["library", "component_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the component was successfully generated"}}}
{"api_name": "getHTMLContent", "api_description": "Retrieve HTML content from a given URL", "field": "Technology/Frontend Development", "parameters": {"url": {"type": "str", "description": "The URL from which to retrieve HTML content"}}, "required": ["url"], "responses": {"html_content": {"type": "str", "description": "The HTML content retrieved from the specified URL"}}}
{"api_name": "validateHTML", "api_description": "Validate the syntax of HTML code", "field": "Technology/Frontend Development", "parameters": {"html_code": {"type": "str", "description": "The HTML code to be validated"}}, "required": ["html_code"], "responses": {"is_valid": {"type": "bool", "description": "Indicates whether the HTML code is valid or not"}}}
{"api_name": "compressHTML", "api_description": "Compress HTML code to reduce file size", "field": "Technology/Frontend Development", "parameters": {"html_code": {"type": "str", "description": "The HTML code to be compressed"}}, "required": ["html_code"], "responses": {"compressed_html": {"type": "str", "description": "The compressed HTML code"}}}
{"api_name": "minifyCSS", "api_description": "Minify CSS code to reduce file size", "field": "Technology/Frontend Development", "parameters": {"css_code": {"type": "str", "description": "The CSS code to be minified"}}, "required": ["css_code"], "responses": {"minified_css": {"type": "str", "description": "The minified CSS code"}}}
{"api_name": "getStyle", "api_description": "Get the value of a CSS property for a given HTML element", "field": "Technology/Frontend Development", "parameters": {"element": {"type": "str", "description": "The HTML element to retrieve the style from (e.g., '#header', '.container')"}, "property": {"type": "str", "description": "The CSS property to retrieve the value of (e.g., 'color', 'font-size')"}}, "required": ["element", "property"], "responses": {"value": {"type": "str", "description": "The value of the specified CSS property for the given HTML element"}}}
{"api_name": "addClass", "api_description": "Add a CSS class to a specified HTML element", "field": "Technology/Frontend Development", "parameters": {"element": {"type": "str", "description": "The HTML element to add a class to (e.g., '.container', '#header')"}, "class": {"type": "str", "description": "The CSS class to be added (e.g., 'active', 'highlight')"}}, "required": ["element", "class"], "responses": {"status": {"type": "str", "description": "Indicates whether the class was successfully added"}}}
{"api_name": "removeElement", "api_description": "Remove a specified HTML element from the DOM", "field": "Technology/Frontend Development", "parameters": {"element": {"type": "str", "description": "The HTML element to remove (e.g., '#header', '.container')"}}, "required": ["element"], "responses": {"status": {"type": "str", "description": "Indicates whether the element was successfully removed"}}}
{"api_name": "getHTML", "api_description": "Retrieve HTML code of a webpage", "field": "Technology/Frontend Development", "parameters": {"url": {"type": "str", "description": "The URL of the webpage from which you want to retrieve HTML code"}}, "required": ["url"], "responses": {"html_code": {"type": "str", "description": "HTML code of the specified webpage"}}}
{"api_name": "getCSS", "api_description": "Retrieve CSS code of a webpage", "field": "Technology/Frontend Development", "parameters": {"url": {"type": "str", "description": "The URL of the webpage from which you want to retrieve CSS code"}}, "required": ["url"], "responses": {"css_code": {"type": "str", "description": "CSS code of the specified webpage"}}}
{"api_name": "getJavaScript", "api_description": "Retrieve JavaScript code of a webpage", "field": "Technology/Frontend Development", "parameters": {"url": {"type": "str", "description": "The URL of the webpage from which you want to retrieve JavaScript code"}}, "required": ["url"], "responses": {"js_code": {"type": "str", "description": "JavaScript code of the specified webpage"}}}
{"api_name": "createUser", "api_description": "Create a new user in the backend system", "field": "Technology/Backend Development", "parameters": {"username": {"type": "str", "description": "The username of the user to be created"}, "email": {"type": "str", "description": "The email address of the user to be created"}, "password": {"type": "str", "description": "The password for the user account"}, "role": {"type": "str", "description": "The role of the user in the system (e.g., admin, user)"}}, "required": ["username", "email", "password"], "responses": {"success": {"type": "bool", "description": "Indicates whether the user creation was successful"}, "message": {"type": "str", "description": "A message indicating the result of the user creation"}}}
{"api_name": "loginUser", "api_description": "Authenticate a user in the backend system", "field": "Technology/Backend Development", "parameters": {"username": {"type": "str", "description": "The username of the user to be authenticated"}, "password": {"type": "str", "description": "The password for the user account"}}, "required": ["username", "password"], "responses": {"success": {"type": "bool", "description": "Indicates whether the user authentication was successful"}, "message": {"type": "str", "description": "A message indicating the result of the user authentication"}}}
{"api_name": "deleteUser", "api_description": "Delete an existing user from the backend system", "field": "Technology/Backend Development", "parameters": {"username": {"type": "str", "description": "The username of the user to be deleted", "example": "john_doe"}}, "required": ["username"], "responses": {"status": {"type": "str", "description": "The status of the user deletion process (e.g., success, failure)"}}}
{"api_name": "getSensorsData", "api_description": "Retrieve data from sensors in a cyber-physical system", "field": "Technology/Cyber-Physical Systems", "parameters": {"system_id": {"type": "str", "description": "The ID of the cyber-physical system from which to retrieve data"}, "sensor_type": {"type": "str", "description": "The type of sensor for which to retrieve data (e.g., temperature, humidity, pressure)"}, "time_range": {"type": "str", "description": "The time range for which to retrieve data (e.g., last hour, last day, last week)"}}, "required": ["system_id", "sensor_type"], "responses": {"data": {"type": "str", "description": "The retrieved sensor data as a string or JSON object"}}}
{"api_name": "deleteDataModel", "api_description": "Delete a specific data model from the data warehousing system", "field": "Technology/Data Warehousing", "parameters": {"system_id": {"type": "str", "description": "The ID of the data warehousing system"}, "user_id": {"type": "str", "description": "The ID of the user"}, "data_model_id": {"type": "str", "description": "The ID of the data model to be deleted"}}, "required": ["system_id", "user_id", "data_model_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the data model deletion was successful"}}}
{"api_name": "transcribeSpeech", "api_description": "Transcribe speech to text", "field": "Technology/Speech Recognition", "parameters": {"audio_file": {"type": "str", "description": "The audio file containing the speech for transcription"}, "language": {"type": "str", "description": "The language of the speech in the audio file (e.g., English, Spanish, French)"}}, "required": ["audio_file"], "responses": {"transcription": {"type": "str", "description": "The transcribed text of the speech"}}}
{"api_name": "getSpeechRecognition", "api_description": "Retrieve speech recognition information", "field": "Technology/Speech Recognition", "parameters": {"audio_file": {"type": "str", "description": "The audio file to be recognized"}, "language": {"type": "str", "description": "The language of the speech (e.g., English, Spanish, French)"}, "model": {"type": "str", "description": "The speech recognition model to be used"}}, "required": ["audio_file"], "responses": {"transcript": {"type": "str", "description": "The recognized transcript of the audio file"}, "confidence": {"type": "float", "description": "The confidence score of the recognition result"}}}
{"api_name": "analyzeSpeechEmotion", "api_description": "Analyzes the emotional tone of a speech", "field": "Technology/Speech Recognition", "parameters": {"audio_file": {"type": "str", "description": "Path or URL of the audio file you want to analyze"}, "language": {"type": "str", "description": "The language of the speech in the audio file (e.g., English, Spanish, French)"}}, "required": ["audio_file"], "responses": {"emotion": {"type": "str", "description": "The detected emotional tone of the speech (e.g., happy, sad, angry)"}}}
{"api_name": "identifySpeaker", "api_description": "Identifies the speaker in a speech recording", "field": "Technology/Speech Recognition", "parameters": {"audio_file": {"type": "str", "description": "Path or URL of the audio file with multiple speakers"}, "language": {"type": "str", "description": "The language spoken in the audio file (e.g., English, Spanish, French)"}}, "required": ["audio_file"], "responses": {"speaker": {"type": "str", "description": "The identified speaker in the audio"}}}
{"api_name": "applyOCR", "api_description": "Apply optical character recognition (OCR) to an image", "field": "Technology/Image Processing", "parameters": {"image": {"type": "str", "description": "The path or URL of the image to process"}, "language": {"type": "str", "description": "The language used for OCR (e.g., eng, spa, chi)"}, "whitelist": {"type": "str", "description": "Specify characters to whitelist during OCR (e.g., ABC123)"}, "blacklist": {"type": "str", "description": "Specify characters to blacklist during OCR (e.g., #$%&)"}, "confidence_threshold": {"type": "float", "description": "Minimum confidence threshold for OCR (e.g., 0.5 to 1.0)"}}, "required": ["image"], "responses": {"text": {"type": "str", "description": "The extracted text from the image"}}}
{"api_name": "rotateImage", "api_description": "Rotate an image by a specified angle", "field": "Technology/Image Processing", "parameters": {"image_path": {"type": "str", "description": "The path to the image file that needs to be rotated"}, "angle": {"type": "int", "description": "The angle (in degrees) by which the image should be rotated"}, "output_path": {"type": "str", "description": "The path where the rotated image will be saved"}}, "required": ["image_path", "angle"], "responses": {"rotated_image_path": {"type": "str", "description": "The path to the rotated image"}}}
{"api_name": "detectEdges", "api_description": "Detect edges in an image using a specific edge detection algorithm", "field": "Technology/Image Processing", "parameters": {"image_path": {"type": "str", "description": "The path to the image file in which edges need to be detected"}, "algorithm": {"type": "str", "description": "The specific edge detection algorithm to be used (e.g., Canny, Sobel)"}, "output_path": {"type": "str", "description": "The path where the edge-detected image will be saved"}}, "required": ["image_path", "algorithm"], "responses": {"edge_detected_image_path": {"type": "str", "description": "The path to the edge-detected image"}}}
{"api_name": "generateOTP", "api_description": "Generate a one-time password (OTP)", "field": "Technology/Computer Security", "parameters": {"length": {"type": "int", "description": "The length of the OTP"}, "validity": {"type": "int", "description": "The validity period of the OTP in minutes"}}, "required": ["length", "validity"], "responses": {"otp": {"type": "str", "description": "The generated OTP"}}}
{"api_name": "scanMalware", "api_description": "Scan a file for malware", "field": "Technology/Computer Security", "parameters": {"file_path": {"type": "str", "description": "The path of the file to be scanned"}}, "required": ["file_path"], "responses": {"is_malware": {"type": "bool", "description": "A boolean indicating whether the file is detected as malware or not"}}}
{"api_name": "generateSecurePassword", "api_description": "Generate a secure password with specified length and complexity", "field": "Technology/Computer Security", "parameters": {"length": {"type": "int", "description": "The length of the generated password"}, "complexity": {"type": "str", "description": "The complexity level of the generated password (e.g., low, medium, high)"}}, "required": ["length", "complexity"], "responses": {"password": {"type": "str", "description": "The generated secure password"}}}
{"api_name": "validateDigitalSignature", "api_description": "Validate the authenticity and integrity of a digital signature using a public key", "field": "Technology/Computer Security", "parameters": {"signature": {"type": "str", "description": "The digital signature to be validated"}, "public_key": {"type": "str", "description": "The public key used for validation"}}, "required": ["signature", "public_key"], "responses": {"valid": {"type": "bool", "description": "The validity of the digital signature"}}}
{"api_name": "getUserExperience", "api_description": "Retrieve user experience information", "field": "Technology/User Experience Design", "parameters": {"user_id": {"type": "int", "description": "The ID of the user for which you want to retrieve user experience"}, "interface_type": {"type": "str", "description": "The type of interface experienced by the user (e.g., mobile app, web page)"}, "feedback_score": {"type": "float", "description": "The satisfaction score given by the user (e.g., 1.0, 2.5, 5.0)"}}, "required": ["user_id", "interface_type"], "responses": {"user_experience": {"type": "str", "description": "The overall user experience based on the provided information"}, "feedback": {"type": "str", "description": "Any additional feedback provided by the user"}}}
{"api_name": "compileCode", "api_description": "Compile source code into machine code", "field": "Technology/Compiler Design", "parameters": {"source_code": {"type": "str", "description": "The source code that needs to be compiled"}, "target_machine": {"type": "str", "description": "The target machine architecture for which the code should be compiled (e.g., x86, ARM, MIPS)"}, "optimization_level": {"type": "int", "description": "The level of optimization to be applied during compilation (e.g., 0, 1, 2)"}, "flags": {"type": "str", "description": "Additional compilation flags to be used (e.g., -Wall, -O3)"}}, "required": ["source_code"], "responses": {"machine_code": {"type": "str", "description": "The generated machine code"}}}
{"api_name": "runParallelTask", "api_description": "Execute a task using parallel computing techniques", "field": "Technology/Parallel Computing", "parameters": {"task": {"type": "str", "description": "The task to be executed in parallel"}}, "required": ["task"], "responses": {"result": {"type": "str", "description": "The result of the parallel task execution"}}}
{"api_name": "estimateParallelSpeed", "api_description": "Estimate the speedup achieved through parallel computing", "field": "Technology/Parallel Computing", "parameters": {"num_processors": {"type": "int", "description": "The number of processors used for parallel computation"}, "execution_time": {"type": "float", "description": "The execution time for the original serial computation in seconds"}}, "required": ["num_processors", "execution_time"], "responses": {"speedup": {"type": "float", "description": "The speedup achieved through parallel computing"}}}
{"api_name": "analyzeLoadBalancing", "api_description": "Analyze the load balancing of a parallel computing system", "field": "Technology/Parallel Computing", "parameters": {"workload_distribution": {"type": "str", "description": "The distribution of workload among processors (e.g., uniform, non-uniform)"}, "processor_utilization": {"type": "float", "description": "The average processor utilization in percentage"}}, "required": ["workload_distribution", "processor_utilization"], "responses": {"load_balancing": {"type": "str", "description": "The analysis of load balancing in the parallel computing system"}}}
{"api_name": "getParallelComputingInfo", "api_description": "Retrieve information about parallel computing", "field": "Technology/Parallel Computing", "parameters": {"application": {"type": "str", "description": "The specific application or task for parallel computing (e.g., image processing, scientific simulations)"}, "input_data": {"type": "str", "description": "The input data required for parallel computing"}, "num_processors": {"type": "int", "description": "The desired number of processors for parallel computing"}}, "required": ["application", "input_data"], "responses": {"speedup": {"type": "float", "description": "The speedup achieved by parallel computing"}, "efficiency": {"type": "float", "description": "The efficiency of parallel computing"}, "output_data": {"type": "str", "description": "The output data obtained from parallel computing"}, "runtime": {"type": "float", "description": "The time taken to complete the parallel computing task"}}}
{"api_name": "runParallelProgram", "api_description": "Execute a parallel computing program", "field": "Technology/Parallel Computing", "parameters": {"program": {"type": "str", "description": "The program code or file to be executed"}, "num_threads": {"type": "int", "description": "The number of parallel threads to be used (e.g., 2, 4, 8)"}}, "required": ["program"], "responses": {"result": {"type": "str", "description": "The output or result of the parallel program execution"}}}
{"api_name": "checkLogin", "api_description": "Check if the user login credentials are valid", "field": "Technology/Internet Security", "parameters": {"username": {"type": "str", "description": "The username for login"}, "password": {"type": "str", "description": "The password for login"}}, "required": ["username", "password"], "responses": {"valid": {"type": "bool", "description": "Indicates if the login credentials are valid"}}}
{"api_name": "hashData", "api_description": "Hash a piece of data", "field": "Technology/Internet Security", "parameters": {"data": {"type": "str", "description": "The data to be hashed"}, "hash_algorithm": {"type": "str", "description": "The hashing algorithm to be used (e.g., MD5, SHA-256)"}}, "required": ["data"], "responses": {"hashed_data": {"type": "str", "description": "The hashed data"}}}
{"api_name": "checkWebsiteSecurity", "api_description": "Check the security of a website", "field": "Technology/Internet Security", "parameters": {"website_url": {"type": "str", "description": "The URL of the website to check"}}, "required": ["website_url"], "responses": {"security_score": {"type": "float", "description": "The security score of the website"}}}
{"api_name": "getImagingData", "api_description": "Retrieve imaging data from bioengineering", "field": "Technology/Bioengineering", "parameters": {"subject_id": {"type": "str", "description": "The ID of the subject from which you want to retrieve imaging data"}, "modality": {"type": "str", "description": "Type of imaging modality (e.g., MRI, CT, PET)"}, "image_type": {"type": "str", "description": "Type of image to retrieve (e.g., anatomical, functional)"}, "resolution": {"type": "str", "description": "Desired resolution of the images (e.g., high, low)"}, "region_of_interest": {"type": "str", "description": "Specific region of interest within the subject (e.g., brain, heart)"}, "timepoint": {"type": "str", "description": "Timepoint of the imaging data (e.g., baseline, follow-up)"}}, "required": ["subject_id", "modality"], "responses": {"imaging_data": {"type": "str", "description": "Retrieved imaging data in the specified modality and format"}}}
{"api_name": "designPrimer", "api_description": "Design primers for PCR amplification of a specific gene", "field": "Technology/Bioengineering", "parameters": {"gene_name": {"type": "str", "description": "The name of the gene to be amplified"}}, "required": ["gene_name"], "responses": {"forward_primer": {"type": "str", "description": "The designed forward primer sequence"}, "reverse_primer": {"type": "str", "description": "The designed reverse primer sequence"}}}
{"api_name": "optimize", "api_description": "Optimize a given function using genetic algorithms", "field": "Technology/Genetic Algorithms", "parameters": {"function": {"type": "str", "description": "The function to be optimized"}, "population_size": {"type": "int", "description": "The size of the population (e.g., 100, 200, 500)"}, "generations": {"type": "int", "description": "The number of generations to evolve the population (e.g., 50, 100, 200)"}, "mutation_rate": {"type": "float", "description": "The probability of mutation for each individual (e.g., 0.01, 0.05, 0.1)"}}, "required": ["function"], "responses": {"optimized_solution": {"type": "str", "description": "The optimized solution for the given function"}, "fitness_score": {"type": "float", "description": "The fitness score of the optimized solution"}}}
{"api_name": "geneticAlgorithm", "api_description": "Run a genetic algorithm to optimize a given problem", "field": "Technology/Genetic Algorithms", "parameters": {"problem": {"type": "str", "description": "The problem to be optimized (e.g., TSP - Traveling Salesman Problem, Knapsack Problem)"}, "population_size": {"type": "int", "description": "The size of the population in the genetic algorithm"}, "generations": {"type": "int", "description": "The number of generations for the algorithm to run"}, "crossover_rate": {"type": "float", "description": "The rate at which crossover occurs during reproduction (e.g., 0.8)"}, "mutation_rate": {"type": "float", "description": "The rate at which mutation occurs during reproduction (e.g., 0.1)"}}, "required": ["problem", "population_size", "generations"], "responses": {"optimized_solution": {"type": "str", "description": "The optimized solution to the given problem"}, "fitness_score": {"type": "float", "description": "The fitness score of the optimized solution"}}}
{"api_name": "analyzeBrainActivity", "api_description": "Analyze brain activity data using computational neuroscience techniques", "field": "Technology/Computational Neuroscience", "parameters": {"data": {"type": "str", "description": "The brain activity data to be analyzed"}, "method": {"type": "str", "description": "The computational neuroscience method to be applied (e.g., spike sorting, neural network modeling)"}, "parameters": {"type": "str", "description": "Additional parameters specific to the chosen method (e.g., time window, network architecture)"}}, "required": ["data", "method"], "responses": {"results": {"type": "str", "description": "The results of the computational neuroscience analysis"}, "plots": {"type": "str", "description": "Visualizations (plots) of the analyzed brain activity"}}}
{"api_name": "getRobotCapabilities", "api_description": "Retrieve the capabilities of a humanoid robot", "field": "Technology/Humanoid Robotics", "parameters": {"robot_name": {"type": "str", "description": "The name of the humanoid robot you want to retrieve capabilities for (e.g., Pepper, Nao, Atlas)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the robot (e.g., SoftBank Robotics, Boston Dynamics)"}}, "required": ["robot_name"], "responses": {"capabilities": {"type": "str", "description": "The capabilities of the humanoid robot specified"}}}
{"api_name": "createRobot", "api_description": "Create a humanoid robot", "field": "Technology/Humanoid Robotics", "parameters": {"name": {"type": "str", "description": "The name of the robot"}, "height": {"type": "float", "description": "The height of the robot in meters"}, "weight": {"type": "float", "description": "The weight of the robot in kilograms"}, "gender": {"type": "str", "description": "The gender of the robot (e.g., male, female)"}, "language": {"type": "str", "description": "The primary language that the robot understands and speaks"}}, "required": ["name"], "responses": {"robot_id": {"type": "str", "description": "The unique identifier of the created robot"}}}
{"api_name": "getCADFile", "api_description": "Retrieve the CAD file for a given design", "field": "Technology/Computer-Assisted Design (CAD)", "parameters": {"design_id": {"type": "str", "description": "The unique identifier of the design"}}, "required": ["design_id"], "responses": {"file_url": {"type": "str", "description": "The URL of the CAD file"}}}
{"api_name": "updateDesign", "api_description": "Update the details of a design", "field": "Technology/Computer-Assisted Design (CAD)", "parameters": {"design_id": {"type": "str", "description": "The unique identifier of the design"}, "new_details": {"type": "str", "description": "The updated details of the design"}}, "required": ["design_id", "new_details"], "responses": {"success": {"type": "bool", "description": "Indicates whether the update was successful or not"}}}
{"api_name": "generateCADPreview", "api_description": "Generate a preview image of a CAD design", "field": "Technology/Computer-Assisted Design (CAD)", "parameters": {"design_id": {"type": "str", "description": "The unique identifier of the design"}}, "required": ["design_id"], "responses": {"preview_image_url": {"type": "str", "description": "The URL of the preview image"}}}
{"api_name": "getLegislativeAffairs", "api_description": "Retrieve legislative affairs information", "field": "Government/Legislative affairs", "parameters": {"country": {"type": "str", "description": "The country for which you want to get legislative affairs information (e.g., United States, United Kingdom, France)"}, "year": {"type": "int", "description": "The year for which you want to get legislative affairs information (e.g., 2021, 2022, 2023)"}}, "required": ["country"], "responses": {"legislation_count": {"type": "int", "description": "The total count of legislations passed in the specified country for the specified year"}, "legislation_details": {"type": "str", "description": "Detailed information about the legislations passed in the specified country for the specified year"}}}
{"api_name": "getExecutiveOffice", "api_description": "Retrieve information about the executive office", "field": "Government/Executive office", "parameters": {}, "required": [], "responses": {"person_in_charge": {"type": "str", "description": "The person in charge of the executive office"}, "contact": {"type": "str", "description": "Contact information for the executive office"}}}
{"api_name": "getPublicPolicy", "api_description": "Retrieve public policy information", "field": "Government/Public policy", "parameters": {"country": {"type": "str", "description": "The country for which you want to get public policy information (e.g., United States, Germany, Australia)"}, "category": {"type": "str", "description": "The category of public policy (e.g., Education, Health, Economy)"}, "year": {"type": "int", "description": "The year for which you want to get public policy information"}}, "required": ["country"], "responses": {"policy_info": {"type": "str", "description": "Information about the public policy in the specified country and category"}, "source": {"type": "str", "description": "The source of the policy information"}}}
{"api_name": "getForeignAffairs", "api_description": "Retrieve information about foreign affairs of a country", "field": "Government/Foreign affairs", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve foreign affairs information (e.g., United States, China, Russia)"}, "topic": {"type": "str", "description": "Specify a topic related to foreign affairs (e.g., trade agreements, diplomatic relations, international conflicts)"}, "year": {"type": "int", "description": "Specify a year to filter the information related to foreign affairs"}}, "required": ["country"], "responses": {"information": {"type": "str", "description": "Information related to foreign affairs of the specified country and topic"}}}
{"api_name": "getEmbassyInfo", "api_description": "Retrieve information about embassies", "field": "Government/Foreign affairs", "parameters": {"country": {"type": "str", "description": "The country for which you want to get embassy information (e.g., China, USA, United Kingdom)"}, "embassy_type": {"type": "str", "description": "Specify the type of embassy (e.g., diplomatic, consular)"}}, "required": ["country"], "responses": {"embassy_name": {"type": "str", "description": "The name of the embassy"}, "address": {"type": "str", "description": "The address of the embassy"}, "phone": {"type": "str", "description": "The contact number of the embassy"}, "website": {"type": "str", "description": "The website of the embassy"}}}
{"api_name": "getVotingSystem", "api_description": "Retrieve information about the voting system", "field": "Government/Political science", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the voting system"}}, "required": ["country"], "responses": {"voting_system": {"type": "str", "description": "The voting system used in the specified country"}}}
{"api_name": "getPoliticalHistory", "api_description": "Retrieve information about the political history", "field": "Government/Political science", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve the political history"}}, "required": ["country"], "responses": {"history": {"type": "str", "description": "The political history of the specified country"}}}
{"api_name": "getPoliticalSystems", "api_description": "Retrieve information about political systems", "field": "Government/Political science", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get information (e.g., United States, Germany, Japan)"}, "year": {"type": "int", "description": "The year for which you want to get information (e.g., 2021, 2010, 1998)"}}, "required": ["country"], "responses": {"political_system": {"type": "str", "description": "The political system of the specified country"}, "governing_party": {"type": "str", "description": "The governing party of the specified country"}}}
{"api_name": "getElectionResults", "api_description": "Retrieve election results", "field": "Government/Political science", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get election results (e.g., Canada, France, Australia)"}, "year": {"type": "int", "description": "The year of the election (e.g., 2022, 2019, 2016)"}}, "required": ["country"], "responses": {"winner_party": {"type": "str", "description": "The winning party of the election"}, "votes_percentage": {"type": "float", "description": "The percentage of votes obtained by the winning party"}}}
{"api_name": "getPublicDebt", "api_description": "Retrieve information on public debt of a country", "field": "Government/Public finance", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get public debt information (e.g., United States, Germany, Japan)"}, "year": {"type": "int", "description": "The year for which you want to retrieve public debt information"}}, "required": ["country"], "responses": {"debt": {"type": "float", "description": "The amount of public debt in the specified country for the specified year"}, "currency": {"type": "str", "description": "The currency in which the public debt amount is provided"}}}
{"api_name": "getGovernmentBudget", "api_description": "Retrieve the budget information of a government", "field": "Government/Public finance", "parameters": {"year": {"type": "int", "description": "The year for which you want to get the budget information"}}, "required": ["year"], "responses": {"budget": {"type": "float", "description": "The budget for the specified year"}}}
{"api_name": "getBudget", "api_description": "Retrieve budget information for a specific year", "field": "Government/Public finance", "parameters": {"year": {"type": "int", "description": "The year for which you want to get the budget information"}}, "required": ["year"], "responses": {"budget": {"type": "float", "description": "The budget for the specified year"}}}
{"api_name": "searchCase", "api_description": "Search for information about a specific court case", "field": "Government/Judicial system", "parameters": {"case_number": {"type": "str", "description": "The unique identifier of the court case (e.g., CR-2021-12345)"}, "court_name": {"type": "str", "description": "The name of the court where the case is being heard (e.g., Supreme Court, District Court)"}, "judge_name": {"type": "str", "description": "The name of the judge handling the case"}, "parties_involved": {"type": "str", "description": "The names of the parties involved in the case"}, "case_type": {"type": "str", "description": "The type of the court case (e.g., criminal, civil)"}, "filing_date": {"type": "str", "description": "The date when the case was filed (e.g., 2021-01-01)"}, "status": {"type": "str", "description": "The current status of the court case"}}, "required": ["case_number"], "responses": {"case_information": {"type": "str", "description": "Detailed information about the court case"}, "case_status": {"type": "str", "description": "The current status of the court case"}, "court_location": {"type": "str", "description": "The location of the court where the case is being heard"}}}
{"api_name": "getLegalCaseInfo", "api_description": "Retrieve information about a legal case", "field": "Government/Judicial system", "parameters": {"case_number": {"type": "str", "description": "The unique number assigned to the legal case"}, "court": {"type": "str", "description": "The name of the court handling the case (e.g., Supreme Court, District Court)"}, "case_type": {"type": "str", "description": "The type of the legal case (e.g., criminal, civil)"}, "parties_involved": {"type": "str", "description": "The parties involved in the case (e.g., plaintiff, defendant)"}}, "required": ["case_number"], "responses": {"case_status": {"type": "str", "description": "The current status of the legal case (e.g., pending, closed)"}, "court_date": {"type": "str", "description": "The date of the next court hearing in the case"}, "judge_assigned": {"type": "str", "description": "The name of the judge assigned to the case"}}}
{"api_name": "getThreatLevel", "api_description": "Retrieve the current threat level for national security", "field": "Government/National security", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the national security threat level"}}, "required": ["country"], "responses": {"threat_level": {"type": "int", "description": "The current threat level for national security in the specified country"}}}
{"api_name": "getNationalSecurityLevel", "api_description": "Retrieve the national security level of a country", "field": "Government/National security", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get the national security level (e.g., United States, China, United Kingdom)"}, "year": {"type": "int", "description": "The year for which you want to get the national security level (e.g., 2020, 2021)"}}, "required": ["country"], "responses": {"security_level": {"type": "str", "description": "The national security level of the specified country"}}}
{"api_name": "getLaborPolicy", "api_description": "Retrieve information about labor and employment policies", "field": "Government/Labor and employment policy", "parameters": {"country": {"type": "str", "description": "The country for which you want to get labor and employment policy information (e.g., United States, Germany, Japan)"}}, "required": ["country"], "responses": {"policy_summary": {"type": "str", "description": "A summary of the labor and employment policy in the specified country"}, "policy_details": {"type": "str", "description": "Detailed information about specific labor and employment policies"}}}
{"api_name": "getLaborEmploymentPolicy", "api_description": "Retrieve labor and employment policies", "field": "Government/Labor and employment policy", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve labor and employment policies (e.g., United States, Germany, Australia)"}, "year": {"type": "int", "description": "The year for which you want the policies (e.g., 2021, 2022, 2023)"}, "policy_type": {"type": "str", "description": "Specify the type of labor and employment policy (e.g., minimum wage, working hours, maternity leave)"}, "industry": {"type": "str", "description": "Specify the industry for which you want the policies (e.g., IT, healthcare, construction)"}}, "required": ["country"], "responses": {"policies": {"type": "str", "description": "The labor and employment policies for the specified country, year, policy type, and industry"}}}
{"api_name": "getEconomicPolicy", "api_description": "Retrieve information on economic policies", "field": "Government/Economic policy", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the economic policy (e.g., United States, China, Germany)"}, "year": {"type": "int", "description": "The desired year for economic policy (e.g., 2021, 2022, 2023)"}}, "required": ["country"], "responses": {"policy": {"type": "str", "description": "The economic policy implemented by the specified country"}, "year": {"type": "int", "description": "The year in which the economic policy was implemented"}}}
{"api_name": "getSocialWelfarePolicy", "api_description": "Retrieve social welfare policy information", "field": "Government/Social welfare policy", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve the social welfare policy information (e.g., USA, Germany, Australia)"}}, "required": ["country"], "responses": {"policy": {"type": "str", "description": "The social welfare policy of the specified country"}}}
{"api_name": "getWelfareBenefits", "api_description": "Retrieve information about welfare benefits", "field": "Government/Social welfare policy", "parameters": {"country": {"type": "str", "description": "The country for which you want to get welfare benefits information (e.g., USA, UK, Australia)"}}, "required": ["country"], "responses": {"benefits": {"type": "str", "description": "A list of different welfare benefits available in the specified country"}}}
{"api_name": "getCrimeRate", "api_description": "Retrieve the crime rate information for a specific location", "field": "Government/Criminal justice system", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the crime rate (e.g., New York City, Los Angeles, Chicago)"}}, "required": ["location"], "responses": {"crime_rate": {"type": "float", "description": "The crime rate at the specified location"}, "unit": {"type": "str", "description": "The unit of crime rate (e.g., per 100,000 people, per square mile)"}}}
{"api_name": "getCriminalRecord", "api_description": "Retrieve criminal record information of a person", "field": "Government/Criminal justice system", "parameters": {"name": {"type": "str", "description": "The name of the person whose criminal record is required"}}, "required": ["name"], "responses": {"criminal_record": {"type": "str", "description": "The criminal record of the specified person"}}}
{"api_name": "getImmigrationPolicy", "api_description": "Retrieve information about immigration policies", "field": "Government/Immigration policy", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the immigration policy (e.g., USA, Canada, Australia)"}, "category": {"type": "str", "description": "Specify a category of immigration policy (e.g., work visa, student visa, family reunification)"}}, "required": ["country"], "responses": {"policy": {"type": "str", "description": "The immigration policy of the specified country for the given category"}}}
{"api_name": "updateUrbanPlan", "api_description": "Update urban planning information", "field": "Government/Urban planning", "parameters": {"city": {"type": "str", "description": "The city for which you want to update the urban planning information (e.g., New York, Tokyo, London)"}, "new_plan": {"type": "str", "description": "The new urban planning details for the specified city"}}, "required": ["city", "new_plan"], "responses": {"success": {"type": "bool", "description": "Indicates whether the urban planning information was successfully updated"}}}
{"api_name": "getGovernmentTechnology", "api_description": "Retrieve information on government technology initiatives", "field": "Government/Government technology", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information on government technology initiatives (e.g., United States, United Kingdom, Canada)"}}, "required": ["country"], "responses": {"technology_initiatives": {"type": "str", "description": "The government technology initiatives currently implemented by the specified country"}}}
{"api_name": "getEthicsReports", "api_description": "Retrieve ethics reports related to government officials", "field": "Government/Government ethics and oversight", "parameters": {"official_name": {"type": "str", "description": "The name of the government official for whom you want to retrieve ethics reports"}, "year": {"type": "int", "description": "The year of the ethics report (e.g., 2020, 2021, 2022)"}, "agency": {"type": "str", "description": "The government agency responsible for overseeing ethics (e.g., Federal Ethics Commission, State Ethics Board)"}}, "required": ["official_name"], "responses": {"report": {"type": "str", "description": "The ethics report for the specified government official for the given year"}, "agency": {"type": "str", "description": "The government agency responsible for oversight"}}}
{"api_name": "calculateThrust", "api_description": "Calculate the thrust of a rocket engine", "field": "Engineering/Aerospace engineering", "parameters": {"engine_type": {"type": "str", "description": "The type of rocket engine (e.g., liquid, solid, hybrid)"}, "throttle": {"type": "float", "description": "The throttle setting of the engine (between 0.0 and 1.0)"}, "altitude": {"type": "int", "description": "The altitude at which the thrust is to be calculated (in meters)"}, "velocity": {"type": "int", "description": "The velocity of the rocket (in meters per second)"}}, "required": ["engine_type", "throttle", "altitude"], "responses": {"thrust": {"type": "float", "description": "The calculated thrust of the rocket engine (in Newtons)"}}}
{"api_name": "analyzeElectrocardiogram", "api_description": "Analyze an electrocardiogram signal", "field": "Engineering/Biomedical engineering", "parameters": {"ecg_signal": {"type": "str", "description": "The electrocardiogram signal in a specified format"}}, "required": ["ecg_signal"], "responses": {"heart_rate": {"type": "int", "description": "The heart rate derived from the electrocardiogram"}, "heart_rhythm": {"type": "str", "description": "The rhythm of the heart from the electrocardiogram"}}}
{"api_name": "simulateBiomechanics", "api_description": "Simulate biomechanics of a human body part", "field": "Engineering/Biomedical engineering", "parameters": {"body_part": {"type": "str", "description": "The specific body part to simulate (e.g., ankle, knee, shoulder)"}, "force": {"type": "float", "description": "The applied force in N"}, "angle": {"type": "float", "description": "The angle of movement in degrees"}}, "required": ["body_part", "force", "angle"], "responses": {"displacement": {"type": "float", "description": "The resulting displacement of the body part"}, "stress": {"type": "float", "description": "The stress experienced by the body part"}}}
{"api_name": "calculateMassTransferRate", "api_description": "Calculate the mass transfer rate in a chemical process", "field": "Engineering/Chemical engineering", "parameters": {"substance": {"type": "str", "description": "The name of the substance for which mass transfer rate needs to be calculated"}, "concentration_difference": {"type": "float", "description": "The concentration difference of the substance"}, "area": {"type": "float", "description": "The area through which mass is being transferred"}}, "required": ["substance", "concentration_difference", "area"], "responses": {"mass_transfer_rate": {"type": "float", "description": "The mass transfer rate of the substance in the given chemical process"}}}
{"api_name": "balanceChemicalEquation", "api_description": "Balance a chemical equation", "field": "Engineering/Chemical engineering", "parameters": {"equation": {"type": "str", "description": "The unbalanced chemical equation (e.g., H2 + O2 -> H2O)"}}, "required": ["equation"], "responses": {"balanced_equation": {"type": "str", "description": "The balanced chemical equation"}}}
{"api_name": "calculateSoilBearingCapacity", "api_description": "Calculate the bearing capacity of the soil at a given location", "field": "Engineering/Civil engineering", "parameters": {"location": {"type": "str", "description": "The location for which you want to calculate the soil bearing capacity (e.g., city name, coordinates)"}, "soil_type": {"type": "str", "description": "The type of soil at the location (e.g., clay, sand, silt)"}, "depth": {"type": "float", "description": "The depth at which the bearing capacity is to be calculated in meters"}}, "required": ["location", "soil_type", "depth"], "responses": {"bearing_capacity": {"type": "float", "description": "The soil bearing capacity at the specified location and depth in kilopascals"}}}
{"api_name": "calculateStrength", "api_description": "Calculate the strength of a structure", "field": "Engineering/Civil engineering", "parameters": {"material": {"type": "str", "description": "The material used for the structure (e.g., concrete, steel)"}, "dimensions": {"type": "str", "description": "The dimensions of the structure (e.g., length, width, height)"}, "load": {"type": "float", "description": "The load applied to the structure in kN"}}, "required": ["material", "dimensions", "load"], "responses": {"strength": {"type": "float", "description": "The strength of the structure in kN"}}}
{"api_name": "calculateFlops", "api_description": "Calculate the number of floating point operations per second of a computer system", "field": "Engineering/Computer engineering", "parameters": {"cpu_type": {"type": "str", "description": "The type of CPU used in the system (e.g., Intel i7, AMD Ryzen)"}, "cpu_speed": {"type": "float", "description": "The operating speed of the CPU in GHz"}, "cpu_cores": {"type": "int", "description": "The number of cores in the CPU"}}, "required": ["cpu_type", "cpu_speed", "cpu_cores"], "responses": {"flops": {"type": "float", "description": "The number of floating point operations per second that the computer system can perform"}}}
{"api_name": "convertBinaryToDecimal", "api_description": "Convert a binary number to decimal", "field": "Engineering/Computer engineering", "parameters": {"binary_number": {"type": "str", "description": "A binary number to convert to decimal (e.g., '10101')"}}, "required": ["binary_number"], "responses": {"decimal_number": {"type": "int", "description": "The decimal representation of the binary number"}}}
{"api_name": "checkPalindrome", "api_description": "Check if a given string is a palindrome", "field": "Engineering/Computer engineering", "parameters": {"text": {"type": "str", "description": "A string to check if it is a palindrome (e.g., 'radar')"}}, "required": ["text"], "responses": {"is_palindrome": {"type": "bool", "description": "A boolean indicating if the given string is a palindrome"}}}
{"api_name": "encryptText", "api_description": "Encrypt a given text using a specified encryption algorithm", "field": "Engineering/Computer engineering", "parameters": {"text": {"type": "str", "description": "The text to encrypt (e.g., 'hello world')"}, "algorithm": {"type": "str", "description": "The encryption algorithm to use (e.g., 'AES', 'DES', 'RSA')"}}, "required": ["text", "algorithm"], "responses": {"encrypted_text": {"type": "str", "description": "The encrypted text"}}}
{"api_name": "retrieveSystemInfo", "api_description": "Retrieve detailed information about a computer system", "field": "Engineering/Computer engineering", "parameters": {"system_id": {"type": "str", "description": "The unique identifier of the computer system (e.g., ABC123)"}, "include_hardware": {"type": "bool", "description": "Flag to indicate whether to include detailed hardware information (true/false)"}}, "required": ["system_id"], "responses": {"system_name": {"type": "str", "description": "The name of the computer system"}, "system_type": {"type": "str", "description": "The type of the computer system (e.g., laptop, desktop)"}, "processor": {"type": "str", "description": "The processor model of the computer system"}, "memory": {"type": "str", "description": "The amount of memory in the computer system"}, "storage": {"type": "str", "description": "The storage capacity of the computer system"}, "hardware_info": {"type": "str", "description": "Detailed hardware information (only included if 'include_hardware' is set to true)"}}}
{"api_name": "calculateCurrent", "api_description": "Calculate the current flowing through a circuit", "field": "Engineering/Electrical engineering", "parameters": {"voltage": {"type": "float", "description": "The voltage supplied to the circuit in volts (e.g., 220V, 120V)"}, "resistance": {"type": "float", "description": "The resistance of the circuit in ohms (e.g., 10Ω, 20Ω)"}}, "required": ["voltage", "resistance"], "responses": {"current": {"type": "float", "description": "The current flowing through the circuit in amperes"}}}
{"api_name": "estimateWaterDemand", "api_description": "Estimate the water demand for a given population", "field": "Engineering/Environmental engineering", "parameters": {"population": {"type": "int", "description": "The population for which you want to estimate the water demand"}}, "required": ["population"], "responses": {"water_demand": {"type": "float", "description": "The estimated water demand in liters per day"}}}
{"api_name": "calculateGreenhouseGasEmissions", "api_description": "Calculate the greenhouse gas emissions for a given activity", "field": "Engineering/Environmental engineering", "parameters": {"activity": {"type": "str", "description": "The activity for which you want to calculate greenhouse gas emissions (e.g., driving a car, manufacturing a product)"}}, "required": ["activity"], "responses": {"emissions": {"type": "float", "description": "The greenhouse gas emissions in metric tons CO2 equivalent"}}}
{"api_name": "calculateNoiseLevels", "api_description": "Calculate the noise levels at a given location", "field": "Engineering/Environmental engineering", "parameters": {"location": {"type": "str", "description": "The location for which you want to calculate the noise levels (e.g., city center, residential area)"}}, "required": ["location"], "responses": {"noise_levels": {"type": "float", "description": "The noise levels in decibels (dB) at the specified location"}}}
{"api_name": "estimateWaterConsumption", "api_description": "Estimate the water consumption for a specific process or activity", "field": "Engineering/Environmental engineering", "parameters": {"process": {"type": "str", "description": "The specific process or activity for which you want to estimate water consumption (e.g., irrigation, industrial cooling, household usage)"}, "duration": {"type": "int", "description": "The duration of the process or activity in minutes"}}, "required": ["process"], "responses": {"water_consumption": {"type": "float", "description": "The estimated water consumption for the process or activity in liters"}}}
{"api_name": "calculateWorkstationEfficiency", "api_description": "Calculate the efficiency of a workstation", "field": "Engineering/Industrial engineering", "parameters": {"production_rate": {"type": "float", "description": "The production rate of the workstation (e.g., 100 units per hour)"}, "labor_hours": {"type": "int", "description": "The total labor hours worked in a given time period (e.g., 480 hours)"}, "units_produced": {"type": "int", "description": "The total number of units produced in the given time period"}}, "required": ["production_rate", "labor_hours", "units_produced"], "responses": {"efficiency": {"type": "float", "description": "The efficiency of the workstation"}}}
{"api_name": "optimizeProduction", "api_description": "Optimize production process and improve efficiency", "field": "Engineering/Industrial engineering", "parameters": {"production_lines": {"type": "int", "description": "Number of production lines in the plant"}, "workers": {"type": "int", "description": "Number of workers on each production line"}, "target": {"type": "str", "description": "Production target to be achieved (e.g., units per hour, total units per day)"}}, "required": ["production_lines", "workers", "target"], "responses": {"optimized_process": {"type": "str", "description": "Description of the optimized production process"}, "improved_efficiency": {"type": "float", "description": "Percentage of efficiency improvement"}}}
{"api_name": "calculateCriticality", "api_description": "Calculate the criticality of a nuclear reactor", "field": "Engineering/Nuclear engineering", "parameters": {"reactor_type": {"type": "str", "description": "The type of nuclear reactor (e.g., pressurized water reactor, boiling water reactor)"}, "fuel_type": {"type": "str", "description": "The type of fuel used in the reactor (e.g., uranium-235, plutonium-239)"}, "neutron_flux": {"type": "float", "description": "The neutron flux in the reactor core (in neutron/cm^2/sec)"}}, "required": ["reactor_type", "fuel_type", "neutron_flux"], "responses": {"criticality": {"type": "str", "description": "The criticality state of the reactor (subcritical, critical, supercritical)"}}}
{"api_name": "getReservoirData", "api_description": "Retrieve data related to petroleum reservoirs", "field": "Engineering/Petroleum engineering", "parameters": {"reservoir_name": {"type": "str", "description": "The name of the petroleum reservoir (e.g., XYZ field, ABC well)"}}, "required": ["reservoir_name"], "responses": {"pressure": {"type": "float", "description": "The pressure of the reservoir in psi"}, "temperature": {"type": "float", "description": "The temperature of the reservoir in degrees Celsius"}, "production_rate": {"type": "float", "description": "The current production rate of the reservoir in barrels per day"}}}
{"api_name": "calculateFluidFlowRate", "api_description": "Calculate the fluid flow rate in a petroleum engineering system", "field": "Engineering/Petroleum engineering", "parameters": {"pressure_drop": {"type": "float", "description": "The pressure drop across the system (e.g., 500 psi)"}, "pipe_diameter": {"type": "float", "description": "The diameter of the pipe in the system (e.g., 8 inches)"}, "pipe_length": {"type": "float", "description": "The length of the pipe in the system (e.g., 1000 feet)"}, "fluid_density": {"type": "float", "description": "The density of the fluid in the system (e.g., 50 lb/ft^3)"}, "viscosity": {"type": "float", "description": "The viscosity of the fluid in the system (e.g., 10 cp)"}}, "required": ["pressure_drop", "pipe_diameter", "pipe_length", "fluid_density", "viscosity"], "responses": {"flow_rate": {"type": "float", "description": "The calculated fluid flow rate in the system (e.g., 1000 bbl/day)"}}}
{"api_name": "getAdventureActivities", "api_description": "Retrieve available adventure activities in a specific location", "field": "Tourism/Adventure tourism", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the adventure activities (e.g., Bali, Switzerland, Costa Rica)"}}, "required": ["location"], "responses": {"activities": {"type": "str", "description": "A list of available adventure activities in the specified location"}}}
{"api_name": "getBeachWeather", "api_description": "Retrieve beach weather information", "field": "Tourism/Beach tourism", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the beach weather information (e.g., Miami, Sydney, Phuket)"}}, "required": ["location"], "responses": {"temperature": {"type": "float", "description": "The current temperature at the beach location"}, "weather_condition": {"type": "str", "description": "The current weather condition at the beach location"}}}
{"api_name": "getTrailDifficulty", "api_description": "Retrieve the difficulty level of a specific hiking trail", "field": "Tourism/Hiking tourism", "parameters": {"trail_name": {"type": "str", "description": "The name of the hiking trail (e.g., Mount Kilimanjaro, Appalachian Trail)"}}, "required": ["trail_name"], "responses": {"difficulty": {"type": "str", "description": "The difficulty level of the specified hiking trail"}}}
{"api_name": "getAstronomyPictureOfDay", "api_description": "Retrieve the astronomy picture of the day", "field": "Space Exploration/Astronomy", "parameters": {"date": {"type": "str", "description": "The date for which you want to retrieve the astronomy picture (e.g., 2022-10-15)"}, "high_resolution": {"type": "bool", "description": "Specify if you want to retrieve the high-resolution version of the picture"}}, "required": [], "responses": {"picture_url": {"type": "str", "description": "The URL of the astronomy picture of the day"}, "explanation": {"type": "str", "description": "A brief explanation or description of the astronomy picture"}}}
{"api_name": "getAstrobiologyResearch", "api_description": "Retrieve research and information about astrobiology", "field": "Space Exploration/Astrobiology", "parameters": {"topic": {"type": "str", "description": "The specific topic related to astrobiology research (e.g., extremophiles, exoplanets, origin of life)"}}, "required": [], "responses": {"research": {"type": "str", "description": "The research findings and information about the specified topic in astrobiology"}}}
{"api_name": "getAstrobiologyInfo", "api_description": "Retrieve information about astrobiology", "field": "Space Exploration/Astrobiology", "parameters": {"planet": {"type": "str", "description": "Name of the planet to get astrobiology information (e.g., Mars, Venus, Europa)"}}, "required": ["planet"], "responses": {"description": {"type": "str", "description": "Description of astrobiology on the specified planet"}, "discovery_date": {"type": "str", "description": "Date of astrobiology discovery on the specified planet"}, "main_hypothesis": {"type": "str", "description": "Main hypothesis regarding astrobiology on the specified planet"}}}
{"api_name": "getAstrostatisticsData", "api_description": "Retrieve statistical data for space exploration", "field": "Space Exploration/Astrostatistics", "parameters": {"mission": {"type": "str", "description": "The name of the space mission (e.g., Hubble, Voyager, Curiosity)"}, "stat_type": {"type": "str", "description": "The type of statistical data to retrieve (e.g., mission duration, number of discoveries, data size)"}}, "required": ["mission", "stat_type"], "responses": {"statistics": {"type": "float", "description": "The statistical data for the specified mission and type"}}}
{"api_name": "getAstrophotographyImage", "api_description": "Retrieve astrophotography image", "field": "Space Exploration/Astrophotography", "parameters": {"location": {"type": "str", "description": "The location from which the astrophotography image is captured (e.g., observatory, backyard)"}, "telescope": {"type": "str", "description": "The type of telescope used for capturing the image (e.g., reflector, refractor)"}, "exposure_time": {"type": "int", "description": "The duration of exposure for capturing the image in seconds"}}, "required": ["location", "telescope"], "responses": {"image_url": {"type": "str", "description": "The URL of the astrophotography image"}, "metadata": {"type": "str", "description": "Additional information about the astrophotography image"}}}
{"api_name": "getAstrotourismInfo", "api_description": "Retrieve information about astrotourism", "field": "Space Exploration/Astrotourism", "parameters": {"location": {"type": "str", "description": "The location for which you want to get astrotourism information (e.g., observatory, space center)"}, "duration": {"type": "int", "description": "The duration of the astrotourism experience in hours (e.g., 2, 4, 8)"}, "group_size": {"type": "int", "description": "The number of people in the astrotourism group (e.g., 1, 5, 10)"}}, "required": ["location"], "responses": {"information": {"type": "str", "description": "Detailed information about the astrotourism experience"}}}
{"api_name": "getAstronautHealth", "api_description": "Retrieve health information of an astronaut", "field": "Space Exploration/Space Medicine", "parameters": {"astronaut_name": {"type": "str", "description": "The name of the astronaut"}}, "required": ["astronaut_name"], "responses": {"health_info": {"type": "str", "description": "The health status and medical information of the specified astronaut"}}}
{"api_name": "getSpaceBiologyData", "api_description": "Retrieve data related to space biology research", "field": "Space Exploration/Space Biology", "parameters": {"mission": {"type": "str", "description": "The name of the space mission (e.g., Apollo 11, Mars Rover)"}, "organism": {"type": "str", "description": "The specific organism being studied (e.g., fruit flies, plants, humans)"}, "experiment_type": {"type": "str", "description": "The type of experiment conducted (e.g., microgravity, radiation exposure)"}}, "required": ["mission", "organism"], "responses": {"data": {"type": "str", "description": "The data collected from the specified mission and organism"}, "experiment_notes": {"type": "str", "description": "Any additional notes or observations from the experiment"}}}
{"api_name": "getSpaceBiologyResearch", "api_description": "Retrieve information about space biology research", "field": "Space Exploration/Space Biology", "parameters": {"experiment_type": {"type": "str", "description": "The type of experiment in space biology research (e.g., plant growth, microbial study)"}, "organism": {"type": "str", "description": "The organism used in the experiment (e.g., bacteria, algae, fruit flies)"}, "duration": {"type": "str", "description": "The duration of the experiment in space (e.g., days, weeks, months)"}}, "required": ["experiment_type"], "responses": {"research_title": {"type": "str", "description": "The title of the space biology research"}, "results": {"type": "str", "description": "The results obtained from the experiment"}}}
{"api_name": "getMagneticFieldStrength", "api_description": "Retrieve the strength of the magnetic field near a celestial body", "field": "Space Exploration/Space Physics", "parameters": {"celestial_body": {"type": "str", "description": "The celestial body for which you want to retrieve magnetic field strength (e.g., Sun, Earth, Jupiter)"}, "distance_from_body": {"type": "float", "description": "The distance from the celestial body in km for which you want to retrieve magnetic field strength"}}, "required": ["celestial_body"], "responses": {"magnetic_field_strength": {"type": "float", "description": "The strength of the magnetic field in Tesla"}}}
{"api_name": "getCosmicRayFlux", "api_description": "Retrieve the flux of cosmic rays at a specific location in space", "field": "Space Exploration/Space Physics", "parameters": {"location": {"type": "str", "description": "The location in space for which you want to retrieve cosmic ray flux (e.g., near Earth, near Mars)"}, "energy_range": {"type": "str", "description": "The energy range of cosmic rays for which you want to retrieve flux (e.g., low energy, high energy)"}, "time_interval": {"type": "str", "description": "The time interval for which you want to retrieve cosmic ray flux (e.g., hourly, daily)"}}, "required": ["location", "energy_range"], "responses": {"cosmic_ray_flux": {"type": "float", "description": "The flux of cosmic rays in particles per square meter per second"}}}
{"api_name": "getSatelliteOrbit", "api_description": "Retrieve the orbit information of a satellite", "field": "Space Exploration/Satellite Engineering", "parameters": {"satellite_id": {"type": "str", "description": "The unique identification of the satellite"}}, "required": ["satellite_id"], "responses": {"orbit": {"type": "str", "description": "The current orbit of the satellite"}}}
{"api_name": "getSatelliteTelemetry", "api_description": "Retrieve the telemetry data of a satellite", "field": "Space Exploration/Satellite Engineering", "parameters": {"satellite_id": {"type": "str", "description": "The unique identification of the satellite"}, "start_date": {"type": "str", "description": "The start date for telemetry retrieval (format: YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date for telemetry retrieval (format: YYYY-MM-DD)"}}, "required": ["satellite_id", "start_date", "end_date"], "responses": {"telemetry_data": {"type": "str", "description": "The telemetry data of the satellite"}}}
{"api_name": "getSatelliteTLE", "api_description": "Retrieve the Two-Line Elements (TLE) data for a satellite", "field": "Space Exploration/Satellite Engineering", "parameters": {"satellite_id": {"type": "str", "description": "The ID of the satellite for which you want to retrieve the TLE data"}}, "required": ["satellite_id"], "responses": {"tle_data": {"type": "str", "description": "The Two-Line Elements (TLE) data for the satellite"}}}
{"api_name": "bookSpaceTourism", "api_description": "Book a tour for space exploration", "field": "Space Exploration/Space Tourism", "parameters": {"customer_name": {"type": "str", "description": "The name of the customer"}, "tour_date": {"type": "str", "description": "The desired date for the space tour (e.g., 2022-10-20)"}, "group_size": {"type": "int", "description": "The number of people in the tour group"}}, "required": ["customer_name", "tour_date", "group_size"], "responses": {"booking_reference": {"type": "str", "description": "Reference number for the booking"}, "confirmation_email": {"type": "str", "description": "Email address where the booking confirmation will be sent"}}}
{"api_name": "calculateInterstellarDistance", "api_description": "Calculate the distance between two interstellar objects", "field": "Space Exploration/Interstellar Travel", "parameters": {"object1": {"type": "str", "description": "The first interstellar object (e.g., Alpha Centauri, Proxima Centauri)"}, "object2": {"type": "str", "description": "The second interstellar object (e.g., Voyager 1, Voyager 2)"}}, "required": ["object1", "object2"], "responses": {"distance": {"type": "float", "description": "The distance between the two interstellar objects in light-years"}}}
{"api_name": "getPropulsionType", "api_description": "Retrieve the type of propulsion used by a spacecraft", "field": "Space Exploration/Spacecraft Propulsion", "parameters": {"spacecraft_name": {"type": "str", "description": "The name of the spacecraft for which you want to get the propulsion type (e.g., Voyager 1, Falcon Heavy, Mars Rover)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the spacecraft (e.g., NASA, SpaceX, ESA)"}}, "required": ["spacecraft_name"], "responses": {"propulsion_type": {"type": "str", "description": "The type of propulsion used by the specified spacecraft"}}}
{"api_name": "getThrust", "api_description": "Retrieve the thrust produced by a spacecraft propulsion system", "field": "Space Exploration/Spacecraft Propulsion", "parameters": {"engine_type": {"type": "str", "description": "Type of propulsion engine used (e.g., chemical, electric, nuclear)"}, "power_level": {"type": "str", "description": "Power level of the engine (e.g., low, medium, high)"}, "altitude": {"type": "int", "description": "Altitude at which the thrust is measured (in kilometers)"}}, "required": ["engine_type"], "responses": {"thrust": {"type": "float", "description": "The thrust produced by the spacecraft propulsion system (in Newtons)"}}}
{"api_name": "getTelescopeImage", "api_description": "Retrieve an image captured by a space telescope", "field": "Space Exploration/Space Telescopes", "parameters": {"telescope_name": {"type": "str", "description": "The name of the space telescope (e.g., Hubble, Spitzer, James Webb)"}, "image_type": {"type": "str", "description": "The type of image to retrieve (e.g., visible light, infrared, ultraviolet)"}, "date": {"type": "str", "description": "The date the image was captured (e.g., YYYY-MM-DD)"}, "coordinates": {"type": "str", "description": "The celestial coordinates for the image (e.g., RA: 10h 30m 15s, Dec: +45° 20' 30\")"}}, "required": ["telescope_name", "image_type"], "responses": {"image": {"type": "str", "description": "The URL or ID of the retrieved image"}}}
{"api_name": "getTelescopeInfo", "api_description": "Retrieve information about a space telescope", "field": "Space Exploration/Space Telescopes", "parameters": {"telescope_name": {"type": "str", "description": "The name of the space telescope (e.g., Hubble, Spitzer, Kepler)"}}, "required": ["telescope_name"], "responses": {"telescope_info": {"type": "str", "description": "Detailed information about the specified space telescope"}}}
{"api_name": "getSpaceObservatoryInfo", "api_description": "Retrieve information about a specific space observatory", "field": "Space Exploration/Space Observatories", "parameters": {"observatory_name": {"type": "str", "description": "The name of the space observatory for which you want to retrieve information (e.g., Hubble, Chandra, Spitzer)"}}, "required": ["observatory_name"], "responses": {"observatory_info": {"type": "str", "description": "Information about the specified space observatory"}}}
{"api_name": "getObservatoryData", "api_description": "Retrieve data from space observatories", "field": "Space Exploration/Space Observatories", "parameters": {"observatory_name": {"type": "str", "description": "The name of the space observatory (e.g., Hubble, Chandra, Spitzer)"}, "start_date": {"type": "str", "description": "The start date for data retrieval (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date for data retrieval (e.g., YYYY-MM-DD)"}, "data_type": {"type": "str", "description": "The specific type of data to retrieve (e.g., images, spectra, light curves)"}, "telescope_mode": {"type": "str", "description": "The operating mode of the telescope (e.g., visible, infrared, X-ray, UV)"}, "region_of_interest": {"type": "str", "description": "The region of interest for the data retrieval (e.g., Orion Nebula, Crab Pulsar, Andromeda Galaxy)"}}, "required": ["observatory_name", "start_date", "end_date"], "responses": {"data": {"type": "str", "description": "The retrieved data from the specified observatory and parameters"}}}
{"api_name": "planMission", "api_description": "Plan a space mission based on given parameters", "field": "Space Exploration/Space Mission Planning and Design", "parameters": {"destination": {"type": "str", "description": "The destination for the mission (e.g., Mars, Moon, Jupiter)"}, "launch_date": {"type": "str", "description": "The desired launch date for the mission (e.g., 2022-08-15)"}, "payload": {"type": "str", "description": "The payload for the mission (e.g., scientific instruments, communication satellites)"}, "duration": {"type": "int", "description": "The desired duration of the mission in days (e.g., 365)"}, "budget": {"type": "float", "description": "The allocated budget for the mission in millions of dollars (e.g., 500.25)"}, "crew_size": {"type": "int", "description": "The desired crew size for the mission (e.g., 4)"}, "payload_mass": {"type": "float", "description": "The mass of the payload in kilograms (e.g., 1000)"}}, "required": ["destination", "launch_date"], "responses": {"mission_plan": {"type": "str", "description": "The detailed plan for the space mission"}}}
{"api_name": "getMissionDetails", "api_description": "Retrieve details of a space mission", "field": "Space Exploration/Space Mission Planning and Design", "parameters": {"mission_id": {"type": "str", "description": "The unique identifier of the space mission"}, "destination": {"type": "str", "description": "The desired destination for the space mission (e.g., Moon, Mars, Jupiter)"}, "payload_weight": {"type": "float", "description": "The maximum weight of the payload that the mission can carry"}}, "required": ["mission_id"], "responses": {"mission_name": {"type": "str", "description": "The name of the space mission"}, "launch_date": {"type": "str", "description": "The planned launch date of the mission"}, "destination": {"type": "str", "description": "The designated destination of the mission"}}}
{"api_name": "calculateLaunchWindow", "api_description": "Calculate the optimal launch window for a space mission", "field": "Space Exploration/Space Mission Planning and Design", "parameters": {"mission_name": {"type": "str", "description": "The name of the space mission"}, "destination": {"type": "str", "description": "The desired destination for the mission (e.g., Mars, Moon, Venus)"}, "launch_date": {"type": "str", "description": "The preferred launch date for the mission (e.g., YYYY-MM-DD)"}, "payload_weight": {"type": "float", "description": "The weight of the payload for the mission in kilograms"}, "launch_vehicle": {"type": "str", "description": "The type of launch vehicle to be used for the mission"}}, "required": ["mission_name", "destination", "payload_weight"], "responses": {"optimal_launch_window": {"type": "str", "description": "The calculated optimal launch window for the mission"}}}
{"api_name": "getMartianWeather", "api_description": "Retrieve current weather information on Mars", "field": "Space Exploration/Martian Science", "parameters": {"sol": {"type": "int", "description": "The Martian day (sol) for which you want to get the weather"}, "time_of_day": {"type": "str", "description": "Specify a time of day for weather (e.g., morning, afternoon, night)"}, "unit": {"type": "str", "description": "The desired unit for temperature (e.g., Celsius, Fahrenheit)"}}, "required": ["sol"], "responses": {"temperature": {"type": "float", "description": "The temperature on Mars at the specified sol"}, "pressure": {"type": "float", "description": "The atmospheric pressure on Mars at the specified sol"}, "humidity": {"type": "float", "description": "The humidity on Mars at the specified sol"}, "wind_speed": {"type": "float", "description": "The wind speed on Mars at the specified sol"}, "unit": {"type": "str", "description": "The unit in which the weather information is provided"}}}
{"api_name": "getCelestialBodyInfo", "api_description": "Retrieve information about a celestial body", "field": "Space Exploration/Exploration of Other Celestial Bodies", "parameters": {"body_name": {"type": "str", "description": "The name of the celestial body you want information about (e.g., Mars, Jupiter, Saturn)"}}, "required": ["body_name"], "responses": {"name": {"type": "str", "description": "The name of the celestial body"}, "temperature": {"type": "str", "description": "The average temperature of the celestial body"}, "distance_from_earth": {"type": "str", "description": "The distance of the celestial body from Earth"}, "surface_features": {"type": "str", "description": "Description of the surface features of the celestial body"}, "atmosphere": {"type": "str", "description": "Information about the atmosphere of the celestial body"}}}
{"api_name": "getColonizationProgress", "api_description": "Retrieve the current progress of space colonization", "field": "Space Exploration/Space Colonization", "parameters": {"location": {"type": "str", "description": "The location at which space colonization progress is to be retrieved (e.g., Mars, Moon, Europa)"}}, "required": ["location"], "responses": {"progress": {"type": "float", "description": "The current progress of space colonization at the specified location (in percentage)"}}}
{"api_name": "checkFeasibility", "api_description": "Check the feasibility of space colonization at a given location", "field": "Space Exploration/Space Colonization", "parameters": {"location": {"type": "str", "description": "The location to check the feasibility of space colonization (e.g., Mars, Moon, Europa)"}}, "required": ["location"], "responses": {"feasible": {"type": "bool", "description": "Indicates whether space colonization is feasible at the specified location"}}}
{"api_name": "getPlantGrowth", "api_description": "Retrieve information about the growth of plants in space agriculture", "field": "Space Exploration/Space Agriculture", "parameters": {"plant_type": {"type": "str", "description": "The type of plant for which you want to get growth information (e.g., lettuce, tomatoes, wheat)"}, "growth_duration": {"type": "int", "description": "The duration of growth in days for the plants"}, "light_intensity": {"type": "int", "description": "The intensity of light provided to the plants in lumens"}, "temperature": {"type": "float", "description": "The temperature at which the plants are grown in degrees Celsius"}}, "required": ["plant_type", "growth_duration"], "responses": {"growth_rate": {"type": "float", "description": "The rate of growth for the specified plant"}, "harvest_date": {"type": "str", "description": "The expected date for harvest of the plants"}, "harvest_quantity": {"type": "int", "description": "The expected quantity of harvest for the plants"}}}
{"api_name": "getSpaceFood", "api_description": "Retrieve information about space food technology", "field": "Space Exploration/Space Food Technology", "parameters": {}, "required": [], "responses": {"technology": {"type": "str", "description": "The latest space food technology advancements"}}}
{"api_name": "getSpaceManufacturingInfo", "api_description": "Retrieve information about space manufacturing", "field": "Space Exploration/Space Manufacturing", "parameters": {"location": {"type": "str", "description": "The location where the space manufacturing is taking place (e.g., ISS, Moon, Mars)"}, "product": {"type": "str", "description": "The specific product being manufactured in space (e.g., medical equipment, electronics, food)"}, "timeframe": {"type": "str", "description": "The timeframe in which the manufacturing is happening (e.g., past year, current month, next 5 years)"}, "gravity": {"type": "str", "description": "The level of gravity under which the manufacturing is conducted (e.g., microgravity, lunar gravity, Martian gravity)"}}, "required": ["location", "product"], "responses": {"manufacturing_info": {"type": "str", "description": "Detailed information about the space manufacturing process"}}}
{"api_name": "getSatelliteLifetime", "api_description": "Retrieve the estimated lifetime of a specific satellite", "field": "Space Exploration/Space Sustainability", "parameters": {"satellite_name": {"type": "str", "description": "The name of the satellite for which you want to retrieve the estimated lifetime"}}, "required": ["satellite_name"], "responses": {"lifetime": {"type": "str", "description": "The estimated lifetime of the specified satellite"}}}
{"api_name": "getSpaceHistory", "api_description": "Retrieve information on space exploration history and culture", "field": "Space Exploration/Space History and Culture", "parameters": {"year": {"type": "int", "description": "The year for which you want to get space history information"}, "event_type": {"type": "str", "description": "Specify a type of event (e.g., mission, launch, discovery)"}}, "required": ["year"], "responses": {"description": {"type": "str", "description": "A brief description of the space history event"}, "location": {"type": "str", "description": "The location where the event took place"}}}
{"api_name": "launchRocket", "api_description": "Initiate the launch of a rocket for space exploration", "field": "Space Exploration/Commercial Space Industry", "parameters": {"rocket_name": {"type": "str", "description": "The name of the rocket to be launched (e.g., Falcon 9, Atlas V)"}, "payload": {"type": "str", "description": "The payload to be carried by the rocket (e.g., satellite, space station module)"}, "launch_date": {"type": "str", "description": "The date of the planned rocket launch (e.g., YYYY-MM-DD)"}, "launch_site": {"type": "str", "description": "The location from where the rocket will be launched (e.g., Kennedy Space Center, Baikonur Cosmodrome)"}}, "required": ["rocket_name", "payload", "launch_date"], "responses": {"launch_success": {"type": "bool", "description": "Indicates whether the rocket launch was successful or not"}, "payload_status": {"type": "str", "description": "The status of the payload after the launch (e.g., in orbit, failed to deploy)"}}}
{"api_name": "createCharacter", "api_description": "Create a new character for a role-playing game", "field": "Gaming/Role-playing games", "parameters": {"name": {"type": "str", "description": "The name of the character"}, "class": {"type": "str", "description": "The class of the character (e.g., warrior, mage, archer)"}, "level": {"type": "int", "description": "The level of the character"}, "gender": {"type": "str", "description": "The gender of the character (e.g., male, female)"}, "race": {"type": "str", "description": "The race of the character (e.g., human, elf, dwarf)"}}, "required": ["name"], "responses": {"character_id": {"type": "str", "description": "The ID of the created character"}}}
{"api_name": "attackEnemy", "api_description": "Perform an attack on an enemy character in a role-playing game", "field": "Gaming/Role-playing games", "parameters": {"attacker_id": {"type": "str", "description": "The ID of the attacking character"}, "target_id": {"type": "str", "description": "The ID of the target enemy character"}}, "required": ["attacker_id", "target_id"], "responses": {"damage_dealt": {"type": "int", "description": "The amount of damage dealt to the target enemy"}}}
{"api_name": "healCharacter", "api_description": "Heal a character in a role-playing game", "field": "Gaming/Role-playing games", "parameters": {"character_id": {"type": "str", "description": "The ID of the character to be healed"}, "healing_amount": {"type": "int", "description": "The amount of healing to be applied to the character"}}, "required": ["character_id", "healing_amount"], "responses": {"healed_amount": {"type": "int", "description": "The amount of health points restored to the character"}}}
{"api_name": "completeQuest", "api_description": "Mark a quest as completed for a character in a role-playing game", "field": "Gaming/Role-playing games", "parameters": {"character_id": {"type": "str", "description": "The ID of the character completing the quest"}, "quest_id": {"type": "str", "description": "The ID of the completed quest"}}, "required": ["character_id", "quest_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the quest completion was successful"}}}
{"api_name": "getGameDetails", "api_description": "Retrieve details of a simulation game", "field": "Gaming/Simulation games", "parameters": {"game_name": {"type": "str", "description": "The name of the simulation game"}}, "required": ["game_name"], "responses": {"name": {"type": "str", "description": "The name of the game"}, "developer": {"type": "str", "description": "The developer of the game"}, "release_date": {"type": "str", "description": "The release date of the game"}, "platforms": {"type": "str", "description": "The platforms on which the game is available"}}}
{"api_name": "getGameHighlights", "api_description": "Retrieve the highlights of a sports game", "field": "Gaming/Sports games", "parameters": {"game_name": {"type": "str", "description": "The name of the sports game (e.g., basketball, soccer, tennis)"}}, "required": ["game_name"], "responses": {"highlights": {"type": "str", "description": "The highlights of the game in textual or video format"}}}
{"api_name": "getPuzzleGame", "api_description": "Retrieve information about a puzzle game", "field": "Gaming/Puzzle games", "parameters": {"game_name": {"type": "str", "description": "The name of the puzzle game you want to retrieve information about (e.g., Sudoku, Tetris, Rubik's Cube)"}, "difficulty_level": {"type": "str", "description": "Specify the difficulty level of the puzzle game (e.g., easy, medium, hard)"}, "player_mode": {"type": "str", "description": "Specify the player mode for the puzzle game (e.g., single player, multiplayer)"}, "platform": {"type": "str", "description": "Specify the platform on which the puzzle game is available (e.g., PC, mobile, console)"}}, "required": ["game_name"], "responses": {"name": {"type": "str", "description": "The name of the puzzle game"}, "difficulty_level": {"type": "str", "description": "The difficulty level of the puzzle game"}, "player_mode": {"type": "str", "description": "The player mode for the puzzle game"}, "platform": {"type": "str", "description": "The platform on which the puzzle game is available"}}}
{"api_name": "getPuzzleGameDifficulty", "api_description": "Retrieve the difficulty level of a puzzle game", "field": "Gaming/Puzzle games", "parameters": {"game_name": {"type": "str", "description": "The name of the puzzle game (e.g., Sudoku, Tetris, Minesweeper)"}}, "required": ["game_name"], "responses": {"difficulty_level": {"type": "str", "description": "The difficulty level of the specified puzzle game"}}}
{"api_name": "getPuzzleGameStrategy", "api_description": "Retrieve the strategy for a puzzle game", "field": "Gaming/Puzzle games", "parameters": {"game_name": {"type": "str", "description": "The name of the puzzle game (e.g., Sudoku, Tetris, Minesweeper)"}, "difficulty_level": {"type": "str", "description": "The difficulty level of the puzzle game (e.g., easy, medium, hard)"}}, "required": ["game_name"], "responses": {"strategy": {"type": "str", "description": "The strategy for the specified puzzle game"}}}
{"api_name": "getGameReviews", "api_description": "Retrieve user reviews of a specific open-world game", "field": "Gaming/Open-world games", "parameters": {"game_name": {"type": "str", "description": "The name of the open-world game"}, "rating_threshold": {"type": "float", "description": "The minimum rating threshold for user reviews (e.g., 7.5, 8.0, 9.0)"}}, "required": ["game_name"], "responses": {"game_name": {"type": "str", "description": "The name of the open-world game"}, "reviews": {"type": "str", "description": "User reviews of the game"}, "average_rating": {"type": "float", "description": "The average rating of the game"}}}
{"api_name": "getGameMap", "api_description": "Retrieve the map of a specific open-world game", "field": "Gaming/Open-world games", "parameters": {"game_name": {"type": "str", "description": "The name of the open-world game"}}, "required": ["game_name"], "responses": {"game_name": {"type": "str", "description": "The name of the open-world game"}, "map": {"type": "str", "description": "The map of the game"}}}
{"api_name": "startGame", "api_description": "Start a new survival game", "field": "Gaming/Survival games", "parameters": {"game_mode": {"type": "str", "description": "The game mode for the survival game (e.g., easy, medium, hard)"}, "map_size": {"type": "str", "description": "The size of the game map (e.g., small, medium, large)"}}, "required": ["game_mode", "map_size"], "responses": {"status": {"type": "str", "description": "The status of the game (e.g., in progress, completed)"}, "player_location": {"type": "str", "description": "The initial location of the player in the game"}}}
{"api_name": "createDeck", "api_description": "Create a new deck of cards", "field": "Gaming/Card games", "parameters": {}, "required": [], "responses": {"deck_id": {"type": "str", "description": "The unique identifier for the deck"}, "remaining": {"type": "int", "description": "The number of cards remaining in the deck"}}}
{"api_name": "shuffleDeck", "api_description": "Shuffle the cards in a deck", "field": "Gaming/Card games", "parameters": {"deck_id": {"type": "str", "description": "The unique identifier of the deck to be shuffled"}}, "required": ["deck_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the shuffle operation was successful"}}}
{"api_name": "drawCard", "api_description": "Draw a card from the deck", "field": "Gaming/Card games", "parameters": {"deck_id": {"type": "str", "description": "The unique identifier of the deck to draw from"}}, "required": ["deck_id"], "responses": {"card": {"type": "str", "description": "The drawn card from the deck"}}}
{"api_name": "createGameLobby", "api_description": "Create a game lobby for online multiplayer games", "field": "Gaming/Online multiplayer games", "parameters": {"game_name": {"type": "str", "description": "The name of the game for the lobby"}, "max_players": {"type": "int", "description": "The maximum number of players allowed in the lobby"}, "mode": {"type": "str", "description": "The game mode for the lobby (e.g., team deathmatch, capture the flag)"}, "password": {"type": "str", "description": "An optional password to restrict access to the lobby"}}, "required": ["game_name", "max_players", "mode"], "responses": {"lobby_id": {"type": "str", "description": "The unique identifier for the created game lobby"}, "lobby_url": {"type": "str", "description": "The URL to join the game lobby"}}}
{"api_name": "joinGameLobby", "api_description": "Join an existing game lobby for online multiplayer games", "field": "Gaming/Online multiplayer games", "parameters": {"lobby_id": {"type": "str", "description": "The identifier of the game lobby to join"}, "password": {"type": "str", "description": "The password for the game lobby (if required)"}}, "required": ["lobby_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the join operation was successful"}}}
{"api_name": "invitePlayer", "api_description": "Invite a player to join a team in a cooperative game", "field": "Gaming/Cooperative games", "parameters": {"team_id": {"type": "int", "description": "The ID of the team to join"}, "player_name": {"type": "str", "description": "The name of the player to invite"}}, "required": ["team_id", "player_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the invitation was successful"}}}
{"api_name": "joinGame", "api_description": "Allows a user to join a competitive game", "field": "Gaming/Competitive games", "parameters": {"game_id": {"type": "str", "description": "The ID of the game the user wants to join"}, "user_id": {"type": "str", "description": "The ID of the user who wants to join the game"}, "team": {"type": "str", "description": "The desired team the user wants to join (e.g., red, blue, green)"}}, "required": ["game_id", "user_id"], "responses": {"status": {"type": "str", "description": "The status of the join request (e.g., success, failure)"}}}
{"api_name": "startMatch", "api_description": "Start a new match in a competitive game", "field": "Gaming/Competitive games", "parameters": {"game_id": {"type": "str", "description": "The ID of the game in which you want to start a match"}, "match_type": {"type": "str", "description": "The type of match to be started (e.g., 1v1, team, free-for-all)"}, "map": {"type": "str", "description": "The map on which the match will be played"}}, "required": ["game_id", "match_type"], "responses": {"status": {"type": "str", "description": "The status of the match creation (e.g., success, failure)"}}}
{"api_name": "endMatch", "api_description": "End an ongoing match in a competitive game", "field": "Gaming/Competitive games", "parameters": {"game_id": {"type": "str", "description": "The ID of the game in which you want to end the match"}, "match_id": {"type": "str", "description": "The ID of the match to be ended"}}, "required": ["game_id", "match_id"], "responses": {"status": {"type": "str", "description": "The status of the match ending (e.g., success, failure)"}}}
{"api_name": "getCurrentGame", "api_description": "Retrieve current game information", "field": "Gaming/Browser-based games", "parameters": {"game_type": {"type": "str", "description": "The type of game to retrieve information for (e.g., puzzle, strategy, action)"}, "player_name": {"type": "str", "description": "The name of the player for which to retrieve game information"}}, "required": ["player_name"], "responses": {"game_name": {"type": "str", "description": "The name of the current game being played"}, "game_score": {"type": "int", "description": "The score of the current game"}, "game_status": {"type": "str", "description": "The status of the current game (e.g., in progress, completed)"}}}
{"api_name": "playGame", "api_description": "Play a browser-based game", "field": "Gaming/Browser-based games", "parameters": {"game_type": {"type": "str", "description": "The type of game to play (e.g., puzzle, strategy, action)"}, "difficulty_level": {"type": "str", "description": "The desired difficulty level of the game (e.g., easy, medium, hard)"}, "player_name": {"type": "str", "description": "The name of the player who wants to play the game"}}, "required": ["game_type", "player_name"], "responses": {"game_url": {"type": "str", "description": "The URL of the game to be played"}, "game_instructions": {"type": "str", "description": "The instructions for playing the game"}}}
{"api_name": "inviteFriend", "api_description": "Invite a friend to play a social media game", "field": "Gaming/Social media games", "parameters": {"game_name": {"type": "str", "description": "The name of the game to invite the friend to play"}, "friend_id": {"type": "int", "description": "The ID of the friend to invite"}}, "required": ["game_name", "friend_id"], "responses": {"success": {"type": "bool", "description": "True if the invitation was successfully sent"}}}
{"api_name": "sendGift", "api_description": "Send a gift to a friend in a social media game", "field": "Gaming/Social media games", "parameters": {"game_name": {"type": "str", "description": "The name of the game to send the gift in"}, "gift_id": {"type": "int", "description": "The ID of the gift to send"}, "friend_id": {"type": "int", "description": "The ID of the friend to send the gift to"}}, "required": ["game_name", "gift_id", "friend_id"], "responses": {"success": {"type": "bool", "description": "True if the gift was successfully sent"}}}
{"api_name": "saveGame", "api_description": "Save the progress of a management game", "field": "Gaming/Management games", "parameters": {"game_id": {"type": "int", "description": "The ID of the game"}}, "required": ["game_id"], "responses": {"message": {"type": "str", "description": "A message indicating whether the game progress was successfully saved"}}}
{"api_name": "endGame", "api_description": "End a management game", "field": "Gaming/Management games", "parameters": {"game_id": {"type": "int", "description": "The ID of the game"}}, "required": ["game_id"], "responses": {"message": {"type": "str", "description": "A message indicating whether the game was successfully ended"}}}
{"api_name": "takeTurn", "api_description": "Take a turn in a turn-based strategy game", "field": "Gaming/Turn-based strategy games", "parameters": {"game_id": {"type": "str", "description": "The ID of the game"}, "player_number": {"type": "int", "description": "The player number taking the turn"}, "action": {"type": "str", "description": "The action to perform on the current turn (e.g., move, attack, build)"}}, "required": ["game_id", "player_number", "action"], "responses": {"success": {"type": "bool", "description": "Indicates if the turn was successfully executed"}, "game_state": {"type": "str", "description": "The updated game state after the turn"}}}
{"api_name": "buildTower", "api_description": "Build a tower at a specific location in the tower defense game", "field": "Gaming/Tower defense games", "parameters": {"tower_type": {"type": "str", "description": "The type of tower to build (e.g., archer tower, cannon tower)"}, "location": {"type": "str", "description": "The location on the game map where the tower should be built"}}, "required": ["tower_type", "location"], "responses": {"success": {"type": "bool", "description": "Indicates if the tower was successfully built"}}}
{"api_name": "upgradeTower", "api_description": "Upgrade a specific tower in the tower defense game", "field": "Gaming/Tower defense games", "parameters": {"tower_id": {"type": "int", "description": "The ID of the tower to upgrade"}}, "required": ["tower_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the tower was successfully upgraded"}}}
{"api_name": "sellTower", "api_description": "Sell a specific tower in the tower defense game", "field": "Gaming/Tower defense games", "parameters": {"tower_id": {"type": "int", "description": "The ID of the tower to sell"}}, "required": ["tower_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the tower was successfully sold"}}}
{"api_name": "getGameRating", "api_description": "Retrieve the rating of a tycoon game", "field": "Gaming/Tycoon games", "parameters": {"game_name": {"type": "str", "description": "The name of the tycoon game you want to get the rating of (e.g., SimCity, Theme Hospital)"}}, "required": ["game_name"], "responses": {"rating": {"type": "float", "description": "The rating of the specified tycoon game"}}}
{"api_name": "getGamePlayers", "api_description": "Retrieve the number of players in a tycoon game", "field": "Gaming/Tycoon games", "parameters": {"game_name": {"type": "str", "description": "The name of the tycoon game you want to get the number of players for (e.g., Prison Architect, Planet Coaster)"}}, "required": ["game_name"], "responses": {"players": {"type": "int", "description": "The number of players in the specified tycoon game"}}}
{"api_name": "getVisualNovelInfo", "api_description": "Retrieve information about a specific visual novel", "field": "Gaming/Visual novels", "parameters": {"title": {"type": "str", "description": "The title of the visual novel"}}, "required": ["title"], "responses": {"title": {"type": "str", "description": "The title of the visual novel"}, "developer": {"type": "str", "description": "The developer/publisher of the visual novel"}, "release_date": {"type": "str", "description": "The release date of the visual novel"}, "platforms": {"type": "str", "description": "The platforms on which the visual novel is available"}, "genre": {"type": "str", "description": "The genre of the visual novel"}}}
{"api_name": "findObject", "api_description": "Search for a specific object in a hidden object game", "field": "Gaming/Hidden object games", "parameters": {"game_name": {"type": "str", "description": "The name of the hidden object game"}, "object_name": {"type": "str", "description": "The name of the object you want to find in the game"}}, "required": ["game_name", "object_name"], "responses": {"found": {"type": "bool", "description": "Indicates whether the object was found in the game"}, "coordinates": {"type": "str", "description": "The coordinates or location of the found object in the game"}}}
{"api_name": "getHiddenObjectGame", "api_description": "Retrieve hidden object game information", "field": "Gaming/Hidden object games", "parameters": {"genre": {"type": "str", "description": "The genre of the hidden object game (e.g., mystery, fantasy, adventure)"}, "rating": {"type": "float", "description": "The minimum rating of the hidden object game (e.g., 4.0, 4.5, 5.0)"}}, "required": ["genre"], "responses": {"game_title": {"type": "str", "description": "The title of the hidden object game"}, "platform": {"type": "str", "description": "The platform(s) on which the game is available"}, "rating": {"type": "float", "description": "The rating of the hidden object game"}}}
{"api_name": "findHiddenObjects", "api_description": "Find hidden objects in a game scene", "field": "Gaming/Hidden object games", "parameters": {"game_scene": {"type": "str", "description": "The game scene in which you want to find the hidden objects (e.g., living room, garden, kitchen)"}, "difficulty_level": {"type": "str", "description": "Specify the difficulty level of the game (e.g., easy, medium, hard)"}, "time_limit": {"type": "int", "description": "Set a time limit for finding hidden objects in seconds"}}, "required": ["game_scene"], "responses": {"objects_found": {"type": "int", "description": "The number of hidden objects found in the game scene"}, "score": {"type": "int", "description": "The score achieved by finding hidden objects"}, "time_elapsed": {"type": "int", "description": "The time elapsed while searching for hidden objects"}}}
{"api_name": "searchHiddenObjects", "api_description": "Search for hidden objects in a scene", "field": "Gaming/Hidden object games", "parameters": {"scene": {"type": "str", "description": "The scene in which you want to search for hidden objects"}, "level": {"type": "int", "description": "The level of difficulty for the hidden object game (e.g., 1, 2, 3)"}, "hints": {"type": "bool", "description": "Specify whether to provide hints during the game (true or false)"}}, "required": ["scene"], "responses": {"objects_found": {"type": "int", "description": "The number of hidden objects found in the scene"}}}
{"api_name": "makeMove", "api_description": "Make a move in a Match-3 game", "field": "Gaming/Match-3 games", "parameters": {"game_id": {"type": "str", "description": "The unique identifier of the game"}, "user_id": {"type": "str", "description": "The unique identifier of the user playing the game"}, "move_type": {"type": "str", "description": "The type of move to make (e.g., swap, match)"}, "move_details": {"type": "str", "description": "Additional details about the move (e.g., coordinates of the cells to swap)"}}, "required": ["game_id", "user_id", "move_type"], "responses": {"status": {"type": "str", "description": "The status of the move (e.g., success, invalid move, game over)"}, "score": {"type": "int", "description": "The updated score of the user after the move"}}}
{"api_name": "getHighScore", "api_description": "Retrieve the high score of a player in a Match-3 game", "field": "Gaming/Match-3 games", "parameters": {"player_id": {"type": "str", "description": "The unique identifier of the player"}, "game_id": {"type": "str", "description": "The unique identifier of the Match-3 game"}}, "required": ["player_id", "game_id"], "responses": {"high_score": {"type": "int", "description": "The high score achieved by the player in the specified Match-3 game"}}}
{"api_name": "getRandomWord", "api_description": "Retrieve a random word for word games", "field": "Gaming/Word games", "parameters": {}, "required": [], "responses": {"word": {"type": "str", "description": "The random word for the word game"}}}
{"api_name": "getWordGameWord", "api_description": "Retrieve a word from the word game", "field": "Gaming/Word games", "parameters": {}, "required": [], "responses": {"word": {"type": "str", "description": "A word from the word game"}}}
{"api_name": "getHandValue", "api_description": "Retrieve the total value of a given hand in a card game", "field": "Gaming/Card games", "parameters": {"hand": {"type": "str", "description": "The cards in the hand (e.g., '2H 7D AC')"}}, "required": ["hand"], "responses": {"value": {"type": "int", "description": "The total value of the hand"}}}
{"api_name": "rollDice", "api_description": "Roll a dice and get the result", "field": "Gaming/Dice games", "parameters": {"num_of_dice": {"type": "int", "description": "The number of dice to roll (e.g., 1, 2, 3)"}, "sides": {"type": "int", "description": "Number of sides on each dice (e.g., 4, 6, 10)"}, "modifier": {"type": "int", "description": "A modifier to add or subtract from the total (e.g., -2, 0, 5)"}}, "required": ["num_of_dice", "sides"], "responses": {"result": {"type": "int", "description": "The total result after rolling the dice with the specified parameters"}}}
{"api_name": "startGameTesting", "api_description": "Initiates the game testing process", "field": "Gaming/Game testing", "parameters": {"game_name": {"type": "str", "description": "The name of the game to be tested"}, "platform": {"type": "str", "description": "The gaming platform on which the game will be tested (e.g., PC, console, mobile)"}, "testers": {"type": "int", "description": "The number of testers required for game testing"}, "duration": {"type": "int", "description": "The duration of the game testing process in days"}}, "required": ["game_name", "platform"], "responses": {"testing_id": {"type": "str", "description": "The unique identifier for the game testing process"}, "start_date": {"type": "str", "description": "The start date of the game testing process (format: YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the game testing process (format: YYYY-MM-DD)"}}}
{"api_name": "getGameArt", "api_description": "Retrieve game art and animations", "field": "Gaming/Game art and animation", "parameters": {"game": {"type": "str", "description": "The name of the game to retrieve the art and animations for"}}, "required": ["game"], "responses": {"art": {"type": "str", "description": "The URL or file path for the game art and animations"}}}
{"api_name": "getGameMusic", "api_description": "Retrieve game music for a specific game", "field": "Gaming/Game sound design", "parameters": {"game_name": {"type": "str", "description": "The name of the game for which you want to get the music"}}, "required": ["game_name"], "responses": {"music_track": {"type": "str", "description": "The URL or name of the music track for the specified game"}}}
{"api_name": "getGameSoundEffects", "api_description": "Retrieve game sound effects for a specific game", "field": "Gaming/Game sound design", "parameters": {"game_name": {"type": "str", "description": "The name of the game for which you want to get the sound effects"}}, "required": ["game_name"], "responses": {"sound_effects": {"type": "str", "description": "The URLs or names of the sound effects for the specified game"}}}
{"api_name": "getGameAmbience", "api_description": "Retrieve game ambience sounds for a specific game", "field": "Gaming/Game sound design", "parameters": {"game_name": {"type": "str", "description": "The name of the game for which you want to get the ambience sounds"}}, "required": ["game_name"], "responses": {"ambience_sounds": {"type": "str", "description": "The URLs or names of the ambience sounds for the specified game"}}}
{"api_name": "playSoundEffect", "api_description": "Play a sound effect in the game", "field": "Gaming/Game sound design", "parameters": {"effect_name": {"type": "str", "description": "The name of the sound effect to be played (e.g., explosion, gunfire, footsteps)"}, "volume": {"type": "float", "description": "The volume level of the sound effect (e.g., 0.0 - 1.0)"}, "panning": {"type": "float", "description": "The panning position of the sound effect in stereo sound (e.g., -1.0 (left) to 1.0 (right))"}, "loop": {"type": "bool", "description": "Specify whether the sound effect should be played in a loop (e.g., true, false)"}}, "required": ["effect_name"], "responses": {"status": {"type": "str", "description": "The status or result of playing the sound effect (e.g., success, error)"}}}
{"api_name": "getGamePlot", "api_description": "Retrieve the plot of a game", "field": "Gaming/Game writing/storytelling", "parameters": {"game_title": {"type": "str", "description": "The title of the game for which you want to get the plot"}}, "required": ["game_title"], "responses": {"plot": {"type": "str", "description": "The plot/storyline of the specified game"}}}
{"api_name": "getInGamePurchases", "api_description": "Retrieve information about in-game purchases", "field": "Gaming/Game monetization", "parameters": {"game_id": {"type": "int", "description": "The unique identifier of the game"}, "player_id": {"type": "int", "description": "The unique identifier of the player"}}, "required": ["game_id", "player_id"], "responses": {"purchase_details": {"type": "str", "description": "Information about in-game purchases for the specified game and player"}}}
{"api_name": "purchaseVirtualCurrency", "api_description": "Allows the user to purchase virtual currency in the game", "field": "Gaming/Game monetization", "parameters": {"user_id": {"type": "str", "description": "The unique identifier of the user making the purchase"}, "currency_amount": {"type": "int", "description": "The amount of virtual currency to be purchased"}, "payment_method": {"type": "str", "description": "The payment method used for the purchase (e.g., credit card, PayPal)"}}, "required": ["user_id", "currency_amount"], "responses": {"transaction_id": {"type": "str", "description": "The unique identifier of the purchase transaction"}, "success": {"type": "bool", "description": "Indicates whether the purchase was successful"}, "virtual_currency_balance": {"type": "int", "description": "The updated balance of virtual currency for the user"}}}
{"api_name": "purchaseItem", "api_description": "Allows the user to purchase an in-game item", "field": "Gaming/Game monetization", "parameters": {"item_id": {"type": "str", "description": "The ID of the item the user wants to purchase"}, "quantity": {"type": "int", "description": "The number of items the user wants to purchase"}, "currency": {"type": "str", "description": "The currency in which the item is priced (e.g., coins, gems)"}, "payment_method": {"type": "str", "description": "The payment method chosen by the user (e.g., credit card, PayPal)"}, "discount_code": {"type": "str", "description": "A discount code, if available for the item"}}, "required": ["item_id", "quantity"], "responses": {"status": {"type": "str", "description": "The status of the purchase (e.g., success, error)"}, "message": {"type": "str", "description": "A message explaining the result of the purchase"}}}
{"api_name": "analyzePlayerBehavior", "api_description": "Analyzes the behavior of a player in a game", "field": "Gaming/Game psychology", "parameters": {"player_id": {"type": "str", "description": "The unique identifier of the player"}, "game_id": {"type": "str", "description": "The unique identifier of the game"}, "timeframe": {"type": "str", "description": "The desired timeframe for analysis (e.g., daily, weekly, monthly)"}}, "required": ["player_id", "game_id"], "responses": {"player_behavior": {"type": "str", "description": "The behavioral analysis of the player in the specified game"}}}
{"api_name": "recommendGameToPlayer", "api_description": "Recommends a game to a player based on their gaming preferences", "field": "Gaming/Game psychology", "parameters": {"player_id": {"type": "str", "description": "The unique identifier of the player"}}, "required": ["player_id"], "responses": {"recommended_game": {"type": "str", "description": "The recommended game for the player based on their gaming preferences"}}}
{"api_name": "getGameControllerSupport", "api_description": "Check if a game supports a specific type of controller", "field": "Gaming/Game accessibility", "parameters": {"game_title": {"type": "str", "description": "The title of the game you want to check (e.g., FIFA 21, Assassin's Creed Valhalla)"}, "controller_type": {"type": "str", "description": "The type of controller you want to check support for (e.g., PlayStation DualShock, Xbox Elite Series 2)"}, "platform": {"type": "str", "description": "The gaming platform on which the game is played (e.g., PC, PlayStation, Nintendo Switch)"}}, "required": ["game_title", "controller_type"], "responses": {"controller_support": {"type": "bool", "description": "Whether the game supports the specified controller"}}}
{"api_name": "checkColorBlindMode", "api_description": "Check if color blind mode is available in the game", "field": "Gaming/Game accessibility", "parameters": {}, "required": [], "responses": {"color_blind_mode": {"type": "bool", "description": "Indicates whether the game supports color blind mode"}}}
{"api_name": "getVirtualCurrencyBalance", "api_description": "Retrieve the current balance of virtual currency for a player", "field": "Gaming/Virtual economies", "parameters": {"player_id": {"type": "str", "description": "The unique identifier of the player"}, "currency_type": {"type": "str", "description": "The type of virtual currency (e.g., coins, gems, points)"}}, "required": ["player_id"], "responses": {"balance": {"type": "int", "description": "The current balance of the specified virtual currency"}}}
{"api_name": "purchaseVirtualItem", "api_description": "Allow a player to purchase a virtual item using virtual currency", "field": "Gaming/Virtual economies", "parameters": {"player_id": {"type": "str", "description": "The unique identifier of the player"}, "item_id": {"type": "str", "description": "The ID of the virtual item to be purchased"}, "quantity": {"type": "int", "description": "The quantity of the virtual item to be purchased"}}, "required": ["player_id", "item_id", "quantity"], "responses": {"success": {"type": "bool", "description": "Indicates whether the purchase was successful"}}}
{"api_name": "sellVirtualItem", "api_description": "Allow a player to sell a virtual item for virtual currency", "field": "Gaming/Virtual economies", "parameters": {"player_id": {"type": "str", "description": "The unique identifier of the player"}, "item_id": {"type": "str", "description": "The ID of the virtual item to be sold"}, "quantity": {"type": "int", "description": "The quantity of the virtual item to be sold"}}, "required": ["player_id", "item_id", "quantity"], "responses": {"success": {"type": "bool", "description": "Indicates whether the sale was successful"}}}
{"api_name": "getPlayerBalance", "api_description": "Retrieve the current balance of a player in the virtual economy", "field": "Gaming/Virtual economies", "parameters": {"player_id": {"type": "str", "description": "The unique identifier of the player"}, "currency": {"type": "str", "description": "The currency in which the balance is provided (e.g., gold, coins)"}}, "required": ["player_id"], "responses": {"balance": {"type": "float", "description": "The current balance of the player in the specified currency"}}}
{"api_name": "startGameServer", "api_description": "Start a game server", "field": "Gaming/Game server administration", "parameters": {"server_id": {"type": "str", "description": "The ID of the game server to be started"}, "region": {"type": "str", "description": "The region in which the game server should be started (e.g., US, Europe)"}}, "required": ["server_id"], "responses": {"status": {"type": "str", "description": "The status of the game server after the start command is executed"}}}
{"api_name": "updateGameServer", "api_description": "Update a game server with new configurations", "field": "Gaming/Game server administration", "parameters": {"server_id": {"type": "str", "description": "The ID of the game server to be updated"}, "new_config": {"type": "str", "description": "The new configuration file or settings for the game server"}}, "required": ["server_id", "new_config"], "responses": {"status": {"type": "str", "description": "The status of the game server after the update command is executed"}}}
{"api_name": "joinGameServer", "api_description": "Join an existing game server", "field": "Gaming/Game server programming", "parameters": {"server_id": {"type": "str", "description": "The ID of the game server to join"}, "player_name": {"type": "str", "description": "The name of the player joining the server"}, "game_password": {"type": "str", "description": "The password required to access the game server"}}, "required": ["server_id", "player_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the player successfully joined the game server"}, "player_count": {"type": "int", "description": "The current number of players in the game server"}}}
{"api_name": "applyForce", "api_description": "Apply a force to a game object and calculate its resulting acceleration and velocity.", "field": "Gaming/Game physics", "parameters": {"force": {"type": "float", "description": "The force to be applied to the game object in newtons"}, "mass": {"type": "float", "description": "The mass of the game object in kilograms"}}, "required": ["force", "mass"], "responses": {"acceleration": {"type": "float", "description": "The acceleration of the game object in units per second squared"}, "velocity": {"type": "float", "description": "The velocity of the game object in units per second"}}}
{"api_name": "calculateCollision", "api_description": "Determine the outcome of a collision between two game objects based on their masses, velocities, and positions.", "field": "Gaming/Game physics", "parameters": {"mass1": {"type": "float", "description": "The mass of the first game object in kilograms"}, "velocity1": {"type": "float", "description": "The velocity of the first game object in units per second"}, "position1": {"type": "float", "description": "The position of the first game object in 3D space (e.g., [0, 0, 0])"}, "mass2": {"type": "float", "description": "The mass of the second game object in kilograms"}, "velocity2": {"type": "float", "description": "The velocity of the second game object in units per second"}, "position2": {"type": "float", "description": "The position of the second game object in 3D space (e.g., [10, 5, -3])"}}, "required": ["mass1", "velocity1", "position1", "mass2", "velocity2", "position2"], "responses": {"outcome": {"type": "str", "description": "The outcome of the collision (e.g., 'objects bounce off each other', 'objects stick together', 'object 1 pushes object 2')"}}}
{"api_name": "addFeature", "api_description": "Add a new feature to the game engine", "field": "Gaming/Game engine development", "parameters": {"engine_id": {"type": "str", "description": "The unique identifier of the game engine"}, "feature_name": {"type": "str", "description": "The name of the feature to be added"}, "description": {"type": "str", "description": "A brief description of the feature"}}, "required": ["engine_id", "feature_name"], "responses": {"status": {"type": "str", "description": "The status of the feature addition (e.g., success, error)"}, "feature_id": {"type": "str", "description": "The unique identifier of the added feature"}}}
{"api_name": "removeFeature", "api_description": "Remove a feature from the game engine", "field": "Gaming/Game engine development", "parameters": {"engine_id": {"type": "str", "description": "The unique identifier of the game engine"}, "feature_id": {"type": "str", "description": "The unique identifier of the feature to be removed"}}, "required": ["engine_id", "feature_id"], "responses": {"status": {"type": "str", "description": "The status of the feature removal (e.g., success, error)"}}}
{"api_name": "checkDeliveryAvailability", "api_description": "Check if on-demand delivery is available for a given location", "field": "E-commerce/On-demand delivery", "parameters": {"location": {"type": "str", "description": "The location for which you want to check delivery availability (e.g., a specific address, city, or postal code)"}, "item": {"type": "str", "description": "The item/product you want to deliver"}}, "required": ["location", "item"], "responses": {"availability": {"type": "bool", "description": "Indicates whether or not on-demand delivery is available for the specified location and item"}}}
{"api_name": "cancelDelivery", "api_description": "Cancel a scheduled delivery", "field": "E-commerce/On-demand delivery", "parameters": {"tracking_number": {"type": "str", "description": "The tracking number associated with the delivery"}}, "required": ["tracking_number"], "responses": {"cancellation_status": {"type": "str", "description": "Indicates whether the cancellation request was successful or not"}}}
{"api_name": "getCryptocurrencyPrice", "api_description": "Retrieve the current price of a cryptocurrency", "field": "E-commerce/Cryptocurrency in e-commerce", "parameters": {"cryptocurrency": {"type": "str", "description": "The cryptocurrency for which you want to get the price (e.g., Bitcoin, Ethereum, Litecoin)"}, "currency": {"type": "str", "description": "The desired currency in which the price is provided (e.g., USD, EUR, GBP)"}}, "required": ["cryptocurrency"], "responses": {"price": {"type": "float", "description": "The current price of the specified cryptocurrency in the desired currency"}}}
{"api_name": "getProductAR", "api_description": "Retrieve augmented reality (AR) information for a product", "field": "E-commerce/Augmented reality (AR) in e-commerce", "parameters": {"product_id": {"type": "str", "description": "The ID of the product for which you want to retrieve AR information"}}, "required": ["product_id"], "responses": {"ar_model_url": {"type": "str", "description": "The URL of the AR model for the specified product"}}}
{"api_name": "checkARSupport", "api_description": "Check if a product has augmented reality (AR) support", "field": "E-commerce/Augmented reality (AR) in e-commerce", "parameters": {"product_id": {"type": "str", "description": "The ID of the product to check AR support for"}}, "required": ["product_id"], "responses": {"ar_support": {"type": "bool", "description": "Flag indicating whether the product has AR support or not"}}}
{"api_name": "checkFraud", "api_description": "Check for fraud in e-commerce transactions", "field": "E-commerce/Fraud detection and prevention in e-commerce", "parameters": {"transaction_id": {"type": "str", "description": "The ID of the transaction to be checked for fraud"}}, "required": ["transaction_id"], "responses": {"is_fraudulent": {"type": "bool", "description": "Indicates whether the transaction is fraudulent or not"}, "reason": {"type": "str", "description": "Provides the reason for the fraud detection"}}}
{"api_name": "getProductRanking", "api_description": "Retrieve the ranking of a product in search engine results", "field": "E-commerce/Search engine optimization (SEO) for e-commerce", "parameters": {"product_name": {"type": "str", "description": "The name of the product you want to get the ranking for"}, "search_engine": {"type": "str", "description": "The search engine to use for ranking (e.g., Google, Bing, Yahoo)"}}, "required": ["product_name", "search_engine"], "responses": {"ranking": {"type": "int", "description": "The ranking of the product in search engine results"}}}
{"api_name": "getProductMetadata", "api_description": "Retrieve metadata for a specified product", "field": "E-commerce/Search engine optimization (SEO) for e-commerce", "parameters": {"product_name": {"type": "str", "description": "The name of the product to retrieve metadata for"}}, "required": ["product_name"], "responses": {"metadata": {"type": "str", "description": "Metadata information for the specified product"}}}
{"api_name": "checkShippingCost", "api_description": "Check the shipping cost for an international e-commerce purchase", "field": "E-commerce/International e-commerce", "parameters": {"product_weight": {"type": "float", "description": "The weight of the product in kg (e.g., 0.5, 1.2, 2.3)"}, "destination_country": {"type": "str", "description": "The country to which the product will be shipped (e.g., Australia, Canada, Japan)"}, "shipping_method": {"type": "str", "description": "The preferred shipping method (e.g., Standard, Express)"}}, "required": ["product_weight", "destination_country"], "responses": {"shipping_cost": {"type": "float", "description": "The cost of shipping the product to the specified destination"}}}
{"api_name": "getExchangeRate", "api_description": "Retrieve the exchange rate between two currencies", "field": "E-commerce/International e-commerce", "parameters": {"from_currency": {"type": "str", "description": "The currency code of the starting currency (e.g., USD, EUR)"}, "to_currency": {"type": "str", "description": "The currency code of the converted currency (e.g., CNY, GBP)"}}, "required": ["from_currency", "to_currency"], "responses": {"exchange_rate": {"type": "float", "description": "The exchange rate from the starting currency to the converted currency"}}}
{"api_name": "subscribeToPlan", "api_description": "Subscribe to a specific subscription plan", "field": "E-commerce/Subscription-based e-commerce", "parameters": {"plan_id": {"type": "str", "description": "The ID of the subscription plan you want to subscribe to"}, "billing_info": {"type": "str", "description": "Billing information for the subscription (e.g., credit card number, PayPal email)"}, "shipping_address": {"type": "str", "description": "The shipping address for the subscription delivery"}, "start_date": {"type": "str", "description": "Specify a start date for the subscription (e.g., YYYY-MM-DD)"}, "quantity": {"type": "int", "description": "The quantity of products to be included in the subscription"}}, "required": ["plan_id", "billing_info", "shipping_address"], "responses": {"subscription_id": {"type": "str", "description": "The ID of the created subscription"}, "total_amount": {"type": "float", "description": "The total amount to be charged for the subscription"}}}
{"api_name": "cancelSubscription", "api_description": "Cancel a current subscription", "field": "E-commerce/Subscription-based e-commerce", "parameters": {"subscription_id": {"type": "str", "description": "The ID of the subscription you want to cancel"}, "reason": {"type": "str", "description": "Reason for cancelling the subscription (e.g., not satisfied, financial constraints)"}}, "required": ["subscription_id", "reason"], "responses": {"cancellation_status": {"type": "str", "description": "Confirmation of the cancellation status"}}}
{"api_name": "updateSubscriptionQuantity", "api_description": "Update the quantity of products in a subscription", "field": "E-commerce/Subscription-based e-commerce", "parameters": {"subscription_id": {"type": "str", "description": "The ID of the subscription you want to update"}, "new_quantity": {"type": "int", "description": "The new quantity of products to be included in the subscription"}}, "required": ["subscription_id", "new_quantity"], "responses": {"update_status": {"type": "str", "description": "Confirmation of the quantity update status"}}}
{"api_name": "subscribe", "api_description": "Subscribe to a product or service on the e-commerce platform", "field": "E-commerce/Subscription-based e-commerce", "parameters": {"product_id": {"type": "str", "description": "The unique identifier of the product or service to subscribe to"}, "user_id": {"type": "str", "description": "The unique identifier of the user subscribing to the product or service"}, "billing_interval": {"type": "str", "description": "The frequency at which the user will be billed for the subscription (e.g., monthly, quarterly, annually)"}}, "required": ["product_id", "user_id"], "responses": {"subscription_id": {"type": "str", "description": "The unique identifier of the subscription"}, "next_billing_date": {"type": "str", "description": "The date of the next billing cycle for the subscription"}}}
{"api_name": "refundOrder", "api_description": "Initiate a refund for a customer's order", "field": "E-commerce/E-commerce customer service and support", "parameters": {"order_id": {"type": "str", "description": "The unique identifier of the order"}}, "required": ["order_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the refund was successfully initiated"}}}
{"api_name": "submitReturnRequest", "api_description": "Submit a return request for a product", "field": "E-commerce/E-commerce customer service and support", "parameters": {"order_id": {"type": "str", "description": "The ID of the order for which the return is requested", "example": "123456789"}, "product_id": {"type": "str", "description": "The ID of the product to be returned", "example": "ABC123"}, "reason": {"type": "str", "description": "The reason for the return", "example": "Wrong size"}}, "required": ["order_id", "product_id", "reason"], "responses": {"success": {"type": "bool", "description": "Indicates whether the return request was successfully submitted", "example": true}, "message": {"type": "str", "description": "A message indicating the result of the return request", "example": "Return request submitted successfully"}}}
{"api_name": "checkAccountSecurity", "api_description": "Check the security status of a user's account", "field": "E-commerce/E-commerce security and privacy", "parameters": {"user_id": {"type": "str", "description": "The ID of the user's account to check security"}}, "required": ["user_id"], "responses": {"security_status": {"type": "str", "description": "The security status of the user's account (e.g., secure, compromised)"}}}
{"api_name": "checkUserCredentials", "api_description": "Check the credentials of a user for authentication", "field": "E-commerce/E-commerce security and privacy", "parameters": {"username": {"type": "str", "description": "The username of the user for authentication"}, "password": {"type": "str", "description": "The password of the user for authentication"}}, "required": ["username", "password"], "responses": {"status": {"type": "bool", "description": "Indicates whether the user credentials are valid or not"}}}
{"api_name": "generateSecureToken", "api_description": "Generate a secure token for user authentication and authorization", "field": "E-commerce/E-commerce security and privacy", "parameters": {"user_id": {"type": "str", "description": "The unique identifier of the user"}}, "required": ["user_id"], "responses": {"token": {"type": "str", "description": "The generated secure token"}}}
{"api_name": "performEDA", "api_description": "Perform exploratory data analysis on a given dataset", "field": "Data Analysis/Exploratory Data Analysis", "parameters": {"data": {"type": "str", "description": "The dataset to be analyzed"}, "target_variable": {"type": "str", "description": "The target variable in the dataset"}, "include_categorical": {"type": "bool", "description": "Include categorical variables in the analysis"}}, "required": ["data"], "responses": {"summary_statistics": {"type": "str", "description": "Summary statistics of the dataset"}, "correlation_matrix": {"type": "str", "description": "Correlation matrix of the dataset"}, "missing_values": {"type": "str", "description": "Information about missing values in the dataset"}}}
{"api_name": "runHypothesisTest", "api_description": "Run a hypothesis test on a dataset", "field": "Data Analysis/Inferential Statistics", "parameters": {"dataset": {"type": "str", "description": "The dataset to perform the hypothesis test on"}, "test_type": {"type": "str", "description": "The type of hypothesis test to be performed (e.g., t-test, chi-square test)"}, "alpha": {"type": "float", "description": "The significance level for the hypothesis test"}}, "required": ["dataset", "test_type"], "responses": {"result": {"type": "str", "description": "The result of the hypothesis test (e.g., Reject null hypothesis, Fail to reject null hypothesis)"}}}
{"api_name": "removeDuplicates", "api_description": "Remove duplicate data from a dataset", "field": "Data Analysis/Data Cleaning", "parameters": {"data": {"type": "str", "description": "The dataset you want to clean"}}, "required": ["data"], "responses": {"cleaned_data": {"type": "str", "description": "The dataset after removing duplicates"}}}
{"api_name": "analyzeTimeSeries", "api_description": "Perform time series analysis on a given dataset", "field": "Data Analysis/Time Series Analysis", "parameters": {"dataset": {"type": "str", "description": "The dataset to be analyzed (e.g., sales data, stock prices, weather data)"}, "method": {"type": "str", "description": "The method to be used for time series analysis (e.g., ARIMA, LSTM, Prophet)"}, "window_size": {"type": "int", "description": "The size of the sliding window for analysis"}}, "required": ["dataset", "method"], "responses": {"analysis_results": {"type": "str", "description": "The results of the time series analysis"}}}
{"api_name": "scrapeWebsite", "api_description": "Scrape data from a website", "field": "Data Analysis/Web Scraping", "parameters": {"url": {"type": "str", "description": "The URL of the website you want to scrape"}, "headers": {"type": "str", "description": "Additional headers for making HTTP request"}, "timeout": {"type": "int", "description": "The maximum number of seconds to wait for the server's response"}}, "required": ["url"], "responses": {"data": {"type": "str", "description": "The scraped data from the website"}}}
{"api_name": "generateGraphVisualization", "api_description": "Generate a visualization of a network graph", "field": "Data Analysis/Network Analysis", "parameters": {"network_data": {"type": "str", "description": "The data representing the network (e.g., adjacency matrix, edge list)"}}, "required": ["network_data"], "responses": {"visualization": {"type": "str", "description": "The generated visualization of the network graph"}}}
{"api_name": "getNetworkGraph", "api_description": "Retrieve the network graph of a given dataset", "field": "Data Analysis/Network Analysis", "parameters": {"dataset": {"type": "str", "description": "The dataset for which you want to analyze the network"}, "graph_type": {"type": "str", "description": "The type of network graph to generate (e.g., directed, undirected)"}, "threshold": {"type": "float", "description": "The threshold value for defining the strength of connections"}, "layout": {"type": "str", "description": "The desired layout for the network graph (e.g., circular, force-directed)"}}, "required": ["dataset"], "responses": {"network_graph": {"type": "str", "description": "The generated network graph"}, "stats": {"type": "str", "description": "Statistical information about the network graph"}}}
{"api_name": "getNetworkStats", "api_description": "Retrieve network statistics", "field": "Data Analysis/Network Analysis", "parameters": {"network_data": {"type": "str", "description": "The input network data for analysis"}, "metric": {"type": "str", "description": "The specific metric to analyze the network (e.g., degree centrality, betweenness centrality, clustering coefficient)"}, "algorithm": {"type": "str", "description": "The algorithm used for network analysis (e.g., Girvan-Newman, Louvain)"}}, "required": ["network_data", "metric"], "responses": {"result": {"type": "float", "description": "The calculated network metric value"}}}
{"api_name": "bayesianAnalysis", "api_description": "Perform Bayesian statistical analysis", "field": "Data Analysis/Bayesian Statistics", "parameters": {"data": {"type": "str", "description": "The dataset to be analyzed"}, "prior": {"type": "str", "description": "The prior distribution to be used for analysis"}, "likelihood": {"type": "str", "description": "The likelihood distribution to be used for analysis"}, "model": {"type": "str", "description": "The model to be used for analysis (e.g., Normal, Binomial, Poisson)"}}, "required": ["data", "prior", "likelihood", "model"], "responses": {"posterior": {"type": "str", "description": "The posterior distribution after analysis"}}}
{"api_name": "getBayesianProbability", "api_description": "Estimate the probability of an event using Bayesian statistics", "field": "Data Analysis/Bayesian Statistics", "parameters": {"event": {"type": "str", "description": "The event for which you want to estimate the probability (e.g., winning a game, getting a disease)"}, "prior_prob": {"type": "float", "description": "The prior probability of the event (e.g., 0.5, 0.75, 0.9)"}, "likelihood": {"type": "float", "description": "The likelihood of observing the given data given the event occurred (e.g., 0.7, 0.9, 0.3)"}}, "required": ["event", "prior_prob", "likelihood"], "responses": {"probability": {"type": "float", "description": "The estimated probability of the event occurring"}}}
{"api_name": "performDimensionalityReduction", "api_description": "Reduce the dimensionality of a dataset", "field": "Data Analysis/Dimensionality Reduction", "parameters": {"dataset": {"type": "str", "description": "The dataset to be used for dimensionality reduction"}, "method": {"type": "str", "description": "The method to be used for dimensionality reduction (e.g., PCA, t-SNE, Autoencoder)"}, "target_dimensions": {"type": "int", "description": "The desired number of dimensions in the reduced dataset"}}, "required": ["dataset", "method"], "responses": {"reduced_dataset": {"type": "str", "description": "The reduced dataset with the specified number of dimensions"}}}
{"api_name": "maximizeProfit", "api_description": "Find the optimal solution to maximize profit", "field": "Data Analysis/Optimization", "parameters": {"input_data": {"type": "str", "description": "The input data for the optimization problem (e.g., sales data, cost data)"}, "constraints": {"type": "str", "description": "The constraints for the optimization problem (e.g., maximum budget, production capacity)"}, "objective_function": {"type": "str", "description": "The objective function to optimize (e.g., profit, cost, revenue)"}}, "required": ["input_data", "constraints", "objective_function"], "responses": {"optimal_solution": {"type": "str", "description": "The optimal solution to maximize profit"}, "max_profit": {"type": "float", "description": "The maximum profit achieved with the optimal solution"}}}
{"api_name": "optimizeAlgorithm", "api_description": "Optimize an algorithm for a given dataset", "field": "Data Analysis/Optimization", "parameters": {"dataset": {"type": "str", "description": "The dataset to be used for optimization"}, "algorithm": {"type": "str", "description": "The algorithm to be optimized"}, "iterations": {"type": "int", "description": "The number of iterations for optimization (e.g., 100, 1000, 10000)"}, "tolerance": {"type": "float", "description": "The tolerance level for optimization (e.g., 0.001, 0.01, 0.1)"}}, "required": ["dataset", "algorithm"], "responses": {"optimized_algorithm": {"type": "str", "description": "The optimized algorithm"}, "optimized_parameters": {"type": "str", "description": "The optimized parameters for the algorithm"}, "optimization_score": {"type": "float", "description": "The optimization score achieved"}}}
{"api_name": "estimateAverageTreatmentEffect", "api_description": "Estimate the average treatment effect across the entire population", "field": "Data Analysis/Causal Inference", "parameters": {"treatment_variable": {"type": "str", "description": "The name of the treatment variable in the dataset"}, "outcome_variable": {"type": "str", "description": "The name of the outcome variable in the dataset"}}, "required": ["treatment_variable", "outcome_variable"], "responses": {"average_treatment_effect": {"type": "float", "description": "The estimated average treatment effect"}}}
{"api_name": "generateGraph", "api_description": "Generate a graph visualization from data", "field": "Data Analysis/Graph Analytics", "parameters": {"data": {"type": "str", "description": "The input data in a suitable format for graph analysis (e.g., a CSV file, a JSON object)"}, "type": {"type": "str", "description": "The type of graph to be generated (e.g., bar graph, line graph, network graph)"}}, "required": ["data", "type"], "responses": {"graph": {"type": "str", "description": "The generated graph visualization"}}}
{"api_name": "applyDataPrivacyRules", "api_description": "Apply data privacy rules to a dataset", "field": "Data Analysis/Data Governance", "parameters": {"dataset": {"type": "str", "description": "The name or identifier of the dataset you want to apply privacy rules to"}}, "required": ["dataset"], "responses": {"processed_dataset": {"type": "str", "description": "The name or identifier of the processed dataset after applying privacy rules"}}}
{"api_name": "tagSensitiveData", "api_description": "Tag sensitive data within a dataset", "field": "Data Analysis/Data Governance", "parameters": {"dataset": {"type": "str", "description": "The name or identifier of the dataset you want to tag sensitive data within"}}, "required": ["dataset"], "responses": {"tagged_dataset": {"type": "str", "description": "The name or identifier of the dataset with tagged sensitive data"}}}
{"api_name": "retrieveDataOwnership", "api_description": "Retrieve the ownership information for a dataset", "field": "Data Analysis/Data Governance", "parameters": {"dataset": {"type": "str", "description": "The name or identifier of the dataset you want to retrieve ownership information for"}}, "required": ["dataset"], "responses": {"ownership_info": {"type": "str", "description": "Ownership information for the dataset"}}}
{"api_name": "validateDataQuality", "api_description": "Validate the data quality of a specific dataset", "field": "Data Analysis/Data Governance", "parameters": {"dataset_id": {"type": "str", "description": "The ID of the dataset for which you want to validate the data quality"}, "threshold": {"type": "float", "description": "The threshold value for considering data quality as acceptable (e.g., 0.9)"}}, "required": ["dataset_id", "threshold"], "responses": {"quality_status": {"type": "str", "description": "The data quality status of the specified dataset"}}}
{"api_name": "retrieveDataLineage", "api_description": "Retrieve data lineage information", "field": "Data Analysis/Data Governance", "parameters": {"data_source": {"type": "str", "description": "The source of the data (e.g., database, file)"}, "object_id": {"type": "int", "description": "The ID of the data object"}}, "required": ["data_source", "object_id"], "responses": {"lineage_information": {"type": "str", "description": "Data lineage information of the specified object"}}}
{"api_name": "getPolicyList", "api_description": "Retrieve a list of all existing data policies for data governance", "field": "Data Analysis/Data Governance", "parameters": {}, "required": [], "responses": {"policy_list": {"type": "str", "description": "A list of data policies with their unique identifiers and names"}}}
{"api_name": "checkEthicalDataUsage", "api_description": "Check if the data usage is ethical or not", "field": "Data Analysis/Data Ethics", "parameters": {"data": {"type": "str", "description": "The data to be analyzed for ethical usage"}}, "required": ["data"], "responses": {"ethical": {"type": "bool", "description": "Boolean value indicating whether the data usage is ethical or not"}}}
{"api_name": "analyzeDataEthics", "api_description": "Analyze the ethics of a dataset", "field": "Data Analysis/Data Ethics", "parameters": {"dataset": {"type": "str", "description": "The dataset to be analyzed"}, "sensitivity": {"type": "str", "description": "The sensitivity level of the data (e.g., high, medium, low)"}, "country": {"type": "str", "description": "The country in which the data was collected"}}, "required": ["dataset"], "responses": {"ethics_score": {"type": "float", "description": "The ethics score of the dataset"}, "issues_found": {"type": "str", "description": "Description of any ethics issues found in the dataset"}}}
{"api_name": "evaluateDataBias", "api_description": "Evaluate data bias in a dataset", "field": "Data Analysis/Data Ethics", "parameters": {"dataset": {"type": "str", "description": "The dataset to evaluate for bias (e.g., hiring records, loan applications)"}, "protected_attributes": {"type": "str", "description": "The protected attributes to consider for bias assessment (e.g., gender, race)"}, "measures": {"type": "str", "description": "The bias assessment measures to be used (e.g., disparate impact, statistical parity index)"}, "reference_group": {"type": "str", "description": "The reference group to compare with for bias assessment"}}, "required": ["dataset", "protected_attributes"], "responses": {"bias_score": {"type": "float", "description": "The overall bias score of the dataset"}, "protected_attributes_bias": {"type": "str", "description": "Detailed bias assessment for each protected attribute"}}}
{"api_name": "getLMS", "api_description": "Retrieve information about learning management systems", "field": "Education Technology/Learning management systems", "parameters": {"platform": {"type": "str", "description": "The name of the learning management system (e.g., Canvas, Moodle, Blackboard)"}, "user_role": {"type": "str", "description": "The role of the user accessing the system (e.g., student, teacher, administrator)"}}, "required": ["platform"], "responses": {"features": {"type": "str", "description": "The features provided by the learning management system"}, "user_role": {"type": "str", "description": "The user role specified in the request"}}}
{"api_name": "enrollUser", "api_description": "Enroll a user in a course in a learning management system", "field": "Education Technology/Learning management systems", "parameters": {"user_id": {"type": "str", "description": "The ID of the user you want to enroll"}, "course_id": {"type": "str", "description": "The ID of the course in which you want to enroll the user"}}, "required": ["user_id", "course_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the user was successfully enrolled"}}}
{"api_name": "getSubjectPoints", "api_description": "Retrieve the points earned by a student in a specific subject", "field": "Education Technology/Gamification in education", "parameters": {"student_id": {"type": "str", "description": "The ID of the student for whom you want to get the points"}, "subject": {"type": "str", "description": "The specific subject for which you want to retrieve the points"}}, "required": ["student_id", "subject"], "responses": {"points": {"type": "int", "description": "The points earned by the student in the specified subject"}}}
{"api_name": "redeemReward", "api_description": "Redeem a reward for a student", "field": "Education Technology/Gamification in education", "parameters": {"student_id": {"type": "str", "description": "The ID of the student who wants to redeem the reward"}, "reward_id": {"type": "str", "description": "The ID of the reward to be redeemed"}}, "required": ["student_id", "reward_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the reward was successfully redeemed"}}}
{"api_name": "getGamificationUsage", "api_description": "Retrieve information about the usage of gamification in education", "field": "Education Technology/Gamification in education", "parameters": {"location": {"type": "str", "description": "The location where the gamification is being used (e.g., school, university, online platform)"}, "student_age": {"type": "int", "description": "The age range of the students using gamification (e.g., 5-10, 11-14, 15-18)"}, "game_difficulty": {"type": "str", "description": "The difficulty level of the games used for gamification (e.g., easy, intermediate, challenging)"}, "game_type": {"type": "str", "description": "The type of games used for gamification (e.g., quiz, simulation, puzzle)"}, "duration": {"type": "int", "description": "The duration of gamification usage (in minutes/hours)"}}, "required": ["location"], "responses": {"usage_percentage": {"type": "float", "description": "The percentage of usage of gamification in the specified location"}, "most_popular_game": {"type": "str", "description": "The most popular game used for gamification in the specified location"}}}
{"api_name": "unlockReward", "api_description": "Unlock a reward for a student based on their gamification score", "field": "Education Technology/Gamification in education", "parameters": {"student_id": {"type": "int", "description": "The ID of the student for whom you want to unlock a reward"}}, "required": ["student_id"], "responses": {"reward": {"type": "str", "description": "The unlocked reward for the student"}}}
{"api_name": "getFeedbackAnalysis", "api_description": "Analyze student feedback", "field": "Education Technology/Artificial intelligence in education", "parameters": {"course_id": {"type": "str", "description": "The ID of the course for which you want to analyze feedback"}, "date_range": {"type": "str", "description": "Specify a date range for the feedback analysis (e.g., last week, last month)"}}, "required": ["course_id"], "responses": {"positive_feedback_count": {"type": "int", "description": "The count of positive feedback received for the course"}, "negative_feedback_count": {"type": "int", "description": "The count of negative feedback received for the course"}, "feedback_sentiment": {"type": "str", "description": "The overall sentiment of the feedback (positive, negative, neutral)"}}}
{"api_name": "predictStudentDropout", "api_description": "Predict student dropout probability", "field": "Education Technology/Artificial intelligence in education", "parameters": {"student_id": {"type": "str", "description": "The ID of the student for whom you want to predict dropout probability"}, "course_id": {"type": "str", "description": "The ID of the course for which you want to predict dropout probability"}, "time_period": {"type": "str", "description": "Specify a time period for the dropout prediction (e.g., current semester, next month)"}}, "required": ["student_id", "course_id"], "responses": {"dropout_probability": {"type": "float", "description": "The predicted probability of the student dropping out from the specified course"}}}
{"api_name": "commentOnSocialMediaPost", "api_description": "Add a comment to a social media post related to education", "field": "Education Technology/Social media in education", "parameters": {"post_id": {"type": "str", "description": "The ID of the social media post to comment on"}, "content": {"type": "str", "description": "The content of the comment"}}, "required": ["post_id", "content"], "responses": {"success": {"type": "bool", "description": "Indicates if the comment was successfully added"}}}
{"api_name": "createStory", "api_description": "Create a digital story for educational purposes", "field": "Education Technology/Digital storytelling in education", "parameters": {"title": {"type": "str", "description": "The title of the digital story"}, "content": {"type": "str", "description": "The content of the digital story"}, "author": {"type": "str", "description": "The author of the digital story"}}, "required": ["title", "content"], "responses": {"story_id": {"type": "int", "description": "The unique identifier of the created digital story"}}}
{"api_name": "getStory", "api_description": "Retrieve a digital storytelling resource for educational purposes", "field": "Education Technology/Digital storytelling in education", "parameters": {"theme": {"type": "str", "description": "The theme of the digital storytelling resource (e.g., history, science, literature)"}, "grade_level": {"type": "str", "description": "The target grade level of the resource (e.g., elementary, high school)"}, "language": {"type": "str", "description": "The language in which the resource is presented (e.g., English, Spanish)"}}, "required": ["theme", "grade_level"], "responses": {"story_url": {"type": "str", "description": "The URL link to the digital storytelling resource"}, "duration": {"type": "int", "description": "The duration of the storytelling resource in minutes"}}}
{"api_name": "getRobotSimulator", "api_description": "Retrieve a robot simulator software for educational robotics", "field": "Education Technology/Educational robotics", "parameters": {"platform": {"type": "str", "description": "The platform for which you want to get a robot simulator (e.g., Windows, MacOS, Linux)"}, "programming_language": {"type": "str", "description": "The programming language that the robot simulator should support (e.g., Python, C++, Scratch)"}}, "required": ["platform", "programming_language"], "responses": {"simulator": {"type": "str", "description": "The name or link to download the robot simulator software"}}}
{"api_name": "getVideoInfo", "api_description": "Retrieve detailed information about a specific video", "field": "Education Technology/Video-based learning", "parameters": {"video_id": {"type": "str", "description": "The unique identifier of the video"}, "language": {"type": "str", "description": "The language in which the video is available (e.g., English, Spanish, French)"}}, "required": ["video_id"], "responses": {"title": {"type": "str", "description": "The title of the video"}, "description": {"type": "str", "description": "The description of the video"}, "duration": {"type": "int", "description": "The duration of the video in minutes"}, "language": {"type": "str", "description": "The language in which the video is available"}}}
{"api_name": "getCruiseShipInfo", "api_description": "Retrieve information about a specific cruise ship", "field": "Travel and Tourism/Cruise Lines", "parameters": {"ship_name": {"type": "str", "description": "The name of the cruise ship for which you want to get information (e.g., Harmony of the Seas, Queen Mary 2, Norwegian Bliss)"}}, "required": ["ship_name"], "responses": {"ship_name": {"type": "str", "description": "The name of the cruise ship"}, "cruise_line": {"type": "str", "description": "The cruise line operating the ship"}, "vessel_type": {"type": "str", "description": "The type of vessel (e.g., ocean liner, luxury yacht)"}, "capacity": {"type": "int", "description": "The maximum number of passengers the ship can accommodate"}, "length": {"type": "float", "description": "The length of the ship in meters"}}}
{"api_name": "getTravelInsurance", "api_description": "Retrieve travel insurance information", "field": "Travel and Tourism/Travel Insurance", "parameters": {"destination": {"type": "str", "description": "The destination for which you want to get travel insurance (e.g., Maldives, Paris, Bali)"}, "duration": {"type": "int", "description": "The duration of travel in days (e.g., 7, 14, 30)"}, "age": {"type": "int", "description": "The age of the traveler"}}, "required": ["destination", "duration", "age"], "responses": {"insurance_policy": {"type": "str", "description": "The travel insurance policy details"}, "premium": {"type": "float", "description": "The premium amount for the travel insurance policy"}}}
{"api_name": "getCuisineRecommendation", "api_description": "Retrieve recommended cuisine for a specific destination", "field": "Travel and Tourism/Culinary Tourism", "parameters": {"destination": {"type": "str", "description": "The desired travel destination (e.g., Paris, Bangkok, Rome)"}}, "required": ["destination"], "responses": {"cuisine": {"type": "str", "description": "The recommended cuisine for the specified destination"}}}
{"api_name": "getCuisine", "api_description": "Retrieve cuisine information of a location", "field": "Travel and Tourism/Culinary Tourism", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the cuisine information (e.g., Paris, Tokyo, Mexico City)"}}, "required": ["location"], "responses": {"cuisine_type": {"type": "str", "description": "The type of cuisine available at the specified location"}}}
{"api_name": "bookBusinessTravel", "api_description": "Book business travel", "field": "Travel and Tourism/Business Travel", "parameters": {"destination": {"type": "str", "description": "The destination for business travel (e.g., London, New York, Tokyo)"}, "departure_date": {"type": "str", "description": "The departure date for business travel (e.g., YYYY-MM-DD)"}, "return_date": {"type": "str", "description": "The return date for business travel (e.g., YYYY-MM-DD)"}, "flight": {"type": "str", "description": "The selected flight option"}, "hotel": {"type": "str", "description": "The selected hotel option"}}, "required": ["destination", "departure_date", "return_date", "flight", "hotel"], "responses": {"booking_confirmation": {"type": "str", "description": "Confirmation message for the booked business travel"}}}
{"api_name": "getDestinationWeather", "api_description": "Retrieve weather information for a tourist destination", "field": "Travel and Tourism/Destination Management", "parameters": {"destination": {"type": "str", "description": "The name of the tourist destination (e.g., London, Dubai, Bangkok)"}}, "required": ["destination"], "responses": {"temperature": {"type": "float", "description": "The current temperature at the destination"}, "weather_description": {"type": "str", "description": "A brief description of the weather"}, "humidity": {"type": "int", "description": "The humidity level at the destination"}}}
{"api_name": "getTourismPackages", "api_description": "Retrieve information about tourism packages", "field": "Travel and Tourism/Tourism Marketing", "parameters": {"destination": {"type": "str", "description": "The desired tourism destination (e.g., Bali, Paris, New York)"}, "duration": {"type": "int", "description": "The duration of the tour package in days (e.g., 5, 7, 10)"}, "budget": {"type": "float", "description": "The budget range for the tour package (e.g., 1000.0, 2000.0, 5000.0)"}}, "required": ["destination"], "responses": {"packages": {"type": "str", "description": "The available tour packages for the specified destination, duration, and budget"}}}
{"api_name": "bookFlight", "api_description": "Book a flight for a specified destination", "field": "Travel and Tourism/Travel Technology", "parameters": {"origin": {"type": "str", "description": "The departure airport or city"}, "destination": {"type": "str", "description": "The destination airport or city"}, "departure_date": {"type": "str", "description": "The date of departure (e.g., YYYY-MM-DD)"}, "passenger_count": {"type": "int", "description": "The number of passengers"}, "class": {"type": "str", "description": "The desired class of travel (e.g., Economy, Business, First)"}}, "required": ["origin", "destination", "departure_date"], "responses": {"booking_reference": {"type": "str", "description": "The booking reference code"}, "ticket_price": {"type": "float", "description": "The total price of the flight ticket"}, "departure_time": {"type": "str", "description": "The departure time of the flight"}, "arrival_time": {"type": "str", "description": "The arrival time at the destination"}}}
{"api_name": "flightBooking", "api_description": "Book a flight ticket", "field": "Travel and Tourism/Travel Technology", "parameters": {"origin": {"type": "str", "description": "The origin airport for the flight (e.g., JFK, LAX, DXB)"}, "destination": {"type": "str", "description": "The destination airport for the flight (e.g., CDG, SFO, HKG)"}, "departure_date": {"type": "str", "description": "The date of departure for the flight (e.g., 2022-12-31)"}, "return_date": {"type": "str", "description": "The date of return for the flight (e.g., 2023-01-07)"}}, "required": ["origin", "destination", "departure_date"], "responses": {"booking_status": {"type": "str", "description": "The status of the flight booking (e.g., confirmed, pending, cancelled)"}, "booking_reference": {"type": "str", "description": "The unique reference code for the flight booking"}}}
{"api_name": "carRental", "api_description": "Rent a car", "field": "Travel and Tourism/Travel Technology", "parameters": {"pickup_location": {"type": "str", "description": "The location for picking up the rental car (e.g., Miami Airport, London City Center)"}, "return_location": {"type": "str", "description": "The location for returning the rental car (e.g., Los Angeles Airport, Paris Charles de Gaulle)"}, "pickup_date": {"type": "str", "description": "The date of car pickup (e.g., 2022-12-31)"}, "return_date": {"type": "str", "description": "The date of car return (e.g., 2023-01-07)"}, "driver_age": {"type": "int", "description": "The age of the driver renting the car"}}, "required": ["pickup_location", "return_location", "pickup_date", "return_date"], "responses": {"rental_status": {"type": "str", "description": "The status of the car rental (e.g., confirmed, pending, cancelled)"}, "rental_reference": {"type": "str", "description": "The unique reference code for the car rental"}}}
{"api_name": "getTravelConsultancy", "api_description": "Retrieve travel consultancy information", "field": "Travel and Tourism/Travel Consultancy", "parameters": {"destination": {"type": "str", "description": "The desired travel destination (e.g., Paris, Tokyo, New York)"}, "budget": {"type": "float", "description": "The budget allocated for the trip"}, "travel_date": {"type": "str", "description": "The desired date of travel"}, "accommodation": {"type": "str", "description": "Preferred type of accommodation (e.g., hotel, hostel, Airbnb)"}, "duration": {"type": "int", "description": "The number of days for the trip"}}, "required": ["destination"], "responses": {"travel_plan": {"type": "str", "description": "The recommended travel plan for the specified destination"}, "total_cost": {"type": "float", "description": "The estimated total cost of the trip"}}}
{"api_name": "getTravelPhotos", "api_description": "Retrieve travel photos from a specific location", "field": "Travel and Tourism/Travel Photography", "parameters": {"location": {"type": "str", "description": "The location for which you want to get travel photos (e.g., Paris, Tokyo, Rome)"}, "category": {"type": "str", "description": "The category of travel photos you are interested in (e.g., landscapes, architecture, food)"}}, "required": ["location"], "responses": {"photos": {"type": "str", "description": "A list of travel photos at the specified location"}}}
{"api_name": "getSoloTravelTips", "api_description": "Retrieve travel tips and recommendations for solo travelers", "field": "Travel and Tourism/Solo Travel", "parameters": {"destination": {"type": "str", "description": "The desired travel destination (e.g., Paris, Tokyo, Bali)"}, "budget": {"type": "float", "description": "The travel budget in USD for the trip"}, "duration": {"type": "int", "description": "The number of days for the solo travel"}, "interests": {"type": "str", "description": "Specific interests for the trip (e.g., adventure, relaxation, history)"}, "accommodation": {"type": "str", "description": "Preferred type of accommodation (e.g., hotel, hostel, Airbnb)"}}, "required": ["destination"], "responses": {"tips": {"type": "str", "description": "Helpful tips and recommendations for a successful solo travel"}}}
{"api_name": "getDestinationWeddings", "api_description": "Retrieve information about destination weddings", "field": "Travel and Tourism/Destination Weddings", "parameters": {"location": {"type": "str", "description": "The desired wedding location (e.g., Hawaii, Maldives, Santorini)"}, "budget": {"type": "float", "description": "The maximum budget for the wedding in USD"}}, "required": ["location"], "responses": {"wedding_packages": {"type": "str", "description": "The available wedding packages at the specified location"}, "budget_range": {"type": "str", "description": "The price range for wedding packages at the specified location"}}}
{"api_name": "calculateCaloriesBurned", "api_description": "Calculate the number of calories burned during cardiovascular exercise", "field": "Fitness/Cardiovascular exercise", "parameters": {"exercise_type": {"type": "str", "description": "The type of cardiovascular exercise performed (e.g., running, cycling, swimming)"}, "duration": {"type": "int", "description": "The duration of the exercise in minutes"}, "user_weight": {"type": "float", "description": "The weight of the user in kilograms"}}, "required": ["exercise_type", "duration", "user_weight"], "responses": {"calories_burned": {"type": "float", "description": "The number of calories burned during the exercise"}}}
{"api_name": "calculateOneRepMax", "api_description": "Calculate the one-repetition maximum weight for a weightlifting exercise", "field": "Fitness/Weightlifting", "parameters": {"exercise_name": {"type": "str", "description": "The name of the weightlifting exercise"}, "lifting_weight": {"type": "float", "description": "The weight lifted for the exercise"}, "repetitions": {"type": "int", "description": "The number of repetitions performed with the given weight"}}, "required": ["exercise_name", "lifting_weight", "repetitions"], "responses": {"one_rep_max": {"type": "float", "description": "The calculated one-repetition maximum weight for the exercise"}}}
{"api_name": "logWeightlifting", "api_description": "Log weightlifting activity", "field": "Fitness/Weightlifting", "parameters": {"exercise": {"type": "str", "description": "The type of weightlifting exercise performed (e.g., bench press, deadlift, squat)"}, "weight": {"type": "float", "description": "The weight lifted in kilograms"}, "repetitions": {"type": "int", "description": "The number of repetitions completed"}}, "required": ["exercise", "weight", "repetitions"], "responses": {"success": {"type": "bool", "description": "Indicates whether the weightlifting activity was successfully logged"}}}
{"api_name": "getFlexibilityInfo", "api_description": "Retrieve information about flexibility and stretching exercises", "field": "Fitness/Flexibility and stretching", "parameters": {"exercise_type": {"type": "str", "description": "Specify the type of exercise for flexibility and stretching (e.g., yoga, Pilates, static stretching)"}, "duration": {"type": "int", "description": "The desired duration of the exercise in minutes (e.g., 10, 30, 60)"}, "target_area": {"type": "str", "description": "Specify the target area for flexibility and stretching (e.g., upper body, lower body, full body)"}}, "required": ["exercise_type", "duration"], "responses": {"instructions": {"type": "str", "description": "Step-by-step instructions for performing the flexibility and stretching exercise"}, "benefits": {"type": "str", "description": "The benefits of the exercise on flexibility and stretching"}, "video_link": {"type": "str", "description": "A link to a video demonstration of the exercise"}}}
{"api_name": "startHIITSession", "api_description": "Start a high-intensity interval training session", "field": "Fitness/High-intensity interval training (HIIT)", "parameters": {"session_name": {"type": "str", "description": "The name of the HIIT session (e.g., HIIT Workout 1, HIIT Challenge)"}, "exercise_list": {"type": "str", "description": "A list of exercises to be performed during the session (e.g., burpees, push-ups, squats)"}, "work_duration": {"type": "int", "description": "The duration of each work interval in seconds"}, "rest_duration": {"type": "int", "description": "The duration of each rest interval in seconds"}}, "required": ["session_name", "exercise_list", "work_duration", "rest_duration"], "responses": {"status": {"type": "str", "description": "The status of the HIIT session (e.g., In progress, Completed)"}, "total_duration": {"type": "int", "description": "The total duration of the HIIT session in seconds"}}}
{"api_name": "getYogaPose", "api_description": "Retrieve information about a yoga pose", "field": "Fitness/Yoga and Pilates", "parameters": {"pose_name": {"type": "str", "description": "The name of the yoga pose you want information about (e.g., Downward Dog, Warrior II)"}, "difficulty_level": {"type": "str", "description": "Specify the difficulty level of the yoga pose (e.g., beginner, intermediate, advanced)"}}, "required": ["pose_name"], "responses": {"description": {"type": "str", "description": "A brief description of the yoga pose"}, "benefits": {"type": "str", "description": "The benefits of practicing the yoga pose"}, "image_url": {"type": "str", "description": "URL of an image demonstrating the yoga pose"}}}
{"api_name": "getExerciseDifficulty", "api_description": "Retrieve the difficulty level of a bodyweight exercise", "field": "Fitness/Bodyweight exercises", "parameters": {"exercise_name": {"type": "str", "description": "The name of the bodyweight exercise to get the difficulty level of (e.g., pull-up, lunge, handstand)"}}, "required": ["exercise_name"], "responses": {"difficulty_level": {"type": "int", "description": "The difficulty level of the specified bodyweight exercise (0 - beginner, 1 - intermediate, 2 - advanced)"}}}
{"api_name": "trackExercise", "api_description": "Track the details of a resistance training exercise", "field": "Fitness/Resistance training", "parameters": {"exercise_name": {"type": "str", "description": "The name of the resistance training exercise (e.g., bench press, squat, deadlift)"}, "weight_lifted": {"type": "float", "description": "The weight lifted during the exercise in kilograms"}, "repetitions": {"type": "int", "description": "The number of repetitions performed during the exercise"}, "sets": {"type": "int", "description": "The number of sets performed during the exercise"}, "rest_time": {"type": "int", "description": "The rest time in seconds between sets"}}, "required": ["exercise_name", "weight_lifted", "repetitions", "sets"], "responses": {"exercise_duration": {"type": "int", "description": "The total duration of the exercise in minutes"}}}
{"api_name": "startEnduranceTraining", "api_description": "Start a new endurance training session", "field": "Fitness/Endurance training", "parameters": {"activity": {"type": "str", "description": "The type of endurance training activity to be performed (e.g., running, cycling, swimming)"}, "duration": {"type": "int", "description": "The duration of the training session in minutes"}}, "required": ["activity", "duration"], "responses": {"message": {"type": "str", "description": "A confirmation message indicating that the endurance training has started successfully"}}}
{"api_name": "getLiftRecord", "api_description": "Retrieve the lift record for a powerlifter", "field": "Fitness/Powerlifting", "parameters": {"powerlifter_name": {"type": "str", "description": "The name of the powerlifter for whom you want to retrieve the lift record"}, "weight_class": {"type": "str", "description": "The weight class of the powerlifter (e.g., 66kg, 83kg, 105kg)"}}, "required": ["powerlifter_name"], "responses": {"squat": {"type": "float", "description": "The squat weight record of the powerlifter in the specified weight class"}, "bench_press": {"type": "float", "description": "The bench press weight record of the powerlifter in the specified weight class"}, "deadlift": {"type": "float", "description": "The deadlift weight record of the powerlifter in the specified weight class"}}}
{"api_name": "getExerciseTips", "api_description": "Retrieve tips and guidance for powerlifting exercises", "field": "Fitness/Powerlifting", "parameters": {"exercise_name": {"type": "str", "description": "The name of the powerlifting exercise for which you want tips (e.g., squat, bench press, deadlift)"}}, "required": ["exercise_name"], "responses": {"tips": {"type": "str", "description": "Tips and guidance for performing the specified powerlifting exercise"}}}
{"api_name": "getTotalLiftedWeight", "api_description": "Retrieve the total weight lifted by a powerlifter", "field": "Fitness/Powerlifting", "parameters": {"name": {"type": "str", "description": "The name of the powerlifter"}}, "required": ["name"], "responses": {"total_weight": {"type": "float", "description": "The total weight lifted by the powerlifter"}}}
{"api_name": "getMaxSquat", "api_description": "Retrieve the maximum squat weight of a powerlifter", "field": "Fitness/Powerlifting", "parameters": {"name": {"type": "str", "description": "The name of the powerlifter"}}, "required": ["name"], "responses": {"max_squat_weight": {"type": "float", "description": "The maximum squat weight of the powerlifter"}}}
{"api_name": "getMaxBenchPress", "api_description": "Retrieve the maximum bench press weight of a powerlifter", "field": "Fitness/Powerlifting", "parameters": {"name": {"type": "str", "description": "The name of the powerlifter"}}, "required": ["name"], "responses": {"max_bench_press_weight": {"type": "float", "description": "The maximum bench press weight of the powerlifter"}}}
{"api_name": "getGroupFitnessClasses", "api_description": "Retrieve information about group fitness classes", "field": "Fitness/Group fitness classes", "parameters": {"location": {"type": "str", "description": "The location where you want to find group fitness classes (e.g., gym, fitness center)"}, "category": {"type": "str", "description": "The category of group fitness classes you are interested in (e.g., cardio, strength, yoga)"}, "level": {"type": "str", "description": "The skill level required for the group fitness classes (e.g., beginner, intermediate, advanced)"}, "time_of_day": {"type": "str", "description": "Specify a time of day for group fitness classes (e.g., morning, afternoon, evening)"}}, "required": ["location"], "responses": {"classes": {"type": "str", "description": "The group fitness classes available at the specified location"}}}
{"api_name": "getWeight", "api_description": "Retrieve current weight information", "field": "Fitness/Weight management", "parameters": {"user_id": {"type": "str", "description": "The unique identifier of the user"}, "unit": {"type": "str", "description": "The desired unit for weight (e.g., kilograms, pounds)"}, "time_range": {"type": "str", "description": "Specify a time range for weight data (e.g., today, this week, this month)"}}, "required": ["user_id"], "responses": {"weight": {"type": "float", "description": "The current weight of the user"}, "unit": {"type": "str", "description": "The unit of weight in which the weight is provided"}}}
{"api_name": "trackWeightLoss", "api_description": "Track weight loss progress over time", "field": "Fitness/Weight management", "parameters": {"starting_weight": {"type": "float", "description": "The weight at the start of tracking in kilograms"}, "current_weight": {"type": "float", "description": "The current weight in kilograms"}, "target_weight": {"type": "float", "description": "The target weight in kilograms"}}, "required": ["starting_weight", "current_weight", "target_weight"], "responses": {"progress": {"type": "float", "description": "The percentage of weight loss progress"}}}
{"api_name": "bookCoachingSession", "api_description": "Book a coaching session with a specific coach", "field": "Fitness/Fitness coaching and personal training", "parameters": {"location": {"type": "str", "description": "The location where the coaching session will take place (e.g., gym, park, online)"}, "coach_name": {"type": "str", "description": "The name of the coach for the training session"}, "session_type": {"type": "str", "description": "The type of training session you want to book (e.g., cardio, strength, flexibility)"}, "session_length": {"type": "int", "description": "The desired length of the training session in minutes"}, "date": {"type": "str", "description": "The date for the coaching session (e.g., YYYY-MM-DD)"}, "time": {"type": "str", "description": "The time of the coaching session (e.g., HH:MM AM/PM)"}, "user_id": {"type": "str", "description": "The unique identifier of the user booking the session"}}, "required": ["location", "coach_name", "session_type", "date", "time", "user_id"], "responses": {"booking_confirmation": {"type": "bool", "description": "A boolean indicating if the coaching session booking was successful"}}}
{"api_name": "cancelCoachingSession", "api_description": "Cancel a booked coaching session", "field": "Fitness/Fitness coaching and personal training", "parameters": {"session_id": {"type": "str", "description": "The unique identifier of the coaching session to be cancelled"}, "user_id": {"type": "str", "description": "The unique identifier of the user who booked the session"}, "reason": {"type": "str", "description": "The reason for cancelling the coaching session (e.g., schedule conflict, not feeling well)"}, "refund_requested": {"type": "bool", "description": "A boolean indicating if a refund is requested"}}, "required": ["session_id", "user_id", "reason"], "responses": {"cancellation_confirmation": {"type": "bool", "description": "A boolean indicating if the coaching session cancellation was successful"}}}
{"api_name": "getPrintmakingTechniques", "api_description": "Retrieve a list of printmaking techniques", "field": "Art/Printmaking", "parameters": {}, "required": [], "responses": {"techniques": {"type": "str", "description": "A list of printmaking techniques"}}}
{"api_name": "getPrintmakingSupplies", "api_description": "Retrieve a list of necessary supplies for printmaking", "field": "Art/Printmaking", "parameters": {}, "required": [], "responses": {"supplies": {"type": "str", "description": "A list of necessary supplies for printmaking"}}}
{"api_name": "getPrintmakingHistory", "api_description": "Retrieve historical information about printmaking", "field": "Art/Printmaking", "parameters": {"time_period": {"type": "str", "description": "Specify a time period for printmaking history (e.g., Renaissance, Modern Era)"}}, "required": [], "responses": {"history": {"type": "str", "description": "Historical information about printmaking"}}}
{"api_name": "getJewelryDesign", "api_description": "Retrieve jewelry design information", "field": "Art/Jewelry Design", "parameters": {"material": {"type": "str", "description": "The material used for the jewelry design (e.g., gold, silver, diamond)"}, "style": {"type": "str", "description": "The style of the jewelry design (e.g., vintage, modern, minimalist)"}, "gemstone": {"type": "str", "description": "The gemstone used in the jewelry design (e.g., ruby, emerald, sapphire)"}}, "required": ["material", "style"], "responses": {"design_description": {"type": "str", "description": "A description of the jewelry design"}, "image_url": {"type": "str", "description": "URL of an image showcasing the jewelry design"}}}
{"api_name": "editBrochure", "api_description": "Modify an existing brochure design to meet specific requirements", "field": "Art/Graphic Design", "parameters": {"brochure_file": {"type": "str", "description": "The file path or URL of the brochure to be edited"}, "text_changes": {"type": "str", "description": "The desired text changes for the brochure"}, "layout_modifications": {"type": "str", "description": "The requested layout modifications for the brochure"}}, "required": ["brochure_file"], "responses": {"edited_brochure": {"type": "str", "description": "The modified brochure file"}}}
{"api_name": "getWallColorSchemes", "api_description": "Retrieve recommended color schemes for interior wall painting", "field": "Art/Interior Design", "parameters": {"room_type": {"type": "str", "description": "The type of room (e.g., bedroom, living room, dining room)"}, "mood": {"type": "str", "description": "The desired mood for the room (e.g., calm, vibrant, cozy)"}}, "required": ["room_type"], "responses": {"color_schemes": {"type": "str", "description": "A list of recommended color schemes for interior wall painting"}}}
{"api_name": "getArtClasses", "api_description": "Retrieve available art classes for education", "field": "Art/Art Education", "parameters": {"location": {"type": "str", "description": "The location for which you want to find art classes (e.g., city, state, country)"}}, "required": ["location"], "responses": {"classes": {"type": "str", "description": "The available art classes in the specified location"}}}
{"api_name": "getArtworkDetails", "api_description": "Retrieve detailed information about a specific artwork", "field": "Art/Curatorial Studies", "parameters": {"artwork_id": {"type": "str", "description": "The unique identifier of the artwork"}}, "required": ["artwork_id"], "responses": {"title": {"type": "str", "description": "The title of the artwork"}, "artist": {"type": "str", "description": "The name of the artist"}, "description": {"type": "str", "description": "A description of the artwork"}}}
{"api_name": "getCustomerServicePhoneSupport", "api_description": "Retrieve phone support information for customer service", "field": "Customer Service/Phone Support", "parameters": {"customer_id": {"type": "str", "description": "The unique ID of the customer"}, "issue": {"type": "str", "description": "The specific issue the customer is facing (e.g., billing, product inquiry)"}, "preferred_language": {"type": "str", "description": "The preferred language for communication with the customer support"}}, "required": ["customer_id", "issue"], "responses": {"phone_number": {"type": "str", "description": "The phone number of the customer support"}, "availability": {"type": "str", "description": "The availability of customer support for the specified issue and preferred language"}}}
{"api_name": "startPhoneSupport", "api_description": "Initiate a phone support session", "field": "Customer Service/Phone Support", "parameters": {"customer_id": {"type": "str", "description": "The unique identifier of the customer requesting phone support"}, "phone_number": {"type": "str", "description": "The phone number to which the customer support agent can call"}, "language": {"type": "str", "description": "The preferred language for the phone support communication"}}, "required": ["customer_id", "phone_number"], "responses": {"status": {"type": "str", "description": "The status of the phone support session (e.g., initiated, in progress, completed)"}, "agent_name": {"type": "str", "description": "The name of the customer support agent assigned to the phone support session"}}}
{"api_name": "sendSocialMediaReply", "api_description": "Send a reply to a social media message", "field": "Customer Service/Social Media Support", "parameters": {"message_id": {"type": "str", "description": "The ID of the social media message to reply to"}, "reply_text": {"type": "str", "description": "The text of the reply message"}}, "required": ["message_id", "reply_text"], "responses": {"success": {"type": "bool", "description": "Indicates if the reply was successfully sent"}}}
{"api_name": "deleteSocialMediaMessage", "api_description": "Delete a social media message", "field": "Customer Service/Social Media Support", "parameters": {"message_id": {"type": "str", "description": "The ID of the social media message to delete"}}, "required": ["message_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the message was successfully deleted"}}}
{"api_name": "getProductSupport", "api_description": "Retrieve product support information", "field": "Customer Service/Product Support", "parameters": {"product_code": {"type": "str", "description": "The product code for which you want to get support (e.g., PRD1234, ABC5678)"}, "language": {"type": "str", "description": "The desired language for support (e.g., English, Spanish)"}}, "required": ["product_code"], "responses": {"support_content": {"type": "str", "description": "The product support content for the specified product and language"}}}
{"api_name": "trackRefundStatus", "api_description": "Track the status of a refund", "field": "Customer Service/Refund and Return Handling", "parameters": {"refund_transaction_id": {"type": "str", "description": "The unique identifier of the refund transaction"}}, "required": ["refund_transaction_id"], "responses": {"refund_status": {"type": "str", "description": "The current status of the refund"}, "refund_amount": {"type": "float", "description": "The refunded amount"}}}
{"api_name": "initiateReturn", "api_description": "Initiate a return request for a specific order", "field": "Customer Service/Refund and Return Handling", "parameters": {"order_id": {"type": "str", "description": "The unique identifier of the order for which return is requested"}, "reason": {"type": "str", "description": "The reason for return (e.g., defective item, wrong item, change of mind)"}, "return_address": {"type": "str", "description": "The address to which the return should be sent"}}, "required": ["order_id", "reason"], "responses": {"return_id": {"type": "str", "description": "The unique identifier assigned to the return request"}, "status": {"type": "str", "description": "The current status of the return request"}}}
{"api_name": "requestRefund", "api_description": "Request a refund for a completed return request", "field": "Customer Service/Refund and Return Handling", "parameters": {"return_id": {"type": "str", "description": "The unique identifier of the return request"}, "refund_amount": {"type": "float", "description": "The amount to be refunded"}}, "required": ["return_id", "refund_amount"], "responses": {"refund_id": {"type": "str", "description": "The unique identifier assigned to the refund request"}, "status": {"type": "str", "description": "The status of the refund request"}}}
{"api_name": "evaluateQuality", "api_description": "Evaluate the quality of customer service", "field": "Customer Service/Quality Assurance", "parameters": {"service_agent": {"type": "str", "description": "The name or ID of the customer service agent being evaluated"}}, "required": ["service_agent"], "responses": {"score": {"type": "int", "description": "The quality score of the customer service agent"}}}
{"api_name": "escalateIssue", "api_description": "Escalate a customer issue to a higher level of management", "field": "Customer Service/Escalation Management", "parameters": {"issue_code": {"type": "str", "description": "The unique code of the customer issue"}, "escalation_level": {"type": "str", "description": "The desired level of escalation for the issue (e.g., Level 1, Level 2, Level 3)"}, "additional_notes": {"type": "str", "description": "Any additional notes or comments regarding the escalation"}}, "required": ["issue_code", "escalation_level"], "responses": {"escalation_id": {"type": "str", "description": "The ID assigned to the escalated issue"}, "message": {"type": "str", "description": "A confirmation message indicating the escalation has been initiated"}}}
{"api_name": "createKnowledgeBase", "api_description": "Create a new knowledge base", "field": "Customer Service/Knowledge Base Management", "parameters": {"name": {"type": "str", "description": "The name of the new knowledge base"}, "category": {"type": "str", "description": "The category of the knowledge base"}, "language": {"type": "str", "description": "The language used in the knowledge base (e.g., English, Spanish, French)"}}, "required": ["name"], "responses": {"knowledgeBaseId": {"type": "str", "description": "The unique identification of the created knowledge base"}}}
{"api_name": "deleteArticle", "api_description": "Delete an article from the knowledge base", "field": "Customer Service/Knowledge Base Management", "parameters": {"article_id": {"type": "str", "description": "The unique identifier of the article to be deleted"}}, "required": ["article_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the article was successfully deleted"}}}
{"api_name": "recordData", "api_description": "Record customer data and keep track of interactions", "field": "Customer Service/Data Entry and Record-keeping", "parameters": {"customer_id": {"type": "str", "description": "The unique identifier of the customer"}, "interaction_type": {"type": "str", "description": "The type of interaction with the customer (e.g., phone call, email, chat)"}, "notes": {"type": "str", "description": "Additional notes or comments related to the interaction"}, "timestamp": {"type": "str", "description": "The timestamp of the interaction"}}, "required": ["customer_id", "interaction_type"], "responses": {"status": {"type": "str", "description": "The status of the data recording process (e.g., success, error)"}}}
{"api_name": "collectFeedback", "api_description": "Collect and analyze customer feedback", "field": "Customer Service/Feedback Collection and Analysis", "parameters": {"customer_id": {"type": "str", "description": "The unique ID of the customer giving feedback"}, "feedback_text": {"type": "str", "description": "The text feedback provided by the customer"}, "feedback_rating": {"type": "int", "description": "The numeric rating provided by the customer (e.g., 1-5)"}, "timestamp": {"type": "str", "description": "The timestamp when the feedback was submitted (e.g., YYYY-MM-DD HH:MM:SS)"}}, "required": ["customer_id", "feedback_text"], "responses": {"sentiment_score": {"type": "float", "description": "The sentiment score of the feedback (e.g., -1.0 to 1.0)"}, "feedback_category": {"type": "str", "description": "The categorized feedback (e.g., product, service, website)"}, "response_time": {"type": "str", "description": "The time taken to respond to the customer feedback (e.g., 1 hour, 24 hours)"}}}
{"api_name": "notifyCustomer", "api_description": "Send a notification to engage with the customer", "field": "Customer Service/Customer Engagement", "parameters": {"customer_id": {"type": "str", "description": "The ID of the customer"}, "notification_content": {"type": "str", "description": "The content of the notification"}}, "required": ["customer_id", "notification_content"], "responses": {"success": {"type": "bool", "description": "Indicates if the notification was successfully sent"}}}
{"api_name": "sendSurvey", "api_description": "Send a customer survey to gather feedback", "field": "Customer Service/Customer Surveys and Feedback", "parameters": {"survey_type": {"type": "str", "description": "Specify the type of survey to be sent (e.g., general satisfaction, product feedback)"}, "survey_questions": {"type": "str", "description": "Provide the survey questions in a comma-separated format (e.g., How satisfied are you with our service?, What improvements would you suggest?)"}, "target_customers": {"type": "str", "description": "Specify the target customers for the survey (e.g., all customers, customers who made a recent purchase)"}, "delivery_method": {"type": "str", "description": "Choose the delivery method for the survey (e.g., email, SMS)"}, "sender": {"type": "str", "description": "Specify the sender of the survey (e.g., company name, customer service team)"}, "deadline": {"type": "str", "description": "Set a deadline for customers to respond to the survey (e.g., 7 days, 2 weeks)"}}, "required": ["survey_type", "survey_questions", "target_customers", "delivery_method", "sender"], "responses": {"survey_id": {"type": "str", "description": "Unique identifier for the sent survey"}, "responses_received": {"type": "int", "description": "Number of responses received so far"}}}
{"api_name": "submitSurvey", "api_description": "Submit a customer survey", "field": "Customer Service/Customer Surveys and Feedback", "parameters": {"customer_id": {"type": "str", "description": "The ID of the customer who is submitting the survey"}, "survey_id": {"type": "str", "description": "The ID of the survey being submitted"}, "answers": {"type": "str", "description": "The answers provided by the customer (e.g., 'Yes', 'No', 'Satisfied', 'Neutral', 'Dissatisfied')"}}, "required": ["customer_id", "survey_id", "answers"], "responses": {"status": {"type": "str", "description": "The status of the survey submission (e.g., 'Success', 'Error')"}}}
{"api_name": "updateWebsite", "api_description": "Update an existing website", "field": "Information Technology/Web Development", "parameters": {"domain": {"type": "str", "description": "The domain of the website to update"}, "name": {"type": "str", "description": "The new name of the website"}, "template": {"type": "str", "description": "The new template to use for the website"}}, "required": ["domain"], "responses": {"success": {"type": "bool", "description": "Indicates whether the website update was successful"}}}
{"api_name": "addPage", "api_description": "Add a new page to an existing website", "field": "Information Technology/Web Development", "parameters": {"website_id": {"type": "str", "description": "The ID of the website to which the page needs to be added"}, "page_title": {"type": "str", "description": "The title of the new page"}, "content": {"type": "str", "description": "The content to be displayed on the new page"}, "layout": {"type": "str", "description": "The layout of the new page"}}, "required": ["website_id", "page_title"], "responses": {"status": {"type": "str", "description": "The status of the page addition process"}}}
{"api_name": "uploadImage", "api_description": "Upload an image to a specific website", "field": "Information Technology/Web Development", "parameters": {"website_id": {"type": "str", "description": "The ID of the website to which the image needs to be uploaded"}, "image": {"type": "str", "description": "The image file to be uploaded"}, "alt_text": {"type": "str", "description": "The alternative text for the image"}}, "required": ["website_id", "image"], "responses": {"status": {"type": "str", "description": "The status of the image upload process"}}}
{"api_name": "detectIntruders", "api_description": "Detect and identify potential intruders in the network", "field": "Information Technology/Network Security", "parameters": {"ip": {"type": "str", "description": "The IP address of the network to be monitored for intrusions"}}, "required": ["ip"], "responses": {"intruders_detected": {"type": "bool", "description": "Indicates whether any potential intruders were detected in the network"}}}
{"api_name": "blockIP", "api_description": "Block a specific IP address from accessing the network", "field": "Information Technology/Network Security", "parameters": {"ip": {"type": "str", "description": "The IP address to be blocked from accessing the network"}}, "required": ["ip"], "responses": {"block_successful": {"type": "bool", "description": "Indicates whether the IP address was successfully blocked"}}}
{"api_name": "monitorTraffic", "api_description": "Monitor network traffic and analyze patterns", "field": "Information Technology/Network Security", "parameters": {"start_time": {"type": "str", "description": "The start time for traffic monitoring (e.g., 2022-01-01 08:00:00)"}, "end_time": {"type": "str", "description": "The end time for traffic monitoring (e.g., 2022-01-01 18:00:00)"}}, "required": ["start_time", "end_time"], "responses": {"traffic_data": {"type": "str", "description": "The analyzed traffic data for the specified time period"}}}
{"api_name": "checkIpAddress", "api_description": "Check if an IP address is safe or not.", "field": "Information Technology/Network Security", "parameters": {"ip_address": {"type": "str", "description": "The IP address to be checked for safety"}}, "required": ["ip_address"], "responses": {"is_safe": {"type": "bool", "description": "Indicates whether the IP address is safe or not"}}}
{"api_name": "deleteVirtualMachine", "api_description": "Delete a virtual machine from the cloud", "field": "Information Technology/Cloud Computing", "parameters": {"vm_id": {"type": "str", "description": "The ID of the virtual machine to be deleted"}}, "required": ["vm_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the virtual machine is successfully deleted"}}}
{"api_name": "stopVirtualMachine", "api_description": "Stop a virtual machine in the cloud", "field": "Information Technology/Cloud Computing", "parameters": {"vm_id": {"type": "str", "description": "The ID of the virtual machine to be stopped"}}, "required": ["vm_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the virtual machine is successfully stopped"}}}
{"api_name": "deleteInstance", "api_description": "Delete a virtual machine instance from the cloud", "field": "Information Technology/Cloud Computing", "parameters": {"instance_id": {"type": "str", "description": "The unique identifier of the instance to be deleted"}}, "required": ["instance_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the instance deletion was successful or not"}}}
{"api_name": "resizeInstance", "api_description": "Change the size of a virtual machine instance in the cloud", "field": "Information Technology/Cloud Computing", "parameters": {"instance_id": {"type": "str", "description": "The unique identifier of the instance to be resized"}, "new_cpu_cores": {"type": "int", "description": "The new number of CPU cores for the instance"}, "new_memory": {"type": "str", "description": "The new amount of memory allocated for the instance (e.g., 8GB, 16GB)"}, "new_disk_size": {"type": "str", "description": "The new size of the disk for the instance (e.g., 100GB, 500GB)"}}, "required": ["instance_id", "new_cpu_cores", "new_memory", "new_disk_size"], "responses": {"success": {"type": "bool", "description": "Indicates whether the instance resize was successful or not"}}}
{"api_name": "createSoftwareProject", "api_description": "Create a new software project", "field": "Information Technology/Software Engineering", "parameters": {"project_name": {"type": "str", "description": "The name of the software project"}, "team_size": {"type": "int", "description": "The number of team members working on the project"}, "technology_stack": {"type": "str", "description": "The technology stack to be used in the project (e.g., Java, Python, React)"}, "deadline": {"type": "str", "description": "The deadline for completing the project"}}, "required": ["project_name", "team_size", "technology_stack"], "responses": {"project_id": {"type": "str", "description": "The unique identifier for the created software project"}}}
{"api_name": "getHardwareInfo", "api_description": "Retrieve hardware information for a given device", "field": "Information Technology/Hardware Engineering", "parameters": {"device_name": {"type": "str", "description": "The name of the device for which you want to retrieve hardware information (e.g., smartphone, laptop, server)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the device (e.g., Apple, HP, Dell)"}, "year_of_manufacture": {"type": "int", "description": "The year the device was manufactured (e.g., 2010, 2018, 2022)"}, "serial_number": {"type": "str", "description": "The serial number of the device"}}, "required": ["device_name", "manufacturer"], "responses": {"processor": {"type": "str", "description": "The processor used in the device"}, "ram": {"type": "int", "description": "The amount of RAM in the device (in gigabytes)"}, "storage": {"type": "str", "description": "The storage capacity of the device"}, "display": {"type": "str", "description": "The display specifications of the device"}}}
{"api_name": "getSupportedConnectivity", "api_description": "Retrieve the supported connectivity options of a device", "field": "Information Technology/Hardware Engineering", "parameters": {"device_name": {"type": "str", "description": "The name of the device for which you want to get the supported connectivity options (e.g., iPhone 11, Samsung Galaxy S20)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the device (e.g., Apple, Samsung)"}}, "required": ["device_name", "manufacturer"], "responses": {"wifi": {"type": "bool", "description": "Indicates if the device supports WiFi connectivity"}, "bluetooth": {"type": "bool", "description": "Indicates if the device supports Bluetooth connectivity"}, "nfc": {"type": "bool", "description": "Indicates if the device supports NFC (Near Field Communication) connectivity"}, "usb_type": {"type": "str", "description": "The type of USB connectivity supported by the device"}}}
{"api_name": "getUserInfo", "api_description": "Retrieve user information", "field": "Information Technology/Information Systems", "parameters": {"user_id": {"type": "int", "description": "The ID of the user for whom you want to retrieve information"}}, "required": ["user_id"], "responses": {"user_info": {"type": "str", "description": "The information of the user, including name, email, role, and department"}}}
{"api_name": "getSalesReport", "api_description": "Retrieve sales report", "field": "Information Technology/Information Systems", "parameters": {"start_date": {"type": "str", "description": "The start date of the sales report (e.g., '2021-01-01')"}, "end_date": {"type": "str", "description": "The end date of the sales report (e.g., '2021-12-31')"}, "region": {"type": "str", "description": "The region for which you want to retrieve sales report (e.g., 'North America', 'Europe')"}}, "required": ["start_date", "end_date"], "responses": {"sales_report": {"type": "str", "description": "The sales report for the specified date range and region"}}}
{"api_name": "getDatabaseInfo", "api_description": "Retrieve information about a database", "field": "Information Technology/Information Systems", "parameters": {"database_name": {"type": "str", "description": "The name of the database for which you want to retrieve information"}}, "required": ["database_name"], "responses": {"size": {"type": "int", "description": "The size of the specified database in megabytes"}, "tables": {"type": "int", "description": "The number of tables in the specified database"}, "users": {"type": "int", "description": "The number of registered users in the specified database"}}}
{"api_name": "getDatabaseBackup", "api_description": "Retrieve a backup of a database", "field": "Information Technology/Information Systems", "parameters": {"database_name": {"type": "str", "description": "The name of the database for which you want to retrieve a backup"}}, "required": ["database_name"], "responses": {"backup_file": {"type": "str", "description": "The file path to the backup of the specified database"}}}
{"api_name": "checkSSLExpiration", "api_description": "Check the expiration date of an SSL certificate", "field": "Information Technology/Cybersecurity", "parameters": {"domain": {"type": "str", "description": "The domain name for which the SSL certificate needs to be checked"}}, "required": ["domain"], "responses": {"expiration_date": {"type": "str", "description": "The expiration date of the SSL certificate"}}}
{"api_name": "scanVulnerabilities", "api_description": "Scan a system or network for vulnerabilities", "field": "Information Technology/Cybersecurity", "parameters": {"target": {"type": "str", "description": "The target system or network to be scanned"}, "scan_type": {"type": "str", "description": "The type of scan to be performed (e.g., port scanning, vulnerability scanning)"}}, "required": ["target", "scan_type"], "responses": {"vulnerabilities": {"type": "str", "description": "The detected vulnerabilities"}}}
{"api_name": "assignTask", "api_description": "Assign a task to a team member in an IT project", "field": "Information Technology/IT Project Management", "parameters": {"project_id": {"type": "int", "description": "The unique identifier of the IT project"}, "task_name": {"type": "str", "description": "The name of the task to be assigned"}, "assignee": {"type": "str", "description": "The team member to whom the task will be assigned"}, "due_date": {"type": "str", "description": "The deadline for completing the task (e.g., yyyy-mm-dd)"}, "priority": {"type": "str", "description": "The priority level of the task (e.g., High, Medium, Low)"}}, "required": ["project_id", "task_name", "assignee"], "responses": {"task_id": {"type": "int", "description": "The unique identifier for the assigned task"}}}
{"api_name": "performRobotTask", "api_description": "Instruct a robot to perform a specific task", "field": "Information Technology/Robotics", "parameters": {"robot_id": {"type": "str", "description": "The ID of the robot to be instructed"}, "task": {"type": "str", "description": "The task that the robot should perform (e.g., pick up item A, deliver package B)"}}, "required": ["robot_id", "task"], "responses": {"success": {"type": "bool", "description": "Indicates if the robot successfully performed the task"}}}
{"api_name": "robotTask", "api_description": "Assign a specific task to the robot", "field": "Information Technology/Robotics", "parameters": {"robot_id": {"type": "str", "description": "The ID of the robot to perform the task"}, "task": {"type": "str", "description": "The task to be performed by the robot (e.g., cleaning, carrying objects, surveillance)"}, "priority": {"type": "int", "description": "The priority level of the task (1-10)"}, "duration": {"type": "int", "description": "The estimated duration for the task in minutes"}}, "required": ["robot_id", "task"], "responses": {"success": {"type": "bool", "description": "Indicates whether the task assignment was successful"}}}
{"api_name": "getFirmwareVersion", "api_description": "Retrieve the firmware version of an embedded system device", "field": "Information Technology/Embedded Systems", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the embedded system device (e.g., ESD001)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the embedded system device (e.g., Microchip, Texas Instruments)"}, "product_name": {"type": "str", "description": "The name of the product the embedded system device is a part of (e.g., Arduino Uno, Raspberry Pi 4)"}, "serial_number": {"type": "str", "description": "The serial number of the embedded system device (e.g., ABC123)"}, "location": {"type": "str", "description": "The physical location of the embedded system device (e.g., Room 101, Server Rack A)"}, "timestamp": {"type": "int", "description": "The timestamp at which the firmware version is required (e.g., 1638500000)"}, "data_format": {"type": "str", "description": "The format of the firmware version data (e.g., JSON, XML)"}}, "required": ["device_id", "manufacturer", "product_name"], "responses": {"firmware_version": {"type": "str", "description": "The firmware version of the specified embedded system device"}}}
{"api_name": "getEmbeddedSystemInfo", "api_description": "Retrieve information about embedded systems", "field": "Information Technology/Embedded Systems", "parameters": {"device": {"type": "str", "description": "The name of the embedded device you are interested in (e.g., Raspberry Pi, Arduino)"}, "application": {"type": "str", "description": "The specific application or use case for the embedded system (e.g., home automation, robotics)"}, "language": {"type": "str", "description": "The programming language used for development of the embedded system (e.g., C, C++, Python)"}, "interface": {"type": "str", "description": "The type of interface used to communicate with the embedded system (e.g., UART, SPI, I2C)"}, "power_source": {"type": "str", "description": "The power source used by the embedded system (e.g., battery, USB, AC power)"}}, "required": ["device"], "responses": {"device_info": {"type": "str", "description": "Detailed information about the specified embedded device"}, "application_info": {"type": "str", "description": "Information about the specific application or use case"}, "language_info": {"type": "str", "description": "Details about the programming language used"}, "interface_info": {"type": "str", "description": "Information about the interface used for communication"}, "power_source_info": {"type": "str", "description": "Details about the power source used"}}}
{"api_name": "submitTicket", "api_description": "Submit a support ticket to IT department", "field": "Information Technology/IT Support", "parameters": {"user": {"type": "str", "description": "The username of the person submitting the ticket"}, "issue": {"type": "str", "description": "Description of the IT issue being faced"}}, "required": ["user", "issue"], "responses": {"ticket_id": {"type": "str", "description": "Unique ID assigned to the submitted ticket"}}}
{"api_name": "resolveTicket", "api_description": "Resolve a submitted IT support ticket", "field": "Information Technology/IT Support", "parameters": {"ticket_id": {"type": "str", "description": "The ID of the IT support ticket"}, "resolution": {"type": "str", "description": "Description of the solution or resolution to the IT issue"}}, "required": ["ticket_id", "resolution"], "responses": {"success": {"type": "bool", "description": "Boolean indicating if the ticket was successfully resolved"}}}
{"api_name": "assignTicket", "api_description": "Assign an IT support ticket to an IT support staff", "field": "Information Technology/IT Support", "parameters": {"ticket_id": {"type": "str", "description": "The ID of the IT support ticket"}, "assignee": {"type": "str", "description": "Username of the IT support staff to whom the ticket should be assigned"}}, "required": ["ticket_id", "assignee"], "responses": {"success": {"type": "bool", "description": "Boolean indicating if the ticket was successfully assigned"}}}
{"api_name": "getITSupport", "api_description": "Retrieve IT support information", "field": "Information Technology/IT Support", "parameters": {"issue_type": {"type": "str", "description": "The type of IT issue you are facing (e.g., network connectivity, software installation, hardware malfunction)"}, "location": {"type": "str", "description": "The location where the IT issue is occurring (e.g., office, home, remote location)"}, "contact_info": {"type": "str", "description": "Your contact information (e.g., email address, phone number)"}, "severity": {"type": "str", "description": "The severity level of the IT issue (e.g., low, medium, high)"}}, "required": ["issue_type", "location"], "responses": {"ticket_id": {"type": "str", "description": "The unique ID assigned to the IT support ticket"}, "assigned_staff": {"type": "str", "description": "The staff member assigned to resolve the IT issue"}, "estimated_resolution_time": {"type": "str", "description": "The estimated time for resolution of the IT issue"}}}
{"api_name": "getSupportTicketStatus", "api_description": "Retrieve status of IT support ticket", "field": "Information Technology/IT Support", "parameters": {"ticket_id": {"type": "str", "description": "The ID of the support ticket for which you want to retrieve the status"}}, "required": ["ticket_id"], "responses": {"status": {"type": "str", "description": "The status of the support ticket"}}}
{"api_name": "createSupportTicket", "api_description": "Create a new IT support ticket", "field": "Information Technology/IT Support", "parameters": {"issue_description": {"type": "str", "description": "Description of the IT issue you are facing"}, "priority": {"type": "str", "description": "The priority of the support ticket (e.g., high, medium, low)"}, "contact_email": {"type": "str", "description": "Your email address for contact"}}, "required": ["issue_description", "priority", "contact_email"], "responses": {"ticket_id": {"type": "str", "description": "The unique ID assigned to the support ticket"}}}
{"api_name": "assignSupportTicket", "api_description": "Assign a support ticket to an IT support agent", "field": "Information Technology/IT Support", "parameters": {"ticket_id": {"type": "str", "description": "The ID of the support ticket to be assigned"}, "agent_id": {"type": "str", "description": "The ID of the IT support agent to whom the ticket should be assigned"}}, "required": ["ticket_id", "agent_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the ticket assignment was successful"}}}
{"api_name": "getWebsiteTraffic", "api_description": "Retrieve website traffic information", "field": "Information Technology/Digital Marketing", "parameters": {"website": {"type": "str", "description": "The website for which you want to get the traffic data (e.g., www.example.com)"}, "time_period": {"type": "str", "description": "Specify the time period for which you want to get the traffic data (e.g., last 7 days, last month)"}, "country": {"type": "str", "description": "Filter the traffic data for a specific country (e.g., United States, United Kingdom)"}}, "required": ["website"], "responses": {"visitors": {"type": "int", "description": "The number of visitors to the specified website"}, "page_views": {"type": "int", "description": "The total number of page views on the specified website"}, "bounce_rate": {"type": "float", "description": "The percentage of visitors who leave the website without visiting any other pages"}}}
{"api_name": "getITGovernanceFramework", "api_description": "Retrieve information about IT governance frameworks", "field": "Information Technology/IT Governance", "parameters": {"framework": {"type": "str", "description": "The name of the IT governance framework you want information about (e.g., COBIT, ITIL, ISO/IEC 38500)"}, "language": {"type": "str", "description": "The language in which you want the information (e.g., English, Spanish, French)"}, "version": {"type": "str", "description": "The version of the framework (e.g., 4.1, v3, 2018)"}}, "required": ["framework"], "responses": {"description": {"type": "str", "description": "A brief description of the IT governance framework"}, "benefits": {"type": "str", "description": "The benefits of implementing the framework in an organization"}, "resources": {"type": "str", "description": "Additional resources related to the framework"}}}
{"api_name": "getIoTData", "api_description": "Retrieve real-time data from Internet of Things devices", "field": "Information Technology/Internet of Things", "parameters": {"device_id": {"type": "str", "description": "The ID of the IoT device for which you want to retrieve data"}, "data_type": {"type": "str", "description": "The type of data you want to retrieve from the device (e.g., temperature, humidity, pressure)"}}, "required": ["device_id"], "responses": {"data": {"type": "str", "description": "The retrieved data from the IoT device"}}}
{"api_name": "getHCI", "api_description": "Retrieve information about human-computer interaction", "field": "Information Technology/Human-Computer Interaction", "parameters": {}, "required": [], "responses": {"hci_intro": {"type": "str", "description": "Introduction to human-computer interaction"}, "hci_principles": {"type": "str", "description": "Principles of human-computer interaction"}, "hci_methods": {"type": "str", "description": "Methods used in human-computer interaction"}}}
{"api_name": "levelUpCharacter", "api_description": "Increase the level of a game character", "field": "Information Technology/Game Development", "parameters": {"character_id": {"type": "str", "description": "The ID of the character to level up"}, "level_increase": {"type": "int", "description": "The number of levels to increase the character's level"}}, "required": ["character_id", "level_increase"], "responses": {"new_level": {"type": "int", "description": "The new level of the character after leveling up"}, "message": {"type": "str", "description": "A message indicating the success or failure of leveling up"}}}
{"api_name": "equipItem", "api_description": "Equip an item to a game character", "field": "Information Technology/Game Development", "parameters": {"character_id": {"type": "str", "description": "The ID of the character to equip the item to"}, "item_id": {"type": "str", "description": "The ID of the item to be equipped"}}, "required": ["character_id", "item_id"], "responses": {"message": {"type": "str", "description": "A message indicating the success or failure of equipping the item"}}}
{"api_name": "runCommand", "api_description": "Execute a command on a remote server", "field": "Information Technology/IT Operations", "parameters": {"server": {"type": "str", "description": "The IP address or hostname of the server"}, "command": {"type": "str", "description": "The command to be executed on the server"}, "username": {"type": "str", "description": "The username to authenticate with the server"}, "password": {"type": "str", "description": "The password to authenticate with the server"}}, "required": ["server", "command"], "responses": {"output": {"type": "str", "description": "The output produced by the command execution on the server"}}}
{"api_name": "monitorResourceUsage", "api_description": "Monitor resource usage of a server", "field": "Information Technology/IT Operations", "parameters": {"server": {"type": "str", "description": "The IP address or hostname of the server"}}, "required": ["server"], "responses": {"cpu_usage": {"type": "float", "description": "The CPU usage in percentage"}, "memory_usage": {"type": "float", "description": "The memory usage in percentage"}, "disk_usage": {"type": "float", "description": "The disk usage in percentage"}}}
{"api_name": "deployApplication", "api_description": "Deploy an application on a server", "field": "Information Technology/IT Operations", "parameters": {"server": {"type": "str", "description": "The IP address or hostname of the server"}, "application_file": {"type": "str", "description": "The path to the application file"}, "database_credentials": {"type": "str", "description": "The credentials for the database connection"}}, "required": ["server", "application_file"], "responses": {"status": {"type": "str", "description": "The deployment status"}}}
{"api_name": "getDataWarehouseStatus", "api_description": "Retrieve the current status of a data warehouse", "field": "Information Technology/Data Warehousing", "parameters": {"warehouse_id": {"type": "str", "description": "The ID of the data warehouse for which you want to retrieve the status"}}, "required": ["warehouse_id"], "responses": {"status": {"type": "str", "description": "The current status of the specified data warehouse"}}}
{"api_name": "deleteDataWarehouse", "api_description": "Delete a data warehouse", "field": "Information Technology/Data Warehousing", "parameters": {"warehouse_id": {"type": "str", "description": "The ID of the data warehouse to be deleted"}}, "required": ["warehouse_id"], "responses": {"message": {"type": "str", "description": "A message confirming the deletion of the data warehouse"}}}
{"api_name": "addDataToWarehouse", "api_description": "Add data to a data warehouse", "field": "Information Technology/Data Warehousing", "parameters": {"warehouse_id": {"type": "str", "description": "The ID of the data warehouse to which you want to add data"}, "data_file": {"type": "str", "description": "The path or URL of the file containing the data to be added"}}, "required": ["warehouse_id", "data_file"], "responses": {"message": {"type": "str", "description": "A message confirming the successful addition of data to the data warehouse"}}}
{"api_name": "runSoftwareTests", "api_description": "Run software tests on a given application", "field": "Information Technology/Software Testing", "parameters": {"application": {"type": "str", "description": "The name or path of the application to be tested"}, "test_suite": {"type": "str", "description": "The test suite to be executed on the application"}, "environment": {"type": "str", "description": "The environment in which the tests will be executed (e.g., development, staging, production)"}}, "required": ["application"], "responses": {"test_results": {"type": "str", "description": "The output results of the software tests"}}}
{"api_name": "generateTestCoverage", "api_description": "Generate test coverage report for a given software", "field": "Information Technology/Software Testing", "parameters": {"software": {"type": "str", "description": "The name or ID of the software to generate test coverage"}}, "required": ["software"], "responses": {"report": {"type": "str", "description": "The test coverage report of the software"}}}
{"api_name": "verifyTestCases", "api_description": "Verify the correctness of test cases for a specific software", "field": "Information Technology/Software Testing", "parameters": {"software": {"type": "str", "description": "The name or ID of the software to verify test cases"}}, "required": ["software"], "responses": {"correctness": {"type": "bool", "description": "The correctness of the test cases (true = correct, false = incorrect)"}, "errors": {"type": "str", "description": "Error messages (if any) encountered during test case verification"}}}
{"api_name": "createNetworkDevice", "api_description": "Create a new network device", "field": "Information Technology/Network Administration", "parameters": {"device_type": {"type": "str", "description": "The type of network device to create (e.g., router, switch, firewall)"}, "location": {"type": "str", "description": "The location of the network device (e.g., data center, branch office)"}, "ip_address": {"type": "str", "description": "The IP address of the network device"}, "username": {"type": "str", "description": "The username for accessing the network device"}, "password": {"type": "str", "description": "The password for accessing the network device"}}, "required": ["device_type", "ip_address", "username", "password"], "responses": {"device_id": {"type": "str", "description": "The unique identifier of the created network device"}}}
{"api_name": "getDeviceOrientation", "api_description": "Get the orientation of a mobile device", "field": "Information Technology/Front-end Development", "parameters": {}, "required": [], "responses": {"orientation": {"type": "str", "description": "The orientation of the device (e.g., portrait, landscape)"}}}
{"api_name": "getBrowserSize", "api_description": "Retrieve the size of the user's browser window", "field": "Information Technology/Front-end Development", "parameters": {}, "required": [], "responses": {"width": {"type": "int", "description": "The width of the browser window"}, "height": {"type": "int", "description": "The height of the browser window"}}}
{"api_name": "validatePassword", "api_description": "Check if a password meets certain criteria", "field": "Information Technology/Front-end Development", "parameters": {"password": {"type": "str", "description": "The password to be validated"}, "min_length": {"type": "int", "description": "The minimum length of the password", "default": 8}, "require_special_char": {"type": "bool", "description": "Whether the password should contain a special character", "default": false}}, "required": ["password"], "responses": {"valid": {"type": "bool", "description": "True if the password meets the criteria, False otherwise"}}}
{"api_name": "login", "api_description": "Authenticate and log in a user", "field": "Information Technology/Back-end Development", "parameters": {"username": {"type": "str", "description": "The username of the user to log in"}, "password": {"type": "str", "description": "The password for the user"}, "remember_me": {"type": "bool", "description": "Indicates if the user wants to stay logged in"}}, "required": ["username", "password"], "responses": {"user_id": {"type": "int", "description": "The unique identifier for the logged in user"}, "message": {"type": "str", "description": "A success message indicating the user was logged in"}}}
{"api_name": "createLayout", "api_description": "Create a graphic design layout", "field": "Design/Graphic Design", "parameters": {"template": {"type": "str", "description": "The template to use for the layout"}, "color_scheme": {"type": "str", "description": "The color scheme for the design"}, "font": {"type": "str", "description": "The font style to be used in the design"}}, "required": ["template"], "responses": {"layout_id": {"type": "str", "description": "The unique identifier for the created layout"}}}
{"api_name": "addTextField", "api_description": "Add a text field to the UI", "field": "Design/User Interface (UI) Design", "parameters": {"label": {"type": "str", "description": "The label or placeholder text for the text field"}, "width": {"type": "int", "description": "The width of the text field in pixels"}, "multiline": {"type": "bool", "description": "Specifies if the text field should support multiple lines of text"}}, "required": ["label", "width"], "responses": {"text_field_id": {"type": "int", "description": "The unique identifier for the added text field"}, "ui_element": {"type": "str", "description": "The UI element representing the added text field"}}}
{"api_name": "setBackgroundColor", "api_description": "Set the background color of the UI", "field": "Design/User Interface (UI) Design", "parameters": {"color": {"type": "str", "description": "The color to be set as the background color"}}, "required": ["color"], "responses": {"success": {"type": "bool", "description": "Indicates if the background color was set successfully"}}}
{"api_name": "getUXDesignFeedback", "api_description": "Get feedback on user experience design", "field": "Design/User Experience (UX) Design", "parameters": {"design": {"type": "str", "description": "The user experience design to get feedback on"}}, "required": ["design"], "responses": {"feedback": {"type": "str", "description": "Feedback on the user experience design"}}}
{"api_name": "deleteMotionDesign", "api_description": "Delete a motion design project", "field": "Design/Motion Design", "parameters": {"project_id": {"type": "str", "description": "The unique identifier of the motion design project"}}, "required": ["project_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the deletion was successful"}}}
{"api_name": "createPackagingDesign", "api_description": "Create a new packaging design", "field": "Design/Packaging Design", "parameters": {"product_name": {"type": "str", "description": "The name of the product to be packaged"}, "materials": {"type": "str", "description": "The materials to be used for packaging (e.g., cardboard, plastic)"}}, "required": ["product_name", "materials"], "responses": {"design_id": {"type": "str", "description": "The unique ID of the created packaging design"}}}
{"api_name": "getBrandDesign", "api_description": "Retrieve brand design information", "field": "Design/Brand Design", "parameters": {"brand_name": {"type": "str", "description": "The name of the brand for which you want to get the design"}}, "required": ["brand_name"], "responses": {"brand_logo": {"type": "str", "description": "The logo of the brand"}, "brand_color_scheme": {"type": "str", "description": "The color scheme associated with the brand"}, "brand_typography": {"type": "str", "description": "The typography used for the brand"}}}
{"api_name": "createPrototype", "api_description": "Create a prototype for a user interface design", "field": "Design/UI/UX Prototyping", "parameters": {"design_file": {"type": "str", "description": "The design file (e.g., PSD, Sketch, Figma)"}, "platform": {"type": "str", "description": "The platform for which the prototype is being created (e.g., web, mobile, desktop)"}, "interactions": {"type": "str", "description": "Specify the interactions to include in the prototype (e.g., click, swipe, scroll)"}, "user_persona": {"type": "str", "description": "Define the target user persona for the prototype (e.g., casual user, business professional)"}}, "required": ["design_file", "platform"], "responses": {"prototype_url": {"type": "str", "description": "The URL to access the created prototype"}, "feedback": {"type": "str", "description": "The feedback received for the prototype"}}}
{"api_name": "getDesignStrategy", "api_description": "Retrieve design strategy information", "field": "Design/Design Strategy", "parameters": {"target_audience": {"type": "str", "description": "The target audience for the design strategy (e.g., millennials, senior citizens)"}, "purpose": {"type": "str", "description": "The purpose of the design strategy (e.g., increase brand awareness, improve user experience)"}, "constraints": {"type": "str", "description": "Any constraints or limitations to consider in the design strategy (e.g., budget, time restrictions)"}, "industry": {"type": "str", "description": "The industry or sector for which the design strategy is intended (e.g., healthcare, technology)"}}, "required": ["target_audience", "purpose"], "responses": {"strategy": {"type": "str", "description": "The recommended design strategy based on the given parameters"}, "considerations": {"type": "str", "description": "Additional considerations to keep in mind during the design process"}}}
{"api_name": "requestDesignCritique", "api_description": "Request a design critique from experts", "field": "Design/Design Critique", "parameters": {"project_name": {"type": "str", "description": "The name of the design project"}, "design_file": {"type": "str", "description": "The file or URL of the design"}, "deadline": {"type": "str", "description": "The deadline for submitting the design critique request"}}, "required": ["project_name", "design_file"], "responses": {"request_id": {"type": "str", "description": "The unique ID assigned to the design critique request"}, "status": {"type": "str", "description": "The status of the design critique request (e.g., pending, in progress, completed)"}}}
{"api_name": "submitDesign", "api_description": "Submit a design for critique", "field": "Design/Design Critique", "parameters": {"design_file": {"type": "str", "description": "The file path or URL of the design file to be submitted"}}, "required": ["design_file"], "responses": {"status": {"type": "str", "description": "The status of the design submission"}, "comments": {"type": "str", "description": "Any comments or feedback provided by the reviewer"}}}
{"api_name": "modifyGene", "api_description": "Modify a specific gene sequence", "field": "Biotechnology/Genetic engineering", "parameters": {"gene_sequence": {"type": "str", "description": "The gene sequence to be modified"}, "modification": {"type": "str", "description": "The desired modification to be applied to the gene sequence (e.g., deletion, insertion, substitution)"}, "target_sequence": {"type": "str", "description": "The target sequence at which the modification should be applied"}, "method": {"type": "str", "description": "The method or technique to be used for modifying the gene sequence (e.g., CRISPR-Cas9, homologous recombination)"}}, "required": ["gene_sequence", "modification"], "responses": {"modified_sequence": {"type": "str", "description": "The resulting modified gene sequence"}}}
{"api_name": "selectGene", "api_description": "Select a gene for further genetic engineering", "field": "Biotechnology/Genetic engineering", "parameters": {"organism": {"type": "str", "description": "The name of the organism whose gene you want to select (e.g., E. coli, Arabidopsis thaliana)"}, "function": {"type": "str", "description": "The function or trait associated with the gene (e.g., resistance to herbicides, enhanced protein production)"}, "sequence_length": {"type": "int", "description": "The desired length of the gene sequence in base pairs"}}, "required": ["organism", "function"], "responses": {"gene_id": {"type": "str", "description": "The unique identifier of the selected gene"}, "sequence": {"type": "str", "description": "The nucleotide sequence of the selected gene"}}}
{"api_name": "analyzeDNASequence", "api_description": "Analyze a given DNA sequence and provide information about its genetic properties.", "field": "Biotechnology/Genetic engineering", "parameters": {"sequence": {"type": "str", "description": "The DNA sequence to be analyzed"}}, "required": ["sequence"], "responses": {"properties": {"type": "str", "description": "The genetic properties of the given DNA sequence"}}}
{"api_name": "modifyDNACode", "api_description": "Modify a specific DNA code in a given DNA sequence.", "field": "Biotechnology/Genetic engineering", "parameters": {"sequence": {"type": "str", "description": "The DNA sequence to be modified"}, "code_to_modify": {"type": "str", "description": "The DNA code to be modified"}, "new_code": {"type": "str", "description": "The new DNA code to replace the old code"}}, "required": ["sequence", "code_to_modify", "new_code"], "responses": {"modified_sequence": {"type": "str", "description": "The modified DNA sequence"}}}
{"api_name": "translateDNAtoProtein", "api_description": "Translate a DNA sequence into its corresponding protein sequence", "field": "Biotechnology/Molecular biology", "parameters": {"dna_sequence": {"type": "str", "description": "The DNA sequence to be translated into protein (e.g., ATGCATGCCGA)"}}, "required": ["dna_sequence"], "responses": {"protein_sequence": {"type": "str", "description": "The protein sequence translated from the DNA sequence"}}}
{"api_name": "findSequenceSimilarity", "api_description": "Find the similarity between two DNA sequences", "field": "Biotechnology/Molecular biology", "parameters": {"sequence1": {"type": "str", "description": "The first DNA sequence for comparison (e.g., ATGCATGCCGA)"}, "sequence2": {"type": "str", "description": "The second DNA sequence for comparison (e.g., CCGATACGATC)"}, "algorithm": {"type": "str", "description": "The algorithm to be used for sequence similarity calculation (e.g., BLAST, Needleman–Wunsch)"}}, "required": ["sequence1", "sequence2"], "responses": {"similarity_score": {"type": "float", "description": "The similarity score between the two DNA sequences"}}}
{"api_name": "translateSequence", "api_description": "Translate a DNA sequence into a protein sequence", "field": "Biotechnology/Molecular biology", "parameters": {"dna_sequence": {"type": "str", "description": "The DNA sequence to be translated"}, "reading_frame": {"type": "int", "description": "The reading frame to be used for translation"}}, "required": ["dna_sequence"], "responses": {"protein_sequence": {"type": "str", "description": "The translated protein sequence"}}}
{"api_name": "proteinSecondaryStructurePrediction", "api_description": "Predict the secondary structure of a protein sequence", "field": "Biotechnology/Bioinformatics", "parameters": {"sequence": {"type": "str", "description": "Input protein sequence for secondary structure prediction"}, "method": {"type": "str", "description": "Specify the prediction method to be used (e.g., PSIPRED, SOPMA)"}, "confidence_threshold": {"type": "float", "description": "Specify the minimum confidence threshold for secondary structure prediction"}}, "required": ["sequence"], "responses": {"secondary_structure": {"type": "str", "description": "Predicted secondary structure of the protein sequence"}}}
{"api_name": "searchGeneSequence", "api_description": "Search for the DNA sequence of a specific gene", "field": "Biotechnology/Bioinformatics", "parameters": {"gene_name": {"type": "str", "description": "The name of the gene you want to search for"}}, "required": ["gene_name"], "responses": {"sequence": {"type": "str", "description": "The DNA sequence of the specified gene"}}}
{"api_name": "monitorBioprocessing", "api_description": "Get real-time updates on the progress of bioprocessing", "field": "Biotechnology/Bioprocessing", "parameters": {"product": {"type": "str", "description": "The name or ID of the product being processed"}}, "required": ["product"], "responses": {"progress": {"type": "float", "description": "The current progress of the bioprocessing in percentage"}, "status": {"type": "str", "description": "The current status of the bioprocessing"}}}
{"api_name": "pauseBioprocessing", "api_description": "Pause the ongoing bioprocessing for a specific product", "field": "Biotechnology/Bioprocessing", "parameters": {"product": {"type": "str", "description": "The name or ID of the product being processed"}}, "required": ["product"], "responses": {"status": {"type": "str", "description": "The current status of the bioprocessing"}}}
{"api_name": "findBiomaterialComposition", "api_description": "Retrieve information about the composition of biomaterials", "field": "Biotechnology/Biomaterials", "parameters": {"biomaterial_id": {"type": "str", "description": "The unique identifier of the biomaterial"}}, "required": ["biomaterial_id"], "responses": {"composition": {"type": "str", "description": "The chemical composition of the biomaterial"}, "properties": {"type": "str", "description": "The physical and chemical properties of the biomaterial"}}}
{"api_name": "simulateDNASequence", "api_description": "Simulate a DNA sequence based on given parameters", "field": "Biotechnology/Biocomputing", "parameters": {"length": {"type": "int", "description": "The desired length of the DNA sequence"}, "bases": {"type": "str", "description": "The specific bases to be included in the sequence (e.g., A, T, C, G)"}}, "required": ["length"], "responses": {"sequence": {"type": "str", "description": "The simulated DNA sequence"}}}
{"api_name": "getProteinSequence", "api_description": "Retrieve the amino acid sequence of a given protein", "field": "Biotechnology/Proteomics", "parameters": {"protein_id": {"type": "str", "description": "The unique identifier of the protein"}}, "required": ["protein_id"], "responses": {"sequence": {"type": "str", "description": "The amino acid sequence of the protein"}}}
{"api_name": "getBehavioralProfile", "api_description": "Retrieve behavioral profile based on psychological analysis", "field": "Psychology/Behavioral psychology", "parameters": {"person_id": {"type": "str", "description": "Unique identifier of the person"}, "questionnaire": {"type": "str", "description": "The type of questionnaire to determine behavioral traits"}}, "required": ["person_id", "questionnaire"], "responses": {"behavioral_profile": {"type": "str", "description": "The behavioral profile of the person"}}}
{"api_name": "getChildDevelopment", "api_description": "Retrieve information about child development", "field": "Psychology/Developmental psychology", "parameters": {"age": {"type": "str", "description": "The age of the child (e.g., 0-6 months, 3 years, 8 years)"}, "language": {"type": "str", "description": "The language in which the information is provided (e.g., English, Spanish)"}, "milestones": {"type": "bool", "description": "Specify if you want to retrieve developmental milestones or general information about child development"}}, "required": ["age"], "responses": {"information": {"type": "str", "description": "Information about child development at the specified age and language"}}}
{"api_name": "getEducationalPsychologyInfo", "api_description": "Retrieve information about educational psychology", "field": "Psychology/Educational psychology", "parameters": {}, "required": [], "responses": {"info": {"type": "str", "description": "Information about educational psychology"}}}
{"api_name": "getPsychologicalAssessment", "api_description": "Retrieve psychological assessment results", "field": "Psychology/Health psychology", "parameters": {"age": {"type": "int", "description": "The age of the individual being assessed"}, "gender": {"type": "str", "description": "The gender of the individual being assessed"}, "stress_level": {"type": "str", "description": "The current stress level of the individual being assessed (e.g., low, moderate, high)"}, "sleep_quality": {"type": "str", "description": "The quality of sleep experienced by the individual being assessed (e.g., poor, fair, good)"}}, "required": ["age", "gender"], "responses": {"assessment_result": {"type": "str", "description": "The result of the psychological assessment"}, "recommendations": {"type": "str", "description": "Recommendations for improving psychological well-being"}}}
{"api_name": "assessMentalHealth", "api_description": "Assess an individual's mental health status", "field": "Psychology/Health psychology", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient being assessed"}, "age": {"type": "int", "description": "The age of the patient in years"}, "gender": {"type": "str", "description": "The gender of the patient (e.g., male, female, other)"}}, "required": ["patient_id", "age", "gender"], "responses": {"mental_health_score": {"type": "float", "description": "The score representing the patient's mental health status"}}}
{"api_name": "getAnxietyLevel", "api_description": "Retrieve anxiety level information", "field": "Psychology/Health psychology", "parameters": {"person_id": {"type": "str", "description": "The ID of the person for whom you want to get anxiety level"}}, "required": ["person_id"], "responses": {"anxiety_level": {"type": "str", "description": "The anxiety level of the specified person"}}}
{"api_name": "getDepressionLevel", "api_description": "Retrieve depression level information", "field": "Psychology/Health psychology", "parameters": {"person_id": {"type": "str", "description": "The ID of the person for whom you want to get depression level"}}, "required": ["person_id"], "responses": {"depression_level": {"type": "str", "description": "The depression level of the specified person"}}}
{"api_name": "getPsychologicalWellbeing", "api_description": "Retrieve psychological wellbeing information", "field": "Psychology/Health psychology", "parameters": {"person_id": {"type": "str", "description": "The identification number of the person whose psychological wellbeing is being assessed"}}, "required": ["person_id"], "responses": {"score": {"type": "float", "description": "The score representing the psychological wellbeing of the individual"}}}
{"api_name": "getWellBeingScore", "api_description": "Retrieve the well-being score of an individual", "field": "Psychology/Health psychology", "parameters": {"name": {"type": "str", "description": "The name of the individual"}, "age": {"type": "int", "description": "The age of the individual"}, "gender": {"type": "str", "description": "The gender of the individual (e.g., male, female)"}, "location": {"type": "str", "description": "The location of the individual"}, "health_conditions": {"type": "str", "description": "Any existing health conditions of the individual (e.g., diabetes, hypertension, depression)"}}, "required": ["name", "age", "gender"], "responses": {"well-being_score": {"type": "float", "description": "The well-being score of the individual, ranging from 0 to 100"}}}
{"api_name": "getJobSatisfaction", "api_description": "Retrieve the job satisfaction level of an employee", "field": "Psychology/Industrial-Organizational psychology", "parameters": {"employee_id": {"type": "str", "description": "The unique identifier of the employee"}, "company_id": {"type": "str", "description": "The unique identifier of the company where the employee works"}}, "required": ["employee_id", "company_id"], "responses": {"satisfaction_level": {"type": "int", "description": "The job satisfaction level of the employee on a scale from 1 to 10"}}}
{"api_name": "getEmployeeProductivity", "api_description": "Retrieve productivity information for a specific employee", "field": "Psychology/Industrial-Organizational psychology", "parameters": {"employee_id": {"type": "str", "description": "The ID of the employee for whom you want to get the productivity information"}}, "required": ["employee_id"], "responses": {"productivity_level": {"type": "float", "description": "The level of productivity of the specified employee (ranging from 0 to 1)"}, "employee_name": {"type": "str", "description": "The name of the employee"}, "job_title": {"type": "str", "description": "The job title of the employee"}}}
{"api_name": "getMemoryTestResults", "api_description": "Retrieve memory test results for a specific individual", "field": "Psychology/Neuropsychology", "parameters": {"participant_id": {"type": "str", "description": "The unique identifier of the participant whose memory test results are to be retrieved"}}, "required": ["participant_id"], "responses": {"test_score": {"type": "int", "description": "The overall memory test score of the participant"}, "short_term_memory": {"type": "int", "description": "The score obtained in the short-term memory section"}, "long_term_memory": {"type": "int", "description": "The score obtained in the long-term memory section"}, "working_memory": {"type": "int", "description": "The score obtained in the working memory section"}}}
{"api_name": "analyzeGroupBehavior", "api_description": "Analyze the behavior of a group of individuals", "field": "Psychology/Social psychology", "parameters": {"group_size": {"type": "int", "description": "The number of individuals in the group"}, "group_behavior": {"type": "str", "description": "The observed behavior of the group"}, "context": {"type": "str", "description": "The context in which the behavior occurred (e.g., workplace, social gathering)"}}, "required": ["group_size", "group_behavior"], "responses": {"analysis_results": {"type": "str", "description": "The analysis results of the group behavior"}}}
{"api_name": "getPerformanceAnalysis", "api_description": "Retrieve performance analysis for athletes", "field": "Psychology/Sports psychology", "parameters": {"athlete_name": {"type": "str", "description": "The name of the athlete for whom you want to get the performance analysis"}, "sport": {"type": "str", "description": "The sport in which the athlete participates"}, "time_period": {"type": "str", "description": "Specify the time period for which you want to get the performance analysis (e.g., last month, last year)"}, "rating_scale": {"type": "int", "description": "Specify the rating scale to evaluate the performance (e.g., 1-10)"}}, "required": ["athlete_name", "sport"], "responses": {"performance_analysis": {"type": "str", "description": "Analysis of the athlete's performance during the specified time period"}}}
{"api_name": "getCounselingPsychologyServices", "api_description": "Retrieve counseling psychology services information", "field": "Psychology/Counseling psychology", "parameters": {"client_type": {"type": "str", "description": "Specify the client type for counseling services (e.g., individual, couples, families)"}, "session_duration": {"type": "int", "description": "Specify the duration of counseling session in minutes"}}, "required": ["client_type"], "responses": {"services": {"type": "str", "description": "List of counseling services available for the specified client type"}, "session_cost": {"type": "float", "description": "The cost of a counseling session"}}}
{"api_name": "getOptimismScore", "api_description": "Retrieve the level of optimism", "field": "Psychology/Positive psychology", "parameters": {"person": {"type": "str", "description": "The name of the person for whom you want to get the optimism score"}}, "required": ["person"], "responses": {"score": {"type": "int", "description": "The level of optimism of the specified person in a scale of 1 to 10"}}}
{"api_name": "getSavoringExercises", "api_description": "Retrieve a list of savoring exercises", "field": "Psychology/Positive psychology", "parameters": {}, "required": [], "responses": {"exercises": {"type": "str", "description": "A list of savoring exercises to enhance well-being"}}}
{"api_name": "getPositivePsychologyTips", "api_description": "Retrieve positive psychology tips and techniques", "field": "Psychology/Positive psychology", "parameters": {}, "required": [], "responses": {"tips": {"type": "str", "description": "Positive psychology tips and techniques to improve well-being"}}}
{"api_name": "getGratitudeExercise", "api_description": "Retrieve a gratitude exercise", "field": "Psychology/Positive psychology", "parameters": {}, "required": [], "responses": {"exercise": {"type": "str", "description": "A gratitude exercise to promote positive emotions"}}}
{"api_name": "getOptimismLevel", "api_description": "Retrieve the level of optimism", "field": "Psychology/Positive psychology", "parameters": {}, "required": [], "responses": {"optimism_level": {"type": "str", "description": "The level of optimism (high, medium, low)"}}}
{"api_name": "getEvolutionaryPsychologyDefinition", "api_description": "Retrieve the definition and principles of evolutionary psychology", "field": "Psychology/Evolutionary psychology", "parameters": {}, "required": [], "responses": {"definition": {"type": "str", "description": "The definition of evolutionary psychology"}, "principles": {"type": "str", "description": "The fundamental principles of evolutionary psychology"}}}
{"api_name": "getCrossCulturalPsychologyData", "api_description": "Retrieve cross-cultural psychology data", "field": "Psychology/Cross-cultural psychology", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to retrieve data (e.g., Japan, Brazil, Australia)"}, "variable": {"type": "str", "description": "The variable you are interested in (e.g., individualism, collectivism, self-esteem)"}}, "required": ["country", "variable"], "responses": {"data": {"type": "str", "description": "The cross-cultural psychology data for the specified country and variable"}}}
{"api_name": "createiOSApp", "api_description": "Create a new iOS application", "field": "Mobile Development/iOS Development", "parameters": {"app_name": {"type": "str", "description": "The name of the iOS application"}, "bundle_id": {"type": "str", "description": "The unique identifier for the iOS application bundle (e.g., com.example.myapp)"}, "platform": {"type": "str", "description": "The target iOS platform version (e.g., iOS 14.0, iOS 15.0)"}}, "required": ["app_name", "bundle_id"], "responses": {"app_id": {"type": "str", "description": "The unique identifier assigned to the created iOS application"}}}
{"api_name": "getDeviceInfo", "api_description": "Retrieve device information of an iOS device", "field": "Mobile Development/iOS Development", "parameters": {"device_type": {"type": "str", "description": "The type of iOS device (e.g., iPhone, iPad)"}, "model": {"type": "str", "description": "The specific model of the iOS device (e.g., iPhone X, iPad Pro)"}, "serial_number": {"type": "str", "description": "The serial number of the iOS device"}}, "required": ["device_type", "serial_number"], "responses": {"device_info": {"type": "str", "description": "Detailed information about the specified iOS device"}}}
{"api_name": "getAppInfo", "api_description": "Retrieve information about an iOS app", "field": "Mobile Development/iOS Development", "parameters": {"app_id": {"type": "str", "description": "The unique identifier of the iOS app (e.g., com.example.app)"}}, "required": ["app_id"], "responses": {"app_name": {"type": "str", "description": "The name of the iOS app"}, "version": {"type": "str", "description": "The current version of the iOS app"}, "developer": {"type": "str", "description": "The developer or company of the iOS app"}}}
{"api_name": "deployiOSSimulator", "api_description": "Deploy an iOS application to the simulator", "field": "Mobile Development/iOS Development", "parameters": {"app_id": {"type": "str", "description": "The unique identifier of the iOS application"}, "simulator_type": {"type": "str", "description": "The type of simulator to deploy to (e.g., iPhone 12, iPad Air)"}, "os_version": {"type": "str", "description": "The version of iOS to deploy (e.g., iOS 14.5)"}}, "required": ["app_id", "simulator_type"], "responses": {"success": {"type": "bool", "description": "Indicates if the deployment to the simulator was successful"}}}
{"api_name": "runiOSTests", "api_description": "Run automated tests for an iOS application", "field": "Mobile Development/iOS Development", "parameters": {"app_id": {"type": "str", "description": "The unique identifier of the iOS application"}, "test_suite": {"type": "str", "description": "The name of the test suite to run (e.g., Unit Tests, UI Tests)"}, "device": {"type": "str", "description": "The device to run the tests on (e.g., iPhone 11 Pro Max, iPad Pro)"}}, "required": ["app_id", "test_suite"], "responses": {"test_results": {"type": "str", "description": "The results of the test run"}}}
{"api_name": "updateiOSAppVersion", "api_description": "Update the version of an existing iOS application", "field": "Mobile Development/iOS Development", "parameters": {"bundle_id": {"type": "str", "description": "The unique identifier for the application bundle"}, "new_version": {"type": "str", "description": "The new version number for the application"}}, "required": ["bundle_id", "new_version"], "responses": {"success": {"type": "bool", "description": "Indicates whether the iOS application version was updated successfully or not"}}}
{"api_name": "deleteiOSApp", "api_description": "Delete an existing iOS application", "field": "Mobile Development/iOS Development", "parameters": {"bundle_id": {"type": "str", "description": "The unique identifier for the application bundle"}}, "required": ["bundle_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the iOS application was deleted successfully or not"}}}
{"api_name": "createAndroidApp", "api_description": "Create a new Android application project", "field": "Mobile Development/Android Development", "parameters": {"app_name": {"type": "str", "description": "The name of the Android application"}, "package_name": {"type": "str", "description": "The package name for the Android application"}, "target_sdk_version": {"type": "int", "description": "The target SDK version for the Android application"}}, "required": ["app_name", "package_name"], "responses": {"project_id": {"type": "str", "description": "The unique ID of the created Android application project"}}}
{"api_name": "buildApk", "api_description": "Build an APK (Android Package) file from an Android application project", "field": "Mobile Development/Android Development", "parameters": {"project_id": {"type": "str", "description": "The ID of the Android application project"}}, "required": ["project_id"], "responses": {"apk_file_path": {"type": "str", "description": "The file path of the generated APK file"}}}
{"api_name": "runAndroidEmulator", "api_description": "Run an Android emulator with specified device configuration", "field": "Mobile Development/Android Development", "parameters": {"device_name": {"type": "str", "description": "The name of the Android virtual device"}, "system_image": {"type": "str", "description": "The system image for the Android virtual device"}, "api_level": {"type": "int", "description": "The API level of the Android virtual device"}}, "required": ["device_name", "system_image", "api_level"], "responses": {"emulator_running": {"type": "bool", "description": "Indicates whether the Android emulator is successfully running"}}}
{"api_name": "installApkOnDevice", "api_description": "Install an APK file on a connected Android device or emulator", "field": "Mobile Development/Android Development", "parameters": {"apk_file_path": {"type": "str", "description": "The file path of the APK file"}, "device_id": {"type": "str", "description": "The ID of the connected Android device or emulator"}}, "required": ["apk_file_path", "device_id"], "responses": {"installation_success": {"type": "bool", "description": "Indicates whether the APK installation was successful"}}}
{"api_name": "runEmulator", "api_description": "Run an Android emulator", "field": "Mobile Development/Android Development", "parameters": {"avd_name": {"type": "str", "description": "The name of the Android Virtual Device (AVD) to run"}, "sdk_path": {"type": "str", "description": "The path to the Android SDK"}}, "required": ["avd_name"], "responses": {"success": {"type": "bool", "description": "True if the emulator is launched successfully"}}}
{"api_name": "addARObject", "api_description": "Add a 3D object to an existing Augmented Reality scene", "field": "Mobile Development/Augmented Reality Development", "parameters": {"scene_id": {"type": "str", "description": "The ID of the AR scene to which the object will be added"}, "object_file": {"type": "str", "description": "The 3D object file to be added to the scene"}, "position": {"type": "str", "description": "The position of the object in the scene (e.g., x,y,z coordinates)"}, "scale": {"type": "float", "description": "The scale of the object in the scene (e.g., 0.5, 1.0, 2.0)"}, "rotation": {"type": "str", "description": "The rotation of the object in the scene (e.g., x,y,z angles)"}}, "required": ["scene_id", "object_file", "position"], "responses": {"success": {"type": "bool", "description": "Indicates if the object was added successfully"}, "object_id": {"type": "str", "description": "The unique ID assigned to the added object"}}}
{"api_name": "removeARObject", "api_description": "Remove a 3D object from an existing Augmented Reality scene", "field": "Mobile Development/Augmented Reality Development", "parameters": {"scene_id": {"type": "str", "description": "The ID of the AR scene from which the object will be removed"}, "object_id": {"type": "str", "description": "The ID of the object to be removed from the scene"}}, "required": ["scene_id", "object_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the object was removed successfully"}}}
{"api_name": "createVRApp", "api_description": "Create a virtual reality application", "field": "Mobile Development/Virtual Reality Development", "parameters": {"app_name": {"type": "str", "description": "The name of the virtual reality application"}, "platform": {"type": "str", "description": "The platform for which the application is being developed (e.g., Android, iOS)"}, "hardware_requirements": {"type": "str", "description": "The hardware requirements for the application (e.g., VR headset, motion controllers)"}, "programming_language": {"type": "str", "description": "The programming language to be used for development (e.g., Unity, Unreal Engine)"}}, "required": ["app_name", "platform"], "responses": {"success": {"type": "bool", "description": "Indicates whether the virtual reality application was successfully created"}}}
{"api_name": "updateVRApp", "api_description": "Update an existing virtual reality application", "field": "Mobile Development/Virtual Reality Development", "parameters": {"app_id": {"type": "str", "description": "The unique identifier of the virtual reality application to be updated"}, "app_name": {"type": "str", "description": "The new name for the virtual reality application"}, "platform": {"type": "str", "description": "The new platform for which the application is developed"}, "graphics_quality": {"type": "str", "description": "Specify the new graphics quality of the application"}, "headset_type": {"type": "str", "description": "The new type of virtual reality headset required to experience the application"}, "input_devices": {"type": "str", "description": "Specify the new input devices supported by the application"}}, "required": ["app_id"], "responses": {"message": {"type": "str", "description": "A message indicating the status of the update operation"}}}
{"api_name": "deleteVRApp", "api_description": "Delete a virtual reality application", "field": "Mobile Development/Virtual Reality Development", "parameters": {"app_id": {"type": "str", "description": "The unique identifier of the virtual reality application to be deleted"}}, "required": ["app_id"], "responses": {"message": {"type": "str", "description": "A message indicating the status of the delete operation"}}}
{"api_name": "createVRApplication", "api_description": "Create a new virtual reality application", "field": "Mobile Development/Virtual Reality Development", "parameters": {"name": {"type": "str", "description": "The name of the virtual reality application"}, "platform": {"type": "str", "description": "The platform for which the application is developed (e.g., Oculus, HTC Vive, Google Cardboard)"}, "genre": {"type": "str", "description": "The genre/category of the application (e.g., game, education, simulation)"}, "target_audience": {"type": "str", "description": "The target audience for the application (e.g., kids, adults)"}, "supported_devices": {"type": "str", "description": "The list of devices supported by the application (e.g., Samsung Gear VR, PlayStation VR)"}, "price": {"type": "float", "description": "The price of the application in USD"}}, "required": ["name", "platform"], "responses": {"application_id": {"type": "int", "description": "The unique ID assigned to the created application"}, "message": {"type": "str", "description": "Success message indicating the application creation status"}}}
{"api_name": "getMobileUI", "api_description": "Retrieve mobile UI design information", "field": "Mobile Development/Mobile UI/UX Design", "parameters": {"app_type": {"type": "str", "description": "The type of mobile app (e.g., social media, e-commerce, productivity)"}, "target_audience": {"type": "str", "description": "The target audience for the mobile app (e.g., teenagers, professionals, elderly)"}, "color_scheme": {"type": "str", "description": "The desired color scheme for the UI design (e.g., vibrant, monochromatic, pastel)"}, "layout_style": {"type": "str", "description": "The preferred layout style for the UI design (e.g., minimalistic, material design, skeuomorphic)"}}, "required": ["app_type"], "responses": {"ui_design": {"type": "str", "description": "The recommended UI design for the specified mobile app"}}}
{"api_name": "getMobileScreenSize", "api_description": "Retrieve the screen size of a mobile device", "field": "Mobile Development/Mobile UI/UX Design", "parameters": {"device_model": {"type": "str", "description": "The model of the mobile device (e.g., iPhone X, Samsung Galaxy S10)"}, "operating_system": {"type": "str", "description": "The operating system of the mobile device (e.g., iOS, Android)"}}, "required": ["device_model"], "responses": {"screen_size": {"type": "str", "description": "The screen size of the specified mobile device"}, "resolution": {"type": "str", "description": "The resolution of the screen of the specified mobile device"}}}
{"api_name": "getMobileColorScheme", "api_description": "Retrieve the color scheme of a mobile app or website", "field": "Mobile Development/Mobile UI/UX Design", "parameters": {"platform": {"type": "str", "description": "The platform of the mobile app or website (e.g., iOS, Android, Web)"}, "theme": {"type": "str", "description": "The desired theme for the color scheme (e.g., light, dark)"}, "primary_color": {"type": "str", "description": "The primary color of the color scheme (e.g., #FF0000)"}}, "required": ["platform"], "responses": {"color_scheme": {"type": "str", "description": "The generated color scheme for the specified mobile app or website"}}}
{"api_name": "getMobileFontFamily", "api_description": "Retrieve the recommended font family for a mobile app or website", "field": "Mobile Development/Mobile UI/UX Design", "parameters": {"platform": {"type": "str", "description": "The platform of the mobile app or website (e.g., iOS, Android, Web)"}, "text_type": {"type": "str", "description": "The type of text for which the font family is needed (e.g., heading, body, caption)"}}, "required": ["platform", "text_type"], "responses": {"font_family": {"type": "str", "description": "The recommended font family for the specified text type in the mobile app or website"}}}
{"api_name": "getMobileLayout", "api_description": "Retrieve the recommended layout design for a mobile app or website", "field": "Mobile Development/Mobile UI/UX Design", "parameters": {"platform": {"type": "str", "description": "The platform of the mobile app or website (e.g., iOS, Android, Web)"}, "screen_orientation": {"type": "str", "description": "The desired screen orientation for the layout design (e.g., portrait, landscape)"}, "content_type": {"type": "str", "description": "The type of content to be displayed in the mobile app or website (e.g., text, images, videos)"}}, "required": ["platform"], "responses": {"layout_design": {"type": "str", "description": "The recommended layout design for the specified mobile app or website"}}}
{"api_name": "getMobileUIUXDesign", "api_description": "Retrieve mobile UI/UX design information", "field": "Mobile Development/Mobile UI/UX Design", "parameters": {"app_name": {"type": "str", "description": "The name of the mobile application for which you want to get the UI/UX design"}, "platform": {"type": "str", "description": "The platform for which the UI/UX design is required (e.g., iOS, Android)"}, "color_scheme": {"type": "str", "description": "The desired color scheme for the UI/UX design (e.g., light, dark)"}, "font_size": {"type": "int", "description": "The desired font size for the UI/UX design in pixels"}}, "required": ["app_name", "platform"], "responses": {"ui_design": {"type": "str", "description": "The UI design for the specified mobile application on the selected platform"}, "ux_design": {"type": "str", "description": "The UX design for the specified mobile application on the selected platform"}}}
{"api_name": "testMobileApp", "api_description": "Test the functionality and performance of a mobile app", "field": "Mobile Development/Mobile App Testing", "parameters": {"app_id": {"type": "str", "description": "The unique identifier of the mobile app"}, "test_type": {"type": "str", "description": "Type of testing to be performed (e.g., functional, performance, security)"}, "device_type": {"type": "str", "description": "The type of mobile device used for testing (e.g., iOS, Android)"}, "test_cases": {"type": "int", "description": "Number of test cases to be executed"}, "automated_testing": {"type": "bool", "description": "Flag to indicate if automated testing should be performed"}}, "required": ["app_id", "test_type"], "responses": {"test_results": {"type": "str", "description": "Summary of the test results"}, "performance_metrics": {"type": "float", "description": "Performance metrics of the mobile app (e.g., response time, memory usage)"}, "bugs_found": {"type": "int", "description": "Number of bugs found during testing"}}}
{"api_name": "runMobileTest", "api_description": "Run mobile app testing for a specific app", "field": "Mobile Development/Mobile App Testing", "parameters": {"app_name": {"type": "str", "description": "The name of the app to be tested"}, "device_type": {"type": "str", "description": "The type of mobile device to use for testing (e.g., iPhone, Android)"}, "test_mode": {"type": "str", "description": "Specify the test mode (e.g., unit testing, integration testing, UI testing)"}}, "required": ["app_name"], "responses": {"test_results": {"type": "str", "description": "The results of mobile app testing"}, "logs": {"type": "str", "description": "Logs generated during the testing process"}}}
{"api_name": "checkAppPermission", "api_description": "Check the permission status of an app", "field": "Mobile Development/Mobile Security", "parameters": {"app_id": {"type": "str", "description": "The ID of the app to check permissions for"}, "user_id": {"type": "str", "description": "The ID of the user to get permission status for"}}, "required": ["app_id"], "responses": {"permission_status": {"type": "bool", "description": "The permission status of the app for the specified user"}}}
{"api_name": "generateAppKey", "api_description": "Generate a secure API key for an app", "field": "Mobile Development/Mobile Security", "parameters": {"app_id": {"type": "str", "description": "The ID of the app to generate the API key for"}}, "required": ["app_id"], "responses": {"api_key": {"type": "str", "description": "The generated API key for the app"}}}
{"api_name": "validateAppSignature", "api_description": "Validate the digital signature of an app to ensure authenticity", "field": "Mobile Development/Mobile Security", "parameters": {"app_id": {"type": "str", "description": "The ID of the app to validate the signature for"}, "signature": {"type": "str", "description": "The digital signature to be validated"}}, "required": ["app_id", "signature"], "responses": {"valid_signature": {"type": "bool", "description": "Indicates whether the signature is valid or not"}}}
{"api_name": "checkRootedDevice", "api_description": "Check if the device is rooted or jailbroken", "field": "Mobile Development/Mobile Security", "parameters": {}, "required": [], "responses": {"is_rooted": {"type": "bool", "description": "Flag indicating if the device is rooted or jailbroken"}}}
{"api_name": "getUser", "api_description": "Retrieve user information by user ID", "field": "Mobile Development/Mobile Backend Development", "parameters": {"user_id": {"type": "str", "description": "The ID of the user to retrieve"}}, "required": ["user_id"], "responses": {"name": {"type": "str", "description": "The name of the user"}, "email": {"type": "str", "description": "The email address of the user"}, "profile_picture": {"type": "str", "description": "The URL of the user's profile picture"}}}
{"api_name": "updateUserProfile", "api_description": "Update user profile information", "field": "Mobile Development/Mobile Backend Development", "parameters": {"user_id": {"type": "int", "description": "The ID of the user whose profile information is being updated"}, "profile_picture": {"type": "str", "description": "The new profile picture for the user (URL of an image file)"}}, "required": ["user_id"], "responses": {"message": {"type": "str", "description": "A message indicating the success or failure of the profile update"}}}
{"api_name": "deployMobileApp", "api_description": "Deploy a mobile application on the cloud", "field": "Mobile Development/Mobile Cloud Computing", "parameters": {"app_name": {"type": "str", "description": "The name of the mobile application to be deployed"}, "platform": {"type": "str", "description": "The target platform for the mobile application (e.g., Android, iOS)"}, "cloud_provider": {"type": "str", "description": "The cloud provider for deploying the mobile application (e.g., AWS, Google Cloud, Azure)"}}, "required": ["app_name", "platform", "cloud_provider"], "responses": {"deployment_status": {"type": "str", "description": "The status of the mobile application deployment"}}}
{"api_name": "uploadToCloud", "api_description": "Uploads a file to the cloud storage", "field": "Mobile Development/Mobile Cloud Computing", "parameters": {"file_path": {"type": "str", "description": "The path of the file to be uploaded"}, "cloud_provider": {"type": "str", "description": "The cloud service provider (e.g., Google Drive, Dropbox, Amazon S3)"}, "access_token": {"type": "str", "description": "The access token for authentication"}}, "required": ["file_path", "cloud_provider", "access_token"], "responses": {"success": {"type": "bool", "description": "Indicates whether the file upload was successful"}}}
{"api_name": "downloadFromCloud", "api_description": "Downloads a file from the cloud storage", "field": "Mobile Development/Mobile Cloud Computing", "parameters": {"file_path": {"type": "str", "description": "The path where the file will be downloaded"}, "cloud_provider": {"type": "str", "description": "The cloud service provider (e.g., Google Drive, Dropbox, Amazon S3)"}, "access_token": {"type": "str", "description": "The access token for authentication"}}, "required": ["file_path", "cloud_provider", "access_token"], "responses": {"success": {"type": "bool", "description": "Indicates whether the file download was successful"}}}
{"api_name": "deleteFromCloud", "api_description": "Deletes a file from the cloud storage", "field": "Mobile Development/Mobile Cloud Computing", "parameters": {"file_path": {"type": "str", "description": "The path of the file to be deleted"}, "cloud_provider": {"type": "str", "description": "The cloud service provider (e.g., Google Drive, Dropbox, Amazon S3)"}, "access_token": {"type": "str", "description": "The access token for authentication"}}, "required": ["file_path", "cloud_provider", "access_token"], "responses": {"success": {"type": "bool", "description": "Indicates whether the file deletion was successful"}}}
{"api_name": "shareFileInCloud", "api_description": "Shares a file from the cloud storage", "field": "Mobile Development/Mobile Cloud Computing", "parameters": {"file_path": {"type": "str", "description": "The path of the file to be shared"}, "cloud_provider": {"type": "str", "description": "The cloud service provider (e.g., Google Drive, Dropbox, Amazon S3)"}, "access_token": {"type": "str", "description": "The access token for authentication"}, "recipient_email": {"type": "str", "description": "The email address of the recipient"}}, "required": ["file_path", "cloud_provider", "access_token", "recipient_email"], "responses": {"success": {"type": "bool", "description": "Indicates whether the file sharing was successful"}}}
{"api_name": "makePayment", "api_description": "Make a mobile payment", "field": "Mobile Development/Mobile Payments", "parameters": {"amount": {"type": "float", "description": "The amount to be paid"}, "currency": {"type": "str", "description": "The currency in which the payment is being made (e.g., USD, EUR)"}, "card_number": {"type": "str", "description": "The card number used for payment (e.g., 1234 5678 9012 3456)"}, "expiry_date": {"type": "str", "description": "The expiry date of the card in MM/YY format (e.g., 12/24)"}, "cvv": {"type": "str", "description": "The CVV code of the card"}}, "required": ["amount", "card_number", "expiry_date", "cvv"], "responses": {"status": {"type": "str", "description": "The status of the payment (e.g., success, failure)"}, "transaction_id": {"type": "str", "description": "The unique transaction ID of the payment"}}}
{"api_name": "removeFromCart", "api_description": "Remove a product from the user's shopping cart", "field": "Mobile Development/Mobile E-commerce", "parameters": {"product_id": {"type": "str", "description": "The unique identifier of the product"}}, "required": ["product_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the product was successfully removed from the cart"}}}
{"api_name": "registerUser", "api_description": "Create a new user account for the mobile education platform", "field": "Mobile Development/Mobile Education", "parameters": {"username": {"type": "str", "description": "The desired username for the user account"}, "password": {"type": "str", "description": "The password for the user account"}, "email": {"type": "str", "description": "The email address of the user"}, "age": {"type": "int", "description": "The age of the user"}, "country": {"type": "str", "description": "The country where the user resides"}}, "required": ["username", "password", "email"], "responses": {"success": {"type": "bool", "description": "Indicates whether the user account registration was successful"}}}
{"api_name": "getAppRoles", "api_description": "Retrieve available roles in the mobile enterprise app", "field": "Mobile Development/Mobile Enterprise", "parameters": {}, "required": [], "responses": {"roles": {"type": "str", "description": "List of available roles"}}}
{"api_name": "loginWithSocialMedia", "api_description": "Allows a user to login using their social media account", "field": "Mobile Development/Mobile Social Networking", "parameters": {"social_media": {"type": "str", "description": "The social media platform to use for login (e.g., Facebook, Twitter, Google+)"}, "username": {"type": "str", "description": "The username associated with the social media account"}, "password": {"type": "str", "description": "The password for the social media account"}}, "required": ["social_media", "username", "password"], "responses": {"success": {"type": "bool", "description": "Indicates whether the login process was successful"}}}
{"api_name": "postStatusUpdate", "api_description": "Post a status update to a user's social network feed", "field": "Mobile Development/Mobile Social Networking", "parameters": {"user_id": {"type": "int", "description": "The ID of the user who wants to post a status update"}, "status_text": {"type": "str", "description": "The text content of the status update"}}, "required": ["user_id", "status_text"], "responses": {"success": {"type": "bool", "description": "A flag indicating whether the status update was successfully posted or not"}}}
{"api_name": "verifyHash", "api_description": "Check if the input data matches the provided hash value to verify data integrity and authenticity", "field": "Cybersecurity/Data Security", "parameters": {"data": {"type": "str", "description": "The data to be verified"}, "hash_algorithm": {"type": "str", "description": "The algorithm used for hashing (e.g., SHA-256, MD5)"}, "hash_value": {"type": "str", "description": "The hash value to be compared with the generated hash of the data"}}, "required": ["data", "hash_algorithm", "hash_value"], "responses": {"verification_status": {"type": "bool", "description": "True if the hash value matches the generated hash of the data, False otherwise"}}}
{"api_name": "generateKeyPair", "api_description": "Generate a public-private key pair using a specified key generation algorithm", "field": "Cybersecurity/Data Security", "parameters": {"key_algorithm": {"type": "str", "description": "The algorithm to be used for generating the key pair (e.g., RSA, ECC)"}, "key_length": {"type": "int", "description": "The desired length of the key pair in bits (e.g., 2048, 4096)"}}, "required": ["key_algorithm", "key_length"], "responses": {"public_key": {"type": "str", "description": "The generated public key"}, "private_key": {"type": "str", "description": "The generated private key"}}}
{"api_name": "checkSecurityStatus", "api_description": "Check the security status of a cloud environment", "field": "Cybersecurity/Cloud Security", "parameters": {"cloud_provider": {"type": "str", "description": "The cloud provider you want to check (e.g., AWS, Azure, GCP)"}, "account_id": {"type": "str", "description": "The ID of the cloud account"}, "region": {"type": "str", "description": "The region where the cloud resources are located"}}, "required": ["cloud_provider", "account_id"], "responses": {"status": {"type": "str", "description": "The security status of the cloud environment (e.g., secure, at risk)"}}}
{"api_name": "checkAuthentication", "api_description": "Check the authentication status of a user", "field": "Cybersecurity/Application Security", "parameters": {"username": {"type": "str", "description": "The username of the user to check authentication"}, "password": {"type": "str", "description": "The password of the user for authentication"}}, "required": ["username", "password"], "responses": {"authenticated": {"type": "bool", "description": "True if the user is authenticated, False otherwise"}}}
{"api_name": "scanApplication", "api_description": "Scans an application for potential security vulnerabilities.", "field": "Cybersecurity/Application Security", "parameters": {"application_id": {"type": "str", "description": "The ID of the application to be scanned"}, "scan_type": {"type": "str", "description": "The type of scan to be performed (e.g., static analysis, dynamic analysis)"}, "scan_level": {"type": "str", "description": "The level of scan intensity (e.g., low, medium, high)"}, "timeout": {"type": "int", "description": "The maximum time in seconds allowed for the scan to complete"}}, "required": ["application_id"], "responses": {"results": {"type": "str", "description": "The scan results in a human-readable format"}, "vulnerabilities": {"type": "str", "description": "List of discovered vulnerabilities"}}}
{"api_name": "scanEndpoint", "api_description": "Scan a specific endpoint for potential security threats", "field": "Cybersecurity/Endpoint Security", "parameters": {"endpoint": {"type": "str", "description": "The IP address or hostname of the endpoint to scan"}}, "required": ["endpoint"], "responses": {"scan_result": {"type": "str", "description": "The result of the scan indicating potential security threats"}}}
{"api_name": "checkWirelessNetwork", "api_description": "Check the security status of a wireless network", "field": "Cybersecurity/Wireless Security", "parameters": {"network_name": {"type": "str", "description": "The name of the wireless network to be checked"}, "password": {"type": "str", "description": "The password for the wireless network"}, "scan_duration": {"type": "int", "description": "The duration (in seconds) for scanning the wireless network"}}, "required": ["network_name", "password"], "responses": {"security_status": {"type": "str", "description": "The security status of the wireless network"}, "vulnerabilities": {"type": "str", "description": "Any vulnerabilities detected in the wireless network"}}}
{"api_name": "scanNetwork", "api_description": "Scan the wireless network for potential security threats", "field": "Cybersecurity/Wireless Security", "parameters": {"network_name": {"type": "str", "description": "The name of the wireless network to scan (e.g., MyWiFi, CompanyNetwork)"}, "scan_interval": {"type": "int", "description": "The time interval between network scans in minutes (e.g., 10, 30, 60)"}, "scan_duration": {"type": "int", "description": "The duration of each network scan in seconds (e.g., 5, 10, 30)"}, "detection_mode": {"type": "str", "description": "The mode of detection to use during network scan (e.g., passive, active)"}, "report_format": {"type": "str", "description": "The desired format for the scan report (e.g., PDF, HTML, JSON)"}}, "required": ["network_name"], "responses": {"scan_results": {"type": "str", "description": "The results of the network scan in the specified format"}, "timestamp": {"type": "str", "description": "The timestamp indicating when the scan was completed"}}}
{"api_name": "checkDatabaseAccess", "api_description": "Check if a database can be accessed by the current user", "field": "Cybersecurity/Database Security", "parameters": {"database_name": {"type": "str", "description": "The name of the database to check access for"}, "user_name": {"type": "str", "description": "The username of the user attempting to access the database"}, "password": {"type": "str", "description": "The password of the user attempting to access the database"}}, "required": ["database_name", "user_name", "password"], "responses": {"access_granted": {"type": "bool", "description": "Indicates if access is granted to the database"}}}
{"api_name": "auditLogs", "api_description": "Audit the database logs for security events", "field": "Cybersecurity/Database Security", "parameters": {"database_name": {"type": "str", "description": "Name of the database for log auditing"}}, "required": ["database_name"], "responses": {"audit_results": {"type": "str", "description": "Results of the log auditing process"}}}
{"api_name": "grantAccess", "api_description": "Grant access to a user for the specified database", "field": "Cybersecurity/Database Security", "parameters": {"database_name": {"type": "str", "description": "Name of the database to grant access to"}, "username": {"type": "str", "description": "Username of the user to grant access"}}, "required": ["database_name", "username"], "responses": {"access_granted": {"type": "bool", "description": "Indicates whether access was successfully granted"}}}
{"api_name": "checkDatabaseStatus", "api_description": "Check the status of a database", "field": "Cybersecurity/Database Security", "parameters": {"database_name": {"type": "str", "description": "The name of the database to check"}, "username": {"type": "str", "description": "The username to authenticate the database"}, "password": {"type": "str", "description": "The password to authenticate the database"}}, "required": ["database_name"], "responses": {"status": {"type": "str", "description": "The status of the specified database (e.g., online, offline)"}, "message": {"type": "str", "description": "Additional information or error message"}}}
{"api_name": "changeDatabasePassword", "api_description": "Change the password of a database user", "field": "Cybersecurity/Database Security", "parameters": {"database_name": {"type": "str", "description": "The name of the database"}, "username": {"type": "str", "description": "The username of the user to change the password for"}, "new_password": {"type": "str", "description": "The new password for the user"}}, "required": ["database_name", "username", "new_password"], "responses": {"success": {"type": "bool", "description": "Indicates if the password change was successful or not"}}}
{"api_name": "checkSSL", "api_description": "Check the SSL certificate of a website", "field": "Cybersecurity/Web Security", "parameters": {"website_url": {"type": "str", "description": "The URL of the website to check the SSL certificate for"}}, "required": ["website_url"], "responses": {"certificate_info": {"type": "str", "description": "Information about the SSL certificate of the website"}, "expiry_date": {"type": "str", "description": "The expiry date of the SSL certificate"}}}
{"api_name": "decryptMessage", "api_description": "Decrypt an encrypted message using a cryptography algorithm", "field": "Cybersecurity/Cryptography", "parameters": {"encrypted_message": {"type": "str", "description": "The encrypted message to be decrypted"}, "algorithm": {"type": "str", "description": "The decryption algorithm to be used (e.g., AES, RSA)"}, "key": {"type": "str", "description": "The decryption key required for the selected algorithm"}}, "required": ["encrypted_message", "algorithm", "key"], "responses": {"decrypted_message": {"type": "str", "description": "The decrypted version of the provided encrypted message"}}}
{"api_name": "getThreatIntelligence", "api_description": "Retrieve threat intelligence information", "field": "Cybersecurity/Threat Intelligence", "parameters": {"threat_level": {"type": "str", "description": "Specify the desired threat level for the intelligence report (e.g., low, medium, high)"}, "industry": {"type": "str", "description": "Specify the industry for which you want to receive threat intelligence (e.g., finance, healthcare, technology)"}, "time_frame": {"type": "str", "description": "Specify a time frame for the threat intelligence report (e.g., past week, past month, year-to-date)"}, "keyword": {"type": "str", "description": "Specify a keyword to search for in the threat intelligence report"}}, "required": ["threat_level"], "responses": {"intelligence_report": {"type": "str", "description": "The threat intelligence report containing information about the specified threat level, industry, time frame, and keyword"}}}
{"api_name": "performSecurityAudit", "api_description": "Perform a security audit on a system or network", "field": "Cybersecurity/Security Auditing", "parameters": {"system": {"type": "str", "description": "The system or network to be audited (e.g., website, database, server)"}, "scan_type": {"type": "str", "description": "Specify the type of security scan to be performed (e.g., vulnerability scan, penetration test, code review)"}, "target": {"type": "str", "description": "Specify the target for the security audit (e.g., IP address, URL, domain name)"}}, "required": ["system", "scan_type", "target"], "responses": {"findings": {"type": "str", "description": "The findings and vulnerabilities discovered during the security audit"}, "recommendations": {"type": "str", "description": "Recommendations for improving the security of the system or network"}}}
{"api_name": "resetPassword", "api_description": "Reset the password for a user account", "field": "Cybersecurity/Identity and Access Management", "parameters": {"username": {"type": "str", "description": "The username of the account to reset the password for"}, "new_password": {"type": "str", "description": "The new password to be set for the user account"}, "email": {"type": "str", "description": "The email address associated with the user account"}}, "required": ["username", "new_password", "email"], "responses": {"success": {"type": "bool", "description": "Indicates whether the password reset was successful or not"}, "message": {"type": "str", "description": "A message explaining the result of the password reset"}}}
{"api_name": "getLoggedInUsers", "api_description": "Retrieve the number of logged in users", "field": "Cybersecurity/Security Analytics", "parameters": {"time_period": {"type": "str", "description": "Specify the time period for which you want to retrieve the data (e.g., last hour, last day, last week)"}, "location": {"type": "str", "description": "The location of the data center (e.g., USA, Europe, Asia)"}, "include_internal": {"type": "bool", "description": "Include internal users in the count (true/false)"}}, "required": ["time_period", "location"], "responses": {"logged_in_users": {"type": "int", "description": "The number of currently logged in users"}}}
{"api_name": "detectMaliciousActivity", "api_description": "Detects and identifies malicious activity in a network or system using artificial intelligence techniques", "field": "Cybersecurity/Artificial Intelligence for Cybersecurity", "parameters": {"data": {"type": "str", "description": "The data or log file to be analyzed for potential malicious activity"}, "algorithm": {"type": "str", "description": "The algorithm to be used for the analysis (e.g., machine learning, deep learning)"}}, "required": ["data", "algorithm"], "responses": {"malicious_activity": {"type": "bool", "description": "Flag indicating whether malicious activity is detected"}, "result": {"type": "str", "description": "The detailed result of the analysis"}}}
{"api_name": "checkDeviceStatus", "api_description": "Check the status of a specific IoT device", "field": "Cybersecurity/IoT Security", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the IoT device (e.g., ABC123)", "example": "ABC123"}}, "required": ["device_id"], "responses": {"status": {"type": "str", "description": "The current status of the device (e.g., online, offline, compromised)"}}}
{"api_name": "secureCommunication", "api_description": "Establish a secure communication channel with an IoT device", "field": "Cybersecurity/IoT Security", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the IoT device (e.g., DEF456)", "example": "DEF456"}}, "required": ["device_id"], "responses": {"channel": {"type": "str", "description": "The secure communication channel established with the device"}}}
{"api_name": "blockDevice", "api_description": "Block the access of a specific IoT device to the network", "field": "Cybersecurity/IoT Security", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the IoT device (e.g., JKL012)", "example": "JKL012"}}, "required": ["device_id"], "responses": {"blocked": {"type": "bool", "description": "Indicates whether the device access was successfully blocked"}}}
{"api_name": "secureDevice", "api_description": "Enhance security of an IoT device", "field": "Cybersecurity/IoT Security", "parameters": {"device_id": {"type": "str", "description": "ID of the IoT device to be secured"}, "security_patches": {"type": "bool", "description": "Apply security patches to the device (e.g., true, false)"}, "firewall_enabled": {"type": "bool", "description": "Enable firewall protection on the device (e.g., true, false)"}}, "required": ["device_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the device security enhancement was successful"}}}
{"api_name": "executeEthicalHack", "api_description": "Perform ethical hacking activities on a target system", "field": "Cybersecurity/Ethical Hacking", "parameters": {"target": {"type": "str", "description": "The target system to be hacked"}}, "required": ["target"], "responses": {"result": {"type": "str", "description": "The result of the ethical hacking activity"}}}
{"api_name": "executeSQLInjection", "api_description": "Perform a SQL injection attack on a target website", "field": "Cybersecurity/Ethical Hacking", "parameters": {"target_url": {"type": "str", "description": "The URL of the target website"}, "payload": {"type": "str", "description": "The SQL injection payload to be injected into the target website's input fields"}}, "required": ["target_url", "payload"], "responses": {"result": {"type": "str", "description": "The result of the SQL injection attack (e.g., 'Success', 'Failed')"}}}
{"api_name": "bruteForceAttack", "api_description": "Perform a brute force attack on a target system", "field": "Cybersecurity/Ethical Hacking", "parameters": {"target_ip": {"type": "str", "description": "The IP address of the target system for the brute force attack"}, "username_list": {"type": "str", "description": "List of usernames to be used for the attack (e.g., admin, root, user)"}, "password_list": {"type": "str", "description": "List of passwords to be used for the attack (e.g., password123, 123456, qwerty)"}, "timeout": {"type": "int", "description": "Timeout value in seconds for each attempt"}}, "required": ["target_ip", "username_list", "password_list"], "responses": {"success": {"type": "bool", "description": "True if the brute force attack is successful, False otherwise"}}}
{"api_name": "sniffNetworkTraffic", "api_description": "Sniff network traffic on a specified network interface", "field": "Cybersecurity/Ethical Hacking", "parameters": {"interface": {"type": "str", "description": "The network interface to sniff traffic on (e.g., eth0, wlan0)"}, "filter": {"type": "str", "description": "Filter to apply to captured traffic (e.g., port 80, host 192.168.0.1)"}}, "required": ["interface"], "responses": {"captured_packets": {"type": "str", "description": "List of captured network packets"}}}
{"api_name": "exploitVulnerability", "api_description": "Exploit a known vulnerability in a target system", "field": "Cybersecurity/Ethical Hacking", "parameters": {"target_ip": {"type": "str", "description": "The IP address of the target system to be exploited"}}, "required": ["target_ip"], "responses": {"exploited": {"type": "bool", "description": "True if the exploit was successful, False otherwise"}}}
{"api_name": "generateSecurityGuidelines", "api_description": "Generate secure coding guidelines for a specific programming language", "field": "Cybersecurity/Secure Software Development", "parameters": {"language": {"type": "str", "description": "The programming language for which secure coding guidelines are desired (e.g., JavaScript, C#, Swift)"}, "compliance": {"type": "bool", "description": "Flag indicating if the guidelines should comply with specific security standards (e.g., PCI DSS, OWASP Top 10)"}, "industry": {"type": "str", "description": "The industry or sector to which the software belongs (e.g., Finance, Healthcare, E-commerce)"}}, "required": ["language"], "responses": {"guidelines": {"type": "str", "description": "Secure coding guidelines for the specified language"}}}
{"api_name": "getVideoSurveillanceFeed", "api_description": "Retrieve a live video surveillance feed from a physical security system", "field": "Cybersecurity/Physical Security", "parameters": {"location": {"type": "str", "description": "The location from where you want to retrieve the video surveillance feed (e.g. building, data center, office)"}, "camera_id": {"type": "str", "description": "The ID of the camera from which you want to retrieve the feed"}}, "required": ["location", "camera_id"], "responses": {"video_feed": {"type": "str", "description": "The URL or stream for accessing the live video surveillance feed"}}}
{"api_name": "sendAviationMessage", "api_description": "Send a message through aviation communication system", "field": "Aviation/Aviation Communication", "parameters": {"message_content": {"type": "str", "description": "The content of the message"}, "sender_id": {"type": "str", "description": "The ID of the sender"}, "receiver_id": {"type": "str", "description": "The ID of the receiver"}, "priority": {"type": "int", "description": "The priority of the message (1 being the highest)"}, "message_type": {"type": "str", "description": "The type of the message (e.g., emergency, operational, weather)"}, "attachment": {"type": "str", "description": "Any attachment files related to the message"}}, "required": ["message_content", "sender_id", "receiver_id"], "responses": {"status": {"type": "str", "description": "The status of the message (e.g., sent, failed)"}, "timestamp": {"type": "str", "description": "The timestamp of when the message was sent"}}}
{"api_name": "getFlightData", "api_description": "Retrieve flight data from avionics systems", "field": "Aviation/Avionics", "parameters": {"flight_number": {"type": "str", "description": "The number assigned to a specific flight (e.g., AA123, DL456)"}, "aircraft": {"type": "str", "description": "The aircraft model or code (e.g., B737, A320)"}}, "required": ["flight_number"], "responses": {"altitude": {"type": "int", "description": "The current altitude of the flight in feet"}, "speed": {"type": "int", "description": "The current groundspeed of the flight in knots"}, "position": {"type": "str", "description": "The latitude and longitude coordinates of the aircraft"}}}
{"api_name": "getAircraftPosition", "api_description": "Retrieve the current position of an aircraft", "field": "Aviation/Avionics", "parameters": {"flight_number": {"type": "str", "description": "The flight number of the aircraft (e.g., SQ321, DL100)"}, "aircraft_type": {"type": "str", "description": "The type of aircraft (e.g., Boeing 747, Airbus A320)"}, "altitude": {"type": "int", "description": "The desired altitude of the aircraft in feet (e.g., 35000, 40000)"}, "velocity": {"type": "int", "description": "The desired velocity of the aircraft in knots (e.g., 450, 500)"}}, "required": ["flight_number", "altitude", "velocity"], "responses": {"latitude": {"type": "float", "description": "The latitude position of the aircraft"}, "longitude": {"type": "float", "description": "The longitude position of the aircraft"}, "altitude": {"type": "int", "description": "The altitude of the aircraft in feet"}, "velocity": {"type": "int", "description": "The velocity of the aircraft in knots"}}}
{"api_name": "startSimulation", "api_description": "Starts a flight simulation", "field": "Aviation/Flight Simulation", "parameters": {"aircraft": {"type": "str", "description": "The type of aircraft to be simulated (e.g., Boeing 747, Airbus A320)"}, "departure_airport": {"type": "str", "description": "The code or name of the departure airport (e.g., JFK, London Heathrow)"}, "destination_airport": {"type": "str", "description": "The code or name of the destination airport (e.g., LAX, Paris Charles de Gaulle)"}}, "required": ["aircraft", "departure_airport", "destination_airport"], "responses": {"simulation_id": {"type": "str", "description": "The unique identifier for the flight simulation"}, "status": {"type": "str", "description": "The status of the flight simulation (e.g., in progress, completed)"}}}
{"api_name": "endSimulation", "api_description": "Ends a flight simulation", "field": "Aviation/Flight Simulation", "parameters": {"simulation_id": {"type": "str", "description": "The unique identifier of the flight simulation"}}, "required": ["simulation_id"], "responses": {"status": {"type": "str", "description": "The final status of the flight simulation"}}}
{"api_name": "checkFuelLevel", "api_description": "Retrieve current fuel level information of an aircraft", "field": "Aviation/Aircraft Systems", "parameters": {"aircraft_id": {"type": "str", "description": "The unique identifier of the aircraft (e.g., A1234)"}, "unit": {"type": "str", "description": "The unit in which fuel level is provided (e.g., gallons, liters)"}, "location": {"type": "str", "description": "The location of the aircraft (e.g., airport code, GPS coordinates)"}}, "required": ["aircraft_id"], "responses": {"fuel_level": {"type": "float", "description": "The current fuel level of the aircraft"}, "unit": {"type": "str", "description": "The unit of fuel level in which it is provided"}}}
{"api_name": "getAltitude", "api_description": "Retrieve the current altitude information of an aircraft", "field": "Aviation/Aircraft Systems", "parameters": {"aircraft_id": {"type": "str", "description": "The unique identifier of the aircraft (e.g., A1234)"}, "unit": {"type": "str", "description": "The unit in which altitude is provided (e.g., feet, meters)"}}, "required": ["aircraft_id"], "responses": {"altitude": {"type": "float", "description": "The current altitude of the aircraft"}, "unit": {"type": "str", "description": "The unit of altitude in which it is provided"}}}
{"api_name": "getCabinPressure", "api_description": "Retrieve the current cabin pressure information of an aircraft", "field": "Aviation/Aircraft Systems", "parameters": {"aircraft_id": {"type": "str", "description": "The unique identifier of the aircraft"}, "altitude": {"type": "int", "description": "The altitude at which the cabin pressure should be retrieved"}}, "required": ["aircraft_id"], "responses": {"cabin_pressure": {"type": "float", "description": "The current cabin pressure of the specified aircraft at the given altitude"}}}
{"api_name": "getHumanFactors", "api_description": "Retrieve human factors information related to aviation", "field": "Aviation/Human Factors in Aviation", "parameters": {"category": {"type": "str", "description": "The category of human factors you want to retrieve (e.g., crew resource management, fatigue management, situational awareness)"}, "airline": {"type": "str", "description": "The airline for which you want to get the human factors information"}, "region": {"type": "str", "description": "The region for which you want to get the human factors information (e.g., North America, Europe, Asia)"}}, "required": ["category"], "responses": {"factors": {"type": "str", "description": "The human factors associated with the specified category and airline"}, "guidelines": {"type": "str", "description": "The guidelines to manage the specified human factors"}}}
{"api_name": "getAircraftStructures", "api_description": "Retrieve information about aircraft structures", "field": "Aviation/Aircraft Structures", "parameters": {"aircraft_type": {"type": "str", "description": "The type of aircraft for which you want to get the structure information (e.g., Boeing 747, Airbus A320)"}, "component_type": {"type": "str", "description": "The type of component for which you want to get the structure information (e.g., fuselage, wings, landing gear)"}, "year_of_manufacture": {"type": "int", "description": "The year of manufacture of the aircraft"}}, "required": ["aircraft_type"], "responses": {"structure_info": {"type": "str", "description": "Information about the structures of the specified aircraft component"}}}
{"api_name": "getAircraftMaterials", "api_description": "Retrieve materials used in the construction of an aircraft", "field": "Aviation/Aircraft Structures", "parameters": {"aircraft_model": {"type": "str", "description": "The model of the aircraft (e.g., Boeing 777, Airbus A330)"}}, "required": ["aircraft_model"], "responses": {"materials": {"type": "str", "description": "The materials used in the construction of the aircraft"}}}
{"api_name": "calculateFlightTime", "api_description": "Calculate the estimated flight time for a helicopter", "field": "Aviation/Helicopter Operations", "parameters": {"departure_location": {"type": "str", "description": "The departure location for the helicopter flight"}, "destination_location": {"type": "str", "description": "The destination location for the helicopter flight"}, "average_speed": {"type": "float", "description": "The average speed of the helicopter during the flight (in knots)"}, "fuel_efficiency": {"type": "float", "description": "The fuel efficiency of the helicopter (in gallons per hour)"}, "passenger_count": {"type": "int", "description": "The number of passengers onboard the helicopter"}}, "required": ["departure_location", "destination_location"], "responses": {"flight_time": {"type": "float", "description": "The estimated flight time for the helicopter (in hours)"}}}
{"api_name": "getAirlineDetails", "api_description": "Retrieve detailed information about an airline", "field": "Aviation/Airline Management", "parameters": {"airline_code": {"type": "str", "description": "The unique code assigned to the airline (e.g., BA, AA, LH)"}}, "required": ["airline_code"], "responses": {"airline_name": {"type": "str", "description": "The full name of the airline"}, "country": {"type": "str", "description": "The country in which the airline is based"}, "fleet_size": {"type": "int", "description": "The number of aircrafts in the airline's fleet"}, "founded_year": {"type": "int", "description": "The year in which the airline was founded"}}}
{"api_name": "createAirline", "api_description": "Create a new airline in the system", "field": "Aviation/Airline Management", "parameters": {"name": {"type": "str", "description": "The name of the airline"}, "country": {"type": "str", "description": "The country in which the airline is based"}, "iata_code": {"type": "str", "description": "The IATA code of the airline (e.g., AA, BA, LH)"}, "icao_code": {"type": "str", "description": "The ICAO code of the airline (e.g., AAL, BAW, DLH)"}, "fleet_size": {"type": "int", "description": "The number of aircrafts owned by the airline"}}, "required": ["name", "country", "iata_code"], "responses": {"success": {"type": "bool", "description": "Indicates if the airline creation was successful"}}}
{"api_name": "updateAirlineFleetSize", "api_description": "Update the fleet size of an airline", "field": "Aviation/Airline Management", "parameters": {"iata_code": {"type": "str", "description": "The IATA code of the airline"}, "fleet_size": {"type": "int", "description": "The new fleet size of the airline"}}, "required": ["iata_code", "fleet_size"], "responses": {"success": {"type": "bool", "description": "Indicates if the fleet size update was successful"}}}
{"api_name": "checkPassengerSecurity", "api_description": "Check the security status of a passenger", "field": "Aviation/Aviation Security", "parameters": {"passenger_name": {"type": "str", "description": "The name of the passenger to be checked"}, "flight_number": {"type": "str", "description": "The flight number for which the security check is to be performed"}, "airport_code": {"type": "str", "description": "The code of the airport where the security check is taking place"}, "security_level": {"type": "str", "description": "The desired security level (e.g., high, medium, low)"}}, "required": ["passenger_name"], "responses": {"security_status": {"type": "str", "description": "The security status of the passenger (e.g., cleared, pending, denied)"}, "security_level": {"type": "str", "description": "The security level assigned to the passenger"}}}
{"api_name": "getPhysiologicalData", "api_description": "Retrieve physiological data of aviation personnel", "field": "Aviation/Aviation Medicine", "parameters": {"pilot_id": {"type": "str", "description": "The ID of the pilot for whom you want to retrieve physiological data"}, "date": {"type": "str", "description": "The date for which you want to retrieve physiological data (e.g., 2022-01-01)"}, "time_of_day": {"type": "str", "description": "Specify a time of day for physiological data (e.g., morning, afternoon, night)"}}, "required": ["pilot_id", "date"], "responses": {"heart_rate": {"type": "int", "description": "The heart rate of the pilot at the specified date and time"}, "blood_pressure": {"type": "str", "description": "The blood pressure of the pilot at the specified date and time"}, "oxygen_level": {"type": "float", "description": "The oxygen level in the pilot's blood at the specified date and time"}}}
{"api_name": "getDroneLocation", "api_description": "Retrieve the current location of a drone", "field": "Aviation/Drone Operations", "parameters": {"drone_id": {"type": "str", "description": "The ID of the drone for which you want to retrieve the location"}}, "required": ["drone_id"], "responses": {"latitude": {"type": "float", "description": "The latitude of the drone's current location"}, "longitude": {"type": "float", "description": "The longitude of the drone's current location"}}}
{"api_name": "getDroneBattery", "api_description": "Retrieve the current battery level of a drone", "field": "Aviation/Drone Operations", "parameters": {"drone_id": {"type": "str", "description": "The ID of the drone for which you want to retrieve the battery level"}}, "required": ["drone_id"], "responses": {"battery_level": {"type": "int", "description": "The current battery level of the specified drone"}}}
{"api_name": "startDroneMission", "api_description": "Start a mission for a drone", "field": "Aviation/Drone Operations", "parameters": {"drone_id": {"type": "str", "description": "The ID of the drone for which you want to start the mission"}, "mission_code": {"type": "str", "description": "The code identifier for the mission to be executed (e.g., Mission 001, Mission 002)"}}, "required": ["drone_id", "mission_code"], "responses": {"message": {"type": "str", "description": "A message confirming the start of the mission"}}}
{"api_name": "setDroneSpeed", "api_description": "Set the speed of a drone", "field": "Aviation/Drone Operations", "parameters": {"drone_id": {"type": "str", "description": "The unique identifier of the drone"}, "speed": {"type": "float", "description": "The desired speed for the drone (e.g., 10.5, 15.2, 20.0)"}, "unit": {"type": "str", "description": "The unit of speed (e.g., meters per second, kilometers per hour)"}}, "required": ["drone_id", "speed"], "responses": {"success": {"type": "bool", "description": "Indicates if the speed was successfully set"}}}
{"api_name": "checkFlightPermission", "api_description": "Check if a drone flight is permitted in a specific location", "field": "Aviation/Drone Operations", "parameters": {"location": {"type": "str", "description": "The location where the drone flight will take place (e.g., park, airport, residential area)"}}, "required": ["location"], "responses": {"permission": {"type": "bool", "description": "Indicates whether the drone flight is permitted in the specified location"}}}
{"api_name": "getCustomerServiceNumber", "api_description": "Retrieve the customer service number for an airline", "field": "Aviation/Airline Customer Service", "parameters": {"airline": {"type": "str", "description": "The name of the airline for which you want to get the customer service number (e.g., Delta, United, British Airways)"}}, "required": ["airline"], "responses": {"customer_service_number": {"type": "str", "description": "The customer service number for the specified airline"}}}
{"api_name": "getAirportCode", "api_description": "Retrieve the airport code for a given airport name", "field": "Aviation/Aviation Research", "parameters": {"airport_name": {"type": "str", "description": "The name of the airport for which you want to retrieve the airport code (e.g., John F. Kennedy International Airport, London Heathrow Airport)"}}, "required": ["airport_name"], "responses": {"airport_code": {"type": "str", "description": "The code of the specified airport"}}}
{"api_name": "getRunwayLength", "api_description": "Retrieve the length of a runway at a given airport", "field": "Aviation/Aviation Research", "parameters": {"airport_code": {"type": "str", "description": "The code of the airport for which you want to retrieve the runway length (e.g., JFK, LHR)"}, "runway_number": {"type": "int", "description": "The number of the runway for which you want to retrieve the length"}}, "required": ["airport_code", "runway_number"], "responses": {"runway_length": {"type": "float", "description": "The length of the specified runway"}}}
{"api_name": "getResearchPaper", "api_description": "Retrieve research papers related to aviation", "field": "Aviation/Aviation Research", "parameters": {"topic": {"type": "str", "description": "The topic of the research paper (e.g., safety, efficiency, sustainability)"}, "author": {"type": "str", "description": "The author of the research paper"}, "year": {"type": "int", "description": "The year of publication for the research paper"}}, "required": ["topic"], "responses": {"research_paper": {"type": "str", "description": "The research paper related to the specified topic"}}}
{"api_name": "getWebPageContent", "api_description": "Retrieve the content of a web page", "field": "Software Development/Web development", "parameters": {"url": {"type": "str", "description": "The URL of the web page you want to retrieve content from (e.g., https://www.example.com)"}, "format": {"type": "str", "description": "The desired format of the content (e.g., HTML, JSON)"}, "headers": {"type": "str", "description": "Additional headers to be sent with the request (e.g., Authorization: Bearer TOKEN)"}}, "required": ["url"], "responses": {"content": {"type": "str", "description": "The content of the web page"}}}
{"api_name": "deleteWebPage", "api_description": "Delete an existing web page", "field": "Software Development/Web development", "parameters": {"page_id": {"type": "str", "description": "The ID of the web page to be deleted"}}, "required": ["page_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the web page deletion was successful"}}}
{"api_name": "createDesktopApp", "api_description": "Create a new desktop application", "field": "Software Development/Desktop application development", "parameters": {"app_name": {"type": "str", "description": "The name of the desktop application"}, "platform": {"type": "str", "description": "The target platform for the application development (e.g., Windows, macOS, Linux)"}, "programming_language": {"type": "str", "description": "The programming language to be used for the application development (e.g., Java, C++, Python)"}}, "required": ["app_name", "platform", "programming_language"], "responses": {"success": {"type": "bool", "description": "Indicates whether the desktop application creation was successful or not"}}}
{"api_name": "queryData", "api_description": "Retrieve data from a database using specified conditions", "field": "Software Development/Database development", "parameters": {"database_name": {"type": "str", "description": "The name of the database to query"}, "query_conditions": {"type": "str", "description": "The conditions to be applied for data retrieval (e.g., 'SELECT * FROM table WHERE condition')"}}, "required": ["database_name", "query_conditions"], "responses": {"data": {"type": "str", "description": "The retrieved data from the database"}}}
{"api_name": "createEmbeddedSystem", "api_description": "Create a new embedded system project", "field": "Software Development/Embedded systems development", "parameters": {"project_name": {"type": "str", "description": "The name of the embedded system project"}, "microcontroller": {"type": "str", "description": "The microcontroller used in the project (e.g., Arduino Uno, Raspberry Pi)"}, "sensors": {"type": "str", "description": "The sensors integrated in the embedded system (e.g., temperature sensor, motion sensor)"}, "communication_protocol": {"type": "str", "description": "The communication protocol used by the embedded system (e.g., SPI, I2C, UART)"}}, "required": ["project_name", "microcontroller"], "responses": {"success": {"type": "bool", "description": "Indicates if the embedded system project was created successfully"}}}
{"api_name": "deployCode", "api_description": "Deploy code to production environment", "field": "Software Development/DevOps and automation", "parameters": {"repository": {"type": "str", "description": "The repository from which the code needs to be deployed (e.g., GitHub, Bitbucket)"}, "branch": {"type": "str", "description": "The branch from which the code needs to be deployed (e.g., master, develop)"}, "environment": {"type": "str", "description": "The target environment to which the code should be deployed (e.g., production, staging)"}, "server": {"type": "str", "description": "The server on which the code needs to be deployed (e.g., EC2 instance, Kubernetes cluster)"}, "build_script": {"type": "str", "description": "The build script to be executed during deployment"}}, "required": ["repository", "environment"], "responses": {"status": {"type": "str", "description": "The status of the deployment (e.g., success, failure)"}, "message": {"type": "str", "description": "Any additional message related to the deployment"}}}
{"api_name": "dockerBuild", "api_description": "Builds a Docker image for a specified application", "field": "Software Development/DevOps and automation", "parameters": {"application": {"type": "str", "description": "The name of the application to build the Docker image for"}}, "required": ["application"], "responses": {"image_id": {"type": "str", "description": "The ID of the built Docker image"}}}
{"api_name": "jenkinsPipeline", "api_description": "Executes a Jenkins pipeline for a specified project", "field": "Software Development/DevOps and automation", "parameters": {"project": {"type": "str", "description": "The name of the project to execute the Jenkins pipeline for"}, "branch": {"type": "str", "description": "The branch of the project repository to build"}, "parameters": {"type": "str", "description": "Additional parameters to be passed to the Jenkins pipeline (e.g., 'deploy=true', 'env=staging')"}}, "required": ["project"], "responses": {"pipeline_status": {"type": "str", "description": "The status of the executed Jenkins pipeline"}}}
{"api_name": "uploadFile", "api_description": "Upload a file to the cloud storage", "field": "Software Development/Cloud computing", "parameters": {"file": {"type": "str", "description": "The file to be uploaded"}, "destination": {"type": "str", "description": "The destination location in the cloud storage where the file should be uploaded"}}, "required": ["file", "destination"], "responses": {"status": {"type": "str", "description": "The status of the file upload"}}}
{"api_name": "sanitizeInput", "api_description": "Sanitize user input to prevent common security vulnerabilities", "field": "Software Development/Cybersecurity", "parameters": {"input_data": {"type": "str", "description": "The user input data to be sanitized"}}, "required": ["input_data"], "responses": {"sanitized_data": {"type": "str", "description": "The sanitized version of the user input data"}}}
{"api_name": "validateAccess", "api_description": "Validate access permissions for a user or entity", "field": "Software Development/Cybersecurity", "parameters": {"user_id": {"type": "str", "description": "The ID of the user requesting access"}, "resource_id": {"type": "str", "description": "The ID of the resource being accessed"}, "access_level": {"type": "str", "description": "The required access level for the resource (e.g., read, write, admin)"}, "authentication_token": {"type": "str", "description": "The authentication token of the user"}}, "required": ["user_id", "resource_id", "access_level", "authentication_token"], "responses": {"access_granted": {"type": "bool", "description": "Indicates whether access is granted or denied"}}}
{"api_name": "createSoftwareArchitecture", "api_description": "Create the architecture design for a software project", "field": "Software Development/Software architecture design", "parameters": {"project_name": {"type": "str", "description": "The name of the software project"}, "technology_stack": {"type": "str", "description": "The technology stack to be used in the software architecture (e.g., Java, Python, AWS, Docker)"}, "requirements": {"type": "str", "description": "The requirements and goals of the software project"}, "constraints": {"type": "str", "description": "The constraints and limitations to be considered in the architecture design"}}, "required": ["project_name", "technology_stack", "requirements"], "responses": {"architecture_diagram": {"type": "str", "description": "The architectural diagram depicting the software architecture design"}, "components": {"type": "str", "description": "The key components and modules of the software system"}}}
{"api_name": "mergeBranches", "api_description": "Merge two branches of a software in a repository", "field": "Software Development/Version control and software configuration management", "parameters": {"repository_url": {"type": "str", "description": "The URL of the repository where the software is hosted"}, "source_branch": {"type": "str", "description": "The name of the source branch to be merged"}, "target_branch": {"type": "str", "description": "The name of the target branch to merge into"}}, "required": ["repository_url", "source_branch", "target_branch"], "responses": {"merged_branch": {"type": "str", "description": "The name of the branch resulting from the merge"}}}
{"api_name": "getBugCount", "api_description": "Retrieve the total count of bugs in a software", "field": "Software Development/Software maintenance and support", "parameters": {"software_name": {"type": "str", "description": "The name of the software to retrieve bug count"}, "version": {"type": "str", "description": "The version of the software to retrieve bug count"}}, "required": ["software_name"], "responses": {"bug_count": {"type": "int", "description": "The total count of bugs in the specified software version"}}}
{"api_name": "getCO2Levels", "api_description": "Retrieve current levels of CO2 in the atmosphere", "field": "Environment/Climate Change", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the CO2 levels (e.g., Beijing, London, New York)"}, "unit": {"type": "str", "description": "The desired unit for CO2 levels (e.g., ppm, mg/m3)"}}, "required": ["location"], "responses": {"co2_levels": {"type": "float", "description": "The current levels of CO2 at the specified location"}, "unit": {"type": "str", "description": "The unit of CO2 levels in which the levels are provided"}}}
{"api_name": "getAccessToNaturalResources", "api_description": "Retrieve information about access to natural resources", "field": "Environment/Natural Resource Management", "parameters": {"location": {"type": "str", "description": "The location for which you want to get access to natural resources (e.g., forest, river, national park)"}, "resource_type": {"type": "str", "description": "The type of natural resource you are interested in (e.g., timber, water, wildlife)"}, "permit_required": {"type": "bool", "description": "Specify if a permit is required to access the natural resource"}}, "required": ["location", "resource_type"], "responses": {"access_granted": {"type": "bool", "description": "Indicates if access is granted to the specified natural resource"}, "permit_details": {"type": "str", "description": "Details about the permit required to access the natural resource"}}}
{"api_name": "getUVIndex", "api_description": "Retrieve current UV index information", "field": "Environment/Weather", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the UV index (e.g., Beijing, London, New York)"}, "time_of_day": {"type": "str", "description": "Specify a time of day for UV index (e.g., morning, afternoon, night)"}}, "required": ["location"], "responses": {"uv_index": {"type": "int", "description": "The UV index at the specified location"}}}
{"api_name": "getCurrentWeather", "api_description": "Retrieve current weather conditions", "field": "Environment/Weather", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the weather (e.g., Beijing, London, New York)"}, "unit": {"type": "str", "description": "The desired unit for temperature (e.g., Celsius, Fahrenheit)"}, "time_of_day": {"type": "str", "description": "Specify a time of day for weather information (e.g., morning, afternoon, evening)"}, "forecast_days": {"type": "int", "description": "Specify the number of forecast days required"}}, "required": ["location"], "responses": {"temperature": {"type": "float", "description": "The current temperature at the specified location"}, "unit": {"type": "str", "description": "The unit of temperature in which the temperature is provided"}, "humidity": {"type": "float", "description": "The current humidity level at the specified location"}, "wind_speed": {"type": "float", "description": "The current wind speed at the specified location"}, "weather_conditions": {"type": "str", "description": "The current weather conditions at the specified location"}}}
{"api_name": "publishBook", "api_description": "Publish a book", "field": "Publishing/Book publishing", "parameters": {"title": {"type": "str", "description": "The title of the book"}, "author": {"type": "str", "description": "The author of the book"}, "genre": {"type": "str", "description": "The genre of the book (e.g., Mystery, Romance, Science Fiction)"}, "publication_date": {"type": "str", "description": "The publication date of the book (e.g., January 1, 2022)"}, "publisher": {"type": "str", "description": "The publisher of the book"}}, "required": ["title", "author", "genre"], "responses": {"success": {"type": "bool", "description": "Indicates if the book was successfully published"}}}
{"api_name": "createMagazine", "api_description": "Create a new magazine", "field": "Publishing/Magazine publishing", "parameters": {"title": {"type": "str", "description": "The title of the magazine"}, "publisher": {"type": "str", "description": "The publisher of the magazine"}, "edition": {"type": "int", "description": "The edition number of the magazine"}}, "required": ["title", "publisher"], "responses": {"magazine_id": {"type": "str", "description": "The unique ID assigned to the created magazine"}}}
{"api_name": "getMagazineInfo", "api_description": "Retrieve information about a specific magazine", "field": "Publishing/Magazine publishing", "parameters": {"magazine_id": {"type": "str", "description": "The unique identifier of the magazine"}}, "required": ["magazine_id"], "responses": {"magazine_title": {"type": "str", "description": "The title of the magazine"}, "publisher": {"type": "str", "description": "The publisher of the magazine"}, "publication_date": {"type": "str", "description": "The date of publication of the magazine"}}}
{"api_name": "createNewspaper", "api_description": "Create a new newspaper publication", "field": "Publishing/Newspaper publishing", "parameters": {"title": {"type": "str", "description": "The title of the newspaper publication"}, "date": {"type": "str", "description": "The date of the newspaper publication (e.g., YYYY-MM-DD)"}, "category": {"type": "str", "description": "The category of the newspaper publication (e.g., Local, National, International)"}, "content": {"type": "str", "description": "The content of the newspaper publication"}}, "required": ["title", "date", "category", "content"], "responses": {"newspaper_id": {"type": "str", "description": "The unique identifier of the created newspaper publication"}}}
{"api_name": "publishNewspaperArticle", "api_description": "Publish a new article in a newspaper", "field": "Publishing/Newspaper publishing", "parameters": {"article_title": {"type": "str", "description": "The title of the article"}, "article_content": {"type": "str", "description": "The content of the article"}, "author_name": {"type": "str", "description": "The name of the author of the article"}, "newspaper_name": {"type": "str", "description": "The name of the newspaper where the article will be published"}, "publish_date": {"type": "str", "description": "The date on which the article will be published (e.g., yyyy-mm-dd)"}, "section": {"type": "str", "description": "The section of the newspaper where the article will be published (e.g., Sports, Business, Entertainment)"}, "keywords": {"type": "str", "description": "The keywords related to the article separated by commas"}}, "required": ["article_title", "article_content", "author_name", "newspaper_name", "publish_date"], "responses": {"status": {"type": "str", "description": "The status of the article publication process (e.g., success, error)"}, "article_id": {"type": "int", "description": "The unique identifier of the published article"}}}
{"api_name": "getNewspaperInfo", "api_description": "Retrieve information about a specific newspaper", "field": "Publishing/Newspaper publishing", "parameters": {"newspaper_name": {"type": "str", "description": "The name of the newspaper for which you want to get information"}}, "required": ["newspaper_name"], "responses": {"info": {"type": "str", "description": "Information about the specified newspaper"}}}
{"api_name": "getJournalInfo", "api_description": "Retrieve information about a specific academic journal", "field": "Publishing/Academic publishing", "parameters": {"journal_name": {"type": "str", "description": "The name of the academic journal"}}, "required": ["journal_name"], "responses": {"impact_factor": {"type": "float", "description": "The impact factor of the specified journal"}, "publication_frequency": {"type": "str", "description": "The publication frequency of the specified journal"}, "editor": {"type": "str", "description": "The editor-in-chief of the specified journal"}}}
{"api_name": "publishContent", "api_description": "Publish content digitally", "field": "Publishing/Digital publishing", "parameters": {"content_id": {"type": "str", "description": "The ID of the content to be published"}}, "required": ["content_id"], "responses": {"status": {"type": "str", "description": "The status of the content publication"}}}
{"api_name": "deleteContent", "api_description": "Delete content published digitally", "field": "Publishing/Digital publishing", "parameters": {"content_id": {"type": "str", "description": "The ID of the content to be deleted"}}, "required": ["content_id"], "responses": {"status": {"type": "str", "description": "The status of the content deletion"}}}
{"api_name": "authorizeAccess", "api_description": "Authorize access to digital content", "field": "Publishing/Digital publishing", "parameters": {"content_id": {"type": "str", "description": "The ID of the content"}, "user_id": {"type": "str", "description": "The ID of the user to authorize access to"}}, "required": ["content_id", "user_id"], "responses": {"status": {"type": "str", "description": "The status of the access authorization"}}}
{"api_name": "uploadBook", "api_description": "Upload a self-published book to the platform", "field": "Publishing/Self-publishing", "parameters": {"title": {"type": "str", "description": "The title of the book"}, "author": {"type": "str", "description": "The name of the author"}, "genre": {"type": "str", "description": "The genre of the book (e.g., romance, mystery, science fiction)"}, "file": {"type": "str", "description": "The file containing the book to be uploaded"}, "format": {"type": "str", "description": "The desired format for the book (e.g., PDF, EPUB)"}}, "required": ["title", "author", "file"], "responses": {"success": {"type": "bool", "description": "Indicates whether the book was successfully uploaded"}, "message": {"type": "str", "description": "A message providing additional information about the upload"}}}
{"api_name": "selfPublishing", "api_description": "Self-publish a book", "field": "Publishing/Self-publishing", "parameters": {"title": {"type": "str", "description": "Title of the book"}, "author": {"type": "str", "description": "Author of the book"}, "genre": {"type": "str", "description": "Genre of the book"}, "price": {"type": "float", "description": "Price of the book in USD"}}, "required": ["title", "author"], "responses": {"success": {"type": "bool", "description": "Indicates if the self-publishing process was successful"}, "status": {"type": "str", "description": "Status message regarding the self-publishing process"}}}
{"api_name": "selfPublishBook", "api_description": "Allows users to self-publish their books", "field": "Publishing/Self-publishing", "parameters": {"title": {"type": "str", "description": "The title of the book"}, "author": {"type": "str", "description": "The author of the book"}, "genre": {"type": "str", "description": "The genre of the book"}, "description": {"type": "str", "description": "A short description of the book"}, "price": {"type": "float", "description": "The price of the book"}, "cover_image": {"type": "str", "description": "URL of the cover image for the book"}}, "required": ["title", "author", "price"], "responses": {"success": {"type": "bool", "description": "Indicates whether the book was successfully self-published"}}}
{"api_name": "getArtisticPublishingDetails", "api_description": "Retrieve details of artistic publishing", "field": "Publishing/Artistic publishing", "parameters": {"title": {"type": "str", "description": "The title of the artistic publishing"}, "author": {"type": "str", "description": "The author or creator of the artistic publishing"}, "year": {"type": "int", "description": "The year of publication"}}, "required": ["title", "author"], "responses": {"details": {"type": "str", "description": "Detailed information about the artistic publishing"}}}
{"api_name": "getArtisticPublishingInfo", "api_description": "Retrieve information about a specific artistic publication", "field": "Publishing/Artistic publishing", "parameters": {"publication_title": {"type": "str", "description": "The title of the artistic publication"}, "author": {"type": "str", "description": "The author/artist of the publication"}}, "required": ["publication_title"], "responses": {"publication_info": {"type": "str", "description": "Information about the specified artistic publication"}, "author_info": {"type": "str", "description": "Information about the author/artist of the publication"}}}
{"api_name": "getBookInfo", "api_description": "Retrieve information about a children's book", "field": "Publishing/Children's book publishing", "parameters": {"title": {"type": "str", "description": "The title of the children's book"}, "author": {"type": "str", "description": "The author of the children's book"}}, "required": ["title"], "responses": {"book_info": {"type": "str", "description": "The information about the children's book, including title, author, genre, and summary"}}}
{"api_name": "getReferenceBookDetails", "api_description": "Retrieve details of a reference book", "field": "Publishing/Reference book publishing", "parameters": {"book_name": {"type": "str", "description": "The name of the reference book you want to get details for (e.g., Encyclopedia Britannica, Oxford Dictionary)"}, "edition": {"type": "int", "description": "The edition number of the reference book (e.g., 1, 2, 3)"}}, "required": ["book_name"], "responses": {"author": {"type": "str", "description": "The author(s) of the reference book"}, "publication_year": {"type": "int", "description": "The year of publication"}, "publisher": {"type": "str", "description": "The publisher of the reference book"}}}
{"api_name": "uploadTechnicalArticle", "api_description": "Upload a technical article for publishing", "field": "Publishing/Technical publishing", "parameters": {"title": {"type": "str", "description": "The title of the technical article"}, "author": {"type": "str", "description": "The author of the technical article"}, "content": {"type": "str", "description": "The content of the technical article"}}, "required": ["title", "author", "content"], "responses": {"success": {"type": "bool", "description": "Indicates whether the upload was successful"}}}
{"api_name": "submitTechnicalArticle", "api_description": "Submit a technical article for publishing", "field": "Publishing/Technical publishing", "parameters": {"title": {"type": "str", "description": "The title of the technical article"}, "author": {"type": "str", "description": "The name of the author"}, "content": {"type": "str", "description": "The content of the technical article"}, "keywords": {"type": "str", "description": "Keywords related to the technical article"}, "journal": {"type": "str", "description": "The journal in which the article is to be published"}}, "required": ["title", "author", "content"], "responses": {"submission_id": {"type": "int", "description": "The unique ID assigned to the submitted article"}, "status": {"type": "str", "description": "The status of the article submission", "values": ["pending", "reviewing", "rejected", "accepted"]}}}
{"api_name": "getTechnicalPublishingInfo", "api_description": "Retrieve technical publishing information", "field": "Publishing/Technical publishing", "parameters": {"title": {"type": "str", "description": "The title of the published document"}, "author": {"type": "str", "description": "The author of the published document"}, "year": {"type": "int", "description": "The year the document was published"}, "topic": {"type": "str", "description": "The topic the document covers"}, "format": {"type": "str", "description": "The format of the document (e.g., paper, eBook)"}, "language": {"type": "str", "description": "The language in which the document is written"}}, "required": ["title", "author", "year"], "responses": {"publisher": {"type": "str", "description": "The publisher of the document"}, "price": {"type": "float", "description": "The price of the document"}, "availability": {"type": "bool", "description": "The availability of the document"}}}
{"api_name": "getEditorialWork", "api_description": "Retrieve editorial work information", "field": "Publishing/Editorial work", "parameters": {"publication": {"type": "str", "description": "The name of the publication (e.g., magazine, newspaper)"}, "author": {"type": "str", "description": "The name of the author"}, "category": {"type": "str", "description": "The category/genre of the editorial (e.g., news, opinion, feature)"}, "language": {"type": "str", "description": "The language of the editorial (e.g., English, French, Spanish)"}, "date": {"type": "str", "description": "The date of publication (e.g., YYYY-MM-DD)"}}, "required": ["publication", "author", "category"], "responses": {"editorial_content": {"type": "str", "description": "The content of the editorial"}, "word_count": {"type": "int", "description": "The word count of the editorial"}}}
{"api_name": "performCopyEditing", "api_description": "Perform copy editing on a document", "field": "Publishing/Copy editing", "parameters": {"document": {"type": "str", "description": "The document on which copy editing needs to be performed"}}, "required": ["document"], "responses": {"edited_document": {"type": "str", "description": "The edited document after copy editing is performed"}}}
{"api_name": "getCopyEdits", "api_description": "Retrieve copy editing suggestions", "field": "Publishing/Copy editing", "parameters": {"document": {"type": "str", "description": "The document content that requires copy editing"}}, "required": ["document"], "responses": {"suggestions": {"type": "str", "description": "The suggested copy edits for the document"}}}
{"api_name": "getProofreadingSuggestions", "api_description": "Get copy editing suggestions to improve the quality of the content", "field": "Publishing/Copy editing", "parameters": {"text": {"type": "str", "description": "The text that needs copy editing"}, "language": {"type": "str", "description": "The language of the text (e.g., English, Spanish, French)"}, "style_guide": {"type": "str", "description": "Specify a style guide to follow during copy editing (e.g., APA, MLA, Chicago Manual of Style)"}}, "required": ["text"], "responses": {"suggestions": {"type": "str", "description": "A list of copy editing suggestions to improve the quality of the content"}}}
{"api_name": "highlightMistakes", "api_description": "Highlight the mistakes in a given text", "field": "Publishing/Copy editing", "parameters": {"text": {"type": "str", "description": "The text in which mistakes need to be highlighted"}}, "required": ["text"], "responses": {"highlighted_text": {"type": "str", "description": "The text with mistakes highlighted"}}}
{"api_name": "formatText", "api_description": "Format a given text according to a specified style guide", "field": "Publishing/Copy editing", "parameters": {"text": {"type": "str", "description": "The text to be formatted"}, "style_guide": {"type": "str", "description": "The style guide to be followed for formatting (e.g., APA, MLA, Chicago)"}, "language": {"type": "str", "description": "The language of the text (e.g., English, French)"}}, "required": ["text", "style_guide"], "responses": {"formatted_text": {"type": "str", "description": "The text formatted according to the specified style guide"}}}
{"api_name": "copyEditing", "api_description": "Perform copy editing on a given text", "field": "Publishing/Copy editing", "parameters": {"text": {"type": "str", "description": "The text to be copy edited"}}, "required": ["text"], "responses": {"edited_text": {"type": "str", "description": "The copy edited version of the input text"}}}
{"api_name": "createIndex", "api_description": "Create an index for publishing content", "field": "Publishing/Indexing", "parameters": {"index_name": {"type": "str", "description": "The name of the index to be created"}, "content_type": {"type": "str", "description": "The type of content to be indexed"}, "fields": {"type": "str", "description": "The fields to be included in the index (e.g., title, author, date)"}, "settings": {"type": "str", "description": "Additional settings for the index"}}, "required": ["index_name", "content_type", "fields"], "responses": {"success": {"type": "bool", "description": "Indicates whether the index was created successfully"}}}
{"api_name": "updateIndex", "api_description": "Update an existing index for publishing content", "field": "Publishing/Indexing", "parameters": {"index_name": {"type": "str", "description": "The name of the index to be updated"}, "fields": {"type": "str", "description": "The fields to be modified in the index (e.g., title, author, date)"}, "settings": {"type": "str", "description": "Additional settings for the index"}}, "required": ["index_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the index was updated successfully"}}}
{"api_name": "deleteIndex", "api_description": "Delete an existing index for publishing content", "field": "Publishing/Indexing", "parameters": {"index_name": {"type": "str", "description": "The name of the index to be deleted"}}, "required": ["index_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the index was deleted successfully"}}}
{"api_name": "getLayoutDesign", "api_description": "Retrieve layout design for publishing", "field": "Publishing/Layout design", "parameters": {"document_type": {"type": "str", "description": "The type of the document for which layout design is needed (e.g., book, magazine, brochure)"}, "page_count": {"type": "int", "description": "The total number of pages in the document"}, "color_scheme": {"type": "str", "description": "The desired color scheme for the layout design (e.g., monochromatic, complementary)"}, "font": {"type": "str", "description": "The preferred font style for the text in the document (e.g., Arial, Times New Roman)"}}, "required": ["document_type", "page_count"], "responses": {"layout_design": {"type": "str", "description": "The generated layout design for the document", "example": "Sample layout design in PDF format"}}}
{"api_name": "getTypesettingInfo", "api_description": "Retrieve information about typesetting in publishing", "field": "Publishing/Typesetting", "parameters": {"document": {"type": "str", "description": "The document to be typeset"}, "font": {"type": "str", "description": "The desired font for typesetting (e.g., Arial, Times New Roman)"}, "spacing": {"type": "str", "description": "The desired line spacing for typesetting (e.g., single, double)"}, "alignment": {"type": "str", "description": "The desired alignment for typesetting (e.g., left, center, justify)"}, "margin": {"type": "str", "description": "The desired margin size for typesetting (e.g., small, normal, large)"}, "size": {"type": "int", "description": "The desired font size for typesetting (e.g., 10, 12, 14)"}, "color": {"type": "str", "description": "The desired font color for typesetting (e.g., red, blue, green)"}}, "required": ["document"], "responses": {"typeset_document": {"type": "str", "description": "The typeset document in the desired format"}}}
{"api_name": "setFontStyle", "api_description": "Set the font style for a document", "field": "Publishing/Typesetting", "parameters": {"document_id": {"type": "str", "description": "The unique identifier of the document"}, "font_family": {"type": "str", "description": "The desired font family (e.g., Arial, Times New Roman)"}, "font_size": {"type": "int", "description": "The desired font size in points"}, "bold": {"type": "bool", "description": "Set to True if the text should be bold, False otherwise"}, "italic": {"type": "bool", "description": "Set to True if the text should be italicized, False otherwise"}}, "required": ["document_id"], "responses": {"success": {"type": "bool", "description": "Returns True if the font style is set successfully, False otherwise"}}}
{"api_name": "getCopyrightStatus", "api_description": "Retrieve the copyright status of a published work", "field": "Publishing/Copyright and licensing", "parameters": {"title": {"type": "str", "description": "The title of the published work"}, "author": {"type": "str", "description": "The author of the published work"}}, "required": ["title", "author"], "responses": {"status": {"type": "str", "description": "The copyright status of the published work"}}}
{"api_name": "checkCopyrightInfringement", "api_description": "Check if a published work infringes upon copyright laws", "field": "Publishing/Copyright and licensing", "parameters": {"title": {"type": "str", "description": "The title of the published work"}, "author": {"type": "str", "description": "The author of the published work"}, "source": {"type": "str", "description": "The source of the published work (e.g., website, book)"}, "date_published": {"type": "str", "description": "The date of publication of the work"}}, "required": ["title", "author", "source"], "responses": {"infringement": {"type": "bool", "description": "True if the published work infringes upon copyright laws, False otherwise"}}}
{"api_name": "checkCopyright", "api_description": "Check the copyright status of a publication", "field": "Publishing/Copyright and licensing", "parameters": {"publication_title": {"type": "str", "description": "The title of the publication"}, "author": {"type": "str", "description": "The author of the publication"}, "year": {"type": "int", "description": "The year the publication was created or published"}, "country": {"type": "str", "description": "The country where the publication was created or published"}}, "required": ["publication_title", "author", "year", "country"], "responses": {"status": {"type": "str", "description": "The copyright status of the publication"}, "duration": {"type": "str", "description": "The duration of the copyright protection for the publication"}}}
{"api_name": "findLiteraryAgent", "api_description": "Find a literary agent for a book", "field": "Publishing/Literary agent", "parameters": {"book_title": {"type": "str", "description": "The title of the book you need a literary agent for"}, "genre": {"type": "str", "description": "The genre of the book (e.g., mystery, romance, science fiction)"}, "author_name": {"type": "str", "description": "The name of the book's author"}}, "required": ["book_title", "author_name"], "responses": {"literary_agent": {"type": "str", "description": "The name of the literary agent recommended for the book"}, "contact_info": {"type": "str", "description": "Contact information for the recommended literary agent"}}}
{"api_name": "getEbookMetadata", "api_description": "Retrieve metadata information of an e-book", "field": "Publishing/E-book publishing", "parameters": {"ebook_id": {"type": "str", "description": "The unique identifier or ISBN of the e-book"}}, "required": ["ebook_id"], "responses": {"title": {"type": "str", "description": "The title of the e-book"}, "author": {"type": "str", "description": "The author of the e-book"}, "publisher": {"type": "str", "description": "The publishing company of the e-book"}, "publication_date": {"type": "str", "description": "The publication date of the e-book"}, "genre": {"type": "str", "description": "The genre/category of the e-book"}}}
{"api_name": "deleteEbook", "api_description": "Delete an e-book from the publishing platform", "field": "Publishing/E-book publishing", "parameters": {"ebook_id": {"type": "str", "description": "The unique identifier or ISBN of the e-book to be deleted"}}, "required": ["ebook_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the e-book deletion was successful"}, "message": {"type": "str", "description": "Additional information or error message in case of failure"}}}
{"api_name": "updateEbookPrice", "api_description": "Update the price of an e-book", "field": "Publishing/E-book publishing", "parameters": {"title": {"type": "str", "description": "The title of the e-book"}, "price": {"type": "float", "description": "The new price of the e-book"}}, "required": ["title", "price"], "responses": {"status": {"type": "str", "description": "The status of the price update"}}}
{"api_name": "localizeContent", "api_description": "Localize content by converting it to the cultural and linguistic preferences of a specific target audience", "field": "Publishing/Translation and localization", "parameters": {"content": {"type": "str", "description": "The content to be localized"}, "target_language": {"type": "str", "description": "The desired language for localization"}, "target_region": {"type": "str", "description": "The specific region or country for localization"}}, "required": ["content", "target_language"], "responses": {"localized_content": {"type": "str", "description": "The content localized to the target language and region"}}}
{"api_name": "getRights", "api_description": "Retrieve information about rights and permissions for publishing", "field": "Publishing/Rights and permissions", "parameters": {"title": {"type": "str", "description": "The title of the published work for which you want to get rights information (e.g., 'The Great Gatsby')"}, "author": {"type": "str", "description": "The author of the published work (e.g., 'F. Scott Fitzgerald')"}, "publisher": {"type": "str", "description": "The publisher of the work (e.g., 'Penguin Random House')"}}, "required": ["title"], "responses": {"rights": {"type": "str", "description": "The rights and permissions information for the specified published work"}}}
{"api_name": "getUsageRights", "api_description": "Retrieve usage rights information for publishing", "field": "Publishing/Rights and permissions", "parameters": {"country": {"type": "str", "description": "The country where the work is to be published (e.g., 'United States')"}, "publication_type": {"type": "str", "description": "The type of publication (e.g., 'Print', 'Digital')"}, "work_type": {"type": "str", "description": "The type of work being published (e.g., 'Book', 'Journal')"}}, "required": ["country"], "responses": {"usage_rights": {"type": "str", "description": "The usage rights information for the specified country and publication type"}}}
{"api_name": "addBook", "api_description": "Add a new book to the library", "field": "Publishing/Library sciences", "parameters": {"library_id": {"type": "str", "description": "The unique identifier of the library"}, "title": {"type": "str", "description": "The title of the book"}, "author": {"type": "str", "description": "The author of the book"}, "genre": {"type": "str", "description": "The genre of the book"}, "publication_year": {"type": "int", "description": "The year the book was published"}}, "required": ["library_id", "title", "author"], "responses": {"success": {"type": "bool", "description": "Indicates whether the book was successfully added to the library"}}}
{"api_name": "getArticle", "api_description": "Retrieve information about a specific article", "field": "Publishing/Print journalism", "parameters": {"article_id": {"type": "int", "description": "The ID of the article you want to retrieve"}}, "required": ["article_id"], "responses": {"title": {"type": "str", "description": "The title of the article"}, "author": {"type": "str", "description": "The author of the article"}, "publication_date": {"type": "str", "description": "The publication date of the article"}}}
{"api_name": "getJournalist", "api_description": "Retrieve information about a specific journalist", "field": "Publishing/Print journalism", "parameters": {"journalist_id": {"type": "int", "description": "The ID of the journalist you want to retrieve"}}, "required": ["journalist_id"], "responses": {"name": {"type": "str", "description": "The name of the journalist"}, "publication_count": {"type": "int", "description": "The number of articles published by the journalist"}}}
{"api_name": "updatePublication", "api_description": "Update information of a publication in the system", "field": "Publishing/Publication management", "parameters": {"publication_id": {"type": "str", "description": "The ID of the publication to update"}, "title": {"type": "str", "description": "The new title of the publication"}, "authors": {"type": "str", "description": "The new authors of the publication (e.g., John Doe, Jane Smith)"}, "keywords": {"type": "str", "description": "The new keywords associated with the publication (e.g., research, science, technology)"}}, "required": ["publication_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the update was successful"}}}
{"api_name": "sendInvitations", "api_description": "Send wedding invitations to the guests", "field": "Event Management/Wedding Planning", "parameters": {"guest_list_id": {"type": "int", "description": "The unique identifier of the guest list"}, "invitation_template": {"type": "str", "description": "The template for the wedding invitation"}, "delivery_method": {"type": "str", "description": "The method of invitation delivery (e.g., email, postal mail)"}}, "required": ["guest_list_id", "invitation_template"], "responses": {"success": {"type": "bool", "description": "Indicates if the invitations were successfully sent"}}}
{"api_name": "addFestival", "api_description": "Add a new festival to the database", "field": "Event Management/Festivals and Fairs", "parameters": {"festival_name": {"type": "str", "description": "The name of the festival"}, "location": {"type": "str", "description": "The location of the festival"}, "date": {"type": "str", "description": "The date of the festival"}, "organizer": {"type": "str", "description": "The organizer of the festival"}}, "required": ["festival_name", "location", "date", "organizer"], "responses": {"success": {"type": "bool", "description": "Indicates whether the festival was successfully added"}}}
{"api_name": "cancelSocialEvent", "api_description": "Cancel a social event", "field": "Event Management/Social Events (parties, reunions, etc.)", "parameters": {"event_id": {"type": "int", "description": "The ID of the social event to be canceled"}}, "required": ["event_id"], "responses": {"message": {"type": "str", "description": "Success message indicating the cancellation of the social event"}}}
{"api_name": "createConference", "api_description": "Create a new conference event", "field": "Event Management/Conferences and Conventions", "parameters": {"title": {"type": "str", "description": "The title of the conference"}, "location": {"type": "str", "description": "The location where the conference will take place"}, "start_date": {"type": "str", "description": "The start date of the conference (e.g., '2022-08-01')"}, "end_date": {"type": "str", "description": "The end date of the conference (e.g., '2022-08-03')"}}, "required": ["title", "location", "start_date", "end_date"], "responses": {"conference_id": {"type": "str", "description": "The unique identifier of the created conference"}}}
{"api_name": "createExperientialEvent", "api_description": "Create a new experiential marketing event", "field": "Event Management/Experiential Marketing Events", "parameters": {"event_name": {"type": "str", "description": "The name of the event"}, "event_date": {"type": "str", "description": "The date of the event (e.g., yyyy-mm-dd)"}, "venue": {"type": "str", "description": "The venue where the event will take place"}, "participants": {"type": "int", "description": "The expected number of participants for the event"}}, "required": ["event_name", "event_date", "venue", "participants"], "responses": {"event_id": {"type": "str", "description": "The unique identifier of the created event"}}}
{"api_name": "updateEventDate", "api_description": "Update the date of an experiential marketing event", "field": "Event Management/Experiential Marketing Events", "parameters": {"event_id": {"type": "str", "description": "The unique identifier of the event"}, "new_event_date": {"type": "str", "description": "The new date for the event (e.g., yyyy-mm-dd)"}}, "required": ["event_id", "new_event_date"], "responses": {"success": {"type": "bool", "description": "Indicates if the event date was successfully updated"}}}
{"api_name": "cancelEvent", "api_description": "Cancel an experiential marketing event", "field": "Event Management/Experiential Marketing Events", "parameters": {"event_id": {"type": "str", "description": "The unique identifier of the event"}}, "required": ["event_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the event was successfully canceled"}}}
{"api_name": "updateEventVenue", "api_description": "Update the venue of an event", "field": "Event Management/Event Logistics and Operations", "parameters": {"event_id": {"type": "int", "description": "The unique identifier of the event"}, "new_venue": {"type": "str", "description": "The new venue where the event will be held"}}, "required": ["event_id", "new_venue"], "responses": {"success": {"type": "bool", "description": "Indicates whether the venue update was successful"}}}
{"api_name": "updateEventLocation", "api_description": "Update the location of an event", "field": "Event Management/Event Logistics and Operations", "parameters": {"event_id": {"type": "str", "description": "The unique ID of the event"}, "new_location": {"type": "str", "description": "The new location for the event"}}, "required": ["event_id", "new_location"], "responses": {"success": {"type": "bool", "description": "Indicates whether the location of the event was successfully updated"}}}
{"api_name": "bookVenue", "api_description": "Book a venue for an event", "field": "Event Management/Venue Selection and Management", "parameters": {"venue_id": {"type": "str", "description": "The unique identifier of the venue"}, "event_date": {"type": "str", "description": "The date of the event (e.g., DD/MM/YYYY)"}, "start_time": {"type": "str", "description": "The start time of the event (e.g., HH:MM AM/PM)"}, "end_time": {"type": "str", "description": "The end time of the event (e.g., HH:MM AM/PM)"}, "attendees": {"type": "int", "description": "The number of attendees expected at the event"}}, "required": ["venue_id", "event_date", "start_time", "end_time", "attendees"], "responses": {"booking_id": {"type": "str", "description": "The unique identifier for the booked event venue"}}}
{"api_name": "reserveEquipment", "api_description": "Reserve event technology and audio-visual equipment", "field": "Event Management/Event Technology and Audio-Visual", "parameters": {"event_type": {"type": "str", "description": "The type of event for which you want to reserve equipment (e.g., conference, wedding, concert)"}, "location": {"type": "str", "description": "The location where the event will take place (e.g., hotel, outdoor venue)"}, "date": {"type": "str", "description": "The date of the event for reserving equipment (e.g., YYYY-MM-DD)"}, "start_time": {"type": "str", "description": "The start time of the event for reserving equipment (e.g., HH:MM AM/PM)"}, "end_time": {"type": "str", "description": "The end time of the event for reserving equipment (e.g., HH:MM AM/PM)"}}, "required": ["event_type", "location", "date", "start_time", "end_time"], "responses": {"reservation_status": {"type": "str", "description": "The reservation status of event technology and audio-visual equipment for the specified event and location on the given date and time"}}}
{"api_name": "registerEvent", "api_description": "Register for an event and purchase tickets", "field": "Event Management/Event Registration and Ticketing", "parameters": {"event_name": {"type": "str", "description": "The name of the event you want to register for"}, "date": {"type": "str", "description": "The date of the event (e.g., DD/MM/YYYY)"}, "tickets": {"type": "int", "description": "The number of tickets you want to purchase"}, "name": {"type": "str", "description": "Your name"}, "email": {"type": "str", "description": "Your email address"}, "phone": {"type": "str", "description": "Your phone number"}}, "required": ["event_name", "date", "tickets", "name", "email"], "responses": {"confirmation_code": {"type": "str", "description": "The confirmation code for your event registration"}}}
{"api_name": "getSponsorshipOpportunities", "api_description": "Retrieve sponsorship opportunities for an event", "field": "Event Management/Event Sponsorship and Partnerships", "parameters": {"event_id": {"type": "int", "description": "The ID of the event for which you want to get sponsorship opportunities"}, "sponsorship_level": {"type": "str", "description": "Specify a desired sponsorship level (e.g., Gold, Silver, Bronze)"}, "location": {"type": "str", "description": "The desired location for sponsorship opportunities"}}, "required": ["event_id"], "responses": {"sponsorship_opportunities": {"type": "str", "description": "List of sponsorship opportunities for the specified event and criteria"}}}
{"api_name": "getEventDesignAndDecor", "api_description": "Retrieve event design and decor information", "field": "Event Management/Event Design and Decor", "parameters": {"event_type": {"type": "str", "description": "The type of event (e.g., wedding, birthday, corporate)"}, "color_scheme": {"type": "str", "description": "The desired color scheme for the event (e.g., pastel, vibrant, monochromatic)"}, "theme": {"type": "str", "description": "The theme or concept for the event (e.g., rustic, tropical, vintage)"}, "budget": {"type": "float", "description": "The budget allocated for event design and decor"}}, "required": ["event_type"], "responses": {"design_elements": {"type": "str", "description": "The recommended design elements for the event (e.g., flowers, lighting, centerpieces)"}, "estimated_cost": {"type": "float", "description": "The estimated cost for the event design and decor"}}}
{"api_name": "getEventEvaluation", "api_description": "Retrieve evaluation information for a specific event", "field": "Event Management/Event Evaluation and Reporting", "parameters": {"event_id": {"type": "str", "description": "The ID of the event for which you want to retrieve evaluation information"}}, "required": ["event_id"], "responses": {"evaluation": {"type": "str", "description": "The evaluation summary for the specified event"}}}
{"api_name": "getPurchaseOrderStatus", "api_description": "Retrieve the status of a specific purchase order", "field": "Supply Chain/Procurement and Purchasing", "parameters": {"purchase_order_id": {"type": "str", "description": "The ID of the purchase order you want to get the status for"}}, "required": ["purchase_order_id"], "responses": {"status": {"type": "str", "description": "The current status of the purchase order (e.g., 'Pending', 'In Progress', 'Delivered')"}}}
{"api_name": "cancelPurchaseOrder", "api_description": "Cancel a purchase order", "field": "Supply Chain/Procurement and Purchasing", "parameters": {"purchase_order_id": {"type": "int", "description": "The ID of the purchase order you want to cancel"}}, "required": ["purchase_order_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the purchase order cancellation was successful"}}}
{"api_name": "adjustInventory", "api_description": "Adjust the inventory level of a specific product", "field": "Supply Chain/Inventory Management", "parameters": {"product_id": {"type": "str", "description": "The unique identifier of the product for which you want to adjust the inventory"}, "quantity": {"type": "int", "description": "The adjusted quantity to be set for the inventory"}}, "required": ["product_id", "quantity"], "responses": {"success": {"type": "bool", "description": "Indicates whether the inventory adjustment was successful"}}}
{"api_name": "updateInventoryCount", "api_description": "Update the inventory count of a specific product in a warehouse", "field": "Supply Chain/Warehouse Operations", "parameters": {"warehouse_id": {"type": "int", "description": "The ID of the warehouse where the inventory count will be updated"}, "product_id": {"type": "str", "description": "The ID or code of the product for which the inventory count will be updated"}, "new_count": {"type": "int", "description": "The new inventory count for the product"}}, "required": ["warehouse_id", "product_id", "new_count"], "responses": {"success": {"type": "bool", "description": "Indicates whether the inventory count update was successful"}}}
{"api_name": "getSupplyChainAnalytics", "api_description": "Retrieve supply chain analytics data", "field": "Supply Chain/Supply Chain Analytics", "parameters": {"start_date": {"type": "str", "description": "The start date for retrieving analytics data (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date for retrieving analytics data (e.g., YYYY-MM-DD)"}, "product_category": {"type": "str", "description": "The specific product category for which analytics data is required (e.g., Electronics, Clothing, Food)"}, "location": {"type": "str", "description": "The specific location for which supply chain analytics data is required (e.g., Beijing, London, New York)"}}, "required": ["start_date", "end_date", "location"], "responses": {"sales": {"type": "float", "description": "The sales data for the specified product category and location"}, "inventory": {"type": "int", "description": "The inventory data for the specified product category and location"}, "average_lead_time": {"type": "float", "description": "The average lead time for the specified product category and location"}}}
{"api_name": "createProductionPlan", "api_description": "Create a production plan for a specified time period", "field": "Supply Chain/Production Planning and Scheduling", "parameters": {"start_date": {"type": "str", "description": "The start date of the production plan (e.g., '2022-01-01')"}, "end_date": {"type": "str", "description": "The end date of the production plan (e.g., '2022-01-31')"}, "product_id": {"type": "int", "description": "The ID of the product to be included in the production plan"}, "quantity": {"type": "int", "description": "The quantity of the product to be produced during the specified time period"}}, "required": ["start_date", "end_date", "product_id", "quantity"], "responses": {"plan_id": {"type": "str", "description": "The unique identifier for the created production plan"}}}
{"api_name": "getReturnReasons", "api_description": "Retrieve the reasons for product returns", "field": "Supply Chain/Reverse Logistics and Returns Management", "parameters": {}, "required": [], "responses": {"reasons": {"type": "str", "description": "The reasons for product returns"}}}
{"api_name": "getRiskThreshold", "api_description": "Retrieve the risk threshold for determining the acceptable level of risk in the supply chain", "field": "Supply Chain/Risk Management", "parameters": {}, "required": [], "responses": {"threshold": {"type": "float", "description": "The risk threshold for determining the acceptable level of risk"}}}
{"api_name": "getRiskAlerts", "api_description": "Retrieve risk alerts for a specific supply chain", "field": "Supply Chain/Risk Management", "parameters": {"supply_chain_id": {"type": "str", "description": "The unique identifier of the supply chain for which you want to get the risk alerts"}}, "required": ["supply_chain_id"], "responses": {"risk_alerts": {"type": "str", "description": "The risk alerts related to the specified supply chain"}}}
{"api_name": "getSupplyChainInfo", "api_description": "Retrieve information about the sustainability of a supply chain", "field": "Supply Chain/Supply Chain Sustainability", "parameters": {"product": {"type": "str", "description": "The product for which you want to get supply chain sustainability information (e.g., clothing, electronics, food)"}, "country": {"type": "str", "description": "The country from where the supply chain starts (e.g., China, Germany, Brazil)"}, "company": {"type": "str", "description": "The company involved in the supply chain (e.g., Nike, Apple, Unilever)"}}, "required": ["product"], "responses": {"sustainability_score": {"type": "float", "description": "The sustainability score of the supply chain for the specified product, country, and company"}, "rankings": {"type": "str", "description": "The rankings of the supply chain in terms of sustainability"}}}
{"api_name": "checkProductQuality", "api_description": "Check the quality of a product", "field": "Supply Chain/Quality Control and Assurance", "parameters": {"product_id": {"type": "str", "description": "The ID of the product to be checked"}, "batch_number": {"type": "str", "description": "The batch number or lot number of the product"}, "sample_size": {"type": "int", "description": "The size of the sample to be checked"}}, "required": ["product_id", "batch_number"], "responses": {"quality_status": {"type": "str", "description": "The status of the product quality"}, "defects": {"type": "int", "description": "The number of defects found in the sample"}}}
{"api_name": "approveSupplier", "api_description": "Approve a supplier based on quality criteria", "field": "Supply Chain/Quality Control and Assurance", "parameters": {"supplier_id": {"type": "str", "description": "The ID of the supplier to be approved"}, "quality_criteria": {"type": "str", "description": "The criteria for approving the supplier"}}, "required": ["supplier_id", "quality_criteria"], "responses": {"approval_status": {"type": "str", "description": "The status of supplier approval"}, "comments": {"type": "str", "description": "Additional comments or feedback"}}}
{"api_name": "optimizeSupplyChain", "api_description": "Optimize the supply chain to improve efficiency and reduce costs", "field": "Supply Chain/Supply Chain Optimization", "parameters": {"products": {"type": "str", "description": "The list of products involved in the supply chain optimization process (e.g., Product A, Product B, Product C)"}, "demand_forecasts": {"type": "str", "description": "The demand forecasts for the specified products (e.g., 100 units, 200 units, 300 units)"}, "inventory_levels": {"type": "str", "description": "The current inventory levels for each product (e.g., 50 units, 100 units, 150 units)"}}, "required": ["products", "demand_forecasts", "inventory_levels"], "responses": {"optimized_plan": {"type": "str", "description": "The optimized supply chain plan based on product demand forecasts and current inventory levels"}}}
{"api_name": "optimizeInventory", "api_description": "Optimize the inventory management by suggesting optimal stock levels based on demand forecasts and historical data", "field": "Supply Chain/Supply Chain Technology and Automation", "parameters": {"product_id": {"type": "str", "description": "The unique identifier for the product"}, "demand_forecast": {"type": "float", "description": "The forecasted demand for the product"}}, "required": ["product_id", "demand_forecast"], "responses": {"optimal_stock_level": {"type": "int", "description": "The suggested optimal stock level for the product"}}}
{"api_name": "calculateInventoryTurnover", "api_description": "Calculate the inventory turnover ratio for a specific product in the supply chain", "field": "Supply Chain/Supply Chain Finance and Cost Management", "parameters": {"product": {"type": "str", "description": "The product for which you want to calculate the inventory turnover ratio (e.g., electronics, clothing, food)"}, "average_inventory": {"type": "int", "description": "The average inventory level of the product during a specific time period"}, "cost_of_goods_sold": {"type": "float", "description": "The cost of goods sold for the product during the same time period"}}, "required": ["product", "average_inventory", "cost_of_goods_sold"], "responses": {"inventory_turnover_ratio": {"type": "float", "description": "The inventory turnover ratio for the specified product"}}}
{"api_name": "calculateSupplyChainEfficiency", "api_description": "Calculate supply chain efficiency", "field": "Supply Chain/Supply Chain Performance Measurement", "parameters": {"start_date": {"type": "str", "description": "The start date for the efficiency calculation (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date for the efficiency calculation (e.g., 2022-12-31)"}, "product_category": {"type": "str", "description": "The product category for which the efficiency is calculated (e.g., electronics, clothing, food)"}, "location": {"type": "str", "description": "The location for which the efficiency is calculated (e.g., warehouse, distribution center, retail store)"}}, "required": ["start_date", "end_date", "product_category"], "responses": {"efficiency_score": {"type": "float", "description": "The calculated supply chain efficiency score", "example": 0.85}}}
{"api_name": "addSupplier", "api_description": "Add a new supplier to the supply chain network", "field": "Supply Chain/Supply Chain Security and Compliance", "parameters": {"supplier_name": {"type": "str", "description": "The name of the supplier to be added"}, "address": {"type": "str", "description": "The address of the supplier"}, "contact_person": {"type": "str", "description": "The contact person for the supplier"}, "email": {"type": "str", "description": "The email address of the supplier"}}, "required": ["supplier_name", "address", "contact_person", "email"], "responses": {"success": {"type": "bool", "description": "Indicates if the addition of the supplier was successful"}, "message": {"type": "str", "description": "A message providing additional details about the result"}}}
{"api_name": "getSecurityCompliance", "api_description": "Retrieve supply chain security and compliance information", "field": "Supply Chain/Supply Chain Security and Compliance", "parameters": {"product_code": {"type": "str", "description": "The product code to check security and compliance for"}, "country_of_origin": {"type": "str", "description": "The country of origin of the product"}, "certification": {"type": "str", "description": "The required certification for the product"}}, "required": ["product_code"], "responses": {"security_status": {"type": "str", "description": "The security status of the product"}, "compliance_status": {"type": "str", "description": "The compliance status of the product"}}}
{"api_name": "requestRedelivery", "api_description": "Request redelivery for a failed or missed delivery", "field": "Supply Chain/Last Mile Delivery", "parameters": {"package_id": {"type": "str", "description": "The ID of the package"}, "preferred_delivery_date": {"type": "str", "description": "The preferred redelivery date for the package"}}, "required": ["package_id"], "responses": {"confirmation": {"type": "str", "description": "Confirmation message for redelivery request"}}}
{"api_name": "assessSupplyChainRisk", "api_description": "Assess the risk level of a given supply chain", "field": "Supply Chain/Supply Chain Risk Assessment", "parameters": {"supply_chain": {"type": "str", "description": "The supply chain to assess the risk (e.g., electronics, pharmaceuticals, food)"}, "country": {"type": "str", "description": "The country of the supply chain (e.g., China, United States, Germany)"}, "company_size": {"type": "str", "description": "The size of the company in the supply chain (e.g., small, medium, large)"}}, "required": ["supply_chain", "country"], "responses": {"risk_level": {"type": "str", "description": "The risk level of the given supply chain (e.g., low, medium, high)"}, "recommendations": {"type": "str", "description": "Recommendations to mitigate the identified risks"}}}
{"api_name": "interpretNonverbalCues", "api_description": "Interpret nonverbal cues in communication", "field": "Communication/Nonverbal Communication", "parameters": {"behavior": {"type": "str", "description": "The nonverbal behavior to interpret (e.g., facial expression, body language, gestures)"}, "context": {"type": "str", "description": "The context in which the nonverbal behavior is observed (e.g., meeting, interview, social gathering)"}}, "required": ["behavior", "context"], "responses": {"interpretation": {"type": "str", "description": "The interpretation or meaning of the observed nonverbal behavior"}}}
{"api_name": "interpretGestures", "api_description": "Interpret nonverbal gestures and expressions", "field": "Communication/Nonverbal Communication", "parameters": {"gestures": {"type": "str", "description": "The nonverbal gestures and expressions to interpret (e.g., hand movements, facial expressions, body language)"}, "context": {"type": "str", "description": "The context in which the gestures and expressions occur (e.g., meeting, interview, social gathering)"}}, "required": ["gestures"], "responses": {"interpretation": {"type": "str", "description": "The interpretation of the nonverbal gestures and expressions in the given context"}}}
{"api_name": "understandNonverbalCues", "api_description": "Retrieve interpretation of nonverbal cues", "field": "Communication/Nonverbal Communication", "parameters": {"cue": {"type": "str", "description": "The nonverbal cue to be interpreted (e.g., facial expressions, body language, gestures)"}}, "required": ["cue"], "responses": {"interpretation": {"type": "str", "description": "The interpretation of the nonverbal cue"}}}
{"api_name": "createDocument", "api_description": "Create a new document", "field": "Communication/Written Communication", "parameters": {"title": {"type": "str", "description": "The title of the document"}, "text": {"type": "str", "description": "The content of the document"}, "format": {"type": "str", "description": "The format of the document (e.g., PDF, Word)"}}, "required": ["title", "text"], "responses": {"document_id": {"type": "str", "description": "The unique identifier of the created document"}}}
{"api_name": "makePhoneCall", "api_description": "Make a phone call to a specified number", "field": "Communication/Interpersonal Communication", "parameters": {"number": {"type": "str", "description": "The phone number to call"}, "duration": {"type": "int", "description": "The duration of the phone call in minutes"}}, "required": ["number"], "responses": {"status": {"type": "str", "description": "The status of the phone call (e.g., connected, busy)"}}}
{"api_name": "interpret", "api_description": "Interpret a conversation from one language to another", "field": "Communication/Intercultural Communication", "parameters": {"conversation": {"type": "str", "description": "The conversation to be interpreted"}, "source_language": {"type": "str", "description": "The language of the source conversation"}, "target_language": {"type": "str", "description": "The language to which the conversation should be interpreted"}}, "required": ["conversation", "source_language", "target_language"], "responses": {"interpreted_conversation": {"type": "str", "description": "The interpreted conversation in the target language"}}}
{"api_name": "culturalEtiquette", "api_description": "Retrieve cultural etiquette information for a specific country", "field": "Communication/Intercultural Communication", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve cultural etiquette"}, "language": {"type": "str", "description": "The language in which you want the information", "default": "English"}}, "required": ["country"], "responses": {"etiquette_information": {"type": "str", "description": "The cultural etiquette information for the specified country"}}}
{"api_name": "sendFax", "api_description": "Send a fax to a recipient", "field": "Communication/Business Communication", "parameters": {"recipient": {"type": "str", "description": "The fax number of the recipient"}, "message": {"type": "str", "description": "The content of the fax"}}, "required": ["recipient", "message"], "responses": {"status": {"type": "str", "description": "The status of the fax sending process"}}}
{"api_name": "receiveMessage", "api_description": "Receive a digital message", "field": "Communication/Digital Communication", "parameters": {}, "required": [], "responses": {"message": {"type": "str", "description": "The content of the message received"}, "sender": {"type": "str", "description": "The sender of the message"}}}
{"api_name": "deleteMessage", "api_description": "Delete a digital message", "field": "Communication/Digital Communication", "parameters": {"message_id": {"type": "int", "description": "The ID of the message to be deleted"}}, "required": ["message_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the message was successfully deleted"}}}
{"api_name": "startNegotiation", "api_description": "Initiate a negotiation process", "field": "Communication/Negotiation", "parameters": {"participants": {"type": "str", "description": "The participants involved in the negotiation (e.g., Alice, Bob, Charlie)"}, "agenda": {"type": "str", "description": "The key topics to be discussed during the negotiation (e.g., price, timeline, scope)"}}, "required": ["participants"], "responses": {"negotiation_id": {"type": "str", "description": "The unique identifier for the negotiation process"}}}
{"api_name": "addMemberToTeam", "api_description": "Add a new member to the team", "field": "Communication/Team Communication", "parameters": {"name": {"type": "str", "description": "The name of the new team member"}, "email": {"type": "str", "description": "The email address of the new team member"}, "role": {"type": "str", "description": "The role of the new team member (e.g., developer, designer, manager)"}}, "required": ["name", "email", "role"], "responses": {"status": {"type": "str", "description": "The status of the member addition"}}}
{"api_name": "createChannel", "api_description": "Create a channel within a team for focused discussions", "field": "Communication/Team Communication", "parameters": {"team_id": {"type": "str", "description": "The ID of the team"}, "name": {"type": "str", "description": "The name of the channel"}}, "required": ["team_id", "name"], "responses": {"channel_id": {"type": "str", "description": "The ID of the created channel"}}}
{"api_name": "sendLeadershipMessage", "api_description": "Send a leadership message to a team", "field": "Communication/Leadership Communication", "parameters": {"team": {"type": "str", "description": "The team to which the message should be sent"}, "message": {"type": "str", "description": "The content of the leadership message"}}, "required": ["team", "message"], "responses": {"success": {"type": "bool", "description": "Indicates whether the message was successfully sent"}}}
{"api_name": "improveLeadershipCommunication", "api_description": "Provides tips and techniques to enhance leadership communication skills", "field": "Communication/Leadership Communication", "parameters": {"communication_style": {"type": "str", "description": "The preferred communication style to focus on (e.g., verbal, written, non-verbal)"}, "audience": {"type": "str", "description": "The target audience for improving leadership communication (e.g., team members, executives)"}, "challenges": {"type": "str", "description": "Specific communication challenges faced (e.g., conveying vision, providing feedback, managing conflict)"}}, "required": ["communication_style", "audience"], "responses": {"tips": {"type": "str", "description": "Key tips and techniques to improve leadership communication"}}}
{"api_name": "analyzeCommunicationSkills", "api_description": "Analyzes and assesses leadership communication skills", "field": "Communication/Leadership Communication", "parameters": {"communication_style": {"type": "str", "description": "The preferred communication style of the leader (e.g., direct, collaborative, persuasive)"}, "audience": {"type": "str", "description": "The intended audience for the communication (e.g., team members, stakeholders, clients)"}, "delivery_method": {"type": "str", "description": "The method of delivering the communication (e.g., face-to-face, presentations, written communication)"}, "message_content": {"type": "str", "description": "The content of the leader's message"}}, "required": ["communication_style", "message_content"], "responses": {"communication_effectiveness": {"type": "float", "description": "The effectiveness score of the leader's communication"}, "areas_for_improvement": {"type": "str", "description": "Specific areas where the leader can improve their communication"}}}
{"api_name": "improveCommunicationSkills", "api_description": "Provides guidance to improve effective communication skills", "field": "Communication/Effective Communication", "parameters": {"language": {"type": "str", "description": "The language in which the user wants to improve their communication skills (e.g., English, Spanish, French)"}, "important_information": {"type": "str", "description": "Key information that needs to be effectively communicated (e.g., business presentations, public speaking, interpersonal relationships)"}, "practice_duration": {"type": "int", "description": "The duration (in minutes) for which the user wants to practice their communication skills"}}, "required": ["language", "important_information"], "responses": {"tips": {"type": "str", "description": "Tips and techniques to enhance communication skills"}, "improvement_percentage": {"type": "float", "description": "An estimate of the percentage improvement achieved in communication skills"}}}
{"api_name": "sendCrisisMessage", "api_description": "Send a message during a crisis situation", "field": "Communication/Crisis Communication", "parameters": {"message": {"type": "str", "description": "The message to be sent during the crisis"}, "recipients": {"type": "str", "description": "The recipients of the message (e.g., email addresses, phone numbers)"}}, "required": ["message", "recipients"], "responses": {"status": {"type": "str", "description": "The status of the message delivery (e.g., sent, failed)"}}}
{"api_name": "postText", "api_description": "Post a text message on social media", "field": "Communication/Social Media Communication", "parameters": {"platform": {"type": "str", "description": "The social media platform where the text message will be posted (e.g., Facebook, Twitter, Instagram)"}, "message": {"type": "str", "description": "The content of the text message that will be posted"}}, "required": ["platform", "message"], "responses": {"status": {"type": "str", "description": "The status of the text message posting"}}}
{"api_name": "likePost", "api_description": "Like a post on social media", "field": "Communication/Social Media Communication", "parameters": {"platform": {"type": "str", "description": "The social media platform where the post is located (e.g., Facebook, Twitter, Instagram)"}, "post_id": {"type": "str", "description": "The ID of the post to be liked"}}, "required": ["platform", "post_id"], "responses": {"status": {"type": "str", "description": "The status of the post liking"}}}
{"api_name": "sendCorporateMessage", "api_description": "Send a message to the entire corporate communication department", "field": "Communication/Corporate Communication", "parameters": {"message_body": {"type": "str", "description": "The content of the message to be sent"}}, "required": ["message_body"], "responses": {"success": {"type": "bool", "description": "A boolean indicating if the message was successfully sent"}}}
{"api_name": "getSpeechEvaluation", "api_description": "Retrieve speech evaluation results", "field": "Communication/Speech and Language Pathology", "parameters": {"patient_id": {"type": "str", "description": "ID of the patient for evaluation"}, "evaluation_type": {"type": "str", "description": "Type of evaluation (e.g., articulation, fluency, voice)"}, "date": {"type": "str", "description": "Date of evaluation in the format YYYY-MM-DD"}}, "required": ["patient_id", "evaluation_type"], "responses": {"result": {"type": "str", "description": "Evaluation result of the specified patient for the given evaluation type"}, "date": {"type": "str", "description": "Date of evaluation"}}}
{"api_name": "synthesizeSpeech", "api_description": "Generate synthetic speech from text", "field": "Communication/Speech and Language Pathology", "parameters": {"text": {"type": "str", "description": "The input text to be synthesized into speech"}}, "required": ["text"], "responses": {"audio_file": {"type": "str", "description": "The generated audio file containing the synthesized speech"}}}
{"api_name": "makeVideoCall", "api_description": "Make a video call to a specific recipient", "field": "Communication/Multimedia Communication", "parameters": {"recipient": {"type": "str", "description": "The recipient of the video call (e.g., email address, phone number)"}}, "required": ["recipient"], "responses": {"status": {"type": "str", "description": "The status of the video call (e.g., connected, busy, unavailable)"}, "call_duration": {"type": "int", "description": "The duration of the video call in seconds"}}}
{"api_name": "sendMultimediaMessage", "api_description": "Send a multimedia message", "field": "Communication/Multimedia Communication", "parameters": {"message": {"type": "str", "description": "The content of the multimedia message"}, "recipient": {"type": "str", "description": "The recipient of the message"}}, "required": ["message", "recipient"], "responses": {"success": {"type": "bool", "description": "Whether the message was sent successfully"}}}
{"api_name": "videoCall", "api_description": "Initiate a video call with another user", "field": "Communication/Visual Communication", "parameters": {"recipient": {"type": "str", "description": "The username or ID of the recipient"}, "video_quality": {"type": "str", "description": "The desired video quality (e.g., HD, SD)"}, "mute_audio": {"type": "bool", "description": "Set to true to mute audio during the call"}, "mute_video": {"type": "bool", "description": "Set to true to mute video during the call"}}, "required": ["recipient"], "responses": {"call_id": {"type": "str", "description": "The ID of the initiated video call"}}}
{"api_name": "getFaultOrientation", "api_description": "Retrieve the orientation of a geological fault", "field": "Geology/Structural Geology", "parameters": {"fault_name": {"type": "str", "description": "The name of the fault"}, "location": {"type": "str", "description": "The location where the fault is located"}, "depth": {"type": "float", "description": "The depth at which the fault is found (in meters)"}}, "required": ["fault_name", "location"], "responses": {"orientation": {"type": "str", "description": "The orientation of the fault (e.g., dip direction, strike direction)"}, "angle": {"type": "float", "description": "The angle of the fault's dip or strike (in degrees)"}}}
{"api_name": "getStratigraphy", "api_description": "Retrieve stratigraphy information", "field": "Geology/Stratigraphy", "parameters": {"location": {"type": "str", "description": "The location where you want to retrieve stratigraphy information (e.g., mountain range, river basin, city)"}, "era": {"type": "str", "description": "Specify an era for the stratigraphy (e.g., Paleozoic, Mesozoic, Cenozoic)"}}, "required": ["location"], "responses": {"stratigraphic_units": {"type": "str", "description": "The stratigraphic units present at the specified location"}, "era": {"type": "str", "description": "The era of the stratigraphy represented at the location"}}}
{"api_name": "getStratigraphyByLocation", "api_description": "Retrieve stratigraphy information based on location", "field": "Geology/Stratigraphy", "parameters": {"location": {"type": "str", "description": "The geographical location for which you want to get the stratigraphy information (e.g., Grand Canyon, Himalayas, Great Barrier Reef)"}}, "required": ["location"], "responses": {"stratigraphy": {"type": "str", "description": "The stratigraphy information of the specified location"}}}
{"api_name": "getSedimentComposition", "api_description": "Retrieve the composition of sediments in a specific location", "field": "Geology/Sedimentology", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve sediment composition (e.g., beach, riverbed, mountain)"}, "depth": {"type": "int", "description": "The depth at which you want to analyze the sediment composition (e.g., 0, 10, 100)"}}, "required": ["location"], "responses": {"sediment_composition": {"type": "str", "description": "The composition of sediments at the specified location and depth"}}}
{"api_name": "findMineralOccurrences", "api_description": "Find occurrences of a specific mineral", "field": "Geology/Mineralogy", "parameters": {"mineral_name": {"type": "str", "description": "The name of the mineral for which to find occurrences (e.g., gold, diamond, copper)"}}, "required": ["mineral_name"], "responses": {"occurrences": {"type": "str", "description": "Occurrences of the specified mineral"}}}
{"api_name": "analyzeMineralComposition", "api_description": "Analyze the mineral composition of a rock", "field": "Geology/Mineralogy", "parameters": {"rock": {"type": "str", "description": "The rock sample to be analyzed"}, "location": {"type": "str", "description": "The location from where the rock was collected"}}, "required": ["rock"], "responses": {"mineral_composition": {"type": "str", "description": "The composition of minerals in the rock"}, "location": {"type": "str", "description": "The location from where the rock was collected"}}}
{"api_name": "getVolcanoLocation", "api_description": "Retrieve the location of a volcano", "field": "Geology/Volcanology", "parameters": {"volcano_name": {"type": "str", "description": "The name of the volcano (e.g., Mount St. Helens, Mount Vesuvius)"}}, "required": ["volcano_name"], "responses": {"latitude": {"type": "float", "description": "The latitude coordinate of the volcano"}, "longitude": {"type": "float", "description": "The longitude coordinate of the volcano"}}}
{"api_name": "getVolcanoInfo", "api_description": "Retrieve information about a volcano", "field": "Geology/Volcanology", "parameters": {"volcano_name": {"type": "str", "description": "The name of the volcano for which you want to get information"}}, "required": ["volcano_name"], "responses": {"location": {"type": "str", "description": "The location of the volcano"}, "elevation": {"type": "int", "description": "The elevation of the volcano in meters above sea level"}, "last_eruption": {"type": "str", "description": "The date of the last eruption (if available)"}}}
{"api_name": "getVolcanoHazards", "api_description": "Retrieve information about potential hazards associated with a specific volcano", "field": "Geology/Volcanology", "parameters": {"volcano_name": {"type": "str", "description": "The name of the volcano you want hazard information for (e.g., Mount Etna, Mount Rainier, Popocatépetl)"}}, "required": ["volcano_name"], "responses": {"hazard_types": {"type": "str", "description": "The types of hazards associated with the volcano (e.g., pyroclastic flows, lahars, ash fall)"}, "recommended_actions": {"type": "str", "description": "Recommended actions to take in case of volcanic activity (e.g., evacuation routes, mask usage)"}, "risk_level": {"type": "str", "description": "The risk level associated with the volcano (e.g., low, moderate, high)"}}}
{"api_name": "getGravity", "api_description": "Retrieve gravity information at a specific location", "field": "Geology/Geophysics", "parameters": {"location": {"type": "str", "description": "The location for which you want to get gravity information (e.g., Beijing, London, New York)"}}, "required": ["location"], "responses": {"gravity": {"type": "float", "description": "The gravity value at the specified location"}}}
{"api_name": "getGeophysicsData", "api_description": "Retrieve geophysical data for a specific location", "field": "Geology/Geophysics", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve geophysical data (e.g., coordinates, address)"}, "type": {"type": "str", "description": "The type of geophysical data to retrieve (e.g., seismic, gravity, magnetic)"}}, "required": ["location"], "responses": {"data": {"type": "str", "description": "The geophysical data for the specified location and type"}}}
{"api_name": "getGroundwaterLevel", "api_description": "Retrieve the groundwater level information at a specific location", "field": "Geology/Hydrogeology", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the groundwater level (e.g., city, town)"}, "depth": {"type": "str", "description": "The desired depth range for groundwater level (e.g., shallow, deep)"}, "time_interval": {"type": "str", "description": "Specify a time interval for groundwater level (e.g., daily, monthly)"}}, "required": ["location"], "responses": {"groundwater_level": {"type": "float", "description": "The groundwater level at the specified location"}, "depth": {"type": "str", "description": "The depth range of the groundwater level"}}}
{"api_name": "getRockProperties", "api_description": "Retrieve rock properties for engineering geology", "field": "Geology/Engineering Geology", "parameters": {"rock_type": {"type": "str", "description": "The type of rock (e.g., granite, limestone, sandstone)"}, "location": {"type": "str", "description": "The location of the site for which you want to retrieve rock properties"}}, "required": ["rock_type", "location"], "responses": {"porosity": {"type": "float", "description": "The porosity of the rock at the specified location"}, "permeability": {"type": "float", "description": "The permeability of the rock at the specified location"}}}
{"api_name": "getEnvironmentalHazards", "api_description": "Retrieve environmental hazards information for a given location", "field": "Geology/Environmental Geology", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve environmental hazards information (e.g., city, town, or specific coordinates)"}, "type": {"type": "str", "description": "Specify the type of environmental hazard you want to retrieve information for (e.g., air pollution, water contamination, soil erosion)"}}, "required": ["location"], "responses": {"hazard_level": {"type": "str", "description": "The level of environmental hazard at the specified location"}, "recommendations": {"type": "str", "description": "Recommended actions to mitigate the identified environmental hazard"}}}
{"api_name": "getGlacierSize", "api_description": "Retrieve the size of a glacier", "field": "Geology/Glaciology", "parameters": {"glacier_name": {"type": "str", "description": "The name of the glacier (e.g., Vatnajokull, Perito Moreno)"}, "region": {"type": "str", "description": "The region where the glacier is located (e.g., Alaska, Patagonia)"}}, "required": ["glacier_name"], "responses": {"size": {"type": "str", "description": "The size of the glacier in square kilometers"}}}
{"api_name": "getGlacierMovement", "api_description": "Retrieve information about glacier movement", "field": "Geology/Glaciology", "parameters": {"glacier_name": {"type": "str", "description": "The name of the glacier (e.g., Vatnajokull, Perito Moreno)"}, "region": {"type": "str", "description": "The region where the glacier is located (e.g., Alaska, Patagonia)"}}, "required": ["glacier_name"], "responses": {"velocity": {"type": "float", "description": "The velocity of glacier movement in meters per year"}, "direction": {"type": "str", "description": "The direction in which the glacier is moving (e.g., north, east)"}, "retreat": {"type": "bool", "description": "Indicates whether the glacier is retreating or advancing"}}}
{"api_name": "getGlacierData", "api_description": "Retrieve data about glaciers", "field": "Geology/Glaciology", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve glacier data (e.g., Antarctica, Himalayas)"}, "time_period": {"type": "str", "description": "Specify a time period for glacier data (e.g., past 10 years, last century)"}, "measurements": {"type": "str", "description": "Specify the type of measurements to retrieve (e.g., glacier size, melt rate)"}}, "required": ["location"], "responses": {"data": {"type": "str", "description": "The retrieved data about glaciers"}}}
{"api_name": "getSatelliteImage", "api_description": "Retrieve satellite image of a specified location", "field": "Geology/Remote Sensing", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve the satellite image (e.g., coordinates, address)"}, "sensor_type": {"type": "str", "description": "The type of satellite sensor to use (e.g., optical, radar)"}, "image_resolution": {"type": "int", "description": "The desired resolution of the satellite image in meters"}}, "required": ["location"], "responses": {"image_url": {"type": "str", "description": "The URL of the retrieved satellite image"}}}
{"api_name": "getGeoarchaeologicalSite", "api_description": "Retrieve information about a geoarchaeological site", "field": "Geology/Geoarchaeology", "parameters": {"site_name": {"type": "str", "description": "The name of the geoarchaeological site (e.g., Pompeii, Giza, Machu Picchu)"}, "location": {"type": "str", "description": "The location of the geoarchaeological site (e.g., longitude and latitude, address)"}, "time_period": {"type": "str", "description": "The time period in which the geoarchaeological site existed (e.g., Neolithic, Iron Age, Roman Empire)"}}, "required": ["site_name"], "responses": {"site_description": {"type": "str", "description": "A description of the geoarchaeological site"}, "location_coordinates": {"type": "str", "description": "The coordinates of the geoarchaeological site"}, "time_period_existed": {"type": "str", "description": "The time period in which the geoarchaeological site existed"}}}
{"api_name": "getAge", "api_description": "Retrieve the age of a geological sample", "field": "Geology/Geochronology", "parameters": {"sample_location": {"type": "str", "description": "The location from which the geological sample is taken (e.g., rock quarry, mountain range)"}}, "required": ["sample_location"], "responses": {"age": {"type": "float", "description": "The age of the geological sample in years"}}}
{"api_name": "getGeostatistics", "api_description": "Retrieve geostatistical information for a given location", "field": "Geology/Geostatistics", "parameters": {"location": {"type": "str", "description": "The location for which you want to get geostatistical information (e.g., city, country)"}, "rock_type": {"type": "str", "description": "The type of rock for which you want geostatistics (e.g., sedimentary, igneous, metamorphic)"}}, "required": ["location"], "responses": {"lat_long": {"type": "str", "description": "The latitude and longitude coordinates of the specified location"}, "rock_properties": {"type": "str", "description": "The properties of the specified rock type at the given location"}}}
{"api_name": "getRockFormation", "api_description": "Retrieve rock formation information for a given location", "field": "Geology/Geotechnical Engineering", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the rock formation information (e.g., Beijing, London, New York)"}}, "required": ["location"], "responses": {"rock_formation": {"type": "str", "description": "The geological rock formation at the specified location"}}}
{"api_name": "getReservoirProperties", "api_description": "Retrieve the properties of a petroleum reservoir", "field": "Geology/Petroleum Geology", "parameters": {"reservoir_id": {"type": "str", "description": "The unique ID of the reservoir you want to get the properties for (e.g., R1234)"}, "location": {"type": "str", "description": "The location of the reservoir (e.g., Gulf of Mexico, North Sea)"}, "depth": {"type": "float", "description": "The depth of the reservoir in meters"}}, "required": ["reservoir_id"], "responses": {"permeability": {"type": "float", "description": "The permeability of the reservoir in Darcies"}, "porosity": {"type": "float", "description": "The porosity of the reservoir as a fraction"}, "saturation": {"type": "float", "description": "The saturation of the reservoir as a fraction"}}}
{"api_name": "getOilFieldProduction", "api_description": "Retrieve production data for an oil field", "field": "Geology/Petroleum Geology", "parameters": {"field_name": {"type": "str", "description": "The name of the oil field for which you want to get production data (e.g., Ghawar, Prudhoe Bay)"}}, "required": ["field_name"], "responses": {"oil_production": {"type": "float", "description": "The annual production of oil from the field in barrels per day"}}}
{"api_name": "getReserves", "api_description": "Retrieve petroleum reserves information", "field": "Geology/Petroleum Geology", "parameters": {"location": {"type": "str", "description": "The location of the petroleum field (e.g., Middle East, North Sea, Gulf of Mexico)"}, "depth": {"type": "float", "description": "The depth at which the reserves are estimated to be present (e.g., 5000 meters, 10000 meters)"}, "unit": {"type": "str", "description": "The unit for reserves estimation (e.g., barrels, cubic meters)"}}, "required": ["location"], "responses": {"reserves": {"type": "float", "description": "The estimated reserves in the specified location and depth"}, "unit": {"type": "str", "description": "The unit of measurement for the reserves"}}}
{"api_name": "getGeothermalHeatFlow", "api_description": "Retrieve the heat flow data at a specified location", "field": "Geology/Geothermal Energy", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve the heat flow data (e.g., California, Iceland, New Zealand)"}}, "required": ["location"], "responses": {"heat_flow": {"type": "float", "description": "The heat flow at the specified location in milliwatts per square meter"}}}
{"api_name": "getGeothermalGradient", "api_description": "Retrieve the geothermal gradient at a specified location", "field": "Geology/Geothermal Energy", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve the geothermal gradient (e.g., Nevada, Italy, Japan)"}}, "required": ["location"], "responses": {"geothermal_gradient": {"type": "float", "description": "The geothermal gradient at the specified location in degrees Celsius per kilometer"}}}
{"api_name": "getBalletMoves", "api_description": "Retrieve ballet moves and techniques", "field": "Dance/Ballet", "parameters": {"name": {"type": "str", "description": "The name of the ballet move or technique (e.g., plié, pirouette, grand jeté)"}, "difficulty_level": {"type": "str", "description": "The difficulty level of the ballet move or technique (e.g., beginner, intermediate, advanced)"}}, "required": ["name"], "responses": {"description": {"type": "str", "description": "The description and steps of the ballet move or technique"}, "difficulty_level": {"type": "str", "description": "The difficulty level of the ballet move or technique"}}}
{"api_name": "getContemporaryDanceMoves", "api_description": "Retrieve a list of contemporary dance moves", "field": "Dance/Contemporary dance", "parameters": {"level": {"type": "str", "description": "The level of difficulty for the dance moves (e.g., beginner, intermediate, advanced)"}, "style": {"type": "str", "description": "The specific style of contemporary dance (e.g., lyrical, improvisational)"}, "count": {"type": "int", "description": "Number of dance moves to retrieve"}}, "required": [], "responses": {"dance_moves": {"type": "str", "description": "A list of contemporary dance moves"}}}
{"api_name": "getContemporaryDanceInstructors", "api_description": "Retrieve a list of contemporary dance instructors", "field": "Dance/Contemporary dance", "parameters": {"location": {"type": "str", "description": "The location of the dance instructor (e.g., city, country)"}, "specialty": {"type": "str", "description": "The specialty or focus area of the instructor (e.g., choreography, technique)"}, "count": {"type": "int", "description": "Number of instructors to retrieve"}}, "required": [], "responses": {"instructors": {"type": "str", "description": "A list of contemporary dance instructors"}}}
{"api_name": "getTapDanceSteps", "api_description": "Retrieve tap dance steps", "field": "Dance/Tap dance", "parameters": {"difficulty": {"type": "str", "description": "Specify the difficulty level of tap dance steps (e.g., beginner, intermediate, advanced)"}, "genre": {"type": "str", "description": "Specify the genre of tap dance (e.g., Broadway, rhythm, classical)"}, "rhythm": {"type": "str", "description": "Specify the rhythm pattern for tap dance steps (e.g., shuffle, flap, ball change)"}}, "required": ["difficulty"], "responses": {"steps": {"type": "str", "description": "The tap dance steps at the specified difficulty level"}, "genre": {"type": "str", "description": "The genre of tap dance"}, "rhythm": {"type": "str", "description": "The rhythm pattern used in tap dance steps"}}}
{"api_name": "learnTapDance", "api_description": "Provide instructions for learning tap dance", "field": "Dance/Tap dance", "parameters": {"experience_level": {"type": "str", "description": "The experience level of the dancer (e.g., beginner, intermediate, advanced)"}, "age": {"type": "int", "description": "The age of the dancer"}, "duration": {"type": "int", "description": "The desired duration of the dance lesson in minutes"}}, "required": ["experience_level"], "responses": {"instructions": {"type": "str", "description": "Step-by-step instructions for tap dance"}}}
{"api_name": "countDanceSteps", "api_description": "Count the number of steps for a specific ballroom dance style", "field": "Dance/Ballroom dance", "parameters": {"dance_style": {"type": "str", "description": "The ballroom dance style for which you want to count steps (e.g., Jive, Paso Doble, Viennese Waltz)"}}, "required": ["dance_style"], "responses": {"step_count": {"type": "int", "description": "The number of steps for the specified dance style"}}}
{"api_name": "getAfricanDanceInfo", "api_description": "Retrieve information about African dance", "field": "Dance/African dance", "parameters": {}, "required": [], "responses": {"info": {"type": "str", "description": "Information about African dance"}}}
{"api_name": "getFolkDance", "api_description": "Retrieve information about a specific folk dance", "field": "Dance/Folk dance", "parameters": {"dance_name": {"type": "str", "description": "The name of the folk dance (e.g., Flamenco, Haka, Salsa)"}, "country": {"type": "str", "description": "The country of origin for the folk dance (e.g., Spain, New Zealand, Cuba)"}, "costume": {"type": "str", "description": "The traditional costume worn during the folk dance (e.g., colorful dress, traditional robe)"}, "music": {"type": "str", "description": "The type of music accompanying the folk dance (e.g., drums, violin, guitar)"}, "duration": {"type": "float", "description": "The duration of the folk dance performance in minutes"}}, "required": ["dance_name"], "responses": {"country": {"type": "str", "description": "The country of origin for the folk dance"}, "costume": {"type": "str", "description": "The traditional costume worn during the folk dance"}, "music": {"type": "str", "description": "The type of music accompanying the folk dance"}, "duration": {"type": "float", "description": "The duration of the folk dance performance"}}}
{"api_name": "getBellyDanceTechniques", "api_description": "Retrieve belly dance techniques information", "field": "Dance/Belly dance", "parameters": {}, "required": [], "responses": {"techniques": {"type": "str", "description": "A list of belly dance techniques"}}}
{"api_name": "getTraditionalDanceInfo", "api_description": "Retrieve information about traditional dances", "field": "Dance/Traditional dance", "parameters": {"dance_style": {"type": "str", "description": "Style of traditional dance (e.g., ballet, salsa, tango)"}, "country": {"type": "str", "description": "Country from where the traditional dance originates (e.g., India, Spain, Brazil)"}, "language": {"type": "str", "description": "Language used during the traditional dance performance (e.g., English, Spanish, Hindi)"}}, "required": ["dance_style"], "responses": {"description": {"type": "str", "description": "Description of the traditional dance"}, "origin": {"type": "str", "description": "Country from where the traditional dance originates"}, "music_style": {"type": "str", "description": "Style of music used in the traditional dance performance"}, "costumes": {"type": "str", "description": "Traditional costumes worn during the dance performance"}}}
{"api_name": "getDanceTeacher", "api_description": "Retrieve information about dance teachers", "field": "Dance/Dance education", "parameters": {"location": {"type": "str", "description": "The location where you want to find dance teachers (e.g., New York, London)"}, "dance_style": {"type": "str", "description": "The specific dance style you are interested in (e.g., ballet, hip hop, salsa)"}, "level": {"type": "str", "description": "The desired level of dance education (e.g., beginner, intermediate, advanced)"}}, "required": ["location"], "responses": {"teachers": {"type": "str", "description": "A list of dance teachers available in the specified location and dance style"}}}
{"api_name": "getCritique", "api_description": "Get a critique for a specific dance performance", "field": "Dance/Dance criticism", "parameters": {"performance_id": {"type": "str", "description": "The ID of the dance performance you want to get a critique for"}, "reviewer": {"type": "str", "description": "The name of the dance critic who will provide the critique"}, "dancer": {"type": "str", "description": "The name of the dancer who performed in the dance piece"}, "comments": {"type": "str", "description": "Additional comments for the dance critic to consider", "example": "The choreography was innovative and captivating"}}, "required": ["performance_id", "reviewer"], "responses": {"critique_text": {"type": "str", "description": "The critique for the specified dance performance"}}}
{"api_name": "getDanceEthnology", "api_description": "Retrieve dance ethnology information", "field": "Dance/Dance ethnology", "parameters": {"dance_style": {"type": "str", "description": "The style of dance you want to learn about (e.g., ballet, hip-hop, salsa)"}, "region": {"type": "str", "description": "The region where the dance style originated (e.g., Africa, Asia, Europe)"}}, "required": ["dance_style"], "responses": {"history": {"type": "str", "description": "The history and background information of the specified dance style"}, "origin": {"type": "str", "description": "The region where the specified dance style originated"}}}
{"api_name": "getDanceAnthropologyInfo", "api_description": "Retrieve information about the anthropology of dance", "field": "Dance/Dance anthropology", "parameters": {"dance_style": {"type": "str", "description": "The style of dance about which you want to get information (e.g., ballet, salsa, hip-hop)"}, "region": {"type": "str", "description": "The region or culture from which you want to get dance anthropology information (e.g., Africa, Asia, Latin America)"}, "time_period": {"type": "str", "description": "The time period or era for the dance anthropology (e.g., ancient, contemporary, medieval)"}}, "required": ["dance_style"], "responses": {"anthropology_info": {"type": "str", "description": "The information about the dance anthropology for the specified style, region, and time period"}}}
{"api_name": "getDanceAnatomy", "api_description": "Retrieve information about the anatomy of dance", "field": "Dance/Dance anthropology", "parameters": {"dance_genre": {"type": "str", "description": "The genre of dance to get anatomy information for (e.g., ballet, hip-hop, contemporary)"}, "body_part": {"type": "str", "description": "The specific body part to get anatomy information for (e.g., feet, arms, spine)"}, "level": {"type": "str", "description": "The level of anatomical detail required (e.g., basic, intermediate, advanced)"}}, "required": ["dance_genre", "body_part"], "responses": {"anatomy": {"type": "str", "description": "The anatomical information for the specified dance genre and body part"}}}
{"api_name": "getDancePhotography", "api_description": "Retrieve dance photography information", "field": "Dance/Dance photography", "parameters": {"dancer_name": {"type": "str", "description": "The name of the dancer whose photography you want to retrieve"}, "location": {"type": "str", "description": "The location where the dance photography was taken (e.g., studio, stage, outdoor)"}, "style": {"type": "str", "description": "The style of dance (e.g., ballet, contemporary, hip-hop)"}, "year": {"type": "int", "description": "The year when the dance photography was taken"}}, "required": ["dancer_name"], "responses": {"photography_url": {"type": "str", "description": "The URL of the dance photography"}, "location": {"type": "str", "description": "The location where the dance photography was taken"}, "style": {"type": "str", "description": "The style of dance in the photography"}}}
{"api_name": "getPopularDanceMoves", "api_description": "Retrieve popular dance moves in popular culture", "field": "Dance/Dance in popular culture", "parameters": {"genre": {"type": "str", "description": "The dance genre for which you want to retrieve popular dance moves (e.g., hip hop, contemporary, salsa)"}, "difficulty_level": {"type": "str", "description": "Specify the difficulty level of the dance moves (e.g., beginner, intermediate, advanced)"}}, "required": ["genre"], "responses": {"dance_moves": {"type": "str", "description": "List of popular dance moves in the specified genre"}}}
{"api_name": "getDanceNotationSystem", "api_description": "Retrieve information about a specific dance notation system", "field": "Dance/Dance notation systems", "parameters": {"notation_system": {"type": "str", "description": "The dance notation system you want to retrieve information about (e.g., Labanotation, Benesh Movement Notation)"}}, "required": ["notation_system"], "responses": {"system_description": {"type": "str", "description": "A description of the specified dance notation system"}, "examples": {"type": "str", "description": "Examples of dances or movements notated using the specified system"}}}
{"api_name": "calculateEnergyExpenditure", "api_description": "Calculate the energy expenditure during a dance activity", "field": "Dance/Dance kinesiology", "parameters": {"activity": {"type": "str", "description": "The type of dance activity (e.g., ballet, hip-hop, salsa)"}, "duration": {"type": "int", "description": "The duration of the dance activity in minutes"}, "weight": {"type": "float", "description": "The weight of the person performing the dance activity in kilograms"}}, "required": ["activity", "duration", "weight"], "responses": {"energy_expenditure": {"type": "float", "description": "The energy expenditure in calories during the dance activity"}}}
{"api_name": "exploreDanceTherapy", "api_description": "Explore various dance therapy techniques", "field": "Dance/Dance psychology", "parameters": {"technique_type": {"type": "str", "description": "The type of dance therapy technique to explore (e.g., movement therapy, expressive arts therapy)"}}, "required": ["technique_type"], "responses": {"description": {"type": "str", "description": "A description of the selected dance therapy technique"}, "benefits": {"type": "str", "description": "The potential benefits of the selected dance therapy technique"}}}
{"api_name": "findDanceMoves", "api_description": "Retrieve dance moves related to dance and sexuality", "field": "Dance/Dance and sexuality", "parameters": {"style": {"type": "str", "description": "The style of dance (eg. contemporary, hip hop, ballet)"}, "body_part": {"type": "str", "description": "The body part used in the dance move (eg. hips, shoulders, legs)"}, "level": {"type": "str", "description": "The level of difficulty of the dance move (eg. beginner, intermediate, advanced)"}}, "required": ["style"], "responses": {"dance_moves": {"type": "str", "description": "The dance moves related to dance and sexuality"}}}
{"api_name": "getDanceAndRace", "api_description": "Retrieve information about dance styles and their cultural origins.", "field": "Dance/Dance and race", "parameters": {"dance_style": {"type": "str", "description": "The specific dance style you want to learn about (e.g., Hip Hop, Salsa, Ballet)"}, "country": {"type": "str", "description": "The country or culture from where the dance style originated (e.g., USA, Cuba, France)"}, "level": {"type": "str", "description": "The level of dance expertise (e.g., beginner, intermediate, advanced)"}}, "required": ["dance_style"], "responses": {"origin": {"type": "str", "description": "The cultural origin of the specified dance style"}, "difficulty": {"type": "str", "description": "The difficulty level of the dance style"}, "steps": {"type": "str", "description": "The basic steps and movements of the dance style"}}}
{"api_name": "getDanceIdentity", "api_description": "Retrieve information about the connection between dance and identity", "field": "Dance/Dance and identity", "parameters": {"dance_style": {"type": "str", "description": "The dance style to analyze for its influence on identity (e.g., ballet, hip-hop, tango)"}, "culture": {"type": "str", "description": "The cultural background to consider for understanding the relationship between dance and identity (e.g., Western, African, Asian)"}, "gender": {"type": "str", "description": "The gender perspective to explore in relation to dance and identity (e.g., male, female, non-binary)"}}, "required": ["dance_style"], "responses": {"connection": {"type": "str", "description": "The connection between dance style, culture, gender, and identity"}}}
{"api_name": "getDanceWorkshop", "api_description": "Retrieve information about a dance workshop for community engagement", "field": "Dance/Dance and community engagement", "parameters": {"location": {"type": "str", "description": "The location where the dance workshop will be held (e.g., community center, school)"}, "date": {"type": "str", "description": "The date of the dance workshop (e.g., YYYY-MM-DD)"}, "age_group": {"type": "str", "description": "The target age group for the dance workshop (e.g., children, teenagers, adults)"}, "dance_style": {"type": "str", "description": "The style of dance to be taught in the workshop (e.g., hip hop, ballet, salsa)"}}, "required": ["location", "date"], "responses": {"workshop_details": {"type": "str", "description": "Details about the dance workshop (e.g., description, duration, instructor)"}, "participants": {"type": "int", "description": "The number of participants registered for the workshop"}}}
{"api_name": "getDanceActivismInfo", "api_description": "Retrieve information about dance and activism", "field": "Dance/Dance and activism", "parameters": {}, "required": [], "responses": {"info": {"type": "str", "description": "Information about the relationship between dance and activism"}}}
{"api_name": "getBiblicalText", "api_description": "Retrieve biblical text", "field": "Religious Studies/Biblical Studies", "parameters": {"book": {"type": "str", "description": "The name of the book (e.g., Genesis, Exodus, Psalms)"}, "chapter": {"type": "int", "description": "The chapter number"}, "verse": {"type": "int", "description": "The verse number"}}, "required": ["book", "chapter", "verse"], "responses": {"text": {"type": "str", "description": "The biblical text for the specified book, chapter, and verse"}}}
{"api_name": "getBiblicalPassage", "api_description": "Retrieve a specific passage from the Bible", "field": "Religious Studies/Biblical Studies", "parameters": {"book": {"type": "str", "description": "The name of the book from the Bible (e.g., Genesis, Matthew, Psalms)"}, "chapter": {"type": "int", "description": "The chapter number from the selected book"}, "verse_start": {"type": "int", "description": "The starting verse number from the selected chapter"}, "verse_end": {"type": "int", "description": "The ending verse number from the selected chapter"}}, "required": ["book", "chapter"], "responses": {"passage": {"type": "str", "description": "The selected passage from the Bible"}}}
{"api_name": "getBibleVerse", "api_description": "Retrieve a specific Bible verse", "field": "Religious Studies/Biblical Studies", "parameters": {"book": {"type": "str", "description": "The book of the Bible (e.g., Genesis, Psalms, Matthew)"}, "chapter": {"type": "int", "description": "The chapter number of the specified book"}, "verse": {"type": "int", "description": "The verse number within the specified chapter"}}, "required": ["book", "chapter", "verse"], "responses": {"verse_text": {"type": "str", "description": "The actual text of the specified Bible verse"}}}
{"api_name": "getPhilosophyOfReligion", "api_description": "Retrieve information about the philosophy of religion", "field": "Religious Studies/Philosophy of Religion", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about the philosophy of religion"}}}
{"api_name": "getEthicalPrinciples", "api_description": "Retrieve ethical principles of a particular religion", "field": "Religious Studies/Religious Ethics", "parameters": {"religion_name": {"type": "str", "description": "The name of the religion for which you want to get the ethical principles (e.g., Christianity, Islam, Buddhism)"}, "language": {"type": "str", "description": "The desired language for the ethical principles (e.g., English, Spanish, French)"}}, "required": ["religion_name"], "responses": {"principles": {"type": "str", "description": "The ethical principles of the specified religion"}}}
{"api_name": "getReligiousPsychology", "api_description": "Retrieve information related to the psychology of religion", "field": "Religious Studies/Religious Psychology", "parameters": {"religion": {"type": "str", "description": "The name of the religion to analyze (e.g., Christianity, Islam, Buddhism)"}, "concept": {"type": "str", "description": "The psychological concept to explore within the religious context (e.g., belief, morality, spirituality)"}, "population": {"type": "str", "description": "The target population for the analysis (e.g., general population, religious leaders, specific religious groups)"}, "time_period": {"type": "str", "description": "The time period to consider for the analysis (e.g., historical, current)"}, "methodology": {"type": "str", "description": "The research methodology utilized for data collection (e.g., surveys, interviews, experiments)"}}, "required": ["religion", "concept"], "responses": {"findings": {"type": "str", "description": "Key findings or insights related to the provided parameters"}, "references": {"type": "str", "description": "List of relevant academic references or sources"}}}
{"api_name": "getReligiousDemographics", "api_description": "Retrieve religious demographic information of a given location", "field": "Religious Studies/Sociology of Religion", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the religious demographics (e.g., Tokyo, Paris, Los Angeles)"}, "year": {"type": "int", "description": "The year for which you want to retrieve the religious demographics (e.g., 2022, 2025, 2030)"}}, "required": ["location"], "responses": {"religious_group": {"type": "str", "description": "The name of the religious group", "examples": ["Christianity", "Islam", "Buddhism"]}, "percentage": {"type": "float", "description": "The percentage of the population belonging to the religious group", "examples": [30.5, 15.2, 5.8]}}}
{"api_name": "getReligiousAffiliation", "api_description": "Retrieve religious affiliation information", "field": "Religious Studies/Sociology of Religion", "parameters": {"name": {"type": "str", "description": "The name of an individual for whom you want to get the religious affiliation (e.g., John Smith, Jane Doe)"}, "location": {"type": "str", "description": "The location where the individual is residing (e.g., New York, London)"}}, "required": ["name"], "responses": {"religious_affiliation": {"type": "str", "description": "The religious affiliation of the specified individual"}}}
{"api_name": "getReligiousTexts", "api_description": "Retrieve religious texts and their interpretations", "field": "Religious Studies/Religious Texts and Interpretation", "parameters": {"religion": {"type": "str", "description": "The religion from which you want to retrieve the texts (e.g., Christianity, Islam, Buddhism)"}, "text_type": {"type": "str", "description": "Specify the type of text (e.g., Bible, Quran, Tripitaka)"}, "language": {"type": "str", "description": "Select the language for the texts (e.g., English, Arabic, Sanskrit)"}}, "required": ["religion", "text_type"], "responses": {"texts": {"type": "str", "description": "The religious texts of the specified religion and type"}, "interpretations": {"type": "str", "description": "Interpretations or commentaries on the religious texts"}}}
{"api_name": "getScripture", "api_description": "Retrieve the text of a religious scripture", "field": "Religious Studies/Religious Texts and Interpretation", "parameters": {"religion": {"type": "str", "description": "The name of the religion (e.g., Christianity, Islam, Buddhism)"}, "scripture_name": {"type": "str", "description": "The name of the specific scripture (e.g., Bible, Quran, Tripitaka)"}}, "required": ["religion", "scripture_name"], "responses": {"scripture_text": {"type": "str", "description": "The text of the specified religious scripture"}}}
{"api_name": "getReligionAndPoliticsNews", "api_description": "Retrieve news related to religion and politics", "field": "Religious Studies/Religion and Politics", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve news (e.g., USA, UK, India)"}, "filter": {"type": "str", "description": "Filter news based on a specific religion (e.g., Christianity, Islam, Hinduism)"}}, "required": ["country"], "responses": {"news": {"type": "str", "description": "News articles related to religion and politics"}}}
{"api_name": "getReligionAndIdentity", "api_description": "Retrieve information about the relationship between religion and identity", "field": "Religious Studies/Religion and Identity", "parameters": {"religion": {"type": "str", "description": "The religion you want to study (e.g., Christianity, Islam, Buddhism)"}, "identity_aspect": {"type": "str", "description": "The aspect of identity you are interested in (e.g., ethnicity, gender, nationality)"}}, "required": ["religion", "identity_aspect"], "responses": {"relationship": {"type": "str", "description": "The relationship between the specified religion and the chosen identity aspect"}}}
{"api_name": "getReligionGlobalizationStats", "api_description": "Retrieve statistics on the relationship between religion and globalization", "field": "Religious Studies/Religion and Globalization", "parameters": {"country": {"type": "str", "description": "The name of a country to retrieve statistics for"}, "time_period": {"type": "str", "description": "Specify a time period for the statistics (e.g., 2000-2020)"}}, "required": ["country"], "responses": {"number_of_religions": {"type": "int", "description": "The number of religions present in the specified country during the given time period"}, "interfaith_dialogue": {"type": "str", "description": "Information on the level of interfaith dialogue and cooperation in the specified country during the given time period"}}}
{"api_name": "getReligionAndHumanRightsInfo", "api_description": "Retrieve information about the relationship between religion and human rights", "field": "Religious Studies/Religion and Human Rights", "parameters": {"religion": {"type": "str", "description": "The religion for which you want to get information (e.g., Christianity, Islam, Buddhism)"}, "country": {"type": "str", "description": "The country for which you want to get information about religion and human rights (e.g., United States, India, Egypt)"}}, "required": ["religion", "country"], "responses": {"religious_freedom": {"type": "str", "description": "The level of religious freedom in the specified country for the given religion"}, "human_rights_violations": {"type": "str", "description": "Any reported human rights violations related to the specified religion in the specified country"}}}
{"api_name": "getNewReligiousMovements", "api_description": "Retrieve information about new religious movements", "field": "Religious Studies/New Religious Movements", "parameters": {"country": {"type": "str", "description": "The country where the new religious movement is located (e.g., USA, Japan, Brazil)"}, "year_founded": {"type": "int", "description": "The year the new religious movement was founded (e.g., 1990, 2005, 2012)"}, "leader": {"type": "str", "description": "The name of the leader of the new religious movement (e.g., John Smith, Maria Garcia)"}}, "required": [], "responses": {"movement_name": {"type": "str", "description": "The name of the new religious movement"}, "location": {"type": "str", "description": "The location where the new religious movement is based"}, "doctrine": {"type": "str", "description": "The doctrine and beliefs of the new religious movement"}}}
{"api_name": "getComparativeMysticism", "api_description": "Retrieve information on comparative mysticism", "field": "Religious Studies/Comparative Mysticism", "parameters": {"tradition": {"type": "str", "description": "The mystical tradition to study (e.g., Sufism, Zen Buddhism, Kabbalah)"}, "language": {"type": "str", "description": "The primary language of the mystical texts (e.g., English, Arabic, Hebrew)"}, "time_period": {"type": "str", "description": "The specific time period of interest for the study (e.g., Middle Ages, Renaissance)"}}, "required": ["tradition"], "responses": {"texts": {"type": "str", "description": "The mystical texts associated with the chosen tradition"}, "scholars": {"type": "str", "description": "Prominent scholars in the field of comparative mysticism"}, "common_themes": {"type": "str", "description": "Common themes explored in comparative mysticism"}}}
{"api_name": "getSymbolMeaning", "api_description": "Retrieve the meaning of a religious symbol", "field": "Religious Studies/Religious Symbols and Symbolism", "parameters": {"symbol": {"type": "str", "description": "The religious symbol for which you want to get the meaning (e.g., cross, crescent, om)"}, "religion": {"type": "str", "description": "The specific religion to which the symbol belongs (e.g., Christianity, Islam, Hinduism)"}}, "required": ["symbol"], "responses": {"meaning": {"type": "str", "description": "The meaning of the specified religious symbol"}}}
{"api_name": "getSymbolOrigin", "api_description": "Retrieve information about the origin of a religious symbol", "field": "Religious Studies/Religious Symbols and Symbolism", "parameters": {"symbol": {"type": "str", "description": "The religious symbol for which you want to get the origin information (e.g., yin yang, mandala, menorah)"}, "religion": {"type": "str", "description": "The specific religion to which the symbol belongs (e.g., Taoism, Buddhism, Judaism)"}}, "required": ["symbol"], "responses": {"origin": {"type": "str", "description": "Information about the origin and history of the specified religious symbol"}}}
{"api_name": "getSymbolRepresentation", "api_description": "Retrieve information about the representation and significance of a religious symbol", "field": "Religious Studies/Religious Symbols and Symbolism", "parameters": {"symbol": {"type": "str", "description": "The religious symbol for which you want to get representation information (e.g., lotus, pentagram, ankh)"}, "religion": {"type": "str", "description": "The specific religion to which the symbol belongs (e.g., Hinduism, Wicca, Ancient Egypt)"}}, "required": ["symbol"], "responses": {"representation": {"type": "str", "description": "Information about the representation and symbolic significance of the specified religious symbol"}}}
{"api_name": "getPhonemes", "api_description": "Retrieve the phonemes of a given word", "field": "Linguistics/Phonology", "parameters": {"word": {"type": "str", "description": "The word for which you want to get the phonemes (e.g., apple, elephant, banana)"}}, "required": ["word"], "responses": {"phonemes": {"type": "str", "description": "The phonemes of the specified word"}}}
{"api_name": "analyzeWord", "api_description": "Analyze the morphology of a word", "field": "Linguistics/Morphology", "parameters": {"word": {"type": "str", "description": "The word to be analyzed"}}, "required": ["word"], "responses": {"root": {"type": "str", "description": "The root of the word"}, "prefix": {"type": "str", "description": "The prefix of the word"}, "suffix": {"type": "str", "description": "The suffix of the word"}}}
{"api_name": "analyzeSyntax", "api_description": "Analyze the syntactic structure of a sentence", "field": "Linguistics/Syntax", "parameters": {"sentence": {"type": "str", "description": "The sentence to be analyzed"}}, "required": ["sentence"], "responses": {"syntax_tree": {"type": "str", "description": "The syntactic tree representation of the sentence"}}}
{"api_name": "getSyntaxTree", "api_description": "Retrieve the syntax tree of a given sentence", "field": "Linguistics/Syntax", "parameters": {"sentence": {"type": "str", "description": "The sentence for which you want to get the syntax tree"}}, "required": ["sentence"], "responses": {"syntax_tree": {"type": "str", "description": "The syntax tree of the given sentence"}}}
{"api_name": "getDependencies", "api_description": "Retrieve the dependency relations of a given sentence", "field": "Linguistics/Syntax", "parameters": {"sentence": {"type": "str", "description": "The sentence for which you want to get the dependency relations"}}, "required": ["sentence"], "responses": {"dependencies": {"type": "str", "description": "The dependency relations of the given sentence"}}}
{"api_name": "analyzeSpeechAct", "api_description": "Analyze the speech act in a given text", "field": "Linguistics/Pragmatics", "parameters": {"text": {"type": "str", "description": "The text to be analyzed for speech act"}, "language": {"type": "str", "description": "The language of the text for accurate analysis (e.g., English, Spanish, French)"}}, "required": ["text"], "responses": {"speech_act": {"type": "str", "description": "The detected speech act in the given text"}, "confidence": {"type": "float", "description": "The confidence score of the speech act detection"}}}
{"api_name": "getSpeechAct", "api_description": "Retrieve speech act information", "field": "Linguistics/Pragmatics", "parameters": {"sentence": {"type": "str", "description": "The sentence for which you want to analyze the speech act"}}, "required": ["sentence"], "responses": {"act_type": {"type": "str", "description": "The type of speech act performed in the sentence (e.g., assertion, request, question)"}}}
{"api_name": "getWordRecognitionTime", "api_description": "Retrieve the average time taken for word recognition", "field": "Linguistics/Psycholinguistics", "parameters": {"word": {"type": "str", "description": "The word for which you want to retrieve recognition time (e.g., cat, dog, house)"}, "language": {"type": "str", "description": "The language in which the word is spoken (e.g., English, Spanish, French)"}, "participant_gender": {"type": "str", "description": "Specify the gender of the participant (e.g., male, female)"}, "age_range": {"type": "str", "description": "Specify the age range of the participant (e.g., 18-25, 40-50, 60-70)"}}, "required": ["word", "language"], "responses": {"recognition_time": {"type": "float", "description": "The average time taken for word recognition in milliseconds"}}}
{"api_name": "getLanguageFamily", "api_description": "Retrieve the language family of a given language", "field": "Linguistics/Historical Linguistics", "parameters": {"language": {"type": "str", "description": "The language for which you want to retrieve the language family (e.g., English, Spanish, Mandarin)"}, "time_period": {"type": "str", "description": "Specify a time period to check language family evolution (e.g., ancient, medieval, modern)"}, "region": {"type": "str", "description": "The geographical region where the language is spoken (e.g., Europe, Asia, Americas)"}}, "required": ["language"], "responses": {"language_family": {"type": "str", "description": "The language family of the specified language"}}}
{"api_name": "getLanguageSoundChanges", "api_description": "Retrieve sound changes in the phonetic structures of different languages", "field": "Linguistics/Historical Linguistics", "parameters": {"source_language": {"type": "str", "description": "The source language from which you want to retrieve sound changes (e.g., Latin, Proto-Germanic, Proto-Indo-European)"}, "target_language": {"type": "str", "description": "The target language into which you want to retrieve sound changes (e.g., French, English, German)"}}, "required": ["source_language", "target_language"], "responses": {"sound_changes": {"type": "str", "description": "The sound changes that occurred in the transition from source language to target language"}}}
{"api_name": "getSentenceLength", "api_description": "Calculate the average length of sentences in a text corpus", "field": "Linguistics/Computational Linguistics", "parameters": {"text": {"type": "str", "description": "The text corpus for which you want to calculate sentence length"}}, "required": ["text"], "responses": {"average_length": {"type": "float", "description": "The average length of sentences in the text corpus"}}}
{"api_name": "lemmatizer", "api_description": "Retrieve the base form (lemma) of a given word", "field": "Linguistics/Computational Linguistics", "parameters": {"word": {"type": "str", "description": "The word for which you want to retrieve the lemma"}}, "required": ["word"], "responses": {"lemma": {"type": "str", "description": "The base form (lemma) of the given word"}}}
{"api_name": "getCorpus", "api_description": "Retrieve corpus data for linguistic analysis", "field": "Linguistics/Corpus Linguistics", "parameters": {"language": {"type": "str", "description": "The language of the corpus (e.g., English, Spanish, French)"}, "corpus_type": {"type": "str", "description": "Specify the type of corpus (e.g., written, spoken)"}, "query": {"type": "str", "description": "Search query to filter the corpus data"}}, "required": ["language"], "responses": {"data": {"type": "str", "description": "The corpus data that matches the specified criteria"}}}
{"api_name": "analyzeDiscourse", "api_description": "Analyze the structure and meaning of discourse in a text or conversation", "field": "Linguistics/Discourse Analysis", "parameters": {"text": {"type": "str", "description": "The input text or conversation for discourse analysis"}, "language": {"type": "str", "description": "The language of the text or conversation (e.g., English, Spanish, French)"}, "level": {"type": "str", "description": "The level of analysis (e.g., sentence, paragraph, whole conversation)"}}, "required": ["text", "language"], "responses": {"structure": {"type": "str", "description": "The analyzed structure of the discourse"}, "meaning": {"type": "str", "description": "The interpreted meaning of the discourse"}}}
{"api_name": "getCoherenceScore", "api_description": "Calculate the coherence score of a given text", "field": "Linguistics/Discourse Analysis", "parameters": {"text": {"type": "str", "description": "The text for which you want to calculate the coherence score"}}, "required": ["text"], "responses": {"coherence_score": {"type": "float", "description": "The coherence score of the input text"}}}
{"api_name": "getLanguageAcquisitionStage", "api_description": "Retrieve the stage of language acquisition for a given individual", "field": "Linguistics/Language Acquisition", "parameters": {"age": {"type": "int", "description": "The age of the individual in years (e.g., 5, 12, 20)"}}, "required": ["age"], "responses": {"stage": {"type": "str", "description": "The current stage of language acquisition for the individual (e.g., pre-verbal, single-word utterances, fluent speech)"}}}
{"api_name": "getLanguageDevelopmentMilestones", "api_description": "Retrieve the language development milestones for a given age range", "field": "Linguistics/Language Acquisition", "parameters": {"age_range": {"type": "str", "description": "The age range for which you want to get the language development milestones (e.g., 0-6 months, 1-2 years, 4-6 years)"}}, "required": ["age_range"], "responses": {"milestones": {"type": "str", "description": "The language development milestones for the given age range"}}}
{"api_name": "getLanguageLearningResources", "api_description": "Retrieve recommended language learning resources for a specific language", "field": "Linguistics/Language Acquisition", "parameters": {"language": {"type": "str", "description": "The language for which you want to get the recommended learning resources (e.g., English, Spanish, Mandarin)"}, "learning_style": {"type": "str", "description": "The preferred learning style of the individual (e.g., visual, auditory, kinesthetic)"}}, "required": ["language"], "responses": {"resources": {"type": "str", "description": "Recommended language learning resources for the specified language"}}}
{"api_name": "getVocabularySize", "api_description": "Retrieve the vocabulary size of an individual", "field": "Linguistics/Language Acquisition", "parameters": {"name": {"type": "str", "description": "The name of the individual whose vocabulary size is to be retrieved"}, "target_language": {"type": "str", "description": "The target language for which the vocabulary size is to be retrieved"}}, "required": ["name", "target_language"], "responses": {"vocabulary_size": {"type": "int", "description": "The vocabulary size of the individual in the target language"}}}
{"api_name": "getRevitalizationStatus", "api_description": "Retrieve the current status of language revitalization efforts", "field": "Linguistics/Language Revitalization", "parameters": {"language": {"type": "str", "description": "The specific language for which you want to retrieve the revitalization status (e.g., Cherokee, Maori, Welsh)"}}, "required": ["language"], "responses": {"status": {"type": "str", "description": "The current status of language revitalization (e.g., thriving, endangered, extinct)"}, "efforts": {"type": "str", "description": "The ongoing efforts for language revitalization"}}}
{"api_name": "getWordSimilarity", "api_description": "Retrieve the similarity score between two words", "field": "Linguistics/Cognitive Linguistics", "parameters": {"word1": {"type": "str", "description": "The first word"}, "word2": {"type": "str", "description": "The second word"}}, "required": ["word1", "word2"], "responses": {"similarity_score": {"type": "float", "description": "The similarity score between the two words"}}}
{"api_name": "getCognitiveLinguistics", "api_description": "Retrieve cognitive linguistic information", "field": "Linguistics/Cognitive Linguistics", "parameters": {"language": {"type": "str", "description": "The language for which you want to get cognitive linguistic information (e.g., English, Spanish, Mandarin)"}, "concept": {"type": "str", "description": "The cognitive concept you are interested in (e.g., metaphor, prototype, schema)"}}, "required": ["language", "concept"], "responses": {"information": {"type": "str", "description": "The cognitive linguistic information about the specified language and concept"}}}
{"api_name": "getLanguageProcessingMethods", "api_description": "Retrieve the methods used in cognitive linguistics for language processing", "field": "Linguistics/Cognitive Linguistics", "parameters": {}, "required": [], "responses": {"methods": {"type": "str", "description": "The methods used in cognitive linguistics for language processing"}}}
{"api_name": "getPrototypeTheoryExplanation", "api_description": "Retrieve an explanation of prototype theory in cognitive linguistics", "field": "Linguistics/Cognitive Linguistics", "parameters": {}, "required": [], "responses": {"explanation": {"type": "str", "description": "The explanation of prototype theory in cognitive linguistics"}}}
{"api_name": "getOrthography", "api_description": "Retrieve orthography information", "field": "Linguistics/Orthography", "parameters": {"language": {"type": "str", "description": "The language for which you want to get the orthography (e.g., English, French, Mandarin)"}, "word": {"type": "str", "description": "The word for which you want to get the orthographic representation"}}, "required": ["language", "word"], "responses": {"orthography": {"type": "str", "description": "The orthographic representation of the word in the specified language"}}}
{"api_name": "checkSpelling", "api_description": "Check the spelling of a word", "field": "Linguistics/Orthography", "parameters": {"word": {"type": "str", "description": "The word to be checked for spelling (e.g., apple, banana, cherry)"}, "language": {"type": "str", "description": "The language of the word (e.g., English, French, Spanish)"}}, "required": ["word"], "responses": {"is_spelled_correctly": {"type": "bool", "description": "Indicates whether the word is spelled correctly"}}}
{"api_name": "getLanguageOrigin", "api_description": "Retrieve the origin or homeland of a given language", "field": "Linguistics/Palaeolinguistics", "parameters": {"language": {"type": "str", "description": "The language for which you want to get the origin (e.g., Latin, Sanskrit, Proto-Germanic)"}}, "required": ["language"], "responses": {"origin": {"type": "str", "description": "The origin or homeland of the specified language"}}}
{"api_name": "getPhoneticSymbols", "api_description": "Retrieve the phonetic symbols for a given word", "field": "Linguistics/Phonetics and Phonology", "parameters": {"word": {"type": "str", "description": "The word for which you want to get the phonetic symbols (e.g., banana, elephant, apple)"}}, "required": ["word"], "responses": {"phonetic_symbols": {"type": "str", "description": "The phonetic symbols representing the pronunciation of the word"}, "pronunciation": {"type": "str", "description": "The way the word is pronounced in normal speech"}}}
{"api_name": "getPhoneticDescription", "api_description": "Retrieve the phonetic description for a given sound", "field": "Linguistics/Phonetics and Phonology", "parameters": {"sound": {"type": "str", "description": "The sound for which you want to get the phonetic description (e.g., /p/, /ʃ/, /ɪ/)"}}, "required": ["sound"], "responses": {"description": {"type": "str", "description": "A detailed description of the phonetic features of the sound"}, "example_words": {"type": "str", "description": "Example words that contain the sound"}}}
{"api_name": "getTextLength", "api_description": "Retrieve the length of a given text", "field": "Linguistics/Text Linguistics", "parameters": {"text": {"type": "str", "description": "The text for which you want to retrieve the length"}}, "required": ["text"], "responses": {"length": {"type": "int", "description": "The length of the given text"}}}
{"api_name": "countWords", "api_description": "Count the number of words in a given text", "field": "Linguistics/Text Linguistics", "parameters": {"text": {"type": "str", "description": "The text for which you want to count the words"}}, "required": ["text"], "responses": {"word_count": {"type": "int", "description": "The number of words in the given text"}}}
{"api_name": "removeStopwords", "api_description": "Remove stopwords from a given text", "field": "Linguistics/Text Linguistics", "parameters": {"text": {"type": "str", "description": "The text from which you want to remove stopwords"}}, "required": ["text"], "responses": {"processed_text": {"type": "str", "description": "The text with stopwords removed"}}}
{"api_name": "getTextLinguistics", "api_description": "Retrieve linguistic information about a given text", "field": "Linguistics/Text Linguistics", "parameters": {"text": {"type": "str", "description": "The text for which you want to retrieve linguistic information"}}, "required": ["text"], "responses": {"word_count": {"type": "int", "description": "The total number of words in the text"}, "sentence_count": {"type": "int", "description": "The total number of sentences in the text"}, "average_word_length": {"type": "float", "description": "The average length of words in the text"}, "unique_words": {"type": "int", "description": "The number of unique words in the text"}}}
{"api_name": "getTypology", "api_description": "Retrieve typological information about languages", "field": "Linguistics/Typology", "parameters": {"language": {"type": "str", "description": "The language for which you want to get typological information (e.g., English, French, Mandarin)"}, "feature": {"type": "str", "description": "Specify a linguistic feature for typological analysis (e.g., word order, phonological features, grammatical categories)"}, "region": {"type": "str", "description": "Specify a region to narrow down the analysis (e.g., Europe, Asia, Africa)"}}, "required": ["language"], "responses": {"typology": {"type": "str", "description": "The typological information about the specified language and linguistic feature"}}}
{"api_name": "getPersonalNameMeaning", "api_description": "Retrieve the meaning and origin of a personal name", "field": "Linguistics/Onomastics", "parameters": {"name": {"type": "str", "description": "The personal name for which you want to get the meaning"}, "gender": {"type": "str", "description": "The gender associated with the name (e.g., male, female)"}, "origin": {"type": "str", "description": "The origin or cultural context of the name (e.g., English, French)"}}, "required": ["name"], "responses": {"meaning": {"type": "str", "description": "The meaning associated with the provided personal name"}, "origin": {"type": "str", "description": "The origin or cultural context of the provided personal name"}}}
{"api_name": "getNameMeaning", "api_description": "Retrieve the meaning of a given name", "field": "Linguistics/Onomastics", "parameters": {"name": {"type": "str", "description": "The name for which you want to get the meaning (e.g., John, Emily, Mohammed)"}}, "required": ["name"], "responses": {"meaning": {"type": "str", "description": "The meaning of the given name"}}}
{"api_name": "getLanguageProficiency", "api_description": "Retrieve language proficiency information", "field": "Linguistics/Applied Linguistics", "parameters": {"language": {"type": "str", "description": "The language for which you want to get the proficiency (e.g., English, Spanish, French)"}, "level": {"type": "str", "description": "The desired level of proficiency (e.g., Beginner, Intermediate, Advanced)"}}, "required": ["language"], "responses": {"proficiency": {"type": "str", "description": "The proficiency level in the specified language"}}}
{"api_name": "getLanguageTranslation", "api_description": "Translate a given text to another language", "field": "Linguistics/Applied Linguistics", "parameters": {"text": {"type": "str", "description": "The text to be translated"}, "source_language": {"type": "str", "description": "The source language of the text (e.g., English, Spanish, French)"}, "target_language": {"type": "str", "description": "The target language for translation (e.g., English, Spanish, French)"}}, "required": ["text", "source_language", "target_language"], "responses": {"translation": {"type": "str", "description": "The translated text in the target language"}}}
{"api_name": "getLanguageTestResults", "api_description": "Retrieve language test results for a given student", "field": "Linguistics/Language Testing", "parameters": {"student_id": {"type": "int", "description": "The ID of the student whose language test results you want to retrieve"}, "test_name": {"type": "str", "description": "The name of the language test (e.g., TOEFL, IELTS)"}}, "required": ["student_id"], "responses": {"test_results": {"type": "float", "description": "The language test results of the specified student"}, "test_date": {"type": "str", "description": "The date when the language test was taken"}}}
{"api_name": "compareLanguageTestScores", "api_description": "Compare the language test scores of two people", "field": "Linguistics/Language Testing", "parameters": {"name1": {"type": "str", "description": "The name of the first person who took the language test"}, "name2": {"type": "str", "description": "The name of the second person who took the language test"}, "test_type": {"type": "str", "description": "The type of language test taken (e.g., TOEFL, IELTS, Cambridge Proficiency)"}}, "required": ["name1", "name2", "test_type"], "responses": {"score_difference": {"type": "float", "description": "The difference in language test scores between the two people"}}}
{"api_name": "searchLegalTerms", "api_description": "Search for legal terms and their definitions", "field": "Linguistics/Legal Linguistics", "parameters": {"term": {"type": "str", "description": "The legal term you want to search for"}}, "required": ["term"], "responses": {"definition": {"type": "str", "description": "The definition of the specified legal term"}}}
{"api_name": "getWordLength", "api_description": "Retrieve the length of a word", "field": "Linguistics/Mathematical Linguistics", "parameters": {"word": {"type": "str", "description": "The word for which you want to get the length"}}, "required": ["word"], "responses": {"length": {"type": "int", "description": "The length of the specified word"}}}
{"api_name": "countConsonants", "api_description": "Count the number of consonants in a word", "field": "Linguistics/Mathematical Linguistics", "parameters": {"word": {"type": "str", "description": "The word for which you want to count the consonants"}}, "required": ["word"], "responses": {"count": {"type": "int", "description": "The number of consonants in the specified word"}}}
{"api_name": "countVowels", "api_description": "Count the number of vowels in a word", "field": "Linguistics/Mathematical Linguistics", "parameters": {"word": {"type": "str", "description": "The word for which you want to count the vowels"}}, "required": ["word"], "responses": {"count": {"type": "int", "description": "The number of vowels in the specified word"}}}
{"api_name": "getReadingTime", "api_description": "Estimate the reading time of a given text", "field": "Linguistics/Psycholinguistic Research", "parameters": {"text": {"type": "str", "description": "The text for which you want to estimate reading time"}, "speed": {"type": "float", "description": "The reading speed (in words per minute) at which the text should be estimated"}}, "required": ["text", "speed"], "responses": {"time": {"type": "float", "description": "The estimated reading time of the text (in minutes)"}}}
{"api_name": "getBilingualismPercentage", "api_description": "Retrieve the percentage of bilingual speakers in a society", "field": "Linguistics/Societal Bilingualism", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the bilingualism percentage (e.g., USA, France, China)"}, "language": {"type": "str", "description": "The specific language for which you want to get the bilingualism percentage (e.g., English, French, Mandarin)"}}, "required": ["country"], "responses": {"bilingualism_percentage": {"type": "float", "description": "The percentage of bilingual speakers in the specified country"}}}
{"api_name": "getSocietalBilingualism", "api_description": "Retrieve information about societal bilingualism", "field": "Linguistics/Societal Bilingualism", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get information about societal bilingualism (e.g., Canada, Belgium, Switzerland)"}, "official_languages": {"type": "str", "description": "The official languages of the country (e.g., English, French, Dutch)"}, "language_policy": {"type": "str", "description": "The language policy followed by the country (e.g., official bilingualism, exclusive language usage)"}}, "required": ["country"], "responses": {"percentage_bilingual": {"type": "float", "description": "The percentage of the population that is bilingual in the country"}, "language_impact": {"type": "str", "description": "The impact of societal bilingualism on the country", "values": ["positive", "negative", "neutral"]}}}
{"api_name": "getBilingualPopulation", "api_description": "Retrieve the population of bilingual individuals in a society", "field": "Linguistics/Societal Bilingualism", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get the bilingual population"}}, "required": ["country"], "responses": {"population": {"type": "int", "description": "The number of bilingual individuals in the specified country"}}}
{"api_name": "getSpeechPerceptionData", "api_description": "Retrieve speech perception data", "field": "Linguistics/Speech Perception", "parameters": {"speaker_gender": {"type": "str", "description": "The gender of the speaker from whom you want to retrieve speech perception data (e.g., male, female)"}, "listener_age": {"type": "int", "description": "The age of the listener for whom you want to retrieve speech perception data (e.g., 18, 25, 40)"}, "language": {"type": "str", "description": "The language for which you want to retrieve speech perception data (e.g., English, Spanish, Japanese)"}}, "required": ["language"], "responses": {"perception_score": {"type": "float", "description": "The speech perception score for the specified language and listener"}, "speaker_gender": {"type": "str", "description": "The gender of the speaker from whom the speech perception data is retrieved"}}}
{"api_name": "getPhonology", "api_description": "Retrieve phonological information of a language", "field": "Linguistics/Theoretical Linguistics", "parameters": {"language": {"type": "str", "description": "The language for which you want to get the phonology (e.g., English, Spanish, Mandarin)"}, "phonological_process": {"type": "str", "description": "Specify a phonological process to study (e.g., assimilation, deletion, metathesis)"}}, "required": ["language"], "responses": {"phonemes": {"type": "str", "description": "The set of phonemes in the specified language"}, "syllable_structure": {"type": "str", "description": "The syllable structure of the specified language"}}}
{"api_name": "getForestFireRisk", "api_description": "Retrieve the risk of forest fires in a specific forest", "field": "Forestry/Forest management", "parameters": {"forest_name": {"type": "str", "description": "The name of the forest for which you want to get the forest fire risk (e.g., Redwood National Park, Borneo Rainforest)"}}, "required": ["forest_name"], "responses": {"fire_risk": {"type": "str", "description": "The risk level of forest fires in the specified forest (e.g., low, moderate, high)"}}}
{"api_name": "getGeneticVariability", "api_description": "Retrieve the genetic variability information of a forest species", "field": "Forestry/Forest genetics", "parameters": {"species": {"type": "str", "description": "The name of the forest species for which you want to get the genetic variability information (e.g., Pine, Oak, Cedar)"}, "region": {"type": "str", "description": "The geographic region where the forest species is located (e.g., North America, Europe, Asia)"}}, "required": ["species"], "responses": {"genetic_variability_index": {"type": "float", "description": "The genetic variability index of the specified forest species"}, "average_genetic_variation": {"type": "float", "description": "The average genetic variation within the specified forest species"}}}
{"api_name": "getEvapotranspiration", "api_description": "Retrieve the evapotranspiration rate in a forest", "field": "Forestry/Forest hydrology", "parameters": {"location": {"type": "str", "description": "The location of the forest (e.g., Amazon rainforest, Boreal forest)"}, "time_interval": {"type": "str", "description": "Specify a time interval to calculate evapotranspiration (e.g., daily, monthly)"}, "vegetation_type": {"type": "str", "description": "The type of vegetation in the forest (e.g., conifers, broadleaf)"}, "unit": {"type": "str", "description": "The desired unit for evapotranspiration rate (e.g., mm/day, inches/month)"}}, "required": ["location", "vegetation_type"], "responses": {"evapotranspiration": {"type": "float", "description": "The evapotranspiration rate at the specified location and vegetation type"}, "unit": {"type": "str", "description": "The unit of evapotranspiration rate in which the measurement is provided"}}}
{"api_name": "getForestRunoff", "api_description": "Retrieve the runoff information from a forest", "field": "Forestry/Forest hydrology", "parameters": {"location": {"type": "str", "description": "The location of the forest (e.g., Amazon rainforest, Boreal forest)"}, "time_period": {"type": "str", "description": "Specify a time period to calculate runoff (e.g., daily, annual)"}, "watershed_area": {"type": "float", "description": "The area of the watershed in the forest (e.g., 1000 hectares, 10 square miles)"}, "unit": {"type": "str", "description": "The desired unit for runoff measurement (e.g., cubic meters, acre-feet)"}}, "required": ["location", "watershed_area"], "responses": {"runoff": {"type": "float", "description": "The runoff amount from the specified location and watershed area"}, "unit": {"type": "str", "description": "The unit of runoff in which the measurement is provided"}}}
{"api_name": "getFireRisk", "api_description": "Retrieve the current fire risk level in a specific forest", "field": "Forestry/Forest fire management", "parameters": {"location": {"type": "str", "description": "The location of the forest for which you want to get the fire risk level (e.g., California, Australia, Amazon)"}, "time_frame": {"type": "str", "description": "Specify the time frame for the fire risk level (e.g., current, next 24 hours, next 7 days)"}}, "required": ["location"], "responses": {"risk_level": {"type": "str", "description": "The current fire risk level in the specified forest (e.g., low, moderate, high, extreme)"}}}
{"api_name": "getFirePreventionTips", "api_description": "Retrieve fire prevention tips and guidelines for forest management", "field": "Forestry/Forest fire management", "parameters": {}, "required": [], "responses": {"prevention_tips": {"type": "str", "description": "Tips and guidelines to prevent forest fires and manage fire risk"}}}
{"api_name": "reportFire", "api_description": "Report a fire incident in a forest area", "field": "Forestry/Forest fire management", "parameters": {"location": {"type": "str", "description": "The location of the fire incident in the forest area (e.g., GPS coordinates, area name)"}, "description": {"type": "str", "description": "A description of the fire incident"}}, "required": ["location", "description"], "responses": {"status": {"type": "str", "description": "The status of the reported fire incident"}}}
{"api_name": "getForestCover", "api_description": "Retrieve the forest cover in a specific area", "field": "Forestry/Forest conservation", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve the forest cover (e.g., country, region)"}}, "required": ["location"], "responses": {"forest_cover": {"type": "float", "description": "The percentage of land covered by forests in the specified location"}}}
{"api_name": "getEconomicIndicators", "api_description": "Retrieve economic indicators for forests", "field": "Forestry/Forest economics", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve economic indicators (e.g., United States, Canada, Brazil)"}, "year": {"type": "int", "description": "Specify a year to retrieve economic indicators for (e.g., 2020)"}}, "required": ["country"], "responses": {"total_production_value": {"type": "float", "description": "The total production value of forests in the specified country and year"}, "total_employment": {"type": "int", "description": "The total employment generated by the forest sector in the specified country and year"}, "forest_contribution_gdp": {"type": "float", "description": "The contribution of forests to the GDP of the specified country and year"}}}
{"api_name": "getTropicalForestArea", "api_description": "Retrieve the total area of tropical forests in a specified region", "field": "Forestry/Tropical forestry", "parameters": {"region": {"type": "str", "description": "The region for which you want to get the total area of tropical forests (e.g., Amazon, Congo, Southeast Asia)"}}, "required": ["region"], "responses": {"area": {"type": "float", "description": "The total area of tropical forests in the specified region"}}}
{"api_name": "getTropicalForestCarbonStock", "api_description": "Retrieve the carbon stock of tropical forests in a specified region", "field": "Forestry/Tropical forestry", "parameters": {"region": {"type": "str", "description": "The region for which you want to get the carbon stock of tropical forests (e.g., Amazon, Congo, Southeast Asia)"}}, "required": ["region"], "responses": {"carbon_stock": {"type": "float", "description": "The carbon stock of tropical forests in the specified region"}}}
{"api_name": "getWoodMoistureContent", "api_description": "Retrieve the moisture content of a specific type of wood", "field": "Forestry/Wood technology", "parameters": {"wood_type": {"type": "str", "description": "The type of wood you want to get the moisture content for (e.g., Walnut, Ash, Beech)"}}, "required": ["wood_type"], "responses": {"moisture_content": {"type": "float", "description": "The moisture content of the specified type of wood"}}}
{"api_name": "getTreeGrowthRate", "api_description": "Retrieve the growth rate of a tree species", "field": "Forestry/Forest biotechnology", "parameters": {"tree_species": {"type": "str", "description": "The species of the tree (e.g., oak, pine, birch)"}, "area": {"type": "str", "description": "The area where the tree is located (e.g., forest, park, garden)"}, "years": {"type": "int", "description": "The number of years for which the growth rate is needed"}}, "required": ["tree_species", "area"], "responses": {"growth_rate": {"type": "float", "description": "The growth rate of the tree species in centimeters per year"}}}
{"api_name": "getForestHealth", "api_description": "Retrieve the health status of a forest", "field": "Forestry/Forest biotechnology", "parameters": {"location": {"type": "str", "description": "The location of the forest (e.g., Amazon rainforest, Boreal forest)"}, "disease": {"type": "str", "description": "The specific disease to check for in the forest (e.g., deforestation, pest infestation)"}}, "required": ["location"], "responses": {"health_status": {"type": "str", "description": "The health status of the specified forest (e.g., healthy, degraded)"}}}
{"api_name": "calculateAgroforestryEconomicValue", "api_description": "Calculate the economic value of agroforestry", "field": "Forestry/Agroforestry", "parameters": {"area": {"type": "float", "description": "The total area of agroforestry in hectares (e.g., 100, 500, 1000)"}, "crop_price": {"type": "float", "description": "The price of the crop per unit (e.g., $10/kg, $0.5/piece)"}, "tree_value": {"type": "float", "description": "The value of each tree species (e.g., $100/tree, $50/tree)"}}, "required": ["area", "crop_price", "tree_value"], "responses": {"economic_value": {"type": "float", "description": "The total economic value of agroforestry in monetary units (e.g., $5000, $10000)"}}}
{"api_name": "getTraditionalForestryPractices", "api_description": "Retrieve information about traditional forestry practices", "field": "Forestry/Traditional forestry practices", "parameters": {}, "required": [], "responses": {"practices": {"type": "str", "description": "The traditional forestry practices followed in a given area"}}}
{"api_name": "getForestRestorationProgress", "api_description": "Retrieve the progress of forest restoration", "field": "Forestry/Forest restoration", "parameters": {"location": {"type": "str", "description": "The location where forest restoration progress is to be retrieved (e.g., Brazil, Indonesia, Canada)"}, "year": {"type": "int", "description": "The year for which forest restoration progress is to be retrieved (e.g., 2022, 2023, 2024)"}, "forest_type": {"type": "str", "description": "The type of forest for which restoration progress is to be retrieved (e.g., tropical rainforest, boreal forest)"}}, "required": ["location", "year"], "responses": {"progress": {"type": "float", "description": "The progress of forest restoration in the specified location and year (in percentage)"}, "forest_condition": {"type": "str", "description": "The condition of the forest in the specified location and year (e.g., degraded, regrowing)"}}}
{"api_name": "getForestLegislation", "api_description": "Retrieve information about forest legislation", "field": "Forestry/Forest legislation", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the forest legislation (e.g., United States, Brazil, Canada)"}, "topic": {"type": "str", "description": "Specify a topic related to forest legislation (e.g., conservation, logging, reforestation)"}}, "required": ["country"], "responses": {"legislation_info": {"type": "str", "description": "The detailed information about forest legislation"}}}
{"api_name": "getVegetationIndex", "api_description": "Retrieve vegetation index information", "field": "Forestry/Forest remote sensing", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the vegetation index (e.g., Amazon rainforest, Boreal forest)"}, "index_type": {"type": "str", "description": "The type of vegetation index to retrieve (e.g., NDVI, EVI)"}}, "required": ["location"], "responses": {"vegetation_index": {"type": "float", "description": "The vegetation index at the specified location"}}}
{"api_name": "getNDVI", "api_description": "Retrieve Normalized Difference Vegetation Index (NDVI) information for a specific location", "field": "Forestry/Forest remote sensing", "parameters": {"location": {"type": "str", "description": "The location for which you want to get NDVI information (e.g., Amazon rainforest, Boreal forest)"}, "time_range": {"type": "str", "description": "Specify the time range for which you want to retrieve NDVI data (e.g., 2010-2020, last 5 years)"}, "resolution": {"type": "int", "description": "The desired spatial resolution of the NDVI data in meters (e.g., 250, 1000)"}, "cloud_cover": {"type": "float", "description": "Specify the maximum tolerable cloud cover percentage for the NDVI data (e.g., 10.0, 20.5)"}}, "required": ["location"], "responses": {"ndvi": {"type": "float", "description": "The Normalized Difference Vegetation Index (NDVI) value at the specified location and time range"}, "time_stamp": {"type": "str", "description": "The time stamp or period of time for which the NDVI data is provided"}}}
{"api_name": "getForestLoss", "api_description": "Retrieve forest loss information", "field": "Forestry/Forest remote sensing", "parameters": {"region": {"type": "str", "description": "The region for which you want to get the forest loss information (e.g., Amazon Rainforest, Boreal Forest)"}, "time_period": {"type": "str", "description": "Specify a time period for forest loss (e.g., past year, last 10 years, 2000-2010)"}}, "required": ["region"], "responses": {"loss_area": {"type": "float", "description": "The total area of forest loss in the specified region"}, "type_of_loss": {"type": "str", "description": "The type of forest loss (e.g., deforestation, fire, logging)"}}}
{"api_name": "getBookDetails", "api_description": "Retrieve detailed information for a specific book", "field": "Library Science/Cataloging and Classification", "parameters": {"book_id": {"type": "str", "description": "The unique identifier of the book"}}, "required": ["book_id"], "responses": {"title": {"type": "str", "description": "The title of the book"}, "author": {"type": "str", "description": "The author(s) of the book"}, "description": {"type": "str", "description": "A brief description of the book"}, "isbn": {"type": "str", "description": "The ISBN number of the book"}, "availability": {"type": "bool", "description": "Indicates whether the book is currently available"}}}
{"api_name": "getCatalogingInfo", "api_description": "Retrieve cataloging information for a given item", "field": "Library Science/Cataloging and Classification", "parameters": {"isbn": {"type": "str", "description": "The ISBN of the item for which you want to retrieve cataloging information"}, "title": {"type": "str", "description": "The title of the item for which you want to retrieve cataloging information"}, "author": {"type": "str", "description": "The author of the item for which you want to retrieve cataloging information"}}, "required": ["isbn"], "responses": {"title": {"type": "str", "description": "The title of the item"}, "author": {"type": "str", "description": "The author of the item"}, "subject": {"type": "str", "description": "The subject of the item"}, "classification": {"type": "str", "description": "The classification code of the item"}}}
{"api_name": "getCollectionStats", "api_description": "Get statistics about the collection", "field": "Library Science/Collection Development", "parameters": {}, "required": [], "responses": {"total_items": {"type": "int", "description": "The total number of items in the collection"}, "available_items": {"type": "int", "description": "The number of available items in the collection"}, "checked_out_items": {"type": "int", "description": "The number of items currently checked out"}}}
{"api_name": "getCollectionDevelopmentPolicy", "api_description": "Retrieve the collection development policy of a library", "field": "Library Science/Collection Development", "parameters": {"library_name": {"type": "str", "description": "The name of the library whose collection development policy you want to retrieve"}}, "required": ["library_name"], "responses": {"policy": {"type": "str", "description": "The collection development policy of the specified library"}}}
{"api_name": "suggestAcquisition", "api_description": "Suggest a new acquisition for the library's collection", "field": "Library Science/Collection Development", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which you want to suggest an acquisition"}, "title": {"type": "str", "description": "The title of the resource to be acquired"}, "author": {"type": "str", "description": "The author of the resource to be acquired"}, "format": {"type": "str", "description": "The format of the resource to be acquired (e.g., book, DVD, e-book)"}, "subject": {"type": "str", "description": "The subject of the resource to be acquired"}}, "required": ["library_name", "title"], "responses": {"status": {"type": "str", "description": "The status of the suggestion (e.g., submitted, pending, approved)"}, "acquisition_id": {"type": "str", "description": "The unique ID assigned to the acquisition suggestion"}}}
{"api_name": "addCollection", "api_description": "Add a new collection to a library", "field": "Library Science/Collection Development", "parameters": {"library_id": {"type": "int", "description": "The ID of the library"}, "collection_name": {"type": "str", "description": "The name of the new collection"}, "collection_type": {"type": "str", "description": "The type of the new collection"}}, "required": ["library_id", "collection_name", "collection_type"], "responses": {"success": {"type": "bool", "description": "Flag indicating if the collection was successfully added"}}}
{"api_name": "deleteCollection", "api_description": "Delete a collection from a library", "field": "Library Science/Collection Development", "parameters": {"library_id": {"type": "int", "description": "The ID of the library"}, "collection_name": {"type": "str", "description": "The name of the collection to be deleted"}}, "required": ["library_id", "collection_name"], "responses": {"success": {"type": "bool", "description": "Flag indicating if the collection was successfully deleted"}}}
{"api_name": "getLibraryHours", "api_description": "Retrieve the hours of operation for the library", "field": "Library Science/Library Instruction and Education", "parameters": {"day": {"type": "str", "description": "The day of the week (e.g., Monday, Tuesday, Wednesday)"}, "location": {"type": "str", "description": "The location of the library (e.g., Main Library, Branch Library)"}}, "required": [], "responses": {"hours": {"type": "str", "description": "The hours of operation"}}}
{"api_name": "getArchives", "api_description": "Retrieve archival information and preservation guidelines", "field": "Library Science/Archives and Preservation", "parameters": {"location": {"type": "str", "description": "The location of the archives (e.g., city, state)"}, "archive_type": {"type": "str", "description": "The type of archives (e.g., manuscripts, photographs, audio recordings)"}, "accessibility": {"type": "str", "description": "Specify the accessibility of the archives (e.g., public, restricted, online)"}}, "required": ["location"], "responses": {"archives_info": {"type": "str", "description": "Detailed information about the archives"}, "preservation_guidelines": {"type": "str", "description": "Guidelines for preserving the specified type of archives"}}}
{"api_name": "searchCatalog", "api_description": "Search the catalogue of an archive or library", "field": "Library Science/Archives and Preservation", "parameters": {"archive_name": {"type": "str", "description": "The name of the archive or library (e.g., British Museum, Library of Congress)"}, "query": {"type": "str", "description": "The search terms to query the catalogue"}}, "required": ["archive_name", "query"], "responses": {"search_results": {"type": "str", "description": "Search results from the specified archive or library"}}, "example": {"archive_name": "British Museum", "query": "egyptian art"}}
{"api_name": "createArchive", "api_description": "Create a new archive record in the preservation system", "field": "Library Science/Archives and Preservation", "parameters": {"title": {"type": "str", "description": "The title of the archive"}, "description": {"type": "str", "description": "A description of the archive"}, "creator": {"type": "str", "description": "The creator of the archive"}, "date": {"type": "str", "description": "The date when the archive was created"}}, "required": ["title", "description", "creator", "date"], "responses": {"archive_id": {"type": "int", "description": "The ID of the newly created archive"}}}
{"api_name": "removeBook", "api_description": "Remove a book from the library catalog", "field": "Library Science/Library Management", "parameters": {"book_id": {"type": "str", "description": "The unique identifier of the book to be removed"}}, "required": ["book_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the book was successfully removed from the catalog"}}}
{"api_name": "borrowBook", "api_description": "Borrow a book from the library", "field": "Library Science/Library Management", "parameters": {"book_id": {"type": "str", "description": "The unique identifier of the book to be borrowed"}}, "required": ["book_id"], "responses": {"status": {"type": "str", "description": "The status of the borrowing request"}}}
{"api_name": "returnBook", "api_description": "Return a borrowed book to the library", "field": "Library Science/Library Management", "parameters": {"book_id": {"type": "str", "description": "The unique identifier of the book to be returned"}}, "required": ["book_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the book was successfully returned"}}}
{"api_name": "createLibrary", "api_description": "Create a new library", "field": "Library Science/Library Management", "parameters": {"name": {"type": "str", "description": "The name of the library"}, "location": {"type": "str", "description": "The physical location of the library"}, "capacity": {"type": "int", "description": "The maximum capacity of the library (number of books that can be stored)"}, "opening_hours": {"type": "str", "description": "The opening hours of the library (e.g., 9 AM - 5 PM)"}, "website": {"type": "str", "description": "The website of the library"}}, "required": ["name", "location"], "responses": {"library_id": {"type": "str", "description": "The unique identifier of the created library"}}}
{"api_name": "reserveBook", "api_description": "Reserve a book in the library", "field": "Library Science/Library Management", "parameters": {"book_title": {"type": "str", "description": "The title of the book to reserve"}, "user_id": {"type": "str", "description": "The ID of the user reserving the book"}}, "required": ["book_title", "user_id"], "responses": {"success": {"type": "bool", "description": "True if the book was successfully reserved, False otherwise"}}}
{"api_name": "checkAvailableCopies", "api_description": "Check the number of available copies for a book", "field": "Library Science/Library Management", "parameters": {"book_title": {"type": "str", "description": "The title of the book"}}, "required": ["book_title"], "responses": {"available_copies": {"type": "int", "description": "The number of available copies for the book"}}}
{"api_name": "getSpecialLibraryInfo", "api_description": "Retrieve information about a special library", "field": "Library Science/Special Libraries", "parameters": {"library_name": {"type": "str", "description": "The name of the special library you want information about (e.g., Medical Library, Law Library)"}, "location": {"type": "str", "description": "The location where the special library is located (e.g., New York, London, Tokyo)"}}, "required": ["library_name"], "responses": {"name": {"type": "str", "description": "The name of the special library"}, "location": {"type": "str", "description": "The location of the special library"}, "services": {"type": "str", "description": "The services available at the special library"}}}
{"api_name": "getSchoolLibraries", "api_description": "Retrieve information about school libraries", "field": "Library Science/School Libraries", "parameters": {"location": {"type": "str", "description": "The location of the school (e.g., city, state, country)"}, "grade_level": {"type": "str", "description": "The grade level of the school (e.g., elementary, middle, high)"}, "library_type": {"type": "str", "description": "The type of library within the school (e.g., media center, learning commons)"}}, "required": ["location"], "responses": {"library_name": {"type": "str", "description": "The name of the school library"}, "address": {"type": "str", "description": "The address of the school library"}, "collection_size": {"type": "int", "description": "The number of books and resources in the library"}}}
{"api_name": "getLibraryVisits", "api_description": "Retrieve number of visits to a library", "field": "Library Science/Library Assessment and Evaluation", "parameters": {"library_name": {"type": "str", "description": "The name of the library"}, "year": {"type": "int", "description": "The year for which you want to get the visits count"}}, "required": ["library_name", "year"], "responses": {"visits_count": {"type": "int", "description": "The number of visits to the specified library in the given year"}}}
{"api_name": "getLibraryUsage", "api_description": "Retrieve usage statistics of a library", "field": "Library Science/Library Assessment and Evaluation", "parameters": {"library_name": {"type": "str", "description": "The name of the library"}, "date_range": {"type": "str", "description": "The date range for which you want to get the usage statistics (e.g., January 1st, 2022 - December 31st, 2022)"}}, "required": ["library_name", "date_range"], "responses": {"usage_statistics": {"type": "str", "description": "The usage statistics of the specified library in the given date range"}}}
{"api_name": "getLibraryUsageStatistics", "api_description": "Retrieve library usage statistics", "field": "Library Science/Library Assessment and Evaluation", "parameters": {"library": {"type": "str", "description": "The name or ID of the library for which you want to retrieve usage statistics"}}, "required": ["library"], "responses": {"visitors": {"type": "int", "description": "The number of visitors to the library"}, "books_checked_out": {"type": "int", "description": "The number of books checked out from the library"}}}
{"api_name": "updateLibraryPolicy", "api_description": "Update library policy", "field": "Library Science/Library Policy and Planning", "parameters": {"policy": {"type": "str", "description": "The updated library policy"}}, "required": ["policy"], "responses": {"success": {"type": "bool", "description": "Indicates whether the library policy update was successful"}}}
{"api_name": "requestArticle", "api_description": "Request an article from a library", "field": "Library Science/Information Literacy", "parameters": {"article_title": {"type": "str", "description": "The title of the article you want to request"}, "author": {"type": "str", "description": "The author of the article"}, "journal": {"type": "str", "description": "The journal where the article was published"}, "library_card_number": {"type": "str", "description": "Your library card number"}}, "required": ["article_title", "library_card_number"], "responses": {"request_status": {"type": "str", "description": "The status of the article request"}}}
{"api_name": "citeSource", "api_description": "Generate a citation for a source", "field": "Library Science/Information Literacy", "parameters": {"source_title": {"type": "str", "description": "The title of the source to cite"}, "author": {"type": "str", "description": "The author(s) of the source"}, "year": {"type": "int", "description": "The year of publication"}, "url": {"type": "str", "description": "The URL or DOI of the source"}, "citation_style": {"type": "str", "description": "The desired citation style (e.g., APA, MLA, Chicago)"}}, "required": ["source_title", "author", "year"], "responses": {"citation": {"type": "str", "description": "The generated citation for the source"}}}
{"api_name": "searchLibraryCatalog", "api_description": "Search for books in the library catalog", "field": "Library Science/Information Literacy", "parameters": {"keywords": {"type": "str", "description": "Keywords to search for books in the library catalog"}, "author": {"type": "str", "description": "Search for books by a specific author"}, "genre": {"type": "str", "description": "Search for books in a specific genre (e.g., mystery, romance)"}, "language": {"type": "str", "description": "Search for books in a specific language"}}, "required": ["keywords"], "responses": {"available_books": {"type": "int", "description": "The number of available books that match the search criteria"}}}
{"api_name": "checkEthicalGuidelines", "api_description": "Check if a specific action complies with ethical guidelines", "field": "Library Science/Information Ethics", "parameters": {"action": {"type": "str", "description": "The action that needs to be checked against the ethical guidelines (e.g., collecting personal data, sharing sensitive information)"}}, "required": ["action"], "responses": {"compliance": {"type": "bool", "description": "Whether the action complies with the ethical guidelines or not"}}}
{"api_name": "getKnowledge", "api_description": "Retrieve knowledge information", "field": "Library Science/Knowledge Management", "parameters": {"topic": {"type": "str", "description": "The topic for which you want to retrieve knowledge (e.g., reference management, metadata, classification)"}, "language": {"type": "str", "description": "The desired language for the knowledge (e.g., English, Spanish, French)"}}, "required": ["topic"], "responses": {"knowledge": {"type": "str", "description": "The knowledge on the specified topic"}}}
{"api_name": "getLibraryLayout", "api_description": "Retrieve the layout and design information of a library", "field": "Library Science/Library Architecture and Design", "parameters": {"library_name": {"type": "str", "description": "The name of the library you want to retrieve the layout for (e.g., Central Library, Public Library)"}, "floor": {"type": "int", "description": "The floor number of the library you are interested in (e.g., 1, 2, 3)"}, "section": {"type": "str", "description": "The section of the library you want to retrieve the layout for (e.g., Fiction, Reference, Children)"}}, "required": ["library_name"], "responses": {"layout": {"type": "str", "description": "The layout and design of the specified library or section"}}}
{"api_name": "getLibraryFurniture", "api_description": "Retrieve the available furniture in a library", "field": "Library Science/Library Architecture and Design", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which you want to retrieve the available furniture"}}, "required": ["library_name"], "responses": {"furniture_list": {"type": "str", "description": "A list of available furniture in the specified library"}}}
{"api_name": "getLibraryLighting", "api_description": "Retrieve the lighting configuration of a library", "field": "Library Science/Library Architecture and Design", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which you want to retrieve the lighting configuration"}}, "required": ["library_name"], "responses": {"lighting_configuration": {"type": "str", "description": "The lighting configuration details in the specified library"}}}
{"api_name": "checkoutBook", "api_description": "Checkout a book from the library", "field": "Library Science/Information Systems", "parameters": {"book_id": {"type": "str", "description": "ID of the book you want to checkout"}, "user_id": {"type": "str", "description": "ID of the library user who wants to checkout the book"}}, "required": ["book_id", "user_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the checkout was successful"}, "due_date": {"type": "str", "description": "Due date for returning the book"}}}
{"api_name": "getInformationGovernancePolicy", "api_description": "Retrieve the information governance policy of a library", "field": "Library Science/Information Governance", "parameters": {"library_id": {"type": "str", "description": "The ID of the library"}}, "required": ["library_id"], "responses": {"policy": {"type": "str", "description": "The information governance policy of the library"}}}
{"api_name": "getLibraryPartnerships", "api_description": "Retrieve information about library partnerships", "field": "Library Science/Library Partnerships", "parameters": {"region": {"type": "str", "description": "The region for which you want to get library partnership information (e.g., North America, Europe, Asia)"}, "type": {"type": "str", "description": "Specify the type of library partnership you are interested in (e.g., academic libraries, public libraries)"}, "year": {"type": "int", "description": "Filter the results by a specific year"}}, "required": ["region"], "responses": {"partnerships": {"type": "str", "description": "List of library partnerships in the specified region"}, "count": {"type": "int", "description": "Number of library partnerships found"}}}
{"api_name": "getPublishedWorks", "api_description": "Retrieve information about published works in a library", "field": "Library Science/Library Publishing", "parameters": {"library_name": {"type": "str", "description": "The name of the library from which you want to retrieve published works (e.g., Central Library, County Library)"}, "author": {"type": "str", "description": "The author of the published works (e.g., J.K. Rowling, Stephen King)"}, "year_published": {"type": "int", "description": "The year in which the works were published"}}, "required": ["library_name"], "responses": {"published_works": {"type": "str", "description": "A list of published works in the library"}}}
{"api_name": "getFacilityInfo", "api_description": "Retrieve information about library facilities", "field": "Library Science/Library Facilities Management", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which you want to retrieve facility information"}, "facility_type": {"type": "str", "description": "Specify the type of facility (e.g., study room, computer lab, meeting room)"}}, "required": ["library_name"], "responses": {"facility_name": {"type": "str", "description": "The name of the facility"}, "facility_location": {"type": "str", "description": "The location of the facility within the library"}, "facility_status": {"type": "str", "description": "The current status of the facility (e.g., available, occupied)"}}}
{"api_name": "getExpenses", "api_description": "Retrieve library expenses information", "field": "Library Science/Library Finance and Budgeting", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which to retrieve the expenses"}}, "required": ["library_name"], "responses": {"expenses": {"type": "float", "description": "The total expenses incurred by the specified library"}}}
{"api_name": "getCopyrightLaw", "api_description": "Retrieve information on copyright laws related to libraries", "field": "Library Science/Library Legal Issues", "parameters": {"country": {"type": "str", "description": "The country for which you want to get copyright law information (e.g., USA, UK, Canada)"}, "topic": {"type": "str", "description": "Specify a topic to narrow down the copyright law information (e.g., fair use, orphan works)"}, "language": {"type": "str", "description": "Specify the language in which you want to receive the information"}}, "required": ["country"], "responses": {"copyright_law_info": {"type": "str", "description": "Information on the copyright laws related to libraries"}}}
{"api_name": "getLibraryLegalIssues", "api_description": "Retrieve legal issues related to libraries", "field": "Library Science/Library Legal Issues", "parameters": {}, "required": [], "responses": {"legal_issues": {"type": "str", "description": "A list of legal issues concerning libraries"}}}
{"api_name": "getLibraryStrategicPlan", "api_description": "Retrieve the strategic plan of a library", "field": "Library Science/Library Strategic Planning", "parameters": {"library_name": {"type": "str", "description": "The name of the library to retrieve the strategic plan for (e.g., New York Public Library, British Library)"}, "plan_year": {"type": "int", "description": "The year of the strategic plan to retrieve (e.g., 2022, 2023, 2024)"}}, "required": ["library_name"], "responses": {"strategic_plan": {"type": "str", "description": "The strategic plan of the specified library for the given year"}}}
{"api_name": "getLibrarianInformation", "api_description": "Retrieve information about a librarian", "field": "Library Science/Education and Training for Librarianship", "parameters": {"name": {"type": "str", "description": "The name of the librarian"}, "qualification": {"type": "str", "description": "The qualification of the librarian (e.g., MLIS, PhD)"}, "specialization": {"type": "str", "description": "The specialization of the librarian (e.g., cataloging, reference, digital services)"}}, "required": ["name"], "responses": {"name": {"type": "str", "description": "The name of the librarian"}, "qualification": {"type": "str", "description": "The qualification of the librarian"}, "specialization": {"type": "str", "description": "The specialization of the librarian"}}}
{"api_name": "updateDigitalAssetMetadata", "api_description": "Update the metadata of a digital asset", "field": "Library Science/Digital Preservation", "parameters": {"asset_id": {"type": "str", "description": "The unique identifier of the digital asset for which metadata needs to be updated"}, "metadata": {"type": "str", "description": "Updated metadata for the digital asset"}}, "required": ["asset_id", "metadata"], "responses": {"success": {"type": "bool", "description": "Indicates if the metadata update was successful"}}}
{"api_name": "getLibraryTrends", "api_description": "Retrieve information about the latest trends and innovations in libraries", "field": "Library Science/Library Trends and Innovations", "parameters": {"location": {"type": "str", "description": "The location where you want to get information about library trends (e.g., city, country)"}}, "required": ["location"], "responses": {"trends": {"type": "str", "description": "The latest trends and innovations in libraries in the specified location"}}}
{"api_name": "classifyDocument", "api_description": "Classify a document using a knowledge organization system", "field": "Library Science/Knowledge Organization Systems", "parameters": {"system": {"type": "str", "description": "The knowledge organization system to use for classifying the document (e.g., Universal Decimal Classification, Medical Subject Headings)"}, "document": {"type": "str", "description": "The document to be classified using the specified knowledge organization system"}}, "required": ["system", "document"], "responses": {"classification": {"type": "str", "description": "The classification result of the document using the specified knowledge organization system"}}}
{"api_name": "getLibraryServices", "api_description": "Retrieve library services available for diverse populations", "field": "Library Science/Library Services to Diverse Populations", "parameters": {"location": {"type": "str", "description": "The location of the library (e.g., city, state, country)"}, "age_group": {"type": "str", "description": "The age group for which you want to get library services (e.g., children, teens, adults)"}, "language": {"type": "str", "description": "The language in which library services should be provided (e.g., English, Spanish, Mandarin)"}, "disability": {"type": "str", "description": "Specify the disability for which library services are required (e.g., visual impairment, hearing impairment, physical disability)"}}, "required": ["location"], "responses": {"services": {"type": "str", "description": "The library services available for the specified diverse population"}}}
{"api_name": "renewBook", "api_description": "Renew the loan period for a checked-out book", "field": "Library Science/Library User Experience Design", "parameters": {"book_id": {"type": "str", "description": "ID of the book"}, "user_id": {"type": "str", "description": "ID of the library user"}}, "required": ["book_id", "user_id"], "responses": {"renewal_status": {"type": "str", "description": "Status of the book renewal"}}}
{"api_name": "updateTaskProgress", "api_description": "Update the progress of a task in a library project", "field": "Library Science/Library Project Management", "parameters": {"project_id": {"type": "str", "description": "The unique identifier of the project"}, "task_id": {"type": "str", "description": "The unique identifier of the task"}, "progress": {"type": "int", "description": "The updated progress of the task (e.g., 0-100)"}}, "required": ["project_id", "task_id", "progress"], "responses": {"success": {"type": "bool", "description": "Indicates whether the progress update was successful"}}}
{"api_name": "getLibraryCulturalHeritage", "api_description": "Retrieve information about the cultural heritage of a library", "field": "Library Science/Library Cultural Heritage", "parameters": {"library_name": {"type": "str", "description": "The name of the library"}, "country": {"type": "str", "description": "The country where the library is located"}, "city": {"type": "str", "description": "The city where the library is located"}}, "required": ["library_name"], "responses": {"culture": {"type": "str", "description": "The cultural heritage of the library"}}}
{"api_name": "getLibraryAnalytics", "api_description": "Retrieve analytics and metrics related to library usage and operations", "field": "Library Science/Library Analytics and Metrics", "parameters": {"date": {"type": "str", "description": "The specific date for which you want to retrieve the analytics (e.g., YYYY-MM-DD)"}, "time_period": {"type": "str", "description": "Specify a time period for the analytics (e.g., daily, monthly, yearly)"}, "library_location": {"type": "str", "description": "The location of the library for which you want to retrieve analytics (e.g., New York Public Library, London Public Library)"}, "user_category": {"type": "str", "description": "Specify a user category for the analytics (e.g., students, faculty, general public)"}}, "required": ["date", "library_location"], "responses": {"visitors_count": {"type": "int", "description": "The number of visitors to the library on the specified date"}, "books_borrowed_count": {"type": "int", "description": "The number of books borrowed from the library on the specified date"}, "popular_books": {"type": "str", "description": "A list of the most popular books borrowed on the specified date"}}}
{"api_name": "requestInterlibraryLoan", "api_description": "Submit a request for an interlibrary loan", "field": "Library Science/Library Interlibrary Loan", "parameters": {"item_title": {"type": "str", "description": "Title of the item you need to borrow"}, "item_type": {"type": "str", "description": "Type of the item you need to borrow (e.g., book, journal, DVD)"}, "required_by": {"type": "str", "description": "Date by which you need the item"}, "library_name": {"type": "str", "description": "Name of your local library"}}, "required": ["item_title", "item_type", "required_by", "library_name"], "responses": {"request_status": {"type": "str", "description": "Status of the interlibrary loan request"}, "delivery_date": {"type": "str", "description": "Estimated delivery date of the requested item"}}}
{"api_name": "requestResource", "api_description": "Request a specific electronic resource for borrowing", "field": "Library Science/Library Electronic Resources Management", "parameters": {"resource_id": {"type": "str", "description": "The unique identifier of the electronic resource"}, "user_id": {"type": "str", "description": "The user ID requesting the resource"}, "duration": {"type": "int", "description": "The desired loan duration in days"}}, "required": ["resource_id", "user_id"], "responses": {"request_status": {"type": "str", "description": "The status of the resource request"}}}
{"api_name": "getDistanceLearningServices", "api_description": "Retrieve information about distance learning services offered by the library", "field": "Library Science/Library Distance Learning Services", "parameters": {}, "required": [], "responses": {"services": {"type": "str", "description": "A list of distance learning services provided by the library"}, "resources": {"type": "str", "description": "A list of online resources available for distance learning"}}}
{"api_name": "getVirtualReferenceService", "api_description": "Retrieve information about virtual reference services provided by a library", "field": "Library Science/Library Virtual Reference Services", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which you want to get information"}, "service_type": {"type": "str", "description": "Specify the type of virtual reference service (e.g., chat, email, video conference)"}, "language": {"type": "str", "description": "Specify the preferred language for the virtual reference service (e.g., English, Spanish)"}}, "required": ["library_name", "service_type"], "responses": {"library_name": {"type": "str", "description": "The name of the library providing the virtual reference service"}, "service_type": {"type": "str", "description": "The type of virtual reference service offered by the library"}, "website": {"type": "str", "description": "The website URL of the virtual reference service"}, "availability": {"type": "str", "description": "The availability schedule of the virtual reference service"}}}
{"api_name": "getLibrarySkills", "api_description": "Retrieve information about library skills and information literacy instruction", "field": "Library Science/Library Information Literacy Instruction", "parameters": {"course_id": {"type": "str", "description": "The ID of the course for which you want to retrieve information about library skills"}, "semester": {"type": "str", "description": "The semester in which the course is offered (e.g., Spring 2022, Fall 2023)"}, "instructor_name": {"type": "str", "description": "The name of the instructor teaching the course"}}, "required": ["course_id"], "responses": {"library_skills": {"type": "str", "description": "The library skills covered in the course"}, "instruction_methods": {"type": "str", "description": "The instructional methods used in teaching library information literacy"}, "resources": {"type": "str", "description": "The resources available for library information literacy instruction"}}}
{"api_name": "getInformationLiteracyInstruction", "api_description": "Retrieve information literacy instruction details", "field": "Library Science/Library Information Literacy Instruction", "parameters": {"topic": {"type": "str", "description": "The topic of the information literacy instruction (e.g., research skills, evaluating sources)"}, "level": {"type": "str", "description": "The level of the instruction (e.g., beginner, intermediate, advanced)"}, "location": {"type": "str", "description": "The location where the instruction is provided (e.g., library, classroom)"}, "duration": {"type": "int", "description": "The duration of the instruction in minutes"}, "audience": {"type": "str", "description": "The intended audience for the instruction (e.g., students, faculty, staff)"}}, "required": ["topic", "level"], "responses": {"instruction_details": {"type": "str", "description": "Details of the information literacy instruction"}}}
{"api_name": "getScholarlyCommunication", "api_description": "Retrieve scholarly communication information from libraries", "field": "Library Science/Library Scholarly Communication", "parameters": {"institution": {"type": "str", "description": "The name of the institution or library (e.g., Harvard University, Library of Congress)"}, "subject": {"type": "str", "description": "The subject or topic of the scholarly communication (e.g., physics, humanities)"}, "year": {"type": "str", "description": "The year of the scholarly communication (e.g., 2020, 2021)"}}, "required": ["institution", "subject"], "responses": {"author": {"type": "str", "description": "The author of the scholarly communication"}, "title": {"type": "str", "description": "The title of the scholarly communication"}, "journal": {"type": "str", "description": "The journal where the scholarly communication is published"}, "year": {"type": "str", "description": "The year of the scholarly communication"}}}
{"api_name": "getBookStatistics", "api_description": "Retrieve statistical data about books in the library collection", "field": "Library Science/Library Data Analysis", "parameters": {"genre": {"type": "str", "description": "The genre of books to analyze (e.g., fiction, non-fiction)"}, "time_period": {"type": "str", "description": "The time period for statistical analysis (e.g., last month, last year)"}}, "required": [], "responses": {"total_count": {"type": "int", "description": "The total count of books in the specified genre"}, "average_rating": {"type": "float", "description": "The average rating of books in the specified genre"}, "most_popular_author": {"type": "str", "description": "The author with the highest number of books in the specified genre"}}}
{"api_name": "getCollectionQuality", "api_description": "Retrieve the quality assessment of a library collection", "field": "Library Science/Library Collection Assessment", "parameters": {"collection_id": {"type": "str", "description": "The unique identifier of the library collection (e.g., ABC123)"}}, "required": ["collection_id"], "responses": {"quality_assessment": {"type": "str", "description": "The quality assessment of the library collection"}}}
{"api_name": "getCollectionOverview", "api_description": "Retrieve an overview of a library's collection", "field": "Library Science/Library Collection Assessment", "parameters": {"library_name": {"type": "str", "description": "The name of the library you want to assess"}}, "required": ["library_name"], "responses": {"overview": {"type": "str", "description": "An overview of the library's collection"}}}
{"api_name": "generateGrantProposal", "api_description": "Generate a grant proposal based on provided information", "field": "Library Science/Library Grant Writing", "parameters": {"grant_title": {"type": "str", "description": "Title of the grant proposal"}, "project_description": {"type": "str", "description": "Description of the project for which you are seeking funding"}, "budget": {"type": "str", "description": "Breakdown of project costs and budget"}, "expected_outcomes": {"type": "str", "description": "Expected outcomes and impact of the project"}, "evaluation_plan": {"type": "str", "description": "Plan for evaluating the success of the project"}, "contact_information": {"type": "str", "description": "Contact information for the grant applicant"}}, "required": ["grant_title", "project_description"], "responses": {"grant_proposal": {"type": "str", "description": "Generated grant proposal in PDF format"}}}
{"api_name": "addDonor", "api_description": "Add a new donor to the library's donor database", "field": "Library Science/Library Donor Relations", "parameters": {"donor_name": {"type": "str", "description": "The name of the donor to be added"}, "donor_email": {"type": "str", "description": "The email address of the donor (e.g., example@gmail.com)"}, "donation_amount": {"type": "float", "description": "The amount of donation made by the donor (e.g., 1000.00)"}, "donation_date": {"type": "str", "description": "The date of the donation made by the donor (e.g., 2022-05-20)"}}, "required": ["donor_name", "donor_email", "donation_amount"], "responses": {"success": {"type": "bool", "description": "Indicates whether the donor was successfully added to the database"}, "message": {"type": "str", "description": "A message indicating the result of the operation"}}}
{"api_name": "updateVolunteerRole", "api_description": "Update the role of a volunteer in the library", "field": "Library Science/Library Volunteer Management", "parameters": {"organization": {"type": "str", "description": "The name of the library organization"}, "volunteer_id": {"type": "str", "description": "The unique ID of the volunteer"}, "new_role": {"type": "str", "description": "The new role of the volunteer (e.g., librarian, shelver, tutor)"}}, "required": ["organization", "volunteer_id", "new_role"], "responses": {"success": {"type": "bool", "description": "Indicates whether the volunteer's role was successfully updated"}}}
{"api_name": "renewItem", "api_description": "Renew the due date of an item checked out by a library patron", "field": "Library Science/Library Patron Services", "parameters": {"item_id": {"type": "str", "description": "The unique identifier of the item to be renewed"}, "patron_id": {"type": "str", "description": "The unique identifier of the library patron"}}, "required": ["item_id", "patron_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the renewal was successful"}}}
{"api_name": "requestDocumentDelivery", "api_description": "Submit a request for document delivery service", "field": "Library Science/Library Document Delivery Services", "parameters": {"document_title": {"type": "str", "description": "The title of the document that you want to request delivery for"}, "author": {"type": "str", "description": "The author of the document (e.g., John Smith)"}, "journal_name": {"type": "str", "description": "The name of the journal where the document is published"}, "delivery_method": {"type": "str", "description": "The preferred method for document delivery (e.g., physical copy, electronic copy)"}}, "required": ["document_title"], "responses": {"request_id": {"type": "str", "description": "The unique identifier for the document delivery request"}, "status": {"type": "str", "description": "The current status of the document delivery request (e.g., pending, in progress, delivered)"}}}
{"api_name": "cancelRequest", "api_description": "Cancel a previously made document request", "field": "Library Science/Library Document Delivery Services", "parameters": {"request_id": {"type": "str", "description": "The unique ID of the document request you want to cancel"}}, "required": ["request_id"], "responses": {"cancellation_status": {"type": "str", "description": "The status of the cancellation (e.g., success, failure)"}}}
{"api_name": "trackRequest", "api_description": "Track the status of a document request", "field": "Library Science/Library Document Delivery Services", "parameters": {"request_id": {"type": "str", "description": "The unique ID of the document request you want to track"}}, "required": ["request_id"], "responses": {"request_status": {"type": "str", "description": "The current status of the document request"}}}
{"api_name": "addSerialCopy", "api_description": "Add a new copy of a serial to the library collection", "field": "Library Science/Library Serials Management", "parameters": {"collection_name": {"type": "str", "description": "The name of the collection to add the serial copy to"}, "serial_id": {"type": "str", "description": "The ID of the serial"}, "copy_number": {"type": "int", "description": "The number of the copy being added"}}, "required": ["collection_name", "serial_id", "copy_number"], "responses": {"success": {"type": "bool", "description": "Indicates if the copy was successfully added to the collection"}}}
{"api_name": "removeSerialCopy", "api_description": "Remove a copy of a serial from the library collection", "field": "Library Science/Library Serials Management", "parameters": {"collection_name": {"type": "str", "description": "The name of the collection to remove the serial copy from"}, "serial_id": {"type": "str", "description": "The ID of the serial"}, "copy_number": {"type": "int", "description": "The number of the copy to be removed"}}, "required": ["collection_name", "serial_id", "copy_number"], "responses": {"success": {"type": "bool", "description": "Indicates if the copy was successfully removed from the collection"}}}
{"api_name": "removeBookFromCollection", "api_description": "Remove a book from the library's collection", "field": "Library Science/Library Acquisitions and Collection Development", "parameters": {"book_id": {"type": "int", "description": "The unique identifier of the book in the collection"}}, "required": ["book_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the book was successfully removed from the collection"}}}
{"api_name": "getAuthorityRecord", "api_description": "Retrieve the authority record for a specific entity", "field": "Library Science/Library Authority Control Services", "parameters": {"entity_type": {"type": "str", "description": "The type of entity for which the authority record is requested (e.g., person, organization, subject)"}, "entity_name": {"type": "str", "description": "The name or identifier of the entity for which the authority record is requested"}}, "required": ["entity_type", "entity_name"], "responses": {"authority_record": {"type": "str", "description": "The authority record for the specified entity"}}}
{"api_name": "repairBook", "api_description": "Repair a damaged book in the library", "field": "Library Science/Library Preservation and Conservation", "parameters": {"book_id": {"type": "int", "description": "The unique identifier of the book to be repaired"}, "damaged_pages": {"type": "str", "description": "The specific pages or sections of the book that require repair"}}, "required": ["book_id", "damaged_pages"], "responses": {"success": {"type": "bool", "description": "Indicates whether the book repair was successful"}}}
{"api_name": "cleanBook", "api_description": "Clean a book in the library", "field": "Library Science/Library Preservation and Conservation", "parameters": {"book_id": {"type": "int", "description": "The unique identifier of the book to be cleaned"}, "cleaning_solution": {"type": "str", "description": "The type of cleaning solution to be used for book cleaning (e.g., distilled water, mild detergent)"}, "cleaning_method": {"type": "str", "description": "The preferred method of book cleaning (e.g., wiping, brushing)"}, "time_duration": {"type": "int", "description": "The time duration for book cleaning in minutes"}}, "required": ["book_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the book cleaning was successful"}}}
{"api_name": "checkAccess", "api_description": "Check if a user has access to a specific library resource", "field": "Library Science/Library Security and Access Control", "parameters": {"user_id": {"type": "str", "description": "The ID of the user (e.g., john123, mary456)"}, "resource_id": {"type": "int", "description": "The ID of the library resource (e.g., 12345, 67890)"}, "time_of_day": {"type": "str", "description": "Specify a time of day for access check (e.g., morning, afternoon, evening)"}, "location": {"type": "str", "description": "The location of the library (e.g., Main Branch, Branch A)"}}, "required": ["user_id", "resource_id"], "responses": {"has_access": {"type": "bool", "description": "Whether the user has access to the specified library resource"}, "access_level": {"type": "str", "description": "The access level of the user for the resource"}}}
{"api_name": "getLibraryAccessControl", "api_description": "Check the access control settings in a library", "field": "Library Science/Library Security and Access Control", "parameters": {"library_name": {"type": "str", "description": "The name of the library you want to check the access control"}, "user_id": {"type": "str", "description": "The ID of the user requesting access control information"}, "time_of_day": {"type": "str", "description": "Specify a time of day for access control (e.g., morning, afternoon, evening)"}}, "required": ["library_name", "user_id"], "responses": {"access_status": {"type": "str", "description": "The access status of the user at the specified library (e.g., granted, denied)"}, "permission_level": {"type": "str", "description": "The permission level of the user at the specified library (e.g., guest, member, administrator)"}}}
{"api_name": "revokeLibraryAccess", "api_description": "Revoke access from a user in a library", "field": "Library Science/Library Security and Access Control", "parameters": {"library_name": {"type": "str", "description": "The name of the library to revoke access"}, "user_id": {"type": "str", "description": "The ID of the user to revoke access"}}, "required": ["library_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the access was successfully revoked"}}}
{"api_name": "checkMembership", "api_description": "Check if a person is a member of the library and has access to the library services", "field": "Library Science/Library Security and Access Control", "parameters": {"user_id": {"type": "str", "description": "The unique identifier of the library user (e.g., library card number, username)"}, "pin": {"type": "str", "description": "The personal identification number of the library user"}}, "required": ["user_id", "pin"], "responses": {"is_member": {"type": "bool", "description": "Whether the user is a member of the library"}, "has_access": {"type": "bool", "description": "Whether the user has access to the library services"}}}
{"api_name": "authorizeEntry", "api_description": "Authorize entry of a person into the library premises", "field": "Library Science/Library Security and Access Control", "parameters": {"user_id": {"type": "str", "description": "The unique identifier of the library user (e.g., library card number, username)"}, "pin": {"type": "str", "description": "The personal identification number of the library user"}}, "required": ["user_id", "pin"], "responses": {"authorized": {"type": "bool", "description": "Whether the user is authorized to enter the library premises"}, "entry_time": {"type": "str", "description": "The timestamp of the user's entry into the library premises"}}}
{"api_name": "logAccessEvent", "api_description": "Log an access event within the library for auditing and security purposes", "field": "Library Science/Library Security and Access Control", "parameters": {"user_id": {"type": "str", "description": "The unique identifier of the library user (e.g., library card number, username)"}, "event_type": {"type": "str", "description": "The type of access event (e.g., entry, exit, resource access)"}}, "required": ["user_id", "event_type"], "responses": {"log_id": {"type": "int", "description": "The unique identifier of the logged access event"}, "timestamp": {"type": "str", "description": "The timestamp of the access event"}}}
{"api_name": "restrictAccess", "api_description": "Restrict access to a specific section in the library", "field": "Library Science/Library Security and Access Control", "parameters": {"section": {"type": "str", "description": "The name or code of the section in the library"}}, "required": ["section"], "responses": {"access_restricted": {"type": "bool", "description": "Indicates whether access to the section has been restricted"}}}
{"api_name": "getShelfCapacity", "api_description": "Retrieve the capacity of a library shelf", "field": "Library Science/Library Space Planning", "parameters": {"library_name": {"type": "str", "description": "The name of the library where the shelf is located"}, "shelf_number": {"type": "int", "description": "The number of the shelf for which you want to retrieve the capacity"}}, "required": ["library_name", "shelf_number"], "responses": {"capacity": {"type": "int", "description": "The capacity (number of books) of the specified library shelf"}}}
{"api_name": "getMaintenanceHistory", "api_description": "Retrieve the maintenance history of library facilities", "field": "Library Science/Library Facilities Maintenance", "parameters": {"location": {"type": "str", "description": "The location of the library (e.g., Main branch, Branch A, Branch B)"}}, "required": ["location"], "responses": {"maintenance_records": {"type": "str", "description": "A list of maintenance records for the specified location (e.g., [{'facility': 'HVAC system', 'date': '2022-08-15', 'status': 'completed'}, {'facility': 'Elevator', 'date': '2022-09-10', 'status': 'in progress'}]"}}}
{"api_name": "placeHold", "api_description": "Place a hold on an item in the catalog", "field": "Library Science/Library Integrated Library Systems", "parameters": {"item_id": {"type": "str", "description": "The unique identifier of the item to place a hold on"}, "user_id": {"type": "str", "description": "The unique identifier of the user placing the hold"}}, "required": ["item_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the hold was successfully placed"}, "position_in_queue": {"type": "int", "description": "The user's position in the hold queue"}}}
{"api_name": "getLibrarySystemInfo", "api_description": "Retrieve information about a library's integrated library systems", "field": "Library Science/Library Integrated Library Systems", "parameters": {"library_name": {"type": "str", "description": "The name of the library (e.g., Central Public Library, City College Library)"}}, "required": ["library_name"], "responses": {"system_name": {"type": "str", "description": "The name of the integrated library system used by the specified library"}}}
{"api_name": "getAssignmentSubmission", "api_description": "Retrieve the submission status of an assignment for a specific student in a course within a library learning management system", "field": "Library Science/Library Learning Management Systems", "parameters": {"student_id": {"type": "str", "description": "The ID of the student"}, "course_id": {"type": "str", "description": "The ID of the course (e.g., CS101, ENG201)"}, "assignment_id": {"type": "str", "description": "The ID of the assignment"}}, "required": ["student_id", "course_id", "assignment_id"], "responses": {"submission_status": {"type": "str", "description": "The submission status of the assignment for the specified student"}}}
{"api_name": "getUsabilityTest", "api_description": "Retrieve the results of a library usability test", "field": "Library Science/Library Usability Testing", "parameters": {"test_id": {"type": "str", "description": "The ID of the usability test"}, "test_date": {"type": "str", "description": "The date when the usability test was conducted (e.g., '2022-01-01')"}, "test_location": {"type": "str", "description": "The location where the usability test took place (e.g., 'Main Library', 'Branch Library')"}, "participant_group": {"type": "str", "description": "The group of participants targeted in the usability test (e.g., 'Undergraduate Students', 'Library Staff')"}}, "required": ["test_id"], "responses": {"test_results": {"type": "str", "description": "The results of the usability test in text format"}, "statistics": {"type": "str", "description": "Statistical analysis of usability test data"}, "recommendations": {"type": "str", "description": "Actionable recommendations based on the usability test findings"}}}
{"api_name": "performUsabilityTesting", "api_description": "Conduct usability testing for library services", "field": "Library Science/Library Usability Testing", "parameters": {"service": {"type": "str", "description": "The library service to be tested (e.g., catalog search, self-checkout)", "examples": "catalog search"}}, "required": ["service"], "responses": {"success": {"type": "bool", "description": "Indicates if the usability testing was successfully conducted"}}}
{"api_name": "getLibraryUserDemographics", "api_description": "Retrieve demographics information of library users", "field": "Library Science/Library User Research", "parameters": {"library": {"type": "str", "description": "The name or ID of the library"}, "age_range": {"type": "str", "description": "Specify age range for user demographics (e.g., 18-25, 35-45)"}, "gender": {"type": "str", "description": "Specify the gender of the users (e.g., male, female, non-binary)"}, "education_level": {"type": "str", "description": "Specify the education level of the users (e.g., high school, college, graduate)"}, "location": {"type": "str", "description": "Specify the location for which to retrieve user demographics (e.g., city, state, country)"}}, "required": ["library"], "responses": {"age_range": {"type": "str", "description": "The age range of the library users"}, "gender": {"type": "str", "description": "The gender distribution of the library users"}, "education_level": {"type": "str", "description": "The education level distribution of the library users"}, "location": {"type": "str", "description": "The location distribution of the library users"}}}
{"api_name": "calculateLibraryUsability", "api_description": "Calculate the usability of a library based on user feedback", "field": "Library Science/Library Usability Analysis", "parameters": {"feedback": {"type": "str", "description": "The feedback provided by library users to analyze the usability of the library"}}, "required": ["feedback"], "responses": {"usability_score": {"type": "float", "description": "The calculated usability score of the library"}}}
{"api_name": "getBestPractices", "api_description": "Retrieve the best practices for library usability", "field": "Library Science/Library Usability Best Practices", "parameters": {}, "required": [], "responses": {"best_practices": {"type": "str", "description": "A list of best practices for improving library usability"}}}
{"api_name": "getLibraryUsabilityMetrics", "api_description": "Retrieve usability metrics for a library", "field": "Library Science/Library Usability Metrics", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which you want to get the usability metrics (e.g., Central Library, City Library)"}, "user_type": {"type": "str", "description": "The type of user for whom usability metrics are required (e.g., students, researchers)"}, "time_period": {"type": "str", "description": "Specify a time period for which usability metrics are required (e.g., last month, last year)"}}, "required": ["library_name"], "responses": {"usability_score": {"type": "float", "description": "The usability score of the specified library"}, "user_satisfaction": {"type": "float", "description": "The user satisfaction rate of the specified library"}, "average_search_time": {"type": "float", "description": "The average search time for users in the specified library"}}}
{"api_name": "getLibraryMobileDesign", "api_description": "Retrieve information about the design of a mobile library app", "field": "Library Science/Library Mobile Design", "parameters": {"app_name": {"type": "str", "description": "The name of the mobile library app"}, "platform": {"type": "str", "description": "The platform of the app (e.g., iOS, Android)"}, "user_type": {"type": "str", "description": "The type of user accessing the app (e.g., student, librarian)"}, "font_size": {"type": "int", "description": "The desired font size for the app (e.g., 14, 16, 18, ...)"}}, "required": ["app_name", "platform"], "responses": {"colors": {"type": "str", "description": "The color scheme used in the app"}, "layout": {"type": "str", "description": "The layout of different screens in the app"}, "features": {"type": "str", "description": "The features available in the app"}}}
{"api_name": "getResponsiveDesign", "api_description": "Retrieve information about responsive design in library science", "field": "Library Science/Library Responsive Design", "parameters": {"library_type": {"type": "str", "description": "Specify the type of library for responsive design (e.g., public library, academic library, special library)"}, "website": {"type": "str", "description": "The website URL of the library"}}, "required": ["library_type", "website"], "responses": {"design_guidelines": {"type": "str", "description": "The guidelines for implementing responsive design in libraries"}}}
{"api_name": "getLibraryResourceInfo", "api_description": "Retrieve detailed information about a specific library resource", "field": "Library Science/Library Responsive Design", "parameters": {"resource_id": {"type": "str", "description": "The unique identifier of the library resource"}}, "required": ["resource_id"], "responses": {"title": {"type": "str", "description": "The title of the library resource"}, "author": {"type": "str", "description": "The author of the library resource"}, "description": {"type": "str", "description": "A brief description of the library resource"}, "format": {"type": "str", "description": "The format of the library resource"}, "language": {"type": "str", "description": "The language of the library resource"}}}
{"api_name": "testLibraryUserExperience", "api_description": "Evaluate the user experience of a library", "field": "Library Science/Library User Experience Testing", "parameters": {"library_name": {"type": "str", "description": "The name of the library to be tested (e.g., Central Library, City Library)"}, "user_age_group": {"type": "str", "description": "The age group of the library users (e.g., children, teenagers, adults)"}, "user_interaction": {"type": "str", "description": "The type of user interaction to be tested (e.g., browsing, searching, checkout)"}, "time_period": {"type": "str", "description": "The time period for testing the user experience (e.g., morning, afternoon, evening)"}, "feedback_required": {"type": "bool", "description": "Specify if feedback from users is required (true/false)"}, "focus_group_size": {"type": "int", "description": "The size of the focus group for testing the user experience"}}, "required": ["library_name", "user_interaction"], "responses": {"user_satisfaction_score": {"type": "float", "description": "The overall satisfaction score of users for the tested library experience"}, "recommendations": {"type": "str", "description": "Recommendations to improve the user experience of the library"}}}
{"api_name": "getUserExperiencePreferences", "api_description": "Retrieve user experience preferences of library users", "field": "Library Science/Library User Experience Strategy", "parameters": {"user_id": {"type": "str", "description": "The unique identifier of the library user"}, "location": {"type": "str", "description": "The location of the library where the user experience preferences will be retrieved (e.g., Main Library, Branch Library)"}}, "required": ["user_id"], "responses": {"preferences": {"type": "str", "description": "User experience preferences of the specified library user"}}}
{"api_name": "checkWebAccessibility", "api_description": "Check the web accessibility of a library website", "field": "Library Science/Library Web Accessibility", "parameters": {"website_url": {"type": "str", "description": "The URL of the library website to check for accessibility"}, "user_role": {"type": "str", "description": "The role of the user accessing the website (e.g., librarian, patron)"}, "accessibility_level": {"type": "str", "description": "Specify the desired accessibility level (e.g., WCAG Level A, WCAG Level AA, WCAG Level AAA)"}, "browser": {"type": "str", "description": "Choose the browser to simulate for testing (e.g., Chrome, Firefox, Safari)"}, "language": {"type": "str", "description": "Select the language for accessibility evaluation (e.g., English, Spanish, French)"}}, "required": ["website_url"], "responses": {"is_accessible": {"type": "bool", "description": "Indicates whether the library website meets the specified accessibility level"}, "compliance_issues": {"type": "str", "description": "List of compliance issues found in the website (if any)"}, "recommended_actions": {"type": "str", "description": "Suggests actions to improve web accessibility"}}}
{"api_name": "scheduleLibraryWorkshop", "api_description": "Schedule a workshop for library staff or patrons", "field": "Library Science/Library Training and Instruction", "parameters": {"workshop_name": {"type": "str", "description": "The name or title of the workshop"}, "target_audience": {"type": "str", "description": "The intended audience for the workshop (e.g., library staff, library patrons)"}, "location": {"type": "str", "description": "The location where the workshop will be held"}, "start_date": {"type": "str", "description": "The start date of the workshop (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the workshop (e.g., YYYY-MM-DD)"}, "instructor": {"type": "str", "description": "The name of the workshop instructor"}}, "required": ["workshop_name", "target_audience", "location", "start_date", "end_date"], "responses": {"confirmation": {"type": "str", "description": "A confirmation message stating that the workshop has been scheduled"}}}
{"api_name": "getInstructionSessions", "api_description": "Retrieve information about library instruction sessions", "field": "Library Science/Library Training and Instruction", "parameters": {"library_name": {"type": "str", "description": "The name of the library"}, "date": {"type": "str", "description": "The date for which to retrieve instruction sessions"}}, "required": ["library_name"], "responses": {"sessions": {"type": "str", "description": "The list of library instruction sessions scheduled"}}}
{"api_name": "getAccessibleLibraryTechnology", "api_description": "Retrieve information about accessible library technologies", "field": "Library Science/Library Technology Accessibility", "parameters": {"location": {"type": "str", "description": "The location of the library (e.g., city, state)"}, "technology_type": {"type": "str", "description": "The type of accessible technology required (e.g., screen reader, braille display, adaptive software)"}, "age_group": {"type": "str", "description": "The target age group for the accessible technology (e.g., children, adults, seniors)"}}, "required": ["location", "technology_type"], "responses": {"technology_details": {"type": "str", "description": "A detailed description of the accessible technology and its features"}, "location_address": {"type": "str", "description": "The address of the library providing the accessible technology"}, "contact_email": {"type": "str", "description": "The contact email of the library"}}}
{"api_name": "getLibraryTechnologyPlan", "api_description": "Retrieve library technology planning information", "field": "Library Science/Library Technology Planning", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which you want to get the technology planning"}, "budget": {"type": "float", "description": "The budget allocated for library technology planning"}, "timeline": {"type": "str", "description": "The timeline for technology implementation (e.g., 1 year, 3 years, 5 years)"}}, "required": ["library_name", "budget"], "responses": {"plan": {"type": "str", "description": "The technology plan for the specified library"}, "implementation_timeline": {"type": "str", "description": "The timeline for technology implementation"}}}
{"api_name": "assessTechnology", "api_description": "Assess the technology needs and capabilities of a library", "field": "Library Science/Library Technology Assessment", "parameters": {"library_name": {"type": "str", "description": "The name of the library being assessed"}, "location": {"type": "str", "description": "The location of the library (e.g., city, state, country)"}, "staff_count": {"type": "int", "description": "The number of staff members employed in the library"}, "annual_budget": {"type": "float", "description": "The annual budget allocated to the library"}}, "required": ["library_name", "location"], "responses": {"assessment_results": {"type": "str", "description": "The assessment results describing the technology needs and capabilities of the library"}}}
{"api_name": "getLibraryTechnologyFramework", "api_description": "Retrieve the technology framework for effective library technology governance", "field": "Library Science/Library Technology Governance", "parameters": {}, "required": [], "responses": {"framework": {"type": "str", "description": "The technology framework for effective library technology governance"}}}
{"api_name": "requestLibraryTechnologyConsultation", "api_description": "Request a consultation service for library technology governance", "field": "Library Science/Library Technology Governance", "parameters": {"name": {"type": "str", "description": "Your name"}, "email": {"type": "str", "description": "Your email address"}, "question": {"type": "str", "description": "Your question or topic of consultation"}}, "required": ["name", "email", "question"], "responses": {"consultation_id": {"type": "int", "description": "The ID of the requested consultation"}}}
{"api_name": "downloadLibraryReports", "api_description": "Download library reports", "field": "Library Science/Library Technology Governance", "parameters": {"year": {"type": "int", "description": "The year of the report (e.g., 2021, 2022)"}, "type": {"type": "str", "description": "The type of the report (e.g., financial, usage, demographic)"}}, "required": ["year", "type"], "responses": {"file_url": {"type": "str", "description": "The URL to download the library report file"}}}
{"api_name": "issueBook", "api_description": "Issue a book to a user in the library system", "field": "Library Science/Library System Administration", "parameters": {"user_id": {"type": "str", "description": "The ID of the user to whom the book will be issued"}, "book_id": {"type": "str", "description": "The ID of the book to be issued"}}, "required": ["user_id", "book_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the book was successfully issued to the user"}}}
{"api_name": "addVisitorRecord", "api_description": "Add a new visitor record to the library database", "field": "Library Science/Library Information Privacy", "parameters": {"library_id": {"type": "str", "description": "The unique identifier of the library"}, "visitor_id": {"type": "str", "description": "The unique identifier of the visitor"}, "access_date": {"type": "str", "description": "The date of library access for the visitor (e.g., 2022-01-01)"}, "access_time": {"type": "str", "description": "The time of library access for the visitor (e.g., 09:30 AM)"}, "purpose": {"type": "str", "description": "The purpose of the visitor's library visit (e.g., research, borrowing, study)"}}, "required": ["library_id", "visitor_id", "access_date", "access_time", "purpose"], "responses": {"success": {"type": "bool", "description": "Indicates whether the visitor record was successfully added"}}}
{"api_name": "getLibraryDataPrivacyPolicy", "api_description": "Retrieve the privacy policy for library data", "field": "Library Science/Library Data Privacy", "parameters": {}, "required": [], "responses": {"policy_text": {"type": "str", "description": "The privacy policy text regarding library data"}}}
{"api_name": "checkDataPrivacy", "api_description": "Check the data privacy settings of a library system", "field": "Library Science/Library Data Privacy", "parameters": {"system_id": {"type": "str", "description": "The ID of the library system to check for data privacy settings"}, "user_role": {"type": "str", "description": "The role of the user accessing the system (e.g., librarian, patron)"}, "time_of_check": {"type": "str", "description": "Specify the time of the check (e.g., morning, afternoon, evening)"}}, "required": ["system_id", "user_role"], "responses": {"privacy_status": {"type": "str", "description": "The current privacy status of the library system"}, "access_level": {"type": "str", "description": "The access level provided to the user based on their role"}, "system_info": {"type": "str", "description": "Additional information about the library system"}}}
{"api_name": "getDigitalSecurityInfo", "api_description": "Retrieve digital security information for libraries", "field": "Library Science/Library Digital Security", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which you want to get digital security information"}, "platform": {"type": "str", "description": "The digital platform for which you want to get security information (e.g., library website, online catalog)"}, "access_type": {"type": "str", "description": "Specify the access type for security information (e.g., physical access, network access)"}}, "required": ["library_name", "platform"], "responses": {"security_info": {"type": "str", "description": "The digital security information for the specified library and platform"}}}
{"api_name": "decryptResource", "api_description": "Decrypt an encrypted digital resource or document in a library", "field": "Library Science/Library Digital Security", "parameters": {"encrypted_resource_url": {"type": "str", "description": "The URL or path to the encrypted digital resource"}, "decryption_key": {"type": "str", "description": "The decryption key for accessing the resource"}}, "required": ["encrypted_resource_url", "decryption_key"], "responses": {"decrypted_resource_url": {"type": "str", "description": "The URL or path to the decrypted digital resource"}}}
{"api_name": "changePassword", "api_description": "Change password for a user account in a library website", "field": "Library Science/Library Web Security", "parameters": {"username": {"type": "str", "description": "The username of the account for which the password is being changed"}, "current_password": {"type": "str", "description": "The current password of the user"}, "new_password": {"type": "str", "description": "The new password to set for the user account"}}, "required": ["username", "current_password", "new_password"], "responses": {"success": {"type": "bool", "description": "Indicates if the password change was successful"}}}
{"api_name": "logActivity", "api_description": "Log user activity on a library website", "field": "Library Science/Library Web Security", "parameters": {"username": {"type": "str", "description": "The username of the user performing the activity"}, "activity": {"type": "str", "description": "The description of the activity being performed"}}, "required": ["username", "activity"], "responses": {"success": {"type": "bool", "description": "Indicates if the activity logging was successful"}}}
{"api_name": "checkLibraryWebSecurity", "api_description": "Check the security of a library's website", "field": "Library Science/Library Web Security", "parameters": {"website_url": {"type": "str", "description": "The URL of the library's website (e.g., www.library.org)"}, "scan_type": {"type": "str", "description": "Specify the type of security scan (e.g., vulnerability scan, penetration test)"}, "username": {"type": "str", "description": "Username for authentication if required"}, "password": {"type": "str", "description": "Password for authentication if required"}}, "required": ["website_url", "scan_type"], "responses": {"security_score": {"type": "float", "description": "The security score of the library's website"}, "vulnerabilities": {"type": "str", "description": "Information about any vulnerabilities found"}}}
{"api_name": "generateAccessTokens", "api_description": "Generate access tokens for authorized users to access library resources", "field": "Library Science/Library Web Security", "parameters": {"username": {"type": "str", "description": "The username of the user for whom the access token is being generated"}, "expiration_time": {"type": "str", "description": "The duration until the access token is valid (e.g., 1 hour, 24 hours)"}, "scope": {"type": "str", "description": "The scope of the access token (e.g., read-only, read-write)"}}, "required": ["username", "expiration_time"], "responses": {"access_token": {"type": "str", "description": "The generated access token"}}}
{"api_name": "validateAccessPermissions", "api_description": "Validate the access permissions for a user trying to access specific library resources", "field": "Library Science/Library Web Security", "parameters": {"username": {"type": "str", "description": "The username of the user trying to access specific library resources"}, "resource_id": {"type": "str", "description": "The ID of the resource the user is trying to access"}}, "required": ["username", "resource_id"], "responses": {"has_access": {"type": "bool", "description": "Indicates whether the user has access to the specified resource or not"}}}
{"api_name": "enforcePasswordPolicies", "api_description": "Enforce password policies for users when setting or changing passwords in library systems", "field": "Library Science/Library Web Security", "parameters": {"password": {"type": "str", "description": "The password being set or changed by the user"}}, "required": ["password"], "responses": {"password_meets_policy": {"type": "bool", "description": "Indicates whether the password meets the required policies or not"}}}
{"api_name": "checkUserPermissions", "api_description": "Check the access permissions of a user account on the library website", "field": "Library Science/Library Web Security", "parameters": {"username": {"type": "str", "description": "The username of the user"}}, "required": ["username"], "responses": {"permissions": {"type": "str", "description": "The access permissions assigned to the user"}}}
{"api_name": "blockUser", "api_description": "Block a user from accessing the library network", "field": "Library Science/Library Network Security", "parameters": {"username": {"type": "str", "description": "The username of the user to be blocked"}}, "required": ["username"], "responses": {"blocked": {"type": "bool", "description": "True if the user was successfully blocked, False otherwise"}}}
{"api_name": "addUserToBlacklist", "api_description": "Add a user to the blacklist in the library network", "field": "Library Science/Library Network Security", "parameters": {"username": {"type": "str", "description": "The username of the user to be added to the blacklist"}}, "required": ["username"], "responses": {"success": {"type": "bool", "description": "True if the user was successfully added to the blacklist, False otherwise"}}}
{"api_name": "getLibraryDataQuality", "api_description": "Retrieve the data quality of a library's collection", "field": "Library Science/Library Data Governance", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which you want to get the data quality"}}, "required": ["library_name"], "responses": {"data_quality": {"type": "str", "description": "The data quality rating of the library's collection (e.g., high, medium, low)"}}}
{"api_name": "getLibraryDataInventory", "api_description": "Retrieve the inventory of a library's collection", "field": "Library Science/Library Data Governance", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which you want to get the inventory"}}, "required": ["library_name"], "responses": {"inventory": {"type": "str", "description": "The inventory status of the library's collection (e.g., complete, in progress, not started)"}}}
{"api_name": "getDigitalGovernancePolicies", "api_description": "Retrieve the digital governance policies for libraries", "field": "Library Science/Library Digital Governance", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which you want to retrieve digital governance policies"}}, "required": ["library_name"], "responses": {"policies": {"type": "str", "description": "The digital governance policies for the specified library"}}}
{"api_name": "getMetadataStandards", "api_description": "Retrieve the metadata standards used in library digital governance", "field": "Library Science/Library Digital Governance", "parameters": {}, "required": [], "responses": {"standards": {"type": "str", "description": "The metadata standards used in library digital governance"}}}
{"api_name": "getDigitalPreservationStrategies", "api_description": "Retrieve the digital preservation strategies for libraries", "field": "Library Science/Library Digital Governance", "parameters": {}, "required": [], "responses": {"strategies": {"type": "str", "description": "The digital preservation strategies implemented by libraries"}}}
{"api_name": "getLibraryMetadata", "api_description": "Retrieve metadata information of a library's digital resources", "field": "Library Science/Library Digital Governance", "parameters": {"library_id": {"type": "str", "description": "The ID of the library for which you want to retrieve metadata"}, "metadata_type": {"type": "str", "description": "The type of metadata to retrieve (e.g., author, title, subject)"}, "filter_criteria": {"type": "str", "description": "Additional filter criteria for the metadata query (e.g., publication year, genre)"}}, "required": ["library_id", "metadata_type"], "responses": {"metadata": {"type": "str", "description": "The requested metadata associated with the library's digital resources"}}}
{"api_name": "getDigitalAccessPolicy", "api_description": "Retrieve the digital access policy of a library", "field": "Library Science/Library Digital Governance", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which to retrieve the digital access policy"}}, "required": ["library_name"], "responses": {"digital_access_policy": {"type": "str", "description": "The digital access policy of the specified library"}}}
{"api_name": "getDigitalCollectionSize", "api_description": "Retrieve the size of a library's digital collection", "field": "Library Science/Library Digital Governance", "parameters": {"library_name": {"type": "str", "description": "The name of the library for which to retrieve the digital collection size"}}, "required": ["library_name"], "responses": {"digital_collection_size": {"type": "str", "description": "The size of the library's digital collection"}}}
{"api_name": "getLibraryNetworkGovernance", "api_description": "Retrieve information about library network governance", "field": "Library Science/Library Network Governance", "parameters": {}, "required": [], "responses": {"governance_structure": {"type": "str", "description": "The governance structure of the library network"}, "policies": {"type": "str", "description": "The policies governing the library network"}, "members": {"type": "str", "description": "The members of the library network"}, "decision_making_process": {"type": "str", "description": "The process of decision making in the library network"}}}
{"api_name": "getNetworkPolicy", "api_description": "Retrieve network policy information for a library", "field": "Library Science/Library Network Policy", "parameters": {"library_id": {"type": "str", "description": "The unique identifier for the library"}, "policy_type": {"type": "str", "description": "Specify the type of network policy to retrieve (e.g., internet access, Wi-Fi usage)"}, "effective_date": {"type": "str", "description": "Specify the effective date of the network policy (e.g., YYYY-MM-DD)"}}, "required": ["library_id", "policy_type"], "responses": {"policy_description": {"type": "str", "description": "The description of the network policy"}, "policy_effective_date": {"type": "str", "description": "The effective date of the network policy"}}}
{"api_name": "getBibliographicInfo", "api_description": "Retrieve bibliographic information for a given book", "field": "Library Science/Library Bibliographic Resources", "parameters": {"isbn": {"type": "str", "description": "The ISBN number of the book"}, "title": {"type": "str", "description": "The title of the book"}, "author": {"type": "str", "description": "The author of the book"}, "publisher": {"type": "str", "description": "The publisher of the book"}}, "required": ["isbn"], "responses": {"title": {"type": "str", "description": "The title of the book"}, "author": {"type": "str", "description": "The author of the book"}, "publisher": {"type": "str", "description": "The publisher of the book"}, "year": {"type": "int", "description": "The year of publication"}, "genre": {"type": "str", "description": "The genre of the book"}}}
{"api_name": "getPreferredTerm", "api_description": "Retrieve the preferred (or standard) term for a given concept in a library controlled vocabulary", "field": "Library Science/Library Controlled Vocabularies", "parameters": {"concept": {"type": "str", "description": "The concept for which you want to get the preferred term"}, "language": {"type": "str", "description": "The language of the controlled vocabulary"}}, "required": ["concept"], "responses": {"preferred_term": {"type": "str", "description": "The preferred term for the given concept"}}}
{"api_name": "authorizeSubjectHeading", "api_description": "Authorize a subject heading in the library authority control system", "field": "Library Science/Library Authority Control", "parameters": {"heading": {"type": "str", "description": "The subject heading to be authorized"}, "database": {"type": "str", "description": "The database in which the authorization will be performed (e.g., Library of Congress, National Library of Medicine)"}}, "required": ["heading"], "responses": {"authorized_heading": {"type": "str", "description": "The authorized subject heading"}}}
{"api_name": "getLibraryDocument", "api_description": "Retrieve information of a specific library document", "field": "Library Science/Library Document Model", "parameters": {"document_id": {"type": "str", "description": "The ID of the library document to retrieve"}}, "required": ["document_id"], "responses": {"title": {"type": "str", "description": "The title of the library document"}, "author": {"type": "str", "description": "The author of the library document"}, "year": {"type": "int", "description": "The year when the library document was published"}}}
{"api_name": "updateDocument", "api_description": "Update an existing document in the library", "field": "Library Science/Library Knowledge Representation", "parameters": {"document_id": {"type": "str", "description": "The unique identifier of the document to be updated"}, "title": {"type": "str", "description": "The updated title of the document"}, "author": {"type": "str", "description": "The updated author of the document"}, "subject": {"type": "str", "description": "The updated subject of the document"}}, "required": ["document_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the update was successful or not"}}}
{"api_name": "getNetworkRepresentation", "api_description": "Retrieve the network representation of a library", "field": "Library Science/Library Network Representation", "parameters": {"library_id": {"type": "str", "description": "The ID of the library for which you want to get the network representation"}, "format": {"type": "str", "description": "The desired format of the network representation (e.g., GraphML, GEXF, JSON)"}, "threshold": {"type": "float", "description": "Specify a threshold value to include only connections with a strength above this threshold"}}, "required": ["library_id"], "responses": {"network": {"type": "str", "description": "The network representation of the library in the desired format"}}}
{"api_name": "getLibraryNetwork", "api_description": "Retrieve the network representation of a library system", "field": "Library Science/Library Network Representation", "parameters": {"library_name": {"type": "str", "description": "The name of the library system"}, "network_type": {"type": "str", "description": "The type of network representation desired (e.g., social network, co-authorship network, citation network)"}}, "required": ["library_name"], "responses": {"network": {"type": "str", "description": "The network representation of the library system in the specified format"}}}
{"api_name": "getSurgeryInformation", "api_description": "Retrieve information about veterinary surgeries", "field": "Veterinary Science/Veterinary Surgery", "parameters": {"procedure_type": {"type": "str", "description": "The type of veterinary surgery (e.g., spay/neuter, orthopedic, dental)"}, "animal_type": {"type": "str", "description": "The type of animal for which the surgery is intended (e.g., dog, cat, horse)"}, "location": {"type": "str", "description": "The location where the surgery is to be performed (e.g., veterinary clinic, animal hospital)"}}, "required": ["procedure_type", "animal_type"], "responses": {"surgery_information": {"type": "str", "description": "Detailed information about the requested veterinary surgery"}}}
{"api_name": "updateSurgeryStatus", "api_description": "Update the status of a veterinary surgery", "field": "Veterinary Science/Veterinary Surgery", "parameters": {"surgery_id": {"type": "int", "description": "The ID of the surgery to update the status"}, "status": {"type": "str", "description": "The new status of the surgery (e.g., scheduled, in progress, completed)"}, "notes": {"type": "str", "description": "Additional notes or remarks about the surgery status"}}, "required": ["surgery_id", "status"], "responses": {"success_message": {"type": "str", "description": "A message confirming the successful update of the surgery status"}}}
{"api_name": "cancelSurgery", "api_description": "Cancel a scheduled veterinary surgery", "field": "Veterinary Science/Veterinary Surgery", "parameters": {"surgery_id": {"type": "int", "description": "The ID of the surgery to cancel"}}, "required": ["surgery_id"], "responses": {"cancellation_message": {"type": "str", "description": "A message confirming the cancellation of the surgery"}}}
{"api_name": "getSurgeryCost", "api_description": "Retrieve the cost of a veterinary surgery", "field": "Veterinary Science/Veterinary Surgery", "parameters": {"surgery_id": {"type": "int", "description": "The ID of the veterinary surgery for which you want to retrieve the cost"}}, "required": ["surgery_id"], "responses": {"cost": {"type": "float", "description": "The cost of the veterinary surgery in the local currency"}}}
{"api_name": "getSurgeryProcedure", "api_description": "Retrieve information about a specific veterinary surgery procedure", "field": "Veterinary Science/Veterinary Surgery", "parameters": {"procedure_name": {"type": "str", "description": "The name of the veterinary surgery procedure (e.g., spaying, neutering, dental cleaning)"}}, "required": ["procedure_name"], "responses": {"procedure_description": {"type": "str", "description": "Description of the veterinary surgery procedure"}, "equipment_needed": {"type": "str", "description": "The equipment required for the surgery procedure"}, "postoperative_care_instructions": {"type": "str", "description": "Instructions for postoperative care"}}}
{"api_name": "getAnesthesiaInfo", "api_description": "Retrieve information about veterinary anesthesia", "field": "Veterinary Science/Veterinary Anesthesiology", "parameters": {"animal_type": {"type": "str", "description": "The type of animal for which you want anesthesia information (e.g., dog, cat, horse)"}, "procedure": {"type": "str", "description": "The surgical procedure for which you want anesthesia information (e.g., spay, neuter, dental cleaning)"}, "patient_condition": {"type": "str", "description": "The patient's current medical condition (e.g., healthy, obese, geriatric)"}}, "required": ["animal_type", "procedure"], "responses": {"anesthesia_protocol": {"type": "str", "description": "The recommended anesthesia protocol for the specified animal and procedure"}, "risks": {"type": "str", "description": "Common risks associated with anesthesia for the specified animal and procedure"}}}
{"api_name": "monitorAnesthesia", "api_description": "Monitor the anesthesia of a veterinary patient", "field": "Veterinary Science/Veterinary Anesthesiology", "parameters": {"patient_id": {"type": "str", "description": "The ID of the veterinary patient being monitored"}, "heart_rate": {"type": "int", "description": "The heart rate of the patient during anesthesia monitoring"}, "blood_pressure": {"type": "str", "description": "The blood pressure of the patient during anesthesia monitoring"}, "respiratory_rate": {"type": "int", "description": "The respiratory rate of the patient during anesthesia monitoring"}, "temperature": {"type": "float", "description": "The temperature of the patient during anesthesia monitoring"}, "anesthetic_agent": {"type": "str", "description": "The anesthetic agent used for the patient (e.g., isoflurane, sevoflurane)"}}, "required": ["patient_id", "heart_rate", "respiratory_rate"], "responses": {"patient_id": {"type": "str", "description": "The ID of the veterinary patient"}, "heart_rate": {"type": "int", "description": "The heart rate of the patient"}, "blood_pressure": {"type": "str", "description": "The blood pressure of the patient"}, "respiratory_rate": {"type": "int", "description": "The respiratory rate of the patient"}, "temperature": {"type": "float", "description": "The temperature of the patient"}, "anesthetic_agent": {"type": "str", "description": "The anesthetic agent used for the patient"}}}
{"api_name": "getRadiograph", "api_description": "Retrieve radiograph image", "field": "Veterinary Science/Veterinary Radiology", "parameters": {"animal_type": {"type": "str", "description": "The type of animal for which you want to get the radiograph (e.g., cat, dog, horse)"}, "view": {"type": "str", "description": "The desired view of the radiograph (e.g., lateral, ventrodorsal, oblique)"}, "region": {"type": "str", "description": "The specific region of the animal's body for the radiograph (e.g., thorax, abdomen, limbs)"}, "patient_age": {"type": "float", "description": "The age of the animal patient in years (e.g., 2.5, 0.9, 7.2)"}}, "required": ["animal_type", "view"], "responses": {"radiograph_image": {"type": "str", "description": "The URL or path of the radiograph image"}, "diagnosis": {"type": "str", "description": "The diagnosis based on the radiograph"}}}
{"api_name": "uploadRadiologyImage", "api_description": "Upload a radiology image for a specific animal", "field": "Veterinary Science/Veterinary Radiology", "parameters": {"animal_id": {"type": "str", "description": "The ID of the animal for which you are uploading the image"}, "image_file": {"type": "str", "description": "The path or URL of the radiology image file"}, "description": {"type": "str", "description": "Additional description or notes about the image"}}, "required": ["animal_id", "image_file"], "responses": {"success": {"type": "bool", "description": "Indicates if the image upload was successful"}}}
{"api_name": "getECGSample", "api_description": "Retrieve an ECG sample of a veterinary patient", "field": "Veterinary Science/Veterinary Cardiology", "parameters": {"patient_id": {"type": "str", "description": "The ID of the veterinary patient for which you want to retrieve the ECG sample"}}, "required": ["patient_id"], "responses": {"ecg_sample": {"type": "str", "description": "The ECG sample of the veterinary patient in a specific format"}}}
{"api_name": "getNeurologyDisease", "api_description": "Retrieve information about neurological diseases in animals", "field": "Veterinary Science/Veterinary Neurology", "parameters": {"animal_type": {"type": "str", "description": "The type of animal (e.g., dog, cat, horse)"}, "disease_type": {"type": "str", "description": "The type of neurological disease (e.g., epilepsy, spinal cord injury, brain tumor)"}}, "required": ["animal_type", "disease_type"], "responses": {"disease_description": {"type": "str", "description": "A description of the neurological disease"}, "symptoms": {"type": "str", "description": "Common symptoms of the neurological disease"}, "treatment_options": {"type": "str", "description": "Recommended treatment options for the neurological disease"}}}
{"api_name": "getOncologyDiagnosis", "api_description": "Retrieve the diagnosis of oncology in animals", "field": "Veterinary Science/Veterinary Oncology", "parameters": {"animal_type": {"type": "str", "description": "The type of animal to diagnose for oncology (e.g., cat, dog, horse)"}, "age": {"type": "int", "description": "The age of the animal in years"}, "symptoms": {"type": "str", "description": "The symptoms observed in the animal"}}, "required": ["animal_type", "symptoms"], "responses": {"diagnosis": {"type": "str", "description": "The diagnosis result of oncology in the animal"}, "treatment_options": {"type": "str", "description": "The available treatment options for the diagnosed oncology"}}}
{"api_name": "getHormoneLevels", "api_description": "Retrieve hormone levels of an animal", "field": "Veterinary Science/Veterinary Endocrinology", "parameters": {"animal_id": {"type": "str", "description": "The unique ID of the animal for which you want to get hormone levels"}, "hormone_type": {"type": "str", "description": "The specific type of hormone you want to retrieve (e.g., cortisol, insulin, thyroid)"}, "time_interval": {"type": "str", "description": "The time interval for hormone level measurement (e.g., daily, weekly, monthly)"}}, "required": ["animal_id"], "responses": {"hormone_level": {"type": "float", "description": "The level of the specified hormone in the animal"}, "unit": {"type": "str", "description": "The unit in which the hormone level is provided"}}}
{"api_name": "getPetBloodSugarLevel", "api_description": "Retrieve the blood sugar level of a pet", "field": "Veterinary Science/Veterinary Endocrinology", "parameters": {"pet_name": {"type": "str", "description": "The name of the pet (e.g., Rex, Bella, Max) in order to retrieve its blood sugar level"}, "time": {"type": "str", "description": "Specify a time at which the blood sugar level is to be checked (e.g., morning, afternoon, night)"}}, "required": ["pet_name"], "responses": {"blood_sugar_level": {"type": "float", "description": "The blood sugar level of the pet at the specified time"}}}
{"api_name": "getAnimalDentalHealth", "api_description": "Retrieve dental health information for a specific animal", "field": "Veterinary Science/Veterinary Dentistry", "parameters": {"animal_species": {"type": "str", "description": "The species of the animal to get dental health information (e.g., dog, cat, horse)"}, "age": {"type": "int", "description": "The age of the animal in years"}, "cleaning_needed": {"type": "bool", "description": "Specify if dental cleaning is needed for the animal"}, "problems": {"type": "str", "description": "Specify any known dental problems in the animal (e.g., tooth decay, gum disease)"}, "owner_info": {"type": "str", "description": "Information about the animal's owner (e.g., name, contact details)"}}, "required": ["animal_species", "age", "cleaning_needed"], "responses": {"dental_condition": {"type": "str", "description": "The dental condition of the animal (e.g., healthy, mild/moderate/severe dental problems)"}, "cleaning_schedule": {"type": "str", "description": "Recommended schedule for dental cleanings"}, "recommendations": {"type": "str", "description": "Recommendations for maintaining good dental health in the animal"}}}
{"api_name": "getInfectiousDiseaseInfo", "api_description": "Retrieve information about veterinary infectious diseases", "field": "Veterinary Science/Veterinary Infectious Diseases", "parameters": {"disease_name": {"type": "str", "description": "The name of the infectious disease (e.g., Rabies, Feline Panleukopenia, Avian Influenza)"}, "species": {"type": "str", "description": "The species affected by the disease (e.g., Dogs, Cats, Poultry)"}}, "required": ["disease_name"], "responses": {"symptoms": {"type": "str", "description": "The common symptoms of the infectious disease"}, "transmission": {"type": "str", "description": "Modes of transmission of the disease"}, "prevention": {"type": "str", "description": "Preventive measures for the disease"}}}
{"api_name": "calculatePrevalenceRate", "api_description": "Calculate the prevalence rate of a specific disease in a population", "field": "Veterinary Science/Veterinary Epidemiology", "parameters": {"disease": {"type": "str", "description": "The specific disease for which you want to calculate the prevalence rate (e.g., rabies, foot-and-mouth disease)"}, "total_population": {"type": "int", "description": "The total population size"}, "infected_population": {"type": "int", "description": "The number of individuals infected with the disease"}}, "required": ["disease", "total_population", "infected_population"], "responses": {"prevalence_rate": {"type": "float", "description": "The prevalence rate of the disease in the population"}}}
{"api_name": "getDiseaseOutbreaks", "api_description": "Retrieve information about disease outbreaks in animals", "field": "Veterinary Science/Veterinary Public Health", "parameters": {"species": {"type": "str", "description": "The animal species affected by the disease outbreak (e.g., dogs, cats, cows)"}, "region": {"type": "str", "description": "The region where the disease outbreak occurred (e.g., Asia, Europe, North America)"}, "time_frame": {"type": "str", "description": "Specify a time frame for the disease outbreak (e.g., last month, past year)"}}, "required": ["species", "region"], "responses": {"disease": {"type": "str", "description": "The name of the disease causing the outbreak"}, "cases": {"type": "int", "description": "The number of cases reported for the disease outbreak"}, "affected_species": {"type": "str", "description": "The animal species affected by the disease outbreak"}}}
{"api_name": "getBehaviorAdvice", "api_description": "Retrieve behavior advice for a specific veterinary issue", "field": "Veterinary Science/Veterinary Behavior", "parameters": {"issue": {"type": "str", "description": "The specific veterinary issue for which you need behavior advice (e.g., separation anxiety, aggression, fear)"}}, "required": ["issue"], "responses": {"advice": {"type": "str", "description": "Behavior advice for the given veterinary issue"}}}
{"api_name": "getZoonoses", "api_description": "Retrieve information about zoonotic diseases", "field": "Veterinary Science/Veterinary Zoonoses", "parameters": {"animal_type": {"type": "str", "description": "The type of animal associated with the zoonotic disease (e.g., dogs, cats, birds)"}, "disease_type": {"type": "str", "description": "The type of zoonotic disease (e.g., bacterial, viral, parasitic)"}}, "required": ["animal_type"], "responses": {"disease_name": {"type": "str", "description": "The name of the zoonotic disease"}, "symptoms": {"type": "str", "description": "The symptoms associated with the zoonotic disease"}}}
{"api_name": "getImmunizationStatus", "api_description": "Retrieve immunization status of an animal", "field": "Veterinary Science/Veterinary Immunology", "parameters": {"animal_id": {"type": "str", "description": "The ID of the animal"}, "species": {"type": "str", "description": "The species of the animal (e.g., dog, cat, horse)"}, "vaccine_type": {"type": "str", "description": "The type of vaccine to check (e.g., rabies, distemper, parvovirus)"}, "vaccine_year": {"type": "int", "description": "The year of vaccination (e.g., 2019, 2020, 2021)"}}, "required": ["animal_id", "vaccine_type"], "responses": {"immunization_status": {"type": "bool", "description": "The immunization status of the animal (true if vaccinated, false if not)"}, "vaccine_date": {"type": "str", "description": "The date of vaccination in the format DD-MM-YYYY"}, "vaccine_location": {"type": "str", "description": "The location where the vaccination took place"}}}
{"api_name": "getImmunizationSchedule", "api_description": "Retrieve the immunization schedule for a specific animal species", "field": "Veterinary Science/Veterinary Immunology", "parameters": {"species": {"type": "str", "description": "The animal species for which you want the immunization schedule (e.g., dog, cat, horse)"}, "age": {"type": "int", "description": "The age of the animal in months", "examples": "12, 24, 36"}}, "required": ["species", "age"], "responses": {"schedule": {"type": "str", "description": "The recommended immunization schedule for the specified animal species"}}}
{"api_name": "getAntibodyTiter", "api_description": "Retrieve the antibody titer for a specific animal", "field": "Veterinary Science/Veterinary Immunology", "parameters": {"animal_id": {"type": "str", "description": "The unique ID of the animal"}}, "required": ["animal_id"], "responses": {"titer": {"type": "float", "description": "The antibody titer of the specified animal"}}}
{"api_name": "estimateVaccineEfficacy", "api_description": "Estimate the efficacy of a vaccine for a specific animal species", "field": "Veterinary Science/Veterinary Immunology", "parameters": {"animal_species": {"type": "str", "description": "The species of the animal for which you want to estimate vaccine efficacy (e.g., cat, dog, horse)"}, "vaccine_name": {"type": "str", "description": "The name of the vaccine"}, "vaccine_dosage": {"type": "float", "description": "The dosage of the vaccine administered to the animal"}}, "required": ["animal_species", "vaccine_name", "vaccine_dosage"], "responses": {"efficacy": {"type": "float", "description": "The estimated efficacy of the vaccine for the specified animal species"}}}
{"api_name": "getHematologyResults", "api_description": "Retrieve hematological test results for a veterinary patient", "field": "Veterinary Science/Veterinary Hematology", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the veterinary patient"}, "date_range": {"type": "str", "description": "Specify a date range for the test results (e.g., last week, last month)"}, "species": {"type": "str", "description": "The species of the veterinary patient (e.g., dog, cat, horse)"}}, "required": ["patient_id"], "responses": {"red_blood_cells": {"type": "float", "description": "The count of red blood cells in the patient's blood"}, "white_blood_cells": {"type": "float", "description": "The count of white blood cells in the patient's blood"}, "hemoglobin": {"type": "float", "description": "The concentration of hemoglobin in the patient's blood"}, "platelets": {"type": "float", "description": "The count of platelets in the patient's blood"}}}
{"api_name": "getHematologyParameters", "api_description": "Retrieve available parameters for veterinary hematology analysis", "field": "Veterinary Science/Veterinary Hematology", "parameters": {}, "required": [], "responses": {"parameters": {"type": "str", "description": "The available parameters for veterinary hematology analysis (e.g., red blood cells, white blood cells, platelets)"}}}
{"api_name": "getUrineVolume", "api_description": "Retrieve the volume of urine produced by an animal", "field": "Veterinary Science/Veterinary Urology", "parameters": {"animal_type": {"type": "str", "description": "Specify the type of animal (e.g., dog, cat, horse)"}, "weight": {"type": "float", "description": "The weight of the animal in kilograms"}}, "required": ["animal_type", "weight"], "responses": {"urine_volume": {"type": "float", "description": "The volume of urine produced by the animal in milliliters"}}}
{"api_name": "getBreedingInformation", "api_description": "Retrieve information about animal breeding", "field": "Veterinary Science/Veterinary Reproductive Medicine", "parameters": {"animal_species": {"type": "str", "description": "The species of the animal for which you want to get breeding information (e.g., cow, horse, dog)"}, "gender": {"type": "str", "description": "The gender of the animal (e.g., male, female)"}, "age": {"type": "int", "description": "The age of the animal in months"}, "breed": {"type": "str", "description": "The breed of the animal"}}, "required": ["animal_species", "gender"], "responses": {"reproductive_stage": {"type": "str", "description": "The reproductive stage of the animal (e.g., estrus, gestation)"}, "breeding_recommendations": {"type": "str", "description": "Recommendations for animal breeding"}}}
{"api_name": "getArtificialInseminationSchedule", "api_description": "Retrieve the schedule for artificial insemination in animals", "field": "Veterinary Science/Veterinary Reproductive Medicine", "parameters": {"animal_species": {"type": "str", "description": "The species of the animal for which you want to get the artificial insemination schedule (e.g., cow, horse, dog)"}, "gender": {"type": "str", "description": "The gender of the animal (e.g., male, female)"}, "age": {"type": "int", "description": "The age of the animal in months"}, "breed": {"type": "str", "description": "The breed of the animal"}}, "required": ["animal_species", "gender"], "responses": {"insemination_dates": {"type": "str", "description": "The dates on which artificial insemination should be performed"}, "insemination_protocol": {"type": "str", "description": "The protocol to be followed for artificial insemination"}}}
{"api_name": "getEmbryoTransferProtocol", "api_description": "Retrieve the protocol for embryo transfer in animals", "field": "Veterinary Science/Veterinary Reproductive Medicine", "parameters": {"animal_species": {"type": "str", "description": "The species of the animal for which you want to get the embryo transfer protocol (e.g., cow, horse, dog)"}, "gender": {"type": "str", "description": "The gender of the animal (e.g., male, female)"}, "age": {"type": "int", "description": "The age of the animal in months"}, "breed": {"type": "str", "description": "The breed of the animal"}}, "required": ["animal_species", "gender"], "responses": {"embryo_collection_days": {"type": "str", "description": "The days on which embryo collection should be performed"}, "embryo_transfer_protocol": {"type": "str", "description": "The protocol to be followed for embryo transfer"}}}
{"api_name": "calculateTriagePriority", "api_description": "Calculate the triage priority level for an animal in need of emergency care", "field": "Veterinary Science/Veterinary Emergency and Critical Care", "parameters": {"animal_type": {"type": "str", "description": "The type of animal in need of care (e.g., dog, cat, bird)"}, "condition": {"type": "str", "description": "The condition or symptoms of the animal in need of care (e.g., difficulty breathing, severe bleeding)"}, "urgency_level": {"type": "int", "description": "The level of urgency for the animal's condition on a scale of 1 to 10 (10 being the highest urgency)"}}, "required": ["animal_type", "condition", "urgency_level"], "responses": {"triage_priority": {"type": "str", "description": "The calculated triage priority for the animal in need of care"}}}
{"api_name": "findEmergencyClinic", "api_description": "Find a veterinary emergency clinic near the specified location", "field": "Veterinary Science/Veterinary Emergency and Critical Care", "parameters": {"location": {"type": "str", "description": "The location for which you want to find a veterinary emergency clinic (e.g., city name, zip code)"}, "distance": {"type": "float", "description": "The maximum distance from the specified location to the emergency clinic in kilometers (e.g., 10.5)"}, "type_of_pet": {"type": "str", "description": "The type of pet for which you require emergency care (e.g., dog, cat, bird)"}, "time_of_day": {"type": "str", "description": "Specify a time of day for emergency care (e.g., morning, afternoon, night)"}}, "required": ["location", "type_of_pet"], "responses": {"clinic_name": {"type": "str", "description": "The name of the veterinary emergency clinic"}, "clinic_address": {"type": "str", "description": "The address of the veterinary emergency clinic"}, "clinic_phone": {"type": "str", "description": "The contact number of the veterinary emergency clinic"}, "clinic_distance": {"type": "float", "description": "The distance from the specified location to the clinic in kilometers"}}}
{"api_name": "performCPR", "api_description": "Perform cardiopulmonary resuscitation (CPR) on an animal in an emergency situation", "field": "Veterinary Science/Veterinary Emergency and Critical Care", "parameters": {"animal": {"type": "str", "description": "The type of animal requiring CPR (e.g., dog, cat, bird, reptile)"}}, "required": ["animal"], "responses": {"outcome": {"type": "str", "description": "The outcome of the CPR procedure (e.g., successful, unsuccessful)"}}}
{"api_name": "getWildlifeInjuries", "api_description": "Retrieve information about wildlife injuries", "field": "Veterinary Science/Veterinary Wildlife Medicine", "parameters": {"species": {"type": "str", "description": "The wildlife species for which you want to get injury information (e.g., lion, elephant, bear)"}, "region": {"type": "str", "description": "The geographical region where the wildlife injury occurred (e.g., Africa, Asia, North America)"}, "injury_type": {"type": "str", "description": "Specify the type of injury (e.g., trauma, disease, poisoning)"}}, "required": ["species", "region"], "responses": {"injury_description": {"type": "str", "description": "The description of the wildlife injury"}, "treatment_options": {"type": "str", "description": "The available treatment options for the wildlife injury"}, "prevention_methods": {"type": "str", "description": "Methods for preventing wildlife injuries"}}}
{"api_name": "getBirdSpecies", "api_description": "Retrieve information about bird species", "field": "Veterinary Science/Veterinary Avian Medicine", "parameters": {"bird_type": {"type": "str", "description": "The type of bird species (e.g., parrot, owl, pigeon)"}}, "required": ["bird_type"], "responses": {"species_info": {"type": "str", "description": "Detailed information about the specified bird species"}, "habitat": {"type": "str", "description": "The natural habitat of the specified bird species"}}}
{"api_name": "getAvianSpecies", "api_description": "Retrieve information about avian species", "field": "Veterinary Science/Veterinary Avian Medicine", "parameters": {"species_name": {"type": "str", "description": "The name of the avian species you want information about (e.g., Parrot, Eagle, Penguin)"}}, "required": ["species_name"], "responses": {"species_info": {"type": "str", "description": "Information about the avian species"}, "habitat": {"type": "str", "description": "The natural habitat of the avian species"}}}
{"api_name": "getSwineVaccinationSchedule", "api_description": "Retrieve the vaccination schedule for swine", "field": "Veterinary Science/Veterinary Swine Medicine", "parameters": {"pig_id": {"type": "int", "description": "The ID of the pig for which you want to get the vaccination schedule"}}, "required": ["pig_id"], "responses": {"vaccination_schedule": {"type": "str", "description": "The vaccination schedule for the swine"}}}
{"api_name": "getEquineWeight", "api_description": "Retrieve the weight of an equine", "field": "Veterinary Science/Veterinary Equine Medicine", "parameters": {"equine_id": {"type": "str", "description": "The identification number of the equine"}, "unit": {"type": "str", "description": "The desired unit for weight (e.g., kilograms, pounds)"}}, "required": ["equine_id"], "responses": {"weight": {"type": "float", "description": "The weight of the equine"}, "unit": {"type": "str", "description": "The unit of weight in which the weight is provided"}}}
{"api_name": "getHorseAge", "api_description": "Calculate a horse's age in human years", "field": "Veterinary Science/Veterinary Equine Medicine", "parameters": {"birth_year": {"type": "int", "description": "The birth year of the horse (e.g., 2002, 2010, 2015)"}}, "required": ["birth_year"], "responses": {"horse_age": {"type": "int", "description": "The age of the horse in human years"}}}
{"api_name": "calculateHorseBMI", "api_description": "Calculate a horse's Body Mass Index (BMI)", "field": "Veterinary Science/Veterinary Equine Medicine", "parameters": {"weight": {"type": "float", "description": "The weight of the horse in kilograms (e.g., 450.67, 600.2, 750.5)"}, "height": {"type": "float", "description": "The height of the horse in centimeters (e.g., 160, 180, 200)"}}, "required": ["weight", "height"], "responses": {"bmi": {"type": "float", "description": "The Body Mass Index (BMI) of the horse"}}}
{"api_name": "getPublicSpaceInfo", "api_description": "Retrieve information about a public space", "field": "Urban Planning/Public Space Design", "parameters": {"location": {"type": "str", "description": "The location of the public space (e.g., park, square, garden)"}, "amenities": {"type": "str", "description": "The desired amenities in the public space (e.g., benches, playground, water fountain)"}, "size": {"type": "str", "description": "Specify a size range for the public space (e.g., small, medium, large)"}}, "required": ["location"], "responses": {"amenities": {"type": "str", "description": "The available amenities in the public space"}, "size": {"type": "str", "description": "The size range of the public space"}}}
{"api_name": "getCommunityDevelopmentInfo", "api_description": "Retrieve information about a specific community's development", "field": "Urban Planning/Community Development", "parameters": {"community_name": {"type": "str", "description": "The name of the community to get development information about (e.g., New York City, Los Angeles, London)"}, "time_period": {"type": "str", "description": "Specify the time period for development information (e.g., past 5 years, last decade, current year)"}, "population": {"type": "int", "description": "The estimated population of the community (e.g., 10000, 500000, 1000000)"}, "area": {"type": "float", "description": "The total area of the community in square kilometers (e.g., 20.5, 100.2, 500.7)"}}, "required": ["community_name"], "responses": {"development_info": {"type": "str", "description": "Detailed information about the community's development progress and plans"}, "population_growth": {"type": "float", "description": "The percentage growth rate of the community's population during the specified time period"}, "area_growth": {"type": "float", "description": "The percentage growth rate in the community's area during the specified time period"}}}
{"api_name": "getCommunityInfrastructure", "api_description": "Retrieve information about the infrastructure of a community", "field": "Urban Planning/Community Development", "parameters": {"community_name": {"type": "str", "description": "The name of the community for which you want to retrieve infrastructure information"}}, "required": ["community_name"], "responses": {"infrastructure": {"type": "str", "description": "Information about the infrastructure of the specified community"}}}
{"api_name": "getCostOfLivingIndex", "api_description": "Retrieve the cost of living index information for a specific urban area", "field": "Urban Planning/Urban Economics", "parameters": {"location": {"type": "str", "description": "The urban area for which you want to get the cost of living index (e.g., Dubai, Singapore, Zurich)"}}, "required": ["location"], "responses": {"cost_of_living_index": {"type": "float", "description": "The cost of living index for the specified urban area"}}}
{"api_name": "getSpatialData", "api_description": "Retrieve spatial data for urban planning analysis", "field": "Urban Planning/Spatial Data Analysis", "parameters": {"area": {"type": "str", "description": "The area for which you want to retrieve spatial data (e.g., city, neighborhood, park)"}, "layer": {"type": "str", "description": "The layer of spatial data to retrieve (e.g., roads, buildings, land use)"}, "attribute": {"type": "str", "description": "The attribute of the spatial data to include (e.g., population density, average income)"}}, "required": ["area", "layer"], "responses": {"spatial_data": {"type": "str", "description": "The spatial data for the specified area and layer"}, "attribute_value": {"type": "float", "description": "The value of the specified attribute in the spatial data"}}}
{"api_name": "getUrbanFarmingSpace", "api_description": "Retrieve available space for urban agriculture", "field": "Urban Planning/Urban Agriculture", "parameters": {"location": {"type": "str", "description": "The city or region where you want to find urban farming space (e.g., New York, London)"}, "area": {"type": "float", "description": "The minimum area required for urban farming space in square meters"}, "soil_type": {"type": "str", "description": "The desired type of soil for urban farming (e.g., sandy, loamy, clayey)"}, "accessibility": {"type": "str", "description": "Specify the desired accessibility of the urban farming space (e.g., easily accessible, limited accessibility)"}}, "required": ["location", "area"], "responses": {"available_space": {"type": "int", "description": "The number of available spaces for urban agriculture in the specified location"}}}
{"api_name": "updateRoomAvailability", "api_description": "Update room availability", "field": "Hospitality Management/Hotel Management", "parameters": {"hotel_name": {"type": "str", "description": "The name of the hotel"}, "available_rooms": {"type": "int", "description": "The number of available rooms to be updated"}}, "required": ["hotel_name", "available_rooms"], "responses": {"update_status": {"type": "bool", "description": "The status of the room availability update (true if successful, false if unsuccessful)"}}}
{"api_name": "reserveTable", "api_description": "Make a reservation for a table at a restaurant", "field": "Hospitality Management/Restaurant Management", "parameters": {"restaurant_id": {"type": "str", "description": "The ID of the restaurant where you want to make the reservation"}, "date": {"type": "str", "description": "The desired reservation date (e.g., YYYY-MM-DD)"}, "time": {"type": "str", "description": "The desired reservation time (e.g., HH:MM)"}, "party_size": {"type": "int", "description": "The number of people in your party"}}, "required": ["restaurant_id", "date", "time", "party_size"], "responses": {"reservation_id": {"type": "str", "description": "The ID of the reservation"}, "confirmation": {"type": "str", "description": "The confirmation message for the reservation"}}}
{"api_name": "submitReview", "api_description": "Submit a review for a restaurant", "field": "Hospitality Management/Restaurant Management", "parameters": {"restaurant_id": {"type": "str", "description": "The ID of the restaurant for which you want to submit a review"}, "review_text": {"type": "str", "description": "The text of the review"}, "rating": {"type": "float", "description": "The rating for the restaurant (between 0.0 and 5.0)"}}, "required": ["restaurant_id", "review_text", "rating"], "responses": {"review_id": {"type": "str", "description": "The ID of the submitted review"}}}
{"api_name": "bookTable", "api_description": "Reserves a table at a restaurant", "field": "Hospitality Management/Restaurant Management", "parameters": {"restaurant_id": {"type": "str", "description": "The unique identifier of the restaurant"}, "date": {"type": "str", "description": "The desired date for the reservation (e.g., YYYY-MM-DD)"}, "time": {"type": "str", "description": "The desired time for the reservation (e.g., HH:MM AM/PM)"}, "party_size": {"type": "int", "description": "The number of guests for the reservation"}}, "required": ["restaurant_id", "date", "time", "party_size"], "responses": {"reservation_id": {"type": "str", "description": "The unique identifier of the reservation"}, "confirmation_number": {"type": "str", "description": "The confirmation number of the reservation"}}}
{"api_name": "bookCabin", "api_description": "Book a cabin on the cruise ship", "field": "Hospitality Management/Cruise Ship Management", "parameters": {"cabin_type": {"type": "str", "description": "The type of cabin to be booked (e.g., interior, ocean view, balcony)"}, "passenger_count": {"type": "int", "description": "The number of passengers for the cabin booking"}}, "required": ["cabin_type", "passenger_count"], "responses": {"booking_id": {"type": "str", "description": "The booking ID for the cabin reservation"}}}
{"api_name": "bookRestaurantReservation", "api_description": "Book a reservation at a restaurant on the cruise ship", "field": "Hospitality Management/Cruise Ship Management", "parameters": {"restaurant_name": {"type": "str", "description": "The name of the restaurant to make a reservation"}, "date": {"type": "str", "description": "The date for the reservation (e.g., YYYY-MM-DD)"}, "time": {"type": "str", "description": "The time for the reservation (e.g., HH:MM)"}, "party_size": {"type": "int", "description": "The number of people in the reservation party"}}, "required": ["restaurant_name", "date", "time", "party_size"], "responses": {"reservation_id": {"type": "str", "description": "The reservation ID for the restaurant reservation"}}}
{"api_name": "getHospitalityMarketingInfo", "api_description": "Retrieve marketing information for hospitality establishments", "field": "Hospitality Management/Hospitality Marketing", "parameters": {"establishment_type": {"type": "str", "description": "The type of hospitality establishment for which you want to retrieve marketing information (e.g., hotel, restaurant, spa)"}, "location": {"type": "str", "description": "The location of the hospitality establishment (e.g., city, country)"}, "target_market": {"type": "str", "description": "The target market of the marketing information (e.g., leisure travelers, business travelers, local residents)"}, "promotion_type": {"type": "str", "description": "The type of promotion for which you want to retrieve information (e.g., special offers, discounts, loyalty programs)"}, "language": {"type": "str", "description": "The language in which the marketing information should be provided"}}, "required": ["establishment_type", "location"], "responses": {"marketing_info": {"type": "str", "description": "The marketing information for the specified hospitality establishment"}}}
{"api_name": "getMarketingAnalysis", "api_description": "Retrieve marketing analysis information for a hospitality establishment", "field": "Hospitality Management/Hospitality Marketing", "parameters": {"establishment_name": {"type": "str", "description": "The name of the hospitality establishment for which you want to get the marketing analysis"}}, "required": ["establishment_name"], "responses": {"target_audience": {"type": "str", "description": "The target audience for the hospitality establishment's marketing campaigns"}, "market_trends": {"type": "str", "description": "Current market trends in the hospitality industry"}, "competitor_analysis": {"type": "str", "description": "Analysis of competitors in the same market"}}}
{"api_name": "getEmployeeAvailability", "api_description": "Retrieve employee availability", "field": "Hospitality Management/Hospitality Human Resources", "parameters": {"employee_id": {"type": "str", "description": "The unique identifier of the employee"}, "availability_date": {"type": "str", "description": "The date for which you want to check the availability"}}, "required": ["employee_id", "availability_date"], "responses": {"available": {"type": "bool", "description": "Indicates if the employee is available on the specified date"}, "shift_start_time": {"type": "str", "description": "The start time of the shift on the specified date"}, "shift_end_time": {"type": "str", "description": "The end time of the shift on the specified date"}}}
{"api_name": "createHospitalityBusiness", "api_description": "Create a new hospitality business", "field": "Hospitality Management/Hospitality Entrepreneurship", "parameters": {"business_name": {"type": "str", "description": "The name of the new hospitality business"}, "location": {"type": "str", "description": "The location of the business (e.g., city, address)"}, "business_type": {"type": "str", "description": "The type of hospitality business (e.g., hotel, restaurant, cafe)"}, "owner_name": {"type": "str", "description": "The name of the owner of the business"}}, "required": ["business_name", "location", "business_type", "owner_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the creation of the hospitality business was successful"}}}
{"api_name": "bookSpaService", "api_description": "Book a spa service", "field": "Hospitality Management/Spa and Wellness Management", "parameters": {"service_name": {"type": "str", "description": "The name of the spa service to book"}, "date": {"type": "str", "description": "The desired booking date"}, "time_slot": {"type": "str", "description": "The preferred booking time slot"}, "customer_name": {"type": "str", "description": "The name of the customer"}, "contact_number": {"type": "str", "description": "The contact number of the customer"}, "email": {"type": "str", "description": "The email address of the customer"}}, "required": ["service_name", "date", "time_slot", "customer_name", "contact_number", "email"], "responses": {"booking_id": {"type": "str", "description": "The unique booking ID"}, "confirmation_message": {"type": "str", "description": "A confirmation message for the booked spa service"}}}
{"api_name": "cancelSpaAppointment", "api_description": "Cancel a previously booked spa appointment", "field": "Hospitality Management/Spa and Wellness Management", "parameters": {"appointment_id": {"type": "int", "description": "The ID of the spa appointment to be canceled"}}, "required": ["appointment_id"], "responses": {"cancellation_status": {"type": "str", "description": "The status of the appointment cancellation (e.g., Cancelled, Not Found)"}}}
{"api_name": "getRevenuePerAvailableRoom", "api_description": "Retrieve the revenue per available room (RevPAR) of a hotel", "field": "Hospitality Management/Hotel Revenue Management", "parameters": {"hotel_id": {"type": "str", "description": "The unique identifier of the hotel"}, "start_date": {"type": "str", "description": "The start date for the calculation"}, "end_date": {"type": "str", "description": "The end date for the calculation"}}, "required": ["hotel_id", "start_date", "end_date"], "responses": {"revpar": {"type": "float", "description": "The revenue per available room for the specified date range"}}}
{"api_name": "getRevPar", "api_description": "Calculate the Revenue per Available Room (RevPAR)", "field": "Hospitality Management/Hotel Revenue Management", "parameters": {"hotel_id": {"type": "int", "description": "The identification number of the hotel"}, "start_date": {"type": "str", "description": "The start date for calculating RevPAR"}, "end_date": {"type": "str", "description": "The end date for calculating RevPAR"}}, "required": ["hotel_id", "start_date", "end_date"], "responses": {"revpar": {"type": "float", "description": "The calculated RevPAR for the specified date range"}}}
{"api_name": "getAverageDailyRate", "api_description": "Retrieve the average daily rate of a hotel", "field": "Hospitality Management/Hotel Revenue Management", "parameters": {"hotel_id": {"type": "int", "description": "The identification number of the hotel"}, "start_date": {"type": "str", "description": "The start date for calculating the average daily rate"}, "end_date": {"type": "str", "description": "The end date for calculating the average daily rate"}}, "required": ["hotel_id", "start_date", "end_date"], "responses": {"average_daily_rate": {"type": "float", "description": "The average daily rate of the hotel for the specified date range"}}}
{"api_name": "getHospitalityLaws", "api_description": "Retrieve information about hospitality laws", "field": "Hospitality Management/Hospitality Law", "parameters": {}, "required": [], "responses": {"laws": {"type": "str", "description": "A list of hospitality laws and regulations"}}}
{"api_name": "getInvestigativeReport", "api_description": "Retrieve an investigative report on a specific topic", "field": "Journalism/Investigative journalism", "parameters": {"topic": {"type": "str", "description": "The topic you want to get an investigative report on (e.g., corruption, environmental pollution, political scandals)"}, "location": {"type": "str", "description": "The location related to the investigative report (e.g., country, city)"}, "time_period": {"type": "str", "description": "The time period during which the investigative report was conducted (e.g., last month, past year)"}}, "required": ["topic"], "responses": {"report": {"type": "str", "description": "The investigative report on the specified topic"}}}
{"api_name": "getBusinessNews", "api_description": "Retrieve business news articles", "field": "Journalism/Business journalism", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve business news (e.g., New York, London, Tokyo)"}, "category": {"type": "str", "description": "The specific category of business news you are interested in (e.g., finance, technology, retail)"}, "time_period": {"type": "str", "description": "Specify a time period for the news articles (e.g., past 24 hours, past week, past month)"}}, "required": ["location"], "responses": {"news_articles": {"type": "str", "description": "A list of business news articles"}, "source": {"type": "str", "description": "The source of the news articles"}, "publish_date": {"type": "str", "description": "The publish date of the news articles"}, "category": {"type": "str", "description": "The category of the news articles"}}}
{"api_name": "getFoodReview", "api_description": "Retrieve a food review from a specified restaurant", "field": "Journalism/Food journalism", "parameters": {"restaurant_name": {"type": "str", "description": "The name of the restaurant you want to get the food review for (e.g., XYZ Restaurant)"}, "cuisine_type": {"type": "str", "description": "Specify a cuisine type for the food review (e.g., Italian, Mexican, Chinese)"}, "rating": {"type": "float", "description": "Filter food reviews by minimum rating (e.g., 4.5)"}}, "required": ["restaurant_name"], "responses": {"review": {"type": "str", "description": "The food review for the specified restaurant"}}}
{"api_name": "getChefInterview", "api_description": "Retrieve an interview with a renowned chef", "field": "Journalism/Food journalism", "parameters": {"chef_name": {"type": "str", "description": "The name of the chef for whom you want to get the interview (e.g., Gordon Ramsay)"}, "cuisine_type": {"type": "str", "description": "Specify a cuisine type for the chef interview (e.g., French, Indian, Japanese)"}}, "required": ["chef_name"], "responses": {"interview": {"type": "str", "description": "The interview with the specified chef"}}}
{"api_name": "getFeatureArticle", "api_description": "Retrieve feature article information", "field": "Journalism/Feature writing", "parameters": {"topic": {"type": "str", "description": "The topic of the feature article (e.g., technology, fashion, sports)"}, "word_count": {"type": "int", "description": "Specify the desired word count of the feature article"}, "interviews": {"type": "bool", "description": "Indicate whether interviews should be included in the article (True/False)"}}, "required": ["topic"], "responses": {"article": {"type": "str", "description": "The feature article on the specified topic"}, "word_count": {"type": "int", "description": "The actual word count of the article"}, "interviews_included": {"type": "bool", "description": "Indicates whether interviews were included in the article"}}}
{"api_name": "getColumn", "api_description": "Retrieve a specific column from a journalism source", "field": "Journalism/Column writing", "parameters": {"source": {"type": "str", "description": "The name of the journalism source (e.g., New York Times, BBC, CNN)"}, "column_name": {"type": "str", "description": "The name of the specific column to retrieve from the source"}}, "required": ["source", "column_name"], "responses": {"column_content": {"type": "str", "description": "The content of the specified column"}}}
{"api_name": "getForeignCorrespondence", "api_description": "Retrieve foreign correspondence news", "field": "Journalism/Foreign correspondence", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve foreign correspondence news"}}, "required": ["country"], "responses": {"news_headline": {"type": "str", "description": "The headline of the foreign correspondence news"}, "news_content": {"type": "str", "description": "The content of the foreign correspondence news"}, "source": {"type": "str", "description": "The source of the foreign correspondence news"}}}
{"api_name": "getLatestNews", "api_description": "Retrieve the latest news from foreign correspondents", "field": "Journalism/Foreign correspondence", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the news (e.g., Beijing, London, New York)"}, "language": {"type": "str", "description": "The desired language for the news (e.g., English, Spanish, French)"}, "category": {"type": "str", "description": "Specify a category for the news (e.g., Politics, Sports, Entertainment)"}}, "required": ["location"], "responses": {"news": {"type": "str", "description": "The latest news from the specified location"}, "language": {"type": "str", "description": "The language in which the news is provided"}}}
{"api_name": "getWarReport", "api_description": "Retrieve a report on war-related events", "field": "Journalism/War journalism", "parameters": {"location": {"type": "str", "description": "The location where the war-related events occurred (e.g., Syria, Afghanistan, Iraq)"}, "time_period": {"type": "str", "description": "The time period of the war events (e.g., 2010-2020, last month, last year)"}}, "required": ["location"], "responses": {"report": {"type": "str", "description": "A detailed report of the war-related events at the specified location during the given time period"}}}
{"api_name": "updateMedia", "api_description": "Update information of an existing media entity", "field": "Journalism/Media management", "parameters": {"media_id": {"type": "int", "description": "The ID of the media entity to update information for"}, "name": {"type": "str", "description": "The updated name of the media entity"}, "location": {"type": "str", "description": "The updated location of the media entity's headquarters"}, "website": {"type": "str", "description": "The updated website of the media entity"}, "contact_person": {"type": "str", "description": "The updated contact person for the media entity"}}, "required": ["media_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the media entity information was successfully updated"}}}
{"api_name": "spellCheck", "api_description": "Correct spelling mistakes in a given text", "field": "Journalism/Copyediting", "parameters": {"text": {"type": "str", "description": "The text to be checked for spelling mistakes"}}, "required": ["text"], "responses": {"corrected_text": {"type": "str", "description": "The text with corrected spelling mistakes"}}}
{"api_name": "wordCount", "api_description": "Count the number of words in a given text", "field": "Journalism/Copyediting", "parameters": {"text": {"type": "str", "description": "The text to count the words"}}, "required": ["text"], "responses": {"word_count": {"type": "int", "description": "The number of words in the text"}}}
{"api_name": "checkGrammar", "api_description": "Check the grammar and punctuation of a text", "field": "Journalism/Copyediting", "parameters": {"text": {"type": "str", "description": "The text to be checked for grammar and punctuation"}}, "required": ["text"], "responses": {"result": {"type": "str", "description": "The result of grammar and punctuation check"}}}
{"api_name": "editText", "api_description": "Edit and proofread text for accuracy, grammar, punctuation, and style", "field": "Journalism/Copyediting", "parameters": {"text": {"type": "str", "description": "The text to be edited"}, "language": {"type": "str", "description": "The language of the text (e.g., English, Spanish, French)"}, "format": {"type": "str", "description": "The format of the text (e.g., article, essay, report)"}, "target_audience": {"type": "str", "description": "The intended audience for the text (e.g., general, academic, technical)"}}, "required": ["text"], "responses": {"edited_text": {"type": "str", "description": "The edited and proofread version of the input text"}}}
{"api_name": "proofreadText", "api_description": "Check the text for errors and make corrections", "field": "Journalism/Copyediting", "parameters": {"text": {"type": "str", "description": "The text to be proofread (e.g., article, news report)"}}, "required": ["text"], "responses": {"corrected_text": {"type": "str", "description": "The text after making corrections"}}}
{"api_name": "proofreadArticle", "api_description": "Proofread and edit an article to improve grammar, punctuation, and readability", "field": "Journalism/Copyediting", "parameters": {"article_text": {"type": "str", "description": "The text of the article that needs to be proofread and edited"}}, "required": ["article_text"], "responses": {"edited_article": {"type": "str", "description": "The proofread and edited version of the article"}}}
{"api_name": "proofreadCopy", "api_description": "Proofread and edit the copy content", "field": "Journalism/Copyediting", "parameters": {"content": {"type": "str", "description": "The text content that needs to be proofread and edited"}}, "required": ["content"], "responses": {"proofread_content": {"type": "str", "description": "The proofread and edited version of the content"}}}
{"api_name": "getVisualJournalism", "api_description": "Retrieve visual journalism content", "field": "Journalism/Visual journalism", "parameters": {"topic": {"type": "str", "description": "The topic of visual journalism content (e.g., politics, sports, entertainment)"}, "time_period": {"type": "str", "description": "Specify a time period for the content (e.g., past hour, past week, past month)"}}, "required": ["topic"], "responses": {"content": {"type": "str", "description": "The visual journalism content related to the specified topic"}, "source": {"type": "str", "description": "The source of the visual journalism content"}}}
{"api_name": "createBroadcast", "api_description": "Create a new broadcast production", "field": "Journalism/Broadcast production", "parameters": {"title": {"type": "str", "description": "The title of the broadcast"}, "start_datetime": {"type": "str", "description": "The start date and time of the broadcast (e.g., YYYY-MM-DD HH:MM)"}, "end_datetime": {"type": "str", "description": "The end date and time of the broadcast (e.g., YYYY-MM-DD HH:MM)"}, "location": {"type": "str", "description": "The location where the broadcast will take place"}, "hosts": {"type": "str", "description": "The hosts of the broadcast"}, "participants": {"type": "str", "description": "Other participants of the broadcast"}, "description": {"type": "str", "description": "A brief description of the broadcast"}}, "required": ["title", "start_datetime", "end_datetime"], "responses": {"broadcast_id": {"type": "int", "description": "The unique identifier of the created broadcast"}}}
{"api_name": "getBroadcastSchedule", "api_description": "Retrieve the schedule of broadcast programs", "field": "Journalism/Broadcast production", "parameters": {"date": {"type": "str", "description": "The desired date for the broadcast schedule (e.g., 2022-10-01)"}, "channel": {"type": "str", "description": "The specific broadcasting channel for which you want to get the schedule (e.g., BBC, CNN)"}}, "required": ["date", "channel"], "responses": {"schedule": {"type": "str", "description": "The broadcast schedule for the specified date and channel"}}}
{"api_name": "getLiveStreamURL", "api_description": "Retrieve the live stream URL of a broadcast program", "field": "Journalism/Broadcast production", "parameters": {"program_name": {"type": "str", "description": "The name of the program you want to get the live stream URL for (e.g., News Hour, Sports Talk)"}, "channel": {"type": "str", "description": "The broadcasting channel on which the program is being aired (e.g., BBC, CNN)"}}, "required": ["program_name", "channel"], "responses": {"stream_url": {"type": "str", "description": "The live stream URL for the specified program and channel"}}}
{"api_name": "factCheckClaim", "api_description": "Verify the truthfulness of a claim", "field": "Journalism/Fact-checking", "parameters": {"claim": {"type": "str", "description": "The claim that needs to be fact-checked"}}, "required": ["claim"], "responses": {"result": {"type": "bool", "description": "The truthfulness of the claim"}}}
{"api_name": "validateFact", "api_description": "Validate the accuracy of a fact", "field": "Journalism/Fact-checking", "parameters": {"fact": {"type": "str", "description": "The fact you want to verify (e.g., 'The earth is flat')"}, "source": {"type": "str", "description": "The source of the fact (e.g., 'New York Times', 'BBC')"}}, "required": ["fact"], "responses": {"valid": {"type": "bool", "description": "Whether the fact is valid or not"}, "reasons": {"type": "str", "description": "Reasons explaining the validation result"}}}
{"api_name": "checkFact", "api_description": "Verify the accuracy of a claim or statement", "field": "Journalism/Fact-checking", "parameters": {"claim": {"type": "str", "description": "The claim or statement that needs to be fact-checked"}}, "required": ["claim"], "responses": {"result": {"type": "str", "description": "The result of the fact-checking process (e.g., true, false, inconclusive)"}, "evidence": {"type": "str", "description": "The evidence or sources used to support the result"}}}
{"api_name": "getFactCheck", "api_description": "Retrieve fact-check information for a given news article or claim", "field": "Journalism/Fact-checking", "parameters": {"article_url": {"type": "str", "description": "The URL of the news article"}, "claim": {"type": "str", "description": "The specific claim to fact-check"}}, "required": ["article_url"], "responses": {"fact_checked": {"type": "bool", "description": "Indicates whether the given article or claim has been fact-checked"}, "verified_facts": {"type": "str", "description": "Verified facts related to the article or claim"}, "sources": {"type": "str", "description": "Sources used for fact-checking"}}}
{"api_name": "getJournalisticWriting", "api_description": "Retrieve journalistic writing information", "field": "Journalism/Journalistic writing", "parameters": {"topic": {"type": "str", "description": "The topic for which you want to retrieve journalistic writing (e.g., politics, sports, technology)"}, "language": {"type": "str", "description": "The desired language of the journalistic writing (e.g., English, Spanish, French)"}, "source": {"type": "str", "description": "Specify a source for the journalistic writing (e.g., CNN, BBC, The New York Times)"}}, "required": ["topic"], "responses": {"article": {"type": "str", "description": "The journalistic writing on the specified topic"}}}
{"api_name": "uploadVideo", "api_description": "Upload a video file for mobile journalism", "field": "Journalism/Mobile journalism", "parameters": {"file_path": {"type": "str", "description": "The file path of the video to be uploaded"}, "title": {"type": "str", "description": "The title of the video"}, "description": {"type": "str", "description": "A short description of the video"}, "tags": {"type": "str", "description": "Tags for categorizing the video (e.g., news, interviews, events)"}, "location": {"type": "str", "description": "The location where the video was captured"}, "date": {"type": "str", "description": "The date when the video was captured (YYYY-MM-DD)"}, "time": {"type": "str", "description": "The time when the video was captured (HH:MM:SS)"}, "duration": {"type": "int", "description": "The duration of the video in seconds"}}, "required": ["file_path", "title"], "responses": {"video_id": {"type": "str", "description": "The unique identifier of the uploaded video"}, "success": {"type": "bool", "description": "Indicates if the video upload was successful"}}}
{"api_name": "getMultimediaReport", "api_description": "Retrieve multimedia report information", "field": "Journalism/Multimedia reporting", "parameters": {"article_id": {"type": "str", "description": "The ID of the article to retrieve multimedia report for (e.g., 12345)"}, "format": {"type": "str", "description": "The desired format for the multimedia report (e.g., video, audio, slideshow)"}, "language": {"type": "str", "description": "Specify the language for the multimedia report (e.g., English, Spanish, French)"}, "timestamp": {"type": "int", "description": "The timestamp for the multimedia report (e.g., 1637810356)"}}, "required": ["article_id"], "responses": {"report_url": {"type": "str", "description": "The URL of the multimedia report"}, "duration": {"type": "float", "description": "The duration of the multimedia report in seconds"}}}
{"api_name": "getChartData", "api_description": "Retrieve chart data for data visualization", "field": "Journalism/Data visualization", "parameters": {"chart_type": {"type": "str", "description": "The type of chart to be generated (e.g., bar chart, line chart, pie chart)"}, "data_source": {"type": "str", "description": "The source of the data for visualization (e.g., CSV file, database, API)"}, "x_axis": {"type": "str", "description": "The data field to be plotted on the x-axis"}, "y_axis": {"type": "str", "description": "The data field to be plotted on the y-axis"}, "title": {"type": "str", "description": "The title of the chart"}}, "required": ["chart_type", "x_axis", "y_axis"], "responses": {"chart_data": {"type": "str", "description": "The generated chart data in a specific format (e.g., JSON, SVG)"}, "legend": {"type": "str", "description": "The legend/key for the chart"}}}
{"api_name": "applyForFreelanceJob", "api_description": "Apply for a freelance journalism job opportunity", "field": "Journalism/Freelance journalism", "parameters": {"job_id": {"type": "str", "description": "The ID of the freelance journalism job opportunity to apply for"}, "resume": {"type": "str", "description": "The path or URL to the applicant's resume file"}}, "required": ["job_id", "resume"], "responses": {"success": {"type": "bool", "description": "Indicates whether the application was successful or not"}}}
{"api_name": "hireFreelanceJournalist", "api_description": "Hire a freelance journalist", "field": "Journalism/Freelance journalism", "parameters": {"name": {"type": "str", "description": "The name of the freelance journalist you want to hire"}, "email": {"type": "str", "description": "The email address of the freelance journalist"}, "project_description": {"type": "str", "description": "A brief description of the project you want the freelance journalist to work on"}, "budget": {"type": "float", "description": "The budget allocated for the project"}}, "required": ["name", "email", "project_description"], "responses": {"confirmation": {"type": "str", "description": "Confirmation message for successful hiring"}}}
{"api_name": "editPhoto", "api_description": "Edit and retouch photos for journalism purposes", "field": "Journalism/Photo editing and retouching", "parameters": {"photo_url": {"type": "str", "description": "The URL of the photo to be edited"}, "adjustments": {"type": "str", "description": "The type of adjustments to be made on the photo (e.g., brightness, contrast, saturation)"}, "filters": {"type": "str", "description": "Apply filters on the photo (e.g., black and white, sepia, vintage)"}, "crop": {"type": "bool", "description": "Specify if cropping the photo is required"}, "resize": {"type": "bool", "description": "Specify if resizing the photo is required"}}, "required": ["photo_url"], "responses": {"edited_photo_url": {"type": "str", "description": "The URL of the edited photo"}}}
{"api_name": "getJournalismEthicsStandards", "api_description": "Retrieve journalism ethics and standards information", "field": "Journalism/Journalism ethics and standards", "parameters": {}, "required": [], "responses": {"ethics_standards": {"type": "str", "description": "The ethics and standards followed in journalism"}}}
{"api_name": "getEventCalendar", "api_description": "Retrieve a calendar of fashion events", "field": "Fashion Design/Fashion Public Relations", "parameters": {"location": {"type": "str", "description": "The location for which you want to get fashion events (e.g., New York, Paris, London)"}, "year": {"type": "int", "description": "The year for which you want to get fashion events"}}, "required": ["location"], "responses": {"events": {"type": "str", "description": "List of fashion events happening in the specified location and year"}}}
{"api_name": "pitchFashionBrand", "api_description": "Pitch a fashion brand to the media for publicity", "field": "Fashion Design/Fashion Public Relations", "parameters": {"brand_name": {"type": "str", "description": "The name of the fashion brand you want to pitch"}}, "required": ["brand_name"], "responses": {"pitch_result": {"type": "str", "description": "The result of the pitch (e.g., accepted, rejected)"}}}
{"api_name": "deleteChildrenswear", "api_description": "Delete a children's clothing design", "field": "Fashion Design/Childrenswear Design", "parameters": {"design_id": {"type": "str", "description": "The unique ID of the design to be deleted"}}, "required": ["design_id"], "responses": {"message": {"type": "str", "description": "A success or error message indicating the outcome of the design deletion request"}}}
{"api_name": "createChildrenswearDesign", "api_description": "Create a new childrenswear design", "field": "Fashion Design/Childrenswear Design", "parameters": {"design_name": {"type": "str", "description": "The name of the childrenswear design"}, "age_group": {"type": "str", "description": "The target age group for which the design is intended (e.g., newborn, toddlers, 5-8 years)"}, "fabric_type": {"type": "str", "description": "The type of fabric to be used for the design (e.g., cotton, wool, velvet)"}, "color_scheme": {"type": "str", "description": "The desired color scheme for the design (e.g., pastel, bright, monochrome)"}, "design_elements": {"type": "str", "description": "Specific design elements to be incorporated (e.g., floral prints, animal motifs, ruffles)"}, "budget": {"type": "float", "description": "The budget allocated for creating the design"}}, "required": ["design_name", "age_group", "fabric_type"], "responses": {"design_id": {"type": "int", "description": "The unique identifier for the created design"}}}
{"api_name": "getSustainableFashionTips", "api_description": "Retrieve sustainable fashion tips and guidelines", "field": "Fashion Design/Sustainable Fashion Design", "parameters": {}, "required": [], "responses": {"tips": {"type": "str", "description": "Tips and guidelines for sustainable fashion design"}}}
{"api_name": "compareSurvivalGroups", "api_description": "Compare survival between two or more groups based on survival analysis", "field": "Statistics/Survival analysis", "parameters": {"group1_events": {"type": "int", "description": "The number of events observed in group 1"}, "group1_population": {"type": "int", "description": "The total number of subjects in group 1"}, "group2_events": {"type": "int", "description": "The number of events observed in group 2"}, "group2_population": {"type": "int", "description": "The total number of subjects in group 2"}}, "required": ["group1_events", "group1_population", "group2_events", "group2_population"], "responses": {"hazard_ratio": {"type": "float", "description": "The hazard ratio between the two groups", "example": 1.73}, "p_value": {"type": "float", "description": "The p-value indicating the statistical significance of the result", "example": 0.012}}}
{"api_name": "calculateMedianSurvivalTime", "api_description": "Calculate the median survival time based on survival analysis", "field": "Statistics/Survival analysis", "parameters": {"events": {"type": "int", "description": "The number of events observed during the study"}, "censored": {"type": "int", "description": "The number of subjects whose event status is unknown or not observed during the study"}}, "required": ["events", "censored"], "responses": {"median_survival_time": {"type": "str", "description": "The estimated median survival time", "example": "2 years"}}}
{"api_name": "getSurvivalAnalysis", "api_description": "Retrieve survival analysis statistics", "field": "Statistics/Survival analysis", "parameters": {"data": {"type": "str", "description": "The data source for survival analysis (e.g., CSV file, database)"}, "time_variable": {"type": "str", "description": "The variable representing time (e.g., 'survival_time')"}, "event_variable": {"type": "str", "description": "The variable representing event/censoring status (e.g., 'event_status')"}, "group_variable": {"type": "str", "description": "The variable representing groups (e.g., 'treatment_group')"}, "confidence_level": {"type": "float", "description": "The desired confidence level for the survival analysis (e.g., 0.95)"}, "method": {"type": "str", "description": "The method for survival analysis (e.g., Kaplan-Meier, Cox regression)"}, "strata_variable": {"type": "str", "description": "The variable for stratification (e.g., 'age_group')"}}, "required": ["data", "time_variable", "event_variable"], "responses": {"survival_curve": {"type": "str", "description": "The survival curve plot for the specified data"}, "hazard_ratio": {"type": "float", "description": "The estimated hazard ratio"}, "p_value": {"type": "float", "description": "The p-value for statistical significance"}}}
{"api_name": "calculateSampleSize", "api_description": "Calculate the required sample size for a statistical study", "field": "Statistics/Sampling theory", "parameters": {"population_size": {"type": "int", "description": "The total size of the population being studied"}, "confidence_level": {"type": "float", "description": "The desired confidence level for the study (e.g., 0.95, 0.99)"}, "margin_of_error": {"type": "float", "description": "The desired margin of error for the study (e.g., 0.02, 0.05)"}}, "required": ["population_size", "confidence_level", "margin_of_error"], "responses": {"sample_size": {"type": "int", "description": "The calculated sample size for the given parameters"}}}
{"api_name": "fitModel", "api_description": "Fit a statistical learning model to a given dataset", "field": "Statistics/Statistical learning", "parameters": {"dataset": {"type": "str", "description": "The dataset on which the model should be fitted"}}, "required": ["dataset"], "responses": {"model": {"type": "str", "description": "The trained statistical learning model"}}}
{"api_name": "getGenotypeFrequency", "api_description": "Retrieve the frequency of a specific genotype in a population", "field": "Statistics/Statistical genetics", "parameters": {"genotype": {"type": "str", "description": "The target genotype for frequency calculation (e.g., CC, CT, TT)"}, "population": {"type": "str", "description": "The population in which the genotype frequency is calculated (e.g., European, Asian, African)"}, "sample_size": {"type": "int", "description": "The size of the sample population used to estimate the genotype frequency"}}, "required": ["genotype", "population"], "responses": {"frequency": {"type": "float", "description": "The estimated frequency of the specified genotype in the given population"}}}
{"api_name": "getVariantFrequency", "api_description": "Retrieve the frequency of a genetic variant in a population", "field": "Statistics/Statistical genetics", "parameters": {"variant": {"type": "str", "description": "The genetic variant for which you want to get the frequency (e.g., rs1234567, NM_001005484.1:c.1325G>A)"}}, "required": ["variant"], "responses": {"frequency": {"type": "float", "description": "The frequency of the genetic variant in the population"}}}
{"api_name": "performQualityControl", "api_description": "Perform quality control on statistical data", "field": "Statistics/Quality control", "parameters": {"data": {"type": "str", "description": "The statistical data to be quality controlled"}}, "required": ["data"], "responses": {"qc_data": {"type": "str", "description": "The quality controlled statistical data"}, "qc_parameters": {"type": "str", "description": "The parameters used for quality control"}}}
{"api_name": "countNucleotides", "api_description": "Count the occurrences of each nucleotide in a given DNA sequence", "field": "Statistics/Bioinformatics", "parameters": {"sequence": {"type": "str", "description": "The DNA sequence for which you want to count nucleotides"}}, "required": ["sequence"], "responses": {"A_count": {"type": "int", "description": "The count of nucleotide A in the given DNA sequence"}, "C_count": {"type": "int", "description": "The count of nucleotide C in the given DNA sequence"}, "G_count": {"type": "int", "description": "The count of nucleotide G in the given DNA sequence"}, "T_count": {"type": "int", "description": "The count of nucleotide T in the given DNA sequence"}}}
{"api_name": "calculateGCContent", "api_description": "Calculate the GC content of a given DNA sequence", "field": "Statistics/Bioinformatics", "parameters": {"sequence": {"type": "str", "description": "The DNA sequence for which you want to calculate GC content"}}, "required": ["sequence"], "responses": {"gc_content": {"type": "float", "description": "The GC content of the given DNA sequence"}}}
{"api_name": "calculatePolygonArea", "api_description": "Calculate the area of a polygon in a spatial dataset", "field": "Statistics/Spatial statistics", "parameters": {"polygon_coordinates": {"type": "str", "description": "The coordinates of the polygon vertices in the format 'latitude1,longitude1;latitude2,longitude2;...;latitudeN,longitudeN' (e.g., '40.7128,-74.0060;51.5074,-0.1278;48.8566,2.3522')"}, "unit": {"type": "str", "description": "The desired unit of area (e.g., square kilometers, square miles)"}}, "required": ["polygon_coordinates"], "responses": {"area": {"type": "float", "description": "The area of the polygon in the specified unit"}}}
{"api_name": "calculateLineLength", "api_description": "Calculate the length of a line in a spatial dataset", "field": "Statistics/Spatial statistics", "parameters": {"line_coordinates": {"type": "str", "description": "The coordinates of the line vertices in the format 'latitude1,longitude1;latitude2,longitude2;...;latitudeN,longitudeN' (e.g., '40.7128,-74.0060;51.5074,-0.1278;48.8566,2.3522')"}, "unit": {"type": "str", "description": "The desired unit of length (e.g., kilometers, miles)"}}, "required": ["line_coordinates"], "responses": {"length": {"type": "float", "description": "The length of the line in the specified unit"}}}
{"api_name": "planRobotMotion", "api_description": "Plan a motion path for a robot to move from its current position to a target position", "field": "Robotics/Robot motion planning", "parameters": {"robot_id": {"type": "str", "description": "The ID of the robot for which the motion path needs to be planned"}, "target_position": {"type": "str", "description": "The target position to which the robot needs to move (e.g., [1, 2, 3])"}, "planning_mode": {"type": "str", "description": "Specify the planning mode for the motion path (e.g., smooth, obstacle_avoidance)"}}, "required": ["robot_id", "target_position"], "responses": {"motion_path": {"type": "str", "description": "The planned motion path for the robot"}, "safety_check_passed": {"type": "bool", "description": "Indicates whether the planned motion path passed the safety check or not"}}}
{"api_name": "robotLearning", "api_description": "Facilitate robot learning and adaptation", "field": "Robotics/Robot learning and adaptation", "parameters": {"robot_id": {"type": "str", "description": "The unique identifier of the robot"}, "task": {"type": "str", "description": "The task the robot is learning (e.g., grasping, navigation)"}, "skill_level": {"type": "int", "description": "The current skill level of the robot (range: 1-10)"}, "environment": {"type": "str", "description": "The environment in which the robot is learning (e.g., simulated, real-world)"}}, "required": ["robot_id", "task"], "responses": {"success": {"type": "bool", "description": "Indicates whether the robot learning and adaptation process was successful"}, "new_skill_level": {"type": "int", "description": "The updated skill level of the robot after learning"}}}
{"api_name": "setRobotSpeed", "api_description": "Set the speed of the robot", "field": "Robotics/Human-robot interaction", "parameters": {"robot_id": {"type": "str", "description": "The unique identifier of the robot"}, "speed": {"type": "float", "description": "The desired speed of the robot in meters per second"}}, "required": ["robot_id", "speed"], "responses": {"success": {"type": "bool", "description": "Indicates if the speed was successfully set"}}}
{"api_name": "coordinateRobots", "api_description": "Coordinates multiple robots to perform tasks together", "field": "Robotics/Multi-robot coordination", "parameters": {"task": {"type": "str", "description": "The task to be performed by the robots (e.g., transportation, search and rescue)"}, "number_of_robots": {"type": "int", "description": "The number of robots to be coordinated"}, "area": {"type": "str", "description": "The area where the coordination will take place (e.g., warehouse, disaster site)"}, "time_limit": {"type": "int", "description": "The maximum time allowed for the robots to complete the task (in minutes)"}, "safety_distance": {"type": "float", "description": "The minimum distance that must be maintained between the robots (in meters)"}}, "required": ["task", "number_of_robots", "area"], "responses": {"success": {"type": "bool", "description": "Indicates whether the coordination was successful"}, "completion_time": {"type": "int", "description": "The total time taken by the robots to complete the task (in minutes)"}, "errors": {"type": "str", "description": "Any errors or issues encountered during coordination"}}}
{"api_name": "getGraspStatus", "api_description": "Check the status of robot grasping", "field": "Robotics/Robot manipulation and grasping", "parameters": {"robot_id": {"type": "str", "description": "The unique identifier of the robot (e.g., R123, R456)"}}, "required": ["robot_id"], "responses": {"status": {"type": "str", "description": "The current status of the robot grasping (e.g., idle, grasping, holding)"}}}
{"api_name": "calibrateGripper", "api_description": "Calibrate the gripper of the robot", "field": "Robotics/Robot manipulation and grasping", "parameters": {"robot_id": {"type": "str", "description": "The unique identifier of the robot (e.g., R123, R456)"}, "force_limit": {"type": "int", "description": "The maximum force limit for the gripper (in newtons)"}, "speed_limit": {"type": "float", "description": "The maximum speed limit for the gripper (in meters per second)"}}, "required": ["robot_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the gripper calibration was successful"}}}
{"api_name": "moveArm", "api_description": "Move the robot arm to a specified position", "field": "Robotics/Robot manipulation and grasping", "parameters": {"position": {"type": "str", "description": "The desired position to move the robot arm to (e.g., home, pickup, drop off)"}, "speed": {"type": "float", "description": "The speed at which the robot arm should move (e.g., 0.5, 1.0, 2.0)"}, "force": {"type": "int", "description": "The amount of force the robot arm should apply during movement (e.g., 10, 20, 30)"}}, "required": ["position"], "responses": {"success": {"type": "bool", "description": "Indicates whether the arm movement was successful or not"}, "message": {"type": "str", "description": "A message describing the result of the arm movement"}}}
{"api_name": "controlRobot", "api_description": "Control a robot to perform manipulation and grasping tasks", "field": "Robotics/Robot manipulation and grasping", "parameters": {"robot_id": {"type": "str", "description": "ID of the robot to be controlled"}, "task": {"type": "str", "description": "Task to be performed by the robot (e.g., pick-and-place, sorting)"}, "object": {"type": "str", "description": "Object to be manipulated or grasped by the robot (e.g., bottle, box, ball)"}, "location": {"type": "str", "description": "Location where the manipulation or grasping is to be performed (e.g., table, conveyor belt)"}, "gripper_type": {"type": "str", "description": "Type of gripper to be used by the robot (e.g., suction cup, two-fingered gripper)"}, "force": {"type": "float", "description": "Force to be exerted by the robot during manipulation or grasping (e.g., 2.5 Newtons)"}, "speed": {"type": "float", "description": "Speed at which the robot should perform the task (e.g., 0.5 meters per second)"}}, "required": ["robot_id", "task", "object"], "responses": {"success": {"type": "bool", "description": "Indicates whether the robot task was successfully executed"}, "error_message": {"type": "str", "description": "Error message if the robot task encountered any issues"}}}
{"api_name": "pickObject", "api_description": "Command the robot to pick an object in its workspace using its gripper", "field": "Robotics/Robot manipulation and grasping", "parameters": {"object": {"type": "str", "description": "The name or ID of the object to be picked"}, "gripper_force": {"type": "float", "description": "The force applied by the gripper to the object for picking (e.g., 1.5 N)"}, "approach_height": {"type": "float", "description": "The height at which the gripper approaches the object before picking (e.g., 0.02 meters)"}, "grasping_speed": {"type": "float", "description": "The speed at which the gripper closes to grasp the object (e.g., 0.1 m/s)"}}, "required": ["object"], "responses": {"success": {"type": "bool", "description": "Indicates whether the robot successfully picked the object"}}}
{"api_name": "releaseObject", "api_description": "Command the robot to release a previously picked object", "field": "Robotics/Robot manipulation and grasping", "parameters": {}, "required": [], "responses": {"success": {"type": "bool", "description": "Indicates whether the robot successfully released the object"}}}
{"api_name": "runSLAM", "api_description": "Run simultaneous localization and mapping (SLAM) algorithm to create a map of the environment and localize the robot within it", "field": "Robotics/Simultaneous localization and mapping (SLAM)", "parameters": {"robot_type": {"type": "str", "description": "The type of robot used for SLAM (e.g., differential drive, holonomic)"}, "sensor_type": {"type": "str", "description": "The type of sensor used for SLAM (e.g., LIDAR, RGB-D camera)"}, "map_resolution": {"type": "float", "description": "The resolution of the created map in meters per pixel"}, "max_iterations": {"type": "int", "description": "The maximum number of iterations to run the SLAM algorithm"}}, "required": ["robot_type", "sensor_type"], "responses": {"map": {"type": "str", "description": "The generated map of the environment"}, "robot_pose": {"type": "str", "description": "The estimated pose of the robot in the map"}}}
{"api_name": "getMap", "api_description": "Retrieve the map of the robot's environment", "field": "Robotics/Robot localization and mapping", "parameters": {"map_name": {"type": "str", "description": "The name of the map to retrieve"}}, "required": ["map_name"], "responses": {"map_data": {"type": "str", "description": "The data representing the map", "example": "map_data_string"}}}
{"api_name": "getRobotObstacleDistance", "api_description": "Retrieve the distance to the nearest obstacle detected by the robot", "field": "Robotics/Robotic sensing", "parameters": {}, "required": [], "responses": {"distance": {"type": "float", "description": "The distance to the nearest obstacle"}}}
{"api_name": "setAutonomyLevel", "api_description": "Set the autonomy level of a robot", "field": "Robotics/Robotic autonomy", "parameters": {"robot_id": {"type": "str", "description": "The ID of the robot to set the autonomy level (e.g., Alpha123, Beta456)"}, "autonomy_level": {"type": "str", "description": "The desired autonomy level for the robot (e.g., manual, semi-autonomous, autonomous)"}}, "required": ["robot_id", "autonomy_level"], "responses": {"success": {"type": "bool", "description": "Indicates if the autonomy level was set successfully"}}}
{"api_name": "stopRobot", "api_description": "Stops the movement of the robot", "field": "Robotics/Robotic autonomy", "parameters": {}, "required": [], "responses": {"status": {"type": "str", "description": "The status of the robot after stopping"}}}
{"api_name": "startSurgery", "api_description": "Initiate a robotic surgery procedure", "field": "Robotics/Medical robotics", "parameters": {"robot_id": {"type": "str", "description": "The unique identifier of the medical robot"}, "patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "surgery_type": {"type": "str", "description": "The type of surgery to be performed (e.g., bypass, tumor removal)"}}, "required": ["robot_id", "patient_id", "surgery_type"], "responses": {"success": {"type": "bool", "description": "Indicates if the surgery was successfully initiated"}}}
{"api_name": "getUnderwaterRobotStatus", "api_description": "Retrieve the status information of an underwater robot", "field": "Robotics/Underwater robotics", "parameters": {"robot_id": {"type": "str", "description": "The ID of the underwater robot you want to get status information for"}}, "required": ["robot_id"], "responses": {"battery_level": {"type": "int", "description": "The current battery level of the underwater robot"}, "depth": {"type": "float", "description": "The current depth at which the underwater robot is operating"}, "temperature": {"type": "float", "description": "The temperature of the water surrounding the underwater robot"}}}
{"api_name": "getFieldMap", "api_description": "Retrieve the map of the field for field robotics", "field": "Robotics/Field robotics", "parameters": {"location": {"type": "str", "description": "The location of the field (e.g.,  laboratory, outdoor)"}, "resolution": {"type": "int", "description": "The resolution of the field map (e.g., 100, 500, 1000)"}}, "required": ["location"], "responses": {"map_data": {"type": "str", "description": "The data of the field map"}, "resolution": {"type": "int", "description": "The resolution of the field map in which the map data is provided"}}}
{"api_name": "navigate", "api_description": "Command the robot to navigate to a specified location", "field": "Robotics/Field robotics", "parameters": {"destination": {"type": "str", "description": "The destination the robot should navigate to (e.g., kitchen, living room, bedroom)"}, "speed": {"type": "float", "description": "The speed at which the robot should navigate (e.g., 0.5 m/s, 1.2 m/s)"}, "obstacles": {"type": "bool", "description": "Specify whether the robot should avoid obstacles during navigation (true, false)"}, "map": {"type": "str", "description": "The map used for navigation (e.g., indoor, outdoor)"}, "robot_id": {"type": "str", "description": "The ID of the robot to be commanded"}}, "required": ["destination"], "responses": {"status": {"type": "str", "description": "The status of navigation (e.g., success, failed, in progress)"}, "distance": {"type": "float", "description": "The distance from the current location to the destination"}, "estimated_time": {"type": "float", "description": "The estimated time to reach the destination"}}}
{"api_name": "calculateSoftRoboticGripperForce", "api_description": "Calculate the gripping force of a soft robotic gripper", "field": "Robotics/Soft robotics", "parameters": {"length": {"type": "float", "description": "The length of the gripper in mm"}, "width": {"type": "float", "description": "The width of the gripper in mm"}, "thickness": {"type": "float", "description": "The thickness of the gripper in mm"}, "pressure": {"type": "float", "description": "The applied pressure in kPa"}}, "required": ["length", "width", "thickness", "pressure"], "responses": {"force": {"type": "float", "description": "The gripping force of the soft robotic gripper in N"}}}
{"api_name": "performSwarmBehavior", "api_description": "Simulate a swarm behavior inspired by natural systems", "field": "Robotics/Bio-inspired robotics", "parameters": {"swarm_size": {"type": "int", "description": "Number of robots in the swarm (e.g., 10, 100, 1000)"}, "environment": {"type": "str", "description": "Type of environment in which the swarm behavior is simulated (e.g., indoor, outdoor)"}}, "required": ["swarm_size"], "responses": {"behavior": {"type": "str", "description": "The simulated swarm behavior"}}}
{"api_name": "crawl_like_a_spider", "api_description": "Instructs a robot to crawl like a spider with multiple legs", "field": "Robotics/Bio-inspired robotics", "parameters": {"leg_count": {"type": "int", "description": "The number of legs the robot should have for crawling like a spider (e.g., 8, 16)"}, "leg_length": {"type": "float", "description": "The length of each leg in meters (e.g., 0.1, 0.5, 1.0)"}, "speed": {"type": "float", "description": "The desired crawling speed in meters per second (e.g., 0.5, 1.0, 2.0)"}}, "required": ["leg_count", "leg_length"], "responses": {"success": {"type": "bool", "description": "Indicates if the robot successfully crawled like a spider"}}}
{"api_name": "getRoboticInsectGait", "api_description": "Retrieve the gait pattern of a bio-inspired robotic insect", "field": "Robotics/Bio-inspired robotics", "parameters": {"insect_species": {"type": "str", "description": "The species of the bio-inspired robotic insect (e.g., ant, bee, dragonfly)"}}, "required": ["insect_species"], "responses": {"gait_pattern": {"type": "str", "description": "The gait pattern of the bio-inspired robotic insect"}}}
{"api_name": "getRoboticSwimmingPattern", "api_description": "Retrieve the swimming pattern of a bio-inspired robotic fish", "field": "Robotics/Bio-inspired robotics", "parameters": {"fish_type": {"type": "str", "description": "The type of bio-inspired robotic fish (e.g., tuna, manta ray, pufferfish)"}}, "required": ["fish_type"], "responses": {"swimming_pattern": {"type": "str", "description": "The swimming pattern of the bio-inspired robotic fish"}}}
{"api_name": "getSwarmStatus", "api_description": "Retrieve current status information of a robot swarm", "field": "Robotics/Robot swarm intelligence", "parameters": {"swarm_id": {"type": "str", "description": "The ID of the robot swarm"}, "verbose": {"type": "bool", "description": "Specify if additional information should be provided"}}, "required": ["swarm_id"], "responses": {"status": {"type": "str", "description": "The current status of the robot swarm"}, "num_robots": {"type": "int", "description": "The number of robots in the swarm"}}}
{"api_name": "getSwarmEnergyLevel", "api_description": "Retrieve the energy level of a robot swarm", "field": "Robotics/Robot swarm intelligence", "parameters": {"swarm_id": {"type": "str", "description": "The ID of the robot swarm"}, "unit": {"type": "str", "description": "The desired unit for energy level (e.g., Joules, Watts)"}}, "required": ["swarm_id"], "responses": {"energy_level": {"type": "float", "description": "The current energy level of the robot swarm"}, "unit": {"type": "str", "description": "The unit in which the energy level is provided"}}}
{"api_name": "getExoskeletonStatus", "api_description": "Retrieve the status of a robotic exoskeleton", "field": "Robotics/Robotic exoskeletons", "parameters": {"robot_id": {"type": "str", "description": "The ID of the robotic exoskeleton"}, "user_id": {"type": "str", "description": "The ID of the user wearing the exoskeleton"}, "battery_level": {"type": "float", "description": "The current battery level of the exoskeleton", "example_values": "0.1, 0.5, 0.9"}, "location": {"type": "str", "description": "The current location of the exoskeleton (e.g., room 101, laboratory)"}, "active_mode": {"type": "str", "description": "The active mode of the exoskeleton (e.g., walking, sitting, standing)"}, "sensor_data": {"type": "str", "description": "The sensor data collected by the exoskeleton (e.g., acceleration, joint angles)"}, "timestamp": {"type": "str", "description": "The timestamp of the data collection (e.g., 2022-10-01T12:30:00Z)"}}, "required": ["robot_id"], "responses": {"status": {"type": "str", "description": "The status of the exoskeleton (e.g., online, offline)"}, "battery_level": {"type": "float", "description": "The battery level of the exoskeleton"}, "location": {"type": "str", "description": "The current location of the exoskeleton"}, "mode": {"type": "str", "description": "The active mode of the exoskeleton"}}}
{"api_name": "controlExoskeletonMovements", "api_description": "Control the movements of the robotic exoskeleton", "field": "Robotics/Robotic exoskeletons", "parameters": {"robot_id": {"type": "str", "description": "The unique identifier of the robotic exoskeleton"}, "movement_type": {"type": "str", "description": "Specify the type of movement (e.g., walk, run, lift)", "choices": ["walk", "run", "lift"]}, "distance": {"type": "float", "description": "Specify the distance to move in meters"}}, "required": ["robot_id", "movement_type", "distance"], "responses": {"success": {"type": "bool", "description": "Indicates if the movement command was successful or not"}}}
{"api_name": "calibrateExoskeleton", "api_description": "Calibrate a robotic exoskeleton", "field": "Robotics/Robotic exoskeletons", "parameters": {"exoskeleton_id": {"type": "str", "description": "The unique identifier of the exoskeleton you want to calibrate"}}, "required": ["exoskeleton_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the calibration was successful"}}}
{"api_name": "getMicroNanoRobotStatus", "api_description": "Retrieve the status of a micro/nano robot", "field": "Robotics/Micro/nano robotics", "parameters": {"robot_name": {"type": "str", "description": "The name of the micro/nano robot for which you want to retrieve the status"}}, "required": ["robot_name"], "responses": {"status": {"type": "str", "description": "The current status of the specified micro/nano robot"}}}
{"api_name": "getMicroNanoRobotInfo", "api_description": "Retrieve information about micro/nano robots", "field": "Robotics/Micro/nano robotics", "parameters": {"type": {"type": "str", "description": "The type of micro/nano robot you want information about (e.g., swarm robots, medical robots, nanobots)"}, "application": {"type": "str", "description": "Specify the application area of micro/nano robotics (e.g., manufacturing, healthcare, research)"}}, "required": ["type"], "responses": {"info": {"type": "str", "description": "Detailed information about the specified micro/nano robot"}, "advancements": {"type": "str", "description": "Recent advancements in the field of micro/nano robotics"}}}
{"api_name": "controlRobotMovement", "api_description": "Control the movement of a robot", "field": "Robotics/Micro/nano robotics", "parameters": {"robot_id": {"type": "str", "description": "The ID of the robot that you want to control (e.g., robot123)"}, "direction": {"type": "str", "description": "The direction in which you want the robot to move (e.g., forward, backward, left, right)"}, "speed": {"type": "int", "description": "The speed at which the robot should move (e.g., 5, 10, 20)"}, "duration": {"type": "int", "description": "The duration for which the robot should move in seconds (e.g., 1, 2, 3)"}}, "required": ["robot_id", "direction", "duration"], "responses": {"status": {"type": "str", "description": "The status of the movement action (e.g., success, failure)"}}}
{"api_name": "executeTask", "api_description": "Execute a task on a robot in a collaborative robotics system", "field": "Robotics/Collaborative robotics", "parameters": {"robot_id": {"type": "str", "description": "The ID of the robot on which to execute the task"}, "task_id": {"type": "str", "description": "The ID of the task to execute"}, "parameters": {"type": "str", "description": "Additional parameters or instructions for the task execution"}}, "required": ["robot_id", "task_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the task execution was successful"}, "message": {"type": "str", "description": "Additional information or error message, if any"}}}
{"api_name": "determineObjectPose", "api_description": "Determine the pose of a specific object in a given image using AI", "field": "Robotics/AI for robotics", "parameters": {"image": {"type": "str", "description": "The image containing the object for which you want to determine the pose"}}, "required": ["image"], "responses": {"pose": {"type": "str", "description": "The pose of the specified object in the image"}}}
{"api_name": "getEpidemiologicalData", "api_description": "Retrieve epidemiological data for a specified location and time period", "field": "Public Health/Epidemiology", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve epidemiological data (e.g., country, city)"}, "start_date": {"type": "str", "description": "The starting date of the time period for which you want to retrieve data (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The ending date of the time period for which you want to retrieve data (e.g., YYYY-MM-DD)"}, "disease": {"type": "str", "description": "The specific disease for which you want to retrieve data (e.g., COVID-19, Influenza)"}}, "required": ["location", "start_date", "end_date"], "responses": {"cases": {"type": "int", "description": "The total number of cases for the specified disease and time period"}, "deaths": {"type": "int", "description": "The total number of deaths for the specified disease and time period"}, "recovered": {"type": "int", "description": "The total number of recovered cases for the specified disease and time period"}}}
{"api_name": "getDailyCases", "api_description": "Retrieve daily cases of a specified disease", "field": "Public Health/Epidemiology", "parameters": {"disease": {"type": "str", "description": "The name of the disease for which you want to retrieve daily cases (e.g., COVID-19, Influenza)"}, "location": {"type": "str", "description": "The location for which you want to retrieve cases (e.g., country name, state name, city name)"}, "start_date": {"type": "str", "description": "The start date for retrieving daily cases in the format YYYY-MM-DD (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date for retrieving daily cases in the format YYYY-MM-DD (e.g., 2022-12-31)"}}, "required": ["disease", "location", "start_date", "end_date"], "responses": {"date": {"type": "str", "description": "The date of the reported daily case", "example": "2022-01-01"}, "cases": {"type": "int", "description": "The number of daily cases reported on the specified date"}}}
{"api_name": "getCOVIDCases", "api_description": "Retrieve current COVID-19 cases information globally or for a specific country", "field": "Public Health/Global Health", "parameters": {"country": {"type": "str", "description": "The country for which you want to get COVID-19 cases information"}, "timeframe": {"type": "str", "description": "Specify a timeframe for COVID-19 cases information (e.g., daily, weekly, monthly)"}, "only_new_cases": {"type": "bool", "description": "Specify if you only want to retrieve new cases"}}, "required": [], "responses": {"cases": {"type": "int", "description": "The number of COVID-19 cases"}, "deaths": {"type": "int", "description": "The number of COVID-19 deaths"}, "recovered": {"type": "int", "description": "The number of COVID-19 recoveries"}}}
{"api_name": "getResearchStudy", "api_description": "Retrieve information about a specific health services research study", "field": "Public Health/Health Services Research", "parameters": {"study_id": {"type": "str", "description": "The ID of the research study you want to retrieve information about (e.g., 12345)"}, "start_date": {"type": "str", "description": "Start date of the study (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "End date of the study (e.g., 2022-12-31)"}, "location": {"type": "str", "description": "The location where the study is being conducted (e.g., New York, London)"}, "participants": {"type": "int", "description": "Number of participants in the study"}}, "required": ["study_id"], "responses": {"study_title": {"type": "str", "description": "Title of the research study"}, "study_description": {"type": "str", "description": "Description of the research study"}, "study_results": {"type": "str", "description": "Results obtained from the research study"}}}
{"api_name": "getAverageWaitTime", "api_description": "Retrieve the average wait time for health services", "field": "Public Health/Health Services Research", "parameters": {"hospital_type": {"type": "str", "description": "Type of hospital (e.g., public, private)"}, "location": {"type": "str", "description": "The location for which you want to get the average wait time (e.g., city, state)"}, "specialty": {"type": "str", "description": "The specialty of the health service being researched (e.g., cardiology, pediatrics)"}, "insurance_accepted": {"type": "str", "description": "Specify the type of insurance accepted by the hospital (e.g., private, Medicaid)"}}, "required": ["location", "specialty"], "responses": {"average_wait_time": {"type": "int", "description": "The average wait time in minutes for the specified health service"}, "unit": {"type": "str", "description": "The unit of time (e.g., minutes, hours) in which the average wait time is provided"}}}
{"api_name": "getOutbreaks", "api_description": "Retrieve recent outbreak information for infectious diseases", "field": "Public Health/Infectious Diseases", "parameters": {"country": {"type": "str", "description": "The country for which you want to get recent outbreak information"}}, "required": ["country"], "responses": {"outbreaks": {"type": "str", "description": "Information about recent outbreaks of infectious diseases in the specified country"}}}
{"api_name": "getGeneticRisk", "api_description": "Retrieve genetic risk information for public health", "field": "Public Health/Public Health Genetics", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "disease": {"type": "str", "description": "The name of the disease for which genetic risk is to be checked (e.g., Diabetes, Cancer)"}, "ethnicity": {"type": "str", "description": "The ethnicity of the patient (e.g., Caucasian, African American)"}, "genetic_variant": {"type": "str", "description": "The specific genetic variant to be checked for risk (e.g., rs7903146, BRCA1)"}, "family_history": {"type": "str", "description": "The family history of the disease in the patient's relatives (e.g., Yes, No)"}}, "required": ["patient_id", "disease"], "responses": {"genetic_risk": {"type": "float", "description": "The genetic risk score indicating the likelihood of developing the given disease"}, "genetic_variant_info": {"type": "str", "description": "Additional information about the genetic variant"}, "recommendations": {"type": "str", "description": "Recommendations for the patient based on the genetic risk score"}}}
{"api_name": "getHealthExpenditure", "api_description": "Retrieve public health expenditure information", "field": "Public Health/Public Health Economics", "parameters": {"region": {"type": "str", "description": "The region for which you want to get health expenditure information (e.g., Asia, Europe, North America)"}, "year": {"type": "int", "description": "The specific year for health expenditure data (e.g., 2020, 2021)"}}, "required": ["region", "year"], "responses": {"expenditure": {"type": "float", "description": "The public health expenditure for the specified region and year"}}}
{"api_name": "getPublicHealthLaws", "api_description": "Retrieve information on public health laws and regulations", "field": "Public Health/Public Health Law and Ethics", "parameters": {}, "required": [], "responses": {"laws": {"type": "str", "description": "A list of public health laws and regulations"}}}
{"api_name": "getLaws", "api_description": "Retrieve public health laws and regulations", "field": "Public Health/Public Health Law and Ethics", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve the laws and regulations (e.g., USA, UK, Canada)"}, "topic": {"type": "str", "description": "Specify a topic for laws and regulations (e.g., vaccination, quarantine, privacy)"}}, "required": ["country"], "responses": {"laws": {"type": "str", "description": "The public health laws and regulations of the specified country for the given topic"}}}
{"api_name": "searchZoonoticDiseases", "api_description": "Search for zoonotic diseases that can be transmitted between animals and humans", "field": "Public Health/Veterinary Public Health", "parameters": {"disease_name": {"type": "str", "description": "The name of the zoonotic disease you want to search for (e.g., rabies, Lyme disease)"}, "animal_type": {"type": "str", "description": "The type of animal that can transmit the disease (e.g., bat, tick)"}}, "required": ["disease_name"], "responses": {"disease_info": {"type": "str", "description": "Information about the specified zoonotic disease"}}}
{"api_name": "getPregnancyTestResult", "api_description": "Retrieve pregnancy test result", "field": "Public Health/Reproductive and Sexual Health", "parameters": {"test_type": {"type": "str", "description": "The type of pregnancy test (e.g., urine test, blood test)"}, "test_date": {"type": "str", "description": "The date of the pregnancy test (e.g., MM/DD/YYYY)"}, "test_result": {"type": "str", "description": "The result of the pregnancy test (e.g., positive, negative)"}}, "required": ["test_type", "test_date", "test_result"], "responses": {"result": {"type": "bool", "description": "The result of the pregnancy test"}}}
{"api_name": "getFertilityWindow", "api_description": "Retrieve the fertility window", "field": "Public Health/Reproductive and Sexual Health", "parameters": {"last_period_date": {"type": "str", "description": "The date of the last menstrual period (e.g., MM/DD/YYYY)"}}, "required": ["last_period_date"], "responses": {"start_date": {"type": "str", "description": "The start date of the fertility window (e.g., MM/DD/YYYY)"}, "end_date": {"type": "str", "description": "The end date of the fertility window (e.g., MM/DD/YYYY)"}}}
{"api_name": "getCommunityHealthData", "api_description": "Retrieve community health data", "field": "Public Health/Community Health", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the community health data (e.g., city, state, country)"}, "time_period": {"type": "str", "description": "Specify a time period for the data (e.g., last week, last month, last year)"}, "age_group": {"type": "str", "description": "Specify an age group for the data (e.g., children, adults, seniors)"}}, "required": ["location"], "responses": {"cases": {"type": "int", "description": "Number of cases reported in the specified location"}, "deaths": {"type": "int", "description": "Number of deaths reported in the specified location"}, "vaccination_rate": {"type": "float", "description": "Vaccination rate in the specified location"}}}
{"api_name": "getSubstanceAbuseStats", "api_description": "Retrieve statistics on substance abuse and addiction", "field": "Public Health/Substance Abuse and Addiction", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the statistics (e.g., country, state, city)"}, "year": {"type": "int", "description": "The year for which you want to get the statistics (e.g., 2020, 2021)"}, "substance_type": {"type": "str", "description": "Specify the type of substance for which you want to get the statistics (e.g., opioids, alcohol, cocaine, marijuana)"}, "age_group": {"type": "str", "description": "Specify the age group for which you want to get the statistics (e.g., 18-24, 25-34, 35-44)"}}, "required": ["location", "year"], "responses": {"prevalence_rate": {"type": "float", "description": "The prevalence rate of substance abuse and addiction in the specified location"}, "number_of_cases": {"type": "int", "description": "The number of substance abuse and addiction cases in the specified location"}}}
{"api_name": "getVectorControlMeasures", "api_description": "Retrieve vector control measures for a tropical disease", "field": "Public Health/Tropical Medicine", "parameters": {"disease": {"type": "str", "description": "The name of the tropical disease (e.g., Malaria, Dengue, Chikungunya)"}, "location": {"type": "str", "description": "The location for which you want to get the vector control measures (e.g., Africa, Southeast Asia, Americas)"}}, "required": ["disease", "location"], "responses": {"measures": {"type": "str", "description": "The vector control measures for the specified tropical disease in the given location"}}}
{"api_name": "getMalariaCases", "api_description": "Retrieve the number of malaria cases in a specific region", "field": "Public Health/Tropical Medicine", "parameters": {"region": {"type": "str", "description": "The region for which you want to get the number of malaria cases (e.g., Africa, Southeast Asia, South America)"}, "year": {"type": "int", "description": "The specific year for which you want to get the number of malaria cases"}}, "required": ["region"], "responses": {"number_of_cases": {"type": "int", "description": "The number of malaria cases in the specified region and year"}}}
{"api_name": "getZikaVirusCases", "api_description": "Retrieve the number of Zika virus cases in a specific location", "field": "Public Health/Tropical Medicine", "parameters": {"location": {"type": "str", "description": "The location (e.g., city, region) for which you want to get the number of Zika virus cases"}, "start_date": {"type": "str", "description": "The start date (YYYY-MM-DD) from which you want to retrieve the number of Zika virus cases"}, "end_date": {"type": "str", "description": "The end date (YYYY-MM-DD) until which you want to retrieve the number of Zika virus cases"}}, "required": ["location"], "responses": {"number_of_cases": {"type": "int", "description": "The number of Zika virus cases in the specified location and time range"}}}
{"api_name": "getTropicalDiseases", "api_description": "Retrieve information on tropical diseases", "field": "Public Health/Tropical Medicine", "parameters": {"region": {"type": "str", "description": "The region for which you want to get information on tropical diseases (e.g., Africa, Southeast Asia, Latin America)"}, "disease_type": {"type": "str", "description": "Specify a type of tropical disease you are interested in (e.g., Malaria, Dengue, Chikungunya)"}, "symptoms": {"type": "str", "description": "Specify a symptom you want information on (e.g., fever, rash, joint pain)"}}, "required": ["region"], "responses": {"disease_info": {"type": "str", "description": "Detailed information on the specified tropical disease"}, "symptom_info": {"type": "str", "description": "Information on the specified symptom in relation to tropical diseases"}}}
{"api_name": "getLifeExpectancy", "api_description": "Retrieve life expectancy information for a given country", "field": "Public Health/Aging and Gerontology", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get life expectancy information (e.g., United States, Japan, Germany)"}}, "required": ["country"], "responses": {"life_expectancy": {"type": "float", "description": "The average life expectancy in years for the specified country"}}}
{"api_name": "getHTAReport", "api_description": "Retrieve health technology assessment report", "field": "Public Health/Health Technology Assessment", "parameters": {"product_name": {"type": "str", "description": "The name of the health technology product (e.g., drug, medical device)"}}, "required": ["product_name"], "responses": {"report": {"type": "str", "description": "The health technology assessment report for the specified product"}}}
{"api_name": "getDrugExposure", "api_description": "Retrieve drug exposure information", "field": "Public Health/Pharmacoepidemiology", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier for the patient"}, "drug_name": {"type": "str", "description": "The name of the drug"}, "exposure_start_date": {"type": "str", "description": "The start date of drug exposure"}, "exposure_end_date": {"type": "str", "description": "The end date of drug exposure"}}, "required": ["patient_id", "drug_name"], "responses": {"exposure_duration": {"type": "float", "description": "The duration of drug exposure in days"}, "adverse_events": {"type": "str", "description": "A list of adverse events associated with the drug"}}}
{"api_name": "getEmergencyServices", "api_description": "Retrieve emergency healthcare services", "field": "Public Health/Healthcare Delivery", "parameters": {"location": {"type": "str", "description": "The location for which you want to get emergency healthcare services information (e.g., city, state)"}, "service_type": {"type": "str", "description": "The type of emergency healthcare services you are looking for (e.g., ambulance, fire brigade)"}}, "required": ["location", "service_type"], "responses": {"services": {"type": "str", "description": "The emergency healthcare services available at the specified location and type"}, "contact_number": {"type": "str", "description": "The contact number for emergency healthcare services"}}}
{"api_name": "getCommunityBasedResearch", "api_description": "Retrieve information on community-based participatory research", "field": "Public Health/Community-Based Participatory Research", "parameters": {"location": {"type": "str", "description": "The location where the research is conducted (e.g., New York, Los Angeles, Chicago)"}, "topic": {"type": "str", "description": "The topic or theme of the research (e.g., obesity, mental health, infectious diseases)"}, "year": {"type": "int", "description": "The year when the research was conducted (e.g., 2010, 2015, 2020)"}}, "required": ["location", "topic"], "responses": {"title": {"type": "str", "description": "The title of the research study"}, "authors": {"type": "str", "description": "The names of the authors involved in the research"}, "abstract": {"type": "str", "description": "A brief summary of the research findings"}, "publication_year": {"type": "int", "description": "The year when the research study was published"}}}
{"api_name": "getExposureLevel", "api_description": "Retrieve the exposure level of a workplace", "field": "Public Health/Occupational Safety and Health", "parameters": {"workplace": {"type": "str", "description": "The name or location of the workplace where the exposure level needs to be determined (e.g., factory A, construction site B)"}, "duration": {"type": "int", "description": "The duration of exposure in minutes (e.g., 60, 120, 240)"}, "unit": {"type": "str", "description": "The desired unit for exposure measurement (e.g., ppm, mg/m3)"}}, "required": ["workplace", "duration"], "responses": {"exposure_level": {"type": "float", "description": "The exposure level at the specified workplace"}, "unit": {"type": "str", "description": "The unit of measurement for the exposure level"}}}
{"api_name": "getEmergencyResponsePlan", "api_description": "Retrieve information about emergency response plans in the workplace", "field": "Public Health/Occupational Safety and Health", "parameters": {"industry": {"type": "str", "description": "The industry in which the workplace belongs to (e.g., manufacturing, construction, healthcare)"}, "job_title": {"type": "str", "description": "The job title of the employee"}, "emergency_type": {"type": "str", "description": "The type of emergency for which the response plan is needed (e.g., fire, chemical spill, medical emergency)"}}, "required": ["industry", "job_title"], "responses": {"response_plan": {"type": "str", "description": "The emergency response plan for the specified emergency type"}}}
{"api_name": "getScreeningTests", "api_description": "Retrieve recommended screening tests for cancer", "field": "Public Health/Cancer Prevention and Control", "parameters": {}, "required": [], "responses": {"screening_tests": {"type": "str", "description": "Recommended screening tests for cancer"}}}
{"api_name": "getCancerStats", "api_description": "Retrieve cancer statistics", "field": "Public Health/Cancer Prevention and Control", "parameters": {"type": {"type": "str", "description": "Type of cancer (e.g., lung cancer, breast cancer, prostate cancer)"}, "age_group": {"type": "str", "description": "Age group to filter statistics (e.g., all ages, 0-18 years, 65+ years)"}, "location": {"type": "str", "description": "Location for which you want to get cancer statistics (e.g., country, state, city)"}}, "required": ["type", "location"], "responses": {"incidence_rate": {"type": "float", "description": "The incidence rate of the specified cancer type in the specified location and age group"}, "mortality_rate": {"type": "float", "description": "The mortality rate of the specified cancer type in the specified location and age group"}}}
{"api_name": "getCancerCases", "api_description": "Retrieve the number of cancer cases in a given location", "field": "Public Health/Cancer Prevention and Control", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the cancer cases (e.g., New York, Los Angeles)"}, "year": {"type": "int", "description": "The year for which you want to get the cancer cases (e.g., 2021, 2022)"}, "age_group": {"type": "str", "description": "Specify an age group for the cancer cases (e.g., 18-30, 40-50)"}}, "required": ["location", "year"], "responses": {"cancer_cases": {"type": "int", "description": "The number of cancer cases reported in the specified location and year"}, "age_group": {"type": "str", "description": "The age group for which the cancer cases are reported"}}}
{"api_name": "getCancerRiskFactors", "api_description": "Retrieve the common risk factors associated with cancer", "field": "Public Health/Cancer Prevention and Control", "parameters": {}, "required": [], "responses": {"risk_factors": {"type": "str", "description": "A list of common risk factors associated with cancer (e.g., smoking, obesity, family history)"}}}
{"api_name": "getCancerScreeningCenters", "api_description": "Retrieve the list of cancer screening centers in a given location", "field": "Public Health/Cancer Prevention and Control", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the cancer screening centers (e.g., Chicago, Houston)"}}, "required": ["location"], "responses": {"screening_centers": {"type": "str", "description": "A list of cancer screening centers in the specified location"}}}
{"api_name": "getChildDevelopmentAssessment", "api_description": "Assess the development of a child", "field": "Public Health/Child and Adolescent Health", "parameters": {"child_name": {"type": "str", "description": "Name of the child"}, "age": {"type": "int", "description": "Age of the child in months"}}, "required": ["child_name", "age"], "responses": {"development_assessment": {"type": "str", "description": "Assessment of the child's development", "example": "The child's language development is age-appropriate"}}}
{"api_name": "getFoodSafetyAlerts", "api_description": "Retrieve food safety alerts", "field": "Public Health/One Health", "parameters": {"food": {"type": "str", "description": "The type of food for which you want to retrieve safety alerts (e.g., dairy products, seafood, fruits)"}, "location": {"type": "str", "description": "The location for which you want to retrieve safety alerts (e.g., country, city, region)"}, "start_date": {"type": "str", "description": "The starting date for the safety alerts (e.g., yyyy-mm-dd)"}, "end_date": {"type": "str", "description": "The ending date for the safety alerts (e.g., yyyy-mm-dd)"}}, "required": ["food", "location"], "responses": {"alerts": {"type": "str", "description": "The list of food safety alerts for the specified food type and location"}, "alert_dates": {"type": "str", "description": "The dates on which the safety alerts were issued"}}}
{"api_name": "getNearestAEDLocation", "api_description": "Retrieve the location of the nearest Automated External Defibrillator (AED)", "field": "Public Health/Emergency Medical Services", "parameters": {"location": {"type": "str", "description": "The current location for which you want to find the nearest AED"}}, "required": ["location"], "responses": {"aed_location": {"type": "str", "description": "The location of the nearest AED"}}}
{"api_name": "getEpidemicCases", "api_description": "Retrieve the number of epidemic cases in a specific location", "field": "Public Health/Healthcare Epidemiology", "parameters": {"location": {"type": "str", "description": "The location from which you want to retrieve the epidemic cases (e.g., city, county, country)"}, "time_period": {"type": "str", "description": "Specify a time period for retrieving the epidemic cases (e.g., daily, weekly, monthly)"}, "disease": {"type": "str", "description": "Specify the disease for which you want to retrieve the epidemic cases (e.g., COVID-19, influenza)"}, "age_group": {"type": "str", "description": "Specify an age group for retrieving the epidemic cases (e.g., children, adults, elderly)"}}, "required": ["location", "disease"], "responses": {"cases": {"type": "int", "description": "The number of epidemic cases in the specified location"}, "time_period": {"type": "str", "description": "The time period for which the epidemic cases are retrieved"}, "disease": {"type": "str", "description": "The specific disease for which the epidemic cases are retrieved"}}}
{"api_name": "getCaseCount", "api_description": "Retrieve the number of cases for a specific disease", "field": "Public Health/Healthcare Epidemiology", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the case count (e.g., country, city)"}, "disease": {"type": "str", "description": "The specific disease for which you want to get the case count (e.g., COVID-19, influenza)"}, "time_period": {"type": "str", "description": "Specify a time period for the case count (e.g., daily, weekly, monthly)"}, "population": {"type": "int", "description": "The population of the specified location"}}, "required": ["location", "disease"], "responses": {"case_count": {"type": "int", "description": "The number of cases of the specified disease"}, "location": {"type": "str", "description": "The location for which the case count is provided"}, "disease": {"type": "str", "description": "The specific disease for which the case count is provided"}, "time_period": {"type": "str", "description": "The time period for the case count"}, "population": {"type": "int", "description": "The population of the specified location"}}}
{"api_name": "getHealthBehavior", "api_description": "Retrieve information about health behaviors", "field": "Public Health/Health Behavior", "parameters": {"age": {"type": "int", "description": "The age of the individual"}, "gender": {"type": "str", "description": "The gender of the individual (e.g., male, female)"}, "country": {"type": "str", "description": "The country of the individual"}, "behavior_type": {"type": "str", "description": "Type of health behavior to retrieve information on (e.g., smoking, physical activity, diet)"}, "time_period": {"type": "str", "description": "The time period for which to retrieve data (e.g., last week, last month)"}, "categorical_var": {"type": "str", "description": "A categorical variable to further filter the data (e.g., income, education)"}}, "required": ["age", "gender"], "responses": {"behavior": {"type": "str", "description": "The specific health behavior of the individual"}, "prevalence": {"type": "float", "description": "The prevalence of the health behavior in the given population"}, "recommendations": {"type": "str", "description": "Recommended actions or guidelines to promote a healthier behavior"}}}
{"api_name": "getHealthSystemsResearch", "api_description": "Retrieve information related to health systems research", "field": "Public Health/Health Systems Research", "parameters": {"topic": {"type": "str", "description": "The topic of research you are interested in (e.g., healthcare financing, health workforce, health policy)"}, "country": {"type": "str", "description": "The country for which you want to retrieve research information"}}, "required": ["topic"], "responses": {"research_title": {"type": "str", "description": "The title of the health systems research"}, "research_authors": {"type": "str", "description": "The authors of the health systems research"}, "research_year": {"type": "int", "description": "The year in which the research was conducted"}, "research_abstract": {"type": "str", "description": "The abstract of the health systems research"}}}
{"api_name": "advocateForPolicyChange", "api_description": "Advocate for changes in public health policies", "field": "Public Health/Public Health Advocacy", "parameters": {"policy_area": {"type": "str", "description": "The specific area of public health policy that needs to be addressed (e.g., smoking regulations, vaccination requirements)"}, "target_population": {"type": "str", "description": "The population group affected by the policy change (e.g., children, elderly, healthcare workers)"}}, "required": ["policy_area", "target_population"], "responses": {"success": {"type": "str", "description": "Message indicating the success of advocating for policy change"}}}
{"api_name": "getPolicyByCountry", "api_description": "Retrieve health planning and policy information for a specific country", "field": "Public Health/Health Planning and Policy", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to retrieve health planning and policy information (e.g., United States, Germany, Brazil)"}, "year": {"type": "int", "description": "The specific year for which you want to retrieve the policy information (e.g., 2020, 2021)"}}, "required": ["country"], "responses": {"policy_title": {"type": "str", "description": "The title of the health planning and policy"}, "policy_description": {"type": "str", "description": "A brief description of the health planning and policy"}, "policy_link": {"type": "str", "description": "A link to the full health planning and policy document"}}}
{"api_name": "getHealthcareAccess", "api_description": "Retrieve healthcare access information", "field": "Public Health/Healthcare Access", "parameters": {"location": {"type": "str", "description": "The location for which you want to get healthcare access information (e.g., city, state, country)"}, "service_type": {"type": "str", "description": "Specify the type of healthcare service (e.g., hospital, clinic, pharmacy)"}}, "required": ["location"], "responses": {"availability": {"type": "str", "description": "The availability of healthcare services at the specified location"}, "distance": {"type": "float", "description": "The distance to the nearest healthcare facility"}, "rating": {"type": "int", "description": "The rating of the healthcare facility"}}}
{"api_name": "getDisparityData", "api_description": "Retrieve data on health disparities based on different demographic factors", "field": "Public Health/Health Disparities Research", "parameters": {"year": {"type": "int", "description": "The year for which you want to retrieve the data"}, "state": {"type": "str", "description": "The state for which you want to retrieve the data"}, "race": {"type": "str", "description": "The racial/ethnic group for which you want to retrieve the data (e.g., White, Black, Hispanic)"}, "gender": {"type": "str", "description": "The gender for which you want to retrieve the data (e.g., Male, Female)"}}, "required": ["year"], "responses": {"disparity_index": {"type": "float", "description": "The disparity index for the specified demographic factors"}, "population": {"type": "int", "description": "The population count for the specified demographic factors"}}}
{"api_name": "getHealthDisparitiesData", "api_description": "Retrieve health disparities data for a specific population", "field": "Public Health/Health Disparities Research", "parameters": {"population": {"type": "str", "description": "The specific population for which you want to retrieve health disparities data (e.g., African Americans, Hispanics, low-income individuals)"}, "health_condition": {"type": "str", "description": "The health condition you are interested in (e.g., diabetes, cardiovascular disease)"}, "location": {"type": "str", "description": "The geographical location for which you want to retrieve the data (e.g., New York City, Los Angeles)"}, "year": {"type": "int", "description": "The specific year for which you want to retrieve the data (e.g., 2019)"}}, "required": ["population", "health_condition", "location"], "responses": {"disparities_data": {"type": "str", "description": "The health disparities data for the specified population and health condition in the requested location and year"}}}
{"api_name": "getHealthWorkforce", "api_description": "Retrieve information about the health workforce in a specific location", "field": "Public Health/Health Workforce", "parameters": {"location": {"type": "str", "description": "The location for which you want to get information about the health workforce (e.g., country, city)"}, "occupation": {"type": "str", "description": "Specify a specific occupation within the health workforce (e.g., doctors, nurses, pharmacists)"}}, "required": ["location"], "responses": {"health_workers": {"type": "int", "description": "The number of health workers in the specified location and occupation"}, "occupation_salary": {"type": "float", "description": "The average salary of the specified occupation in the specified location"}, "required_education": {"type": "str", "description": "The required education level for the specified occupation in the specified location"}}}
{"api_name": "analyzeTargetAudience", "api_description": "Analyze the target audience for a healthcare marketing campaign", "field": "Public Health/Healthcare Marketing", "parameters": {"campaign_type": {"type": "str", "description": "The type of healthcare marketing campaign (e.g., promoting a new drug, raising awareness about a disease)"}, "target_population": {"type": "str", "description": "The target population for the campaign (e.g., patients with diabetes, expectant mothers)"}, "demographics": {"type": "str", "description": "Demographic characteristics of the target population (e.g., age, gender, income level)"}}, "required": ["campaign_type", "target_population"], "responses": {"audience_insights": {"type": "str", "description": "Insights into the target audience for the healthcare marketing campaign"}}}
{"api_name": "getAvailableHealthcareTechnologies", "api_description": "Retrieve available healthcare technologies", "field": "Public Health/Healthcare Technologies", "parameters": {}, "required": [], "responses": {"technologies": {"type": "str", "description": "A list of available healthcare technologies"}}}
{"api_name": "getRiskAssessment", "api_description": "Assess the risk of a certain disease or condition", "field": "Public Health/Healthcare Decision Making", "parameters": {"condition": {"type": "str", "description": "The disease or condition to assess the risk for (e.g., heart disease, stroke, diabetes)"}, "age": {"type": "int", "description": "The individual's age in years"}, "gender": {"type": "str", "description": "The individual's gender (e.g., male, female)"}, "family_history": {"type": "bool", "description": "Flag indicating whether there is a family history of the disease or condition"}}, "required": ["condition"], "responses": {"risk_level": {"type": "str", "description": "The assessed risk level for the specified disease or condition"}}}
{"api_name": "getHIPAAComplianceStatus", "api_description": "Retrieve the HIPAA compliance status of a healthcare organization", "field": "Public Health/Healthcare Data Privacy and Security", "parameters": {"organization_id": {"type": "str", "description": "The unique identifier of the healthcare organization"}}, "required": ["organization_id"], "responses": {"compliance_status": {"type": "str", "description": "The HIPAA compliance status of the healthcare organization"}}}
{"api_name": "getBioethicsPublicHealth", "api_description": "Retrieve information about the intersection of bioethics and public health", "field": "Public Health/Bioethics and Public Health", "parameters": {"topic": {"type": "str", "description": "The specific topic you are interested in (e.g., genetic testing, organ transplantation)"}, "country": {"type": "str", "description": "The country for which you want information (e.g., United States, Canada)"}, "year": {"type": "int", "description": "The year of interest for the information"}}, "required": ["topic"], "responses": {"information": {"type": "str", "description": "The relevant information about the intersection of bioethics and public health"}}}
{"api_name": "getAvailableBeds", "api_description": "Retrieve the number of available beds in the healthcare facility", "field": "Public Health/Healthcare Operations Management", "parameters": {"facility": {"type": "str", "description": "The healthcare facility for which you want to get the available beds count"}}, "required": ["facility"], "responses": {"beds": {"type": "int", "description": "The number of available beds in the specified healthcare facility"}}}
{"api_name": "exportMedia", "api_description": "Export a media file in a specific format", "field": "Media Studies/Media Production", "parameters": {"file_name": {"type": "str", "description": "The name of the media file to export"}, "export_format": {"type": "str", "description": "The desired format for the exported media file (e.g., MP4, WAV, JPEG)"}}, "required": ["file_name", "export_format"], "responses": {"success": {"type": "bool", "description": "Indicates whether the export was successful"}, "exported_file_path": {"type": "str", "description": "The file path of the exported media file"}}}
{"api_name": "getSoundLevels", "api_description": "Retrieve sound level information", "field": "Media Studies/Sound Studies", "parameters": {"location": {"type": "str", "description": "The location of the sound recording (e.g., studio, concert hall, outdoor)"}, "time": {"type": "str", "description": "The time of the sound recording (e.g., morning, afternoon, evening)"}}, "required": ["location"], "responses": {"sound_level": {"type": "float", "description": "The sound level at the specified location and time"}, "unit": {"type": "str", "description": "The unit of sound level"}}}
{"api_name": "getGlobalMediaPresence", "api_description": "Retrieve information about the global presence of various types of media", "field": "Media Studies/Media and Globalization", "parameters": {"time_period": {"type": "str", "description": "The time period for which you want to gather information about global media presence (e.g., past year, last decade, current month)"}, "media_type": {"type": "str", "description": "The type of media for which you want to gather information (e.g., television, radio, internet)"}, "location": {"type": "str", "description": "The location for which you want to gather information about global media presence (e.g., United States, China, Brazil)"}}, "required": ["time_period", "media_type"], "responses": {"media_presence": {"type": "str", "description": "The presence and impact of the specified media type in the given location over the specified time period"}}}
{"api_name": "getMediaAndGlobalization", "api_description": "Retrieve information about media and globalization", "field": "Media Studies/Media and Globalization", "parameters": {"topic": {"type": "str", "description": "The specific topic within media and globalization (e.g., cultural imperialism, media convergence, cultural hybridity)"}}, "required": [], "responses": {"information": {"type": "str", "description": "Information about the specified topic in relation to media and globalization"}}}
{"api_name": "getPopularMusic", "api_description": "Retrieve information about popular music", "field": "Media Studies/Media and Popular Music", "parameters": {"genre": {"type": "str", "description": "Specify the genre of popular music to retrieve information about (e.g., pop, rock, hip-hop)"}, "artist": {"type": "str", "description": "Specify the artist of popular music to retrieve information about"}}, "required": [], "responses": {"title": {"type": "str", "description": "The title of the popular music"}, "artist": {"type": "str", "description": "The artist of the popular music"}, "genre": {"type": "str", "description": "The genre of the popular music"}}}
{"api_name": "getMusicLyrics", "api_description": "Retrieve lyrics for a popular music", "field": "Media Studies/Media and Popular Music", "parameters": {"title": {"type": "str", "description": "The title of the popular music"}, "artist": {"type": "str", "description": "The artist of the popular music"}}, "required": ["title", "artist"], "responses": {"lyrics": {"type": "str", "description": "The lyrics of the popular music"}}}
{"api_name": "getSportsNews", "api_description": "Retrieve the latest news about sports", "field": "Media Studies/Media and Sports", "parameters": {"sport": {"type": "str", "description": "Specify the sport for which you want to get news (e.g., football, basketball, tennis)"}, "league": {"type": "str", "description": "Specify the league for which you want to get news (e.g., Premier League, NBA, ATP)"}, "country": {"type": "str", "description": "Specify the country for which you want to get news (e.g., England, United States, Spain)"}}, "required": ["sport"], "responses": {"news": {"type": "str", "description": "The latest news related to the specified sport"}}}
{"api_name": "getGameDeveloper", "api_description": "Retrieve the developer of a video game", "field": "Media Studies/Video Game Studies", "parameters": {"game_title": {"type": "str", "description": "The title of the video game you want to get the developer (e.g., FIFA 21, Call of Duty: Warzone, The Legend of Zelda: Breath of the Wild)"}}, "required": ["game_title"], "responses": {"developer": {"type": "str", "description": "The developer of the video game"}}}
{"api_name": "plotLineChart", "api_description": "Generate a line chart to visualize data", "field": "Data Science/Data Visualization", "parameters": {"data": {"type": "str", "description": "The data to be plotted (e.g., pandas DataFrame)"}, "x": {"type": "str", "description": "The variable to be plotted on the x-axis"}, "y": {"type": "str", "description": "The variable to be plotted on the y-axis"}}, "required": ["data", "x", "y"], "responses": {"plot": {"type": "str", "description": "The generated line chart"}}}
{"api_name": "createScatterPlot", "api_description": "Create a scatter plot visualization", "field": "Data Science/Data Visualization", "parameters": {"data": {"type": "str", "description": "The input data for the scatter plot"}, "x_axis": {"type": "str", "description": "The variable to be plotted on the x-axis of the scatter plot"}, "y_axis": {"type": "str", "description": "The variable to be plotted on the y-axis of the scatter plot"}, "title": {"type": "str", "description": "The title of the scatter plot"}, "color": {"type": "str", "description": "The variable used to color the data points"}}, "required": ["data", "x_axis", "y_axis"], "responses": {"visualization": {"type": "str", "description": "The generated scatter plot visualization"}}}
{"api_name": "recognizeText", "api_description": "Recognize text in an image", "field": "Data Science/Computer Vision", "parameters": {"image_path": {"type": "str", "description": "The path of the image containing text"}}, "required": ["image_path"], "responses": {"text": {"type": "str", "description": "The recognized text in the image"}}}
{"api_name": "imageSegmentation", "api_description": "Segment objects in an image", "field": "Data Science/Computer Vision", "parameters": {"image_path": {"type": "str", "description": "The path of the image to be segmented"}}, "required": ["image_path"], "responses": {"segmented_image": {"type": "str", "description": "The path of the segmented image"}}}
{"api_name": "getTextSentiment", "api_description": "Analyze the sentiment of a given text", "field": "Data Science/Text Mining", "parameters": {"text": {"type": "str", "description": "The text to analyze for sentiment"}}, "required": ["text"], "responses": {"sentiment": {"type": "str", "description": "The sentiment of the given text (e.g., positive, negative, neutral)"}}}
{"api_name": "removeMissingValues", "api_description": "Remove missing values from the dataset", "field": "Data Science/Data Preprocessing", "parameters": {"data": {"type": "str", "description": "The dataset with missing values (e.g., path to CSV file)"}, "missing_value_indicator": {"type": "str", "description": "Indicator used to represent missing values (e.g., 'NA', 'NaN', '?')"}}, "required": ["data"], "responses": {"cleaned_data": {"type": "str", "description": "The dataset with missing values removed"}}}
{"api_name": "normalizeData", "api_description": "Normalize the numeric features in the dataset", "field": "Data Science/Data Preprocessing", "parameters": {"data": {"type": "str", "description": "The dataset with numeric features to be normalized (e.g., path to CSV file)"}}, "required": ["data"], "responses": {"normalized_data": {"type": "str", "description": "The dataset with normalized numeric features"}}}
{"api_name": "encodeCategoricalVariables", "api_description": "Encode categorical variables in the dataset", "field": "Data Science/Data Preprocessing", "parameters": {"data": {"type": "str", "description": "The dataset with categorical variables to be encoded (e.g., path to CSV file)"}, "encoding_method": {"type": "str", "description": "Method for encoding categorical variables (e.g., 'onehot', 'label')"}}, "required": ["data"], "responses": {"encoded_data": {"type": "str", "description": "The dataset with categorical variables encoded"}}}
{"api_name": "preprocessData", "api_description": "Process raw data to make it ready for analysis", "field": "Data Science/Data Preprocessing", "parameters": {"data": {"type": "str", "description": "The raw data to be preprocessed"}, "missing_values": {"type": "str", "description": "Specify how missing values are represented in the data (e.g., NaN, null)"}, "remove_duplicates": {"type": "bool", "description": "Flag to indicate whether to remove duplicate rows from the data"}, "feature_scaling": {"type": "bool", "description": "Flag to indicate whether to perform feature scaling on the data"}}, "required": ["data"], "responses": {"preprocessed_data": {"type": "str", "description": "The preprocessed data ready for analysis"}}}
{"api_name": "removeMissingData", "api_description": "Remove missing data from the dataset", "field": "Data Science/Data Preprocessing", "parameters": {"dataset": {"type": "str", "description": "The input dataset with missing data"}}, "required": ["dataset"], "responses": {"cleaned_dataset": {"type": "str", "description": "The dataset without missing data"}}}
{"api_name": "splitDataset", "api_description": "Split the dataset into training and testing sets", "field": "Data Science/Data Preprocessing", "parameters": {"dataset": {"type": "str", "description": "The input dataset to split"}, "target_variable": {"type": "str", "description": "The target variable column in the dataset"}, "test_size": {"type": "float", "description": "The proportion of the dataset to include in the test split (e.g., 0.2 for 20%)"}, "random_state": {"type": "int", "description": "The random seed for reproducibility"}}, "required": ["dataset", "target_variable", "test_size"], "responses": {"train_dataset": {"type": "str", "description": "The training dataset"}, "test_dataset": {"type": "str", "description": "The testing dataset"}}}
{"api_name": "reduceDimensions", "api_description": "Reduce the dimensionality of a dataset", "field": "Data Science/Dimensionality Reduction", "parameters": {"data": {"type": "str", "description": "The dataset for dimensionality reduction (e.g., data.csv)"}, "method": {"type": "str", "description": "The method to be used for dimensionality reduction (e.g., PCA, t-SNE)"}}, "required": ["data"], "responses": {"reduced_data": {"type": "str", "description": "The reduced dataset with reduced dimensions"}}}
{"api_name": "trainClassifier", "api_description": "Train a classification model", "field": "Data Science/Classification", "parameters": {"data": {"type": "str", "description": "The dataset used for training the classification model"}}, "required": ["data"], "responses": {"model": {"type": "str", "description": "The trained classification model"}}}
{"api_name": "predictClass", "api_description": "Predict the class for a given input", "field": "Data Science/Classification", "parameters": {"input_data": {"type": "str", "description": "The data for which the class needs to be predicted"}}, "required": ["input_data"], "responses": {"predicted_class": {"type": "str", "description": "The predicted class for the input data"}}}
{"api_name": "checkEthicalPractices", "api_description": "Check if data science practices follow ethical guidelines", "field": "Data Science/Data Ethics", "parameters": {"dataset": {"type": "str", "description": "The dataset to be analyzed for ethical practices (e.g., customer data, medical records)"}, "methods": {"type": "str", "description": "The data science methods used on the dataset (e.g., machine learning, data mining)"}, "industry": {"type": "str", "description": "The industry the data science project is related to (e.g., finance, healthcare)"}}, "required": ["dataset"], "responses": {"ethical": {"type": "bool", "description": "True if the data science practices follow ethical guidelines, False otherwise"}, "ethics_violations": {"type": "str", "description": "A description of any identified ethical violations in the data science project"}}}
{"api_name": "getSurvivalTime", "api_description": "Retrieve the survival time for a specific group of subjects", "field": "Data Science/Survival Analysis", "parameters": {"group": {"type": "str", "description": "The group for which you want to get the survival time (e.g., treatment, control)"}, "covariates": {"type": "str", "description": "The covariates that you want to consider"}, "time_unit": {"type": "str", "description": "The unit of time for survival (e.g., days, months, years)"}}, "required": ["group"], "responses": {"survival_time": {"type": "float", "description": "The survival time for the specified group"}, "time_unit": {"type": "str", "description": "The unit of time in which the survival time is provided"}}}
{"api_name": "getSocialNetworkMetrics", "api_description": "Retrieve social network metrics for a given dataset", "field": "Data Science/Social Network Analysis", "parameters": {"dataset_name": {"type": "str", "description": "The name of the dataset to perform social network analysis on (e.g., Facebook, Twitter, LinkedIn)"}, "metric_type": {"type": "str", "description": "The type of social network metric to be retrieved (e.g., degree centrality, betweenness centrality, clustering coefficient)"}, "threshold": {"type": "float", "description": "The threshold value to consider while calculating the social network metric (e.g., 0.5, 0.1, 0.8)"}}, "required": ["dataset_name", "metric_type"], "responses": {"metric_value": {"type": "float", "description": "The calculated value of the social network metric for the given dataset"}, "unit": {"type": "str", "description": "The unit of the social network metric"}}}
{"api_name": "evaluateAgent", "api_description": "Evaluate a trained reinforcement learning agent's performance on a given environment", "field": "Data Science/Reinforcement Learning", "parameters": {"environment": {"type": "str", "description": "The environment on which to evaluate the agent (e.g., OpenAI Gym environment)"}, "episodes": {"type": "int", "description": "The number of episodes for evaluation"}}, "required": ["environment", "episodes"], "responses": {"average_reward": {"type": "float", "description": "The average reward achieved by the agent during evaluation"}}}
{"api_name": "getActionValue", "api_description": "Retrieve the action value for a given state", "field": "Data Science/Reinforcement Learning", "parameters": {"state": {"type": "str", "description": "The state for which you want to retrieve the action value (e.g., S1, S2, S3)"}}, "required": ["state"], "responses": {"action_value": {"type": "float", "description": "The action value for the specified state"}}}
{"api_name": "getBIReport", "api_description": "Retrieve a business intelligence report", "field": "Data Science/Business Intelligence", "parameters": {"report_type": {"type": "str", "description": "The type of BI report to retrieve (e.g., sales report, customer analysis, revenue forecast)"}, "time_frame": {"type": "str", "description": "The time frame for the report (e.g., monthly, quarterly, yearly)"}, "region": {"type": "str", "description": "The region for which the report is generated (e.g., North America, Europe, Asia)"}}, "required": ["report_type"], "responses": {"report_data": {"type": "str", "description": "The data included in the BI report"}, "timestamp": {"type": "str", "description": "The timestamp when the report was generated"}}}
{"api_name": "getDataStrategy", "api_description": "Retrieve data strategy information", "field": "Data Science/Data Strategy", "parameters": {"business_objectives": {"type": "str", "description": "The business objectives you want to achieve with data strategy"}, "data_sources": {"type": "str", "description": "The data sources you have available for data strategy"}, "analytics_tools": {"type": "str", "description": "The analytics tools you plan to use for data strategy"}}, "required": ["business_objectives"], "responses": {"strategy": {"type": "str", "description": "The recommended data strategy based on the given business objectives, data sources, and analytics tools"}}}
{"api_name": "createDataPipeline", "api_description": "Create a data pipeline for processing and transforming data", "field": "Data Science/Data Pipelines", "parameters": {"input_data": {"type": "str", "description": "The path or location of the input data file/folder"}, "output_data": {"type": "str", "description": "The path or location to store the processed and transformed data"}, "pipeline_steps": {"type": "str", "description": "The sequence of steps to perform on the data (e.g., cleaning, transformation, feature extraction)"}, "pipeline_config": {"type": "str", "description": "The configuration file for the data pipeline"}}, "required": ["input_data", "output_data"], "responses": {"pipeline_status": {"type": "str", "description": "The status of the data pipeline execution"}, "processed_data": {"type": "str", "description": "The path or location of the processed data"}}}
{"api_name": "getDataParallelism", "api_description": "Retrieve information about data parallelism in distributed computing", "field": "Data Science/Distributed Computing", "parameters": {"dataset": {"type": "str", "description": "The name of the dataset to be processed in parallel (e.g., mnist, cifar-10, imdb)"}, "num_workers": {"type": "int", "description": "The number of workers used for parallel processing"}, "batch_size": {"type": "int", "description": "The size of the batch for each worker"}}, "required": ["dataset", "num_workers"], "responses": {"processed_data": {"type": "str", "description": "The processed data after parallel computation"}}}
{"api_name": "runDistributedJob", "api_description": "Submit a distributed computing job for execution", "field": "Data Science/Distributed Computing", "parameters": {"job_name": {"type": "str", "description": "Name of the job to be executed"}, "input_data": {"type": "str", "description": "Path or location of the input data for the job"}, "output_path": {"type": "str", "description": "Path or location to store the output of the job"}}, "required": ["job_name", "input_data", "output_path"], "responses": {"status": {"type": "str", "description": "Current status of the job (e.g., running, completed, failed)"}, "execution_time": {"type": "int", "description": "Time taken for execution of the job in seconds"}}}
{"api_name": "getSubstanceAbuseInfo", "api_description": "Retrieve information about substance abuse", "field": "Social Work/Substance abuse", "parameters": {"age": {"type": "int", "description": "The age of the individual seeking information on substance abuse (e.g., 18, 25, 40)"}, "gender": {"type": "str", "description": "The gender of the individual seeking information on substance abuse (e.g., male, female, non-binary)"}, "substance_type": {"type": "str", "description": "The type of substance the individual is seeking information on (e.g., alcohol, opioids, cocaine)"}}, "required": ["age", "substance_type"], "responses": {"risk_level": {"type": "str", "description": "The risk level associated with substance abuse for the given individual (e.g., low, moderate, high)"}, "treatment_options": {"type": "str", "description": "Recommended treatment options for the given individual (e.g., therapy, support groups, medication)"}, "support_services": {"type": "str", "description": "Available support services for the given individual (e.g., counseling, helplines, rehabilitation centers)"}}}
{"api_name": "getSocialSupport", "api_description": "Retrieve social support services", "field": "Social Work/Healthcare social work", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve social support services (e.g., city, town, state)"}}, "required": ["location"], "responses": {"support_services": {"type": "str", "description": "The social support services available at the specified location"}}}
{"api_name": "getMentalHealthAssessment", "api_description": "Retrieve mental health assessment results", "field": "Social Work/Healthcare social work", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient for whom you want to retrieve mental health assessment results"}}, "required": ["patient_id"], "responses": {"assessment_results": {"type": "str", "description": "The results of the mental health assessment for the patient"}}}
{"api_name": "getGeriatricSocialWorkInfo", "api_description": "Retrieve information about geriatric social work", "field": "Social Work/Geriatric social work", "parameters": {"location": {"type": "str", "description": "The location for which you want to get geriatric social work information (e.g., city, state, country)"}}, "required": ["location"], "responses": {"description": {"type": "str", "description": "A description of geriatric social work services available at the specified location"}, "contact": {"type": "str", "description": "Contact information for the geriatric social work services provider"}}}
{"api_name": "getGeriatricAssessment", "api_description": "Retrieve geriatric assessment information", "field": "Social Work/Geriatric social work", "parameters": {"age": {"type": "int", "description": "The age of the individual being assessed"}, "gender": {"type": "str", "description": "The gender of the individual being assessed"}, "medical_history": {"type": "str", "description": "The medical history of the individual being assessed"}, "functional_status": {"type": "str", "description": "The functional status of the individual being assessed"}}, "required": ["age"], "responses": {"assessment_results": {"type": "str", "description": "The results of the geriatric assessment"}}}
{"api_name": "getCommunityDemographics", "api_description": "Retrieve demographic information of a community", "field": "Social Work/Community development", "parameters": {"location": {"type": "str", "description": "The location of the community (e.g., city, town, neighborhood)"}, "year": {"type": "int", "description": "The year for which you want to get the demographic information"}}, "required": ["location"], "responses": {"population": {"type": "int", "description": "The total population of the community"}, "percentage_male": {"type": "float", "description": "The percentage of males in the community"}, "percentage_female": {"type": "float", "description": "The percentage of females in the community"}, "median_age": {"type": "float", "description": "The median age of the community"}}}
{"api_name": "getHomelessnessCount", "api_description": "Retrieve the current count of homeless individuals in a specific location", "field": "Social Work/Homelessness", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the homelessness count (e.g., city, state, country)"}, "time_period": {"type": "str", "description": "The desired time period for homelessness count (e.g., monthly, yearly)"}, "age_group": {"type": "str", "description": "Specify an age group for homelessness count (e.g., children, adults, seniors)"}}, "required": ["location"], "responses": {"count": {"type": "int", "description": "The count of homeless individuals at the specified location"}, "time_period": {"type": "str", "description": "The time period in which the count is provided"}}}
{"api_name": "getFamilyTherapy", "api_description": "Retrieve information about family therapy", "field": "Social Work/Family therapy", "parameters": {"family_members": {"type": "str", "description": "The names of the family members participating in therapy (e.g., John, Mary, Sarah)"}, "session_type": {"type": "str", "description": "The type of therapy session (e.g., individual, couple, family)"}, "goals": {"type": "str", "description": "The goals of the therapy session (e.g., improve communication, resolve conflicts)"}}, "required": ["family_members", "session_type"], "responses": {"therapist": {"type": "str", "description": "The name of the therapist conducting the session"}, "session_duration": {"type": "int", "description": "The duration of the therapy session in minutes"}, "progress": {"type": "str", "description": "The progress made during the therapy session"}}}
{"api_name": "createForensicSocialWorkRecord", "api_description": "Create a new forensic social work record for a specific case", "field": "Social Work/Forensic social work", "parameters": {"case_id": {"type": "str", "description": "The unique ID or name of the forensic social work case"}, "date": {"type": "str", "description": "The date of the forensic social work record (e.g., YYYY-MM-DD)"}, "description": {"type": "str", "description": "A description of the forensic social work record"}}, "required": ["case_id", "date", "description"], "responses": {"record_id": {"type": "str", "description": "The unique ID of the created forensic social work record"}}}
{"api_name": "getCampaignAnalytics", "api_description": "Retrieve analytics data for a marketing campaign", "field": "Business/Marketing", "parameters": {"campaign_id": {"type": "int", "description": "The unique identifier of the marketing campaign"}}, "required": ["campaign_id"], "responses": {"clicks": {"type": "int", "description": "The number of clicks generated by the campaign"}, "impressions": {"type": "int", "description": "The number of impressions received by the campaign"}, "conversions": {"type": "int", "description": "The number of conversions attributed to the campaign"}}}
{"api_name": "startBusiness", "api_description": "Start a new business venture", "field": "Business/Entrepreneurship", "parameters": {"business_name": {"type": "str", "description": "The name of the business"}, "industry": {"type": "str", "description": "The industry in which the business operates (e.g., technology, retail)"}, "target_market": {"type": "str", "description": "The target market for the business (e.g., young adults, women, professionals)"}, "capital": {"type": "float", "description": "The initial capital investment for the business (e.g., 10000.0, 500000.0)"}}, "required": ["business_name", "industry", "capital"], "responses": {"success": {"type": "bool", "description": "Indicates whether the business venture was successful"}, "business_id": {"type": "str", "description": "Unique identifier for the new business"}}}
{"api_name": "calculateBreakEvenPoint", "api_description": "Calculate the break-even point for a business", "field": "Business/Accounting", "parameters": {"fixed_costs": {"type": "float", "description": "The total fixed costs of the business"}, "variable_costs": {"type": "float", "description": "The total variable costs per unit of product/service"}, "selling_price": {"type": "float", "description": "The selling price per unit of product/service"}}, "required": ["fixed_costs", "variable_costs", "selling_price"], "responses": {"break_even_point": {"type": "float", "description": "The calculated break-even point in terms of number of units"}}}
{"api_name": "getIncomeStatement", "api_description": "Retrieve the income statement of a business", "field": "Business/Accounting", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to get the income statement"}}, "required": ["company_name"], "responses": {"revenue": {"type": "float", "description": "The total revenue of the company"}, "expenses": {"type": "float", "description": "The total expenses of the company"}, "net_profit": {"type": "float", "description": "The net profit of the company"}}}
{"api_name": "getCashFlowStatement", "api_description": "Retrieve the cash flow statement of a business", "field": "Business/Accounting", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to get the cash flow statement"}}, "required": ["company_name"], "responses": {"operating_cash_flow": {"type": "float", "description": "The operating cash flow of the company"}, "investing_cash_flow": {"type": "float", "description": "The investing cash flow of the company"}, "financing_cash_flow": {"type": "float", "description": "The financing cash flow of the company"}}}
{"api_name": "checkTradeRegulations", "api_description": "Check the trade regulations and restrictions for a specific country", "field": "Business/International Business", "parameters": {"country": {"type": "str", "description": "The name of the country to check the regulations for"}}, "required": ["country"], "responses": {"regulations": {"type": "str", "description": "The trade regulations and restrictions for the specified country"}}}
{"api_name": "assessRisk", "api_description": "Assess the risk level for a business operation", "field": "Business/Risk Management", "parameters": {"operation_name": {"type": "str", "description": "The name of the business operation"}, "location": {"type": "str", "description": "The location of the business operation (e.g., city, country)"}, "revenue": {"type": "float", "description": "The annual revenue generated by the business operation (e.g., 1000000.0)"}, "employees": {"type": "int", "description": "The number of employees working in the business operation (e.g., 100)"}, "industry": {"type": "str", "description": "The industry in which the business operation operates (e.g., technology, finance)"}}, "required": ["operation_name", "location"], "responses": {"risk_level": {"type": "str", "description": "The level of risk associated with the business operation (e.g., low, medium, high)"}, "recommendations": {"type": "str", "description": "Recommendations for mitigating or managing the identified risks"}}}
{"api_name": "getBusinessGoals", "api_description": "Retrieve the business goals and objectives", "field": "Business/Strategic Management", "parameters": {}, "required": [], "responses": {"goals": {"type": "str", "description": "The strategic goals and objectives of the business"}}}
{"api_name": "getSWOTAnalysis", "api_description": "Retrieve the SWOT (Strengths, Weaknesses, Opportunities, Threats) analysis of the business", "field": "Business/Strategic Management", "parameters": {}, "required": [], "responses": {"SWOT_analysis": {"type": "str", "description": "The SWOT analysis of the business"}}}
{"api_name": "getSalesByCategory", "api_description": "Retrieve sales data by category", "field": "Business/Retail Management", "parameters": {"category": {"type": "str", "description": "The category for which you want to retrieve sales data (e.g., electronics, clothing, home goods)"}, "time_period": {"type": "str", "description": "Specify a time period for sales data (e.g., daily, weekly, monthly)"}, "location": {"type": "str", "description": "The location for which you want to retrieve sales data (e.g., store name, city, region)"}}, "required": ["category"], "responses": {"total_sales": {"type": "float", "description": "The total sales for the specified category"}, "unit": {"type": "str", "description": "The unit of currency in which the sales data is provided"}}}
{"api_name": "getSeaSurfaceTemperature", "api_description": "Retrieve sea surface temperature information", "field": "Oceanography/Physical oceanography", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the sea surface temperature (e.g., Pacific Ocean, Caribbean Sea, Mediterranean Sea)"}, "time": {"type": "str", "description": "The desired time for sea surface temperature (e.g., current, historical)"}}, "required": ["location"], "responses": {"temperature": {"type": "float", "description": "The sea surface temperature at the specified location"}}}
{"api_name": "getSalinity", "api_description": "Retrieve ocean salinity information", "field": "Oceanography/Physical oceanography", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the ocean salinity (e.g., Arctic Ocean, Red Sea, Gulf of Mexico)"}, "time": {"type": "str", "description": "The desired time for ocean salinity (e.g., current, historical)"}}, "required": ["location"], "responses": {"salinity": {"type": "float", "description": "The ocean salinity at the specified location"}}}
{"api_name": "getSpeciesDistribution", "api_description": "Retrieve the distribution of different species in the ocean", "field": "Oceanography/Biological oceanography", "parameters": {"species": {"type": "str", "description": "The name of the species for which you want to retrieve the distribution"}, "time_period": {"type": "str", "description": "The time period for which you want to retrieve the distribution (e.g., past week, past month, past year)"}}, "required": ["species"], "responses": {"distribution": {"type": "str", "description": "The distribution of the specified species in the ocean"}}}
{"api_name": "getSeafloorTopography", "api_description": "Retrieve information about the topography of the seafloor", "field": "Oceanography/Marine geology and geophysics", "parameters": {"location": {"type": "str", "description": "The specific location for which you want to retrieve seafloor topography information (e.g., Pacific Ocean, Baltic Sea)"}, "depth_range": {"type": "str", "description": "Specify the depth range for seafloor topography (e.g., shallow, deep, abyssal)"}}, "required": ["location"], "responses": {"topography_data": {"type": "str", "description": "The seafloor topography data obtained for the specified location and depth range"}}}
{"api_name": "getSeafloorBathymetry", "api_description": "Retrieve seafloor bathymetry information", "field": "Oceanography/Marine geology and geophysics", "parameters": {"location": {"type": "str", "description": "The location for which you want to get seafloor bathymetry (e.g., Great Barrier Reef, Galapagos Islands, Maldives)"}}, "required": ["location"], "responses": {"seafloor_bathymetry": {"type": "str", "description": "The description of seafloor bathymetry at the specified location"}}}
{"api_name": "getSeafloorSonarImages", "api_description": "Retrieve seafloor sonar images", "field": "Oceanography/Marine geology and geophysics", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the seafloor sonar images (e.g., Pacific Ocean, Atlantic Ocean)"}, "sonar_type": {"type": "str", "description": "Specify the type of sonar used for image collection (e.g., side-scan, multibeam)"}}, "required": ["location"], "responses": {"sonar_images": {"type": "str", "description": "The seafloor sonar images at the specified location"}}}
{"api_name": "getCurrentDirection", "api_description": "Retrieve the direction of ocean currents at a specific location and time", "field": "Oceanography/Marine hydrodynamics", "parameters": {"location": {"type": "str", "description": "The geographical coordinates of the location (e.g., latitude, longitude)"}, "time": {"type": "str", "description": "The time for which you want to get the current direction (e.g., current time, specific date and time)"}}, "required": ["location"], "responses": {"current_direction": {"type": "str", "description": "The direction of ocean currents at the specified location and time"}}}
{"api_name": "getFishCatch", "api_description": "Retrieve the catch information of a specific fish species in a particular area", "field": "Oceanography/Marine fisheries", "parameters": {"species": {"type": "str", "description": "The name of the fish species you want to get catch information for (e.g., Tuna, Salmon, Cod)"}, "area": {"type": "str", "description": "The specific area for which you want to get the catch information (e.g., Pacific Ocean, North Sea)"}, "year": {"type": "int", "description": "The year for which you want to retrieve the catch information"}}, "required": ["species", "area"], "responses": {"catch_quantity": {"type": "int", "description": "The quantity of the fish species caught in the specified area and year"}, "catch_value": {"type": "float", "description": "The total value of the catch in monetary terms"}}}
{"api_name": "getAquacultureProduction", "api_description": "Retrieve the production information of marine aquaculture", "field": "Oceanography/Marine aquaculture", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the aquaculture production (e.g., coastal region, specific marine farm)"}, "year": {"type": "int", "description": "The specific year for which you want to retrieve the aquaculture production"}}, "required": ["location", "year"], "responses": {"production": {"type": "int", "description": "The aquaculture production at the specified location and year"}}}
{"api_name": "getMarineMicrobiologyData", "api_description": "Retrieve marine microbiology data", "field": "Oceanography/Marine microbiology", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve marine microbiology data (e.g., coastal, open ocean)"}, "depth_range": {"type": "str", "description": "Specify the depth range for the data (e.g., surface, thermocline, deep sea)"}}, "required": ["location"], "responses": {"bacterial_count": {"type": "int", "description": "The count of bacteria in the specified location and depth range"}, "phytoplankton_count": {"type": "int", "description": "The count of phytoplankton in the specified location and depth range"}}}
{"api_name": "getFishStock", "api_description": "Retrieve the current stock information of a specific fish species", "field": "Oceanography/Marine natural resource management", "parameters": {"fish_species": {"type": "str", "description": "The specific fish species for which you want to retrieve the stock information (e.g., tuna, salmon, cod)"}, "location": {"type": "str", "description": "The location where the stock information is required (e.g., Atlantic Ocean, Pacific Ocean)"}}, "required": ["fish_species", "location"], "responses": {"stock_level": {"type": "str", "description": "The current stock level of the specified fish species"}, "unit": {"type": "str", "description": "The unit in which the stock level is provided (e.g., metric tons, number of individuals)"}}}
{"api_name": "getWavePower", "api_description": "Retrieve wave power information", "field": "Oceanography/Marine renewable energy", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the wave power (e.g., Atlantic Ocean, North Sea, Pacific Ocean)"}, "wave_height": {"type": "float", "description": "The desired wave height in meters (e.g., 2.5, 4.8, 6.2)"}}, "required": ["location"], "responses": {"wave_power": {"type": "float", "description": "The wave power at the specified location in KW/m"}}}
{"api_name": "getTidalEnergy", "api_description": "Retrieve tidal energy information", "field": "Oceanography/Marine renewable energy", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the tidal energy information (e.g., North Sea, Bay of Fundy, Pentland Firth)"}, "time_period": {"type": "str", "description": "Specify the time period for the tidal energy information (e.g., monthly, annual)"}}, "required": ["location"], "responses": {"tidal_energy": {"type": "float", "description": "The tidal energy potential at the specified location"}, "unit": {"type": "str", "description": "The unit of tidal energy in which the energy potential is provided"}}}
{"api_name": "getWaveEnergy", "api_description": "Retrieve wave energy information", "field": "Oceanography/Marine renewable energy", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the wave energy information (e.g., Atlantic Ocean, Pacific Ocean, Indian Ocean)"}, "time_period": {"type": "str", "description": "Specify the time period for the wave energy information (e.g., monthly, annual)"}}, "required": ["location"], "responses": {"wave_energy": {"type": "float", "description": "The wave energy potential at the specified location"}, "unit": {"type": "str", "description": "The unit of wave energy in which the energy potential is provided"}}}
{"api_name": "getOffshoreWindEnergy", "api_description": "Retrieve offshore wind energy information", "field": "Oceanography/Marine renewable energy", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the offshore wind energy information (e.g., North Sea, Baltic Sea, Gulf of Mexico)"}, "time_period": {"type": "str", "description": "Specify the time period for the offshore wind energy information (e.g., monthly, annual)"}}, "required": ["location"], "responses": {"offshore_wind_energy": {"type": "float", "description": "The offshore wind energy potential at the specified location"}, "unit": {"type": "str", "description": "The unit of offshore wind energy in which the energy potential is provided"}}}
{"api_name": "getHumidity", "api_description": "Retrieve the current humidity information", "field": "Environmental Science/Atmospheric Science", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the humidity information (e.g., Beijing, London, New York)"}}, "required": ["location"], "responses": {"humidity": {"type": "float", "description": "The current humidity at the specified location"}}}
{"api_name": "getCarbonLevels", "api_description": "Retrieve carbon levels data", "field": "Environmental Science/Biogeochemistry", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the carbon levels data (e.g., forest, ocean, urban area)"}, "time_frame": {"type": "str", "description": "Specify a time frame for the data (e.g., yearly, monthly, daily)"}}, "required": ["location"], "responses": {"carbon_levels": {"type": "float", "description": "The carbon levels at the specified location and time frame"}}}
{"api_name": "getHabitatQuality", "api_description": "Retrieve the quality of habitat in a specific area", "field": "Environmental Science/Ecology", "parameters": {"location": {"type": "str", "description": "The area for which you want to retrieve the habitat quality (e.g., forest, wetland, desert)"}, "time_period": {"type": "str", "description": "The time period for which you want to retrieve the habitat quality (e.g., year, month, season)"}}, "required": ["location"], "responses": {"habitat_quality": {"type": "str", "description": "The quality of habitat in the specified area"}, "time_period": {"type": "str", "description": "The time period for which the habitat quality is provided"}}}
{"api_name": "getThermalComfort", "api_description": "Retrieve thermal comfort information", "field": "Environmental Science/Environmental Health", "parameters": {"temperature": {"type": "float", "description": "The temperature in Celsius at the location"}, "relative_humidity": {"type": "float", "description": "The relative humidity in percentage at the location"}}, "required": ["temperature", "relative_humidity"], "responses": {"comfort_level": {"type": "str", "description": "The level of thermal comfort based on the provided temperature and relative humidity"}}}
{"api_name": "getEnvironmentalLawViolations", "api_description": "Retrieve information about environmental law violations", "field": "Environmental Science/Environmental Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve environmental law violation information (e.g., United States, China, Brazil)"}, "year": {"type": "int", "description": "Specify a year to filter the environmental law violations"}}, "required": ["country"], "responses": {"violations": {"type": "str", "description": "The environmental law violations matching the specified criteria"}}}
{"api_name": "getSoilTexture", "api_description": "Retrieve soil texture information", "field": "Environmental Science/Soil Science", "parameters": {"location": {"type": "str", "description": "The location from where you want to get the soil texture (e.g., garden, farm, park)"}}, "required": ["location"], "responses": {"texture": {"type": "str", "description": "The texture of the soil at the specified location"}}}
{"api_name": "updateRecipe", "api_description": "Update an existing recipe", "field": "Culinary Arts/Culinary Management", "parameters": {"recipe_id": {"type": "int", "description": "The ID of the recipe to update"}, "name": {"type": "str", "description": "The updated name of the recipe"}, "ingredients": {"type": "str", "description": "The updated list of ingredients required for the recipe"}, "instructions": {"type": "str", "description": "The updated step-by-step instructions to prepare the recipe"}}, "required": ["recipe_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the recipe was successfully updated"}}}
{"api_name": "sousVideCooking", "api_description": "Retrieve sous vide cooking instructions", "field": "Culinary Arts/Sous Vide Cooking", "parameters": {"food_item": {"type": "str", "description": "The food item you want to cook sous vide (e.g., steak, chicken breast, salmon)"}, "desired_doneness": {"type": "str", "description": "The desired level of doneness for the food item (e.g., rare, medium-rare, well-done)"}, "cooking_time": {"type": "int", "description": "The desired cooking time in minutes for the food item"}}, "required": ["food_item", "desired_doneness"], "responses": {"cooking_instructions": {"type": "str", "description": "The detailed instructions for cooking the food item sous vide"}}}
{"api_name": "getArtisanalFoods", "api_description": "Retrieve information about artisanal foods", "field": "Culinary Arts/Artisanal Foods", "parameters": {"food_type": {"type": "str", "description": "The type of artisanal food you want to retrieve information about (e.g., cheese, chocolate, bread)"}, "country_of_origin": {"type": "str", "description": "The country of origin for the artisanal food (e.g., France, Italy, Japan)"}, "tasting_notes": {"type": "str", "description": "Specify tasting notes for the artisanal food (e.g., fruity, nutty, spicy)"}}, "required": ["food_type"], "responses": {"food_name": {"type": "str", "description": "The name of the artisanal food"}, "country_of_origin": {"type": "str", "description": "The country of origin for the artisanal food"}, "description": {"type": "str", "description": "A brief description of the artisanal food"}, "tasting_notes": {"type": "str", "description": "Tasting notes for the artisanal food"}}}
{"api_name": "getRobotHealth", "api_description": "Retrieve the health status of a robot", "field": "Artificial Intelligence/Robotics", "parameters": {"robot_id": {"type": "str", "description": "The unique identifier of the robot"}}, "required": ["robot_id"], "responses": {"battery_level": {"type": "int", "description": "The current battery level of the robot"}, "temperature": {"type": "float", "description": "The temperature of the robot"}, "errors": {"type": "str", "description": "Any errors or warnings reported by the robot"}}}
{"api_name": "addProperty", "api_description": "Add a new property to an existing ontology", "field": "Artificial Intelligence/Knowledge Representation", "parameters": {"ontology_name": {"type": "str", "description": "Name of the ontology"}, "property_name": {"type": "str", "description": "Name of the property to be added"}}, "required": ["ontology_name", "property_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the property addition was successful"}}}
{"api_name": "addIndividual", "api_description": "Add a new individual to an existing class in an ontology", "field": "Artificial Intelligence/Knowledge Representation", "parameters": {"ontology_name": {"type": "str", "description": "Name of the ontology"}, "class_name": {"type": "str", "description": "Name of the class to which the individual belongs"}, "individual_name": {"type": "str", "description": "Name of the individual to be added"}}, "required": ["ontology_name", "class_name", "individual_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the individual addition was successful"}}}
{"api_name": "queryOntology", "api_description": "Query an ontology to retrieve information about classes, individuals, or properties", "field": "Artificial Intelligence/Knowledge Representation", "parameters": {"ontology_name": {"type": "str", "description": "Name of the ontology"}, "query_type": {"type": "str", "description": "Type of query to be performed (e.g., class, individual, property)"}, "query_string": {"type": "str", "description": "String representing the query"}}, "required": ["ontology_name", "query_type", "query_string"], "responses": {"results": {"type": "str", "description": "Results of the query"}}}
{"api_name": "getExpertSystem", "api_description": "Retrieve information on expert systems", "field": "Artificial Intelligence/Expert Systems", "parameters": {"system_name": {"type": "str", "description": "The name of the expert system (e.g., MYCIN, Dendral, PROSPECTOR)"}}, "required": ["system_name"], "responses": {"knowledge_base": {"type": "str", "description": "The knowledge base or facts used by the expert system"}, "inference_engine": {"type": "str", "description": "The inference engine used for reasoning and decision-making in the expert system"}, "domain": {"type": "str", "description": "The specific domain or field in which the expert system operates"}}}
{"api_name": "convertSpeechToText", "api_description": "Convert speech into text", "field": "Artificial Intelligence/Speech Recognition", "parameters": {"audio_file": {"type": "str", "description": "The audio file containing the speech data"}}, "required": ["audio_file"], "responses": {"text": {"type": "str", "description": "The text converted from the speech data"}}}
{"api_name": "detectEmotion", "api_description": "Detect the emotion expressed in a text or speech", "field": "Artificial Intelligence/Emotion Recognition", "parameters": {"text": {"type": "str", "description": "The text or speech for which you want to detect the emotion"}}, "required": ["text"], "responses": {"emotion": {"type": "str", "description": "The recognized emotion in the provided text or speech"}}}
{"api_name": "applyTransferLearning", "api_description": "Apply transfer learning to a pre-trained model", "field": "Artificial Intelligence/Transfer Learning", "parameters": {"model_name": {"type": "str", "description": "The name of the pre-trained model to be used for transfer learning"}, "dataset": {"type": "str", "description": "The dataset to be used for transfer learning"}, "batch_size": {"type": "int", "description": "The number of samples per batch during training"}, "num_epochs": {"type": "int", "description": "The number of epochs for training the transfer learning model"}}, "required": ["model_name", "dataset"], "responses": {"trained_model": {"type": "str", "description": "The path to the trained transfer learning model"}}}
{"api_name": "trainNeuralNetwork", "api_description": "Train a neural network with given training data", "field": "Artificial Intelligence/Neural Networks", "parameters": {"training_data": {"type": "str", "description": "The training data for the neural network (e.g., path to a CSV file)"}, "layers": {"type": "int", "description": "The number of layers in the neural network"}, "hidden_units": {"type": "int", "description": "The number of hidden units in each layer"}, "learning_rate": {"type": "float", "description": "The learning rate for the training process"}, "epochs": {"type": "int", "description": "The number of epochs for training"}}, "required": ["training_data", "layers", "hidden_units"], "responses": {"trained_model": {"type": "str", "description": "The trained neural network model"}}}
{"api_name": "evaluateNeuralNetwork", "api_description": "Evaluate the performance of a trained neural network", "field": "Artificial Intelligence/Artificial Neural Networks", "parameters": {"eval_data": {"type": "str", "description": "The evaluation data for the neural network"}, "trained_model": {"type": "str", "description": "The path to the trained neural network model"}}, "required": ["eval_data", "trained_model"], "responses": {"accuracy": {"type": "float", "description": "The accuracy of the neural network on the evaluation data"}}}
{"api_name": "trainRNN", "api_description": "Train a Recurrent Neural Network model", "field": "Artificial Intelligence/Recurrent Neural Networks", "parameters": {"data": {"type": "str", "description": "The training data for training the RNN model"}, "epochs": {"type": "int", "description": "The number of epochs to train the model for (e.g., 10, 100, 1000)"}, "batch_size": {"type": "int", "description": "The batch size for training the model (e.g., 16, 32, 64)"}, "learning_rate": {"type": "float", "description": "The learning rate for the optimizer (e.g., 0.001, 0.01, 0.1)"}}, "required": ["data"], "responses": {"model": {"type": "str", "description": "The trained RNN model"}, "loss": {"type": "float", "description": "The final loss value after training"}}}
{"api_name": "getMemoryNetworksData", "api_description": "Retrieve information about memory networks", "field": "Artificial Intelligence/Memory Networks", "parameters": {}, "required": [], "responses": {"data": {"type": "str", "description": "Information about memory networks"}}}
{"api_name": "storeMemory", "api_description": "Store a new piece of information in the memory network", "field": "Artificial Intelligence/Memory Networks", "parameters": {"knowledge": {"type": "str", "description": "The new knowledge to be stored in the memory network"}}, "required": ["knowledge"], "responses": {"message": {"type": "str", "description": "Indicates whether the memory storage was successful or not"}}}
{"api_name": "retrieveMemory", "api_description": "Retrieve stored information from the memory network", "field": "Artificial Intelligence/Memory Networks", "parameters": {"query": {"type": "str", "description": "The query to retrieve information from the memory network"}}, "required": ["query"], "responses": {"result": {"type": "str", "description": "The retrieved information from the memory network"}}}
{"api_name": "updateMemory", "api_description": "Update existing information in the memory network", "field": "Artificial Intelligence/Memory Networks", "parameters": {"old_knowledge": {"type": "str", "description": "The existing knowledge to be updated in the memory network"}, "new_knowledge": {"type": "str", "description": "The updated knowledge to replace the existing knowledge"}}, "required": ["old_knowledge", "new_knowledge"], "responses": {"message": {"type": "str", "description": "Indicates whether the memory update was successful or not"}}}
{"api_name": "deleteMemory", "api_description": "Delete stored information from the memory network", "field": "Artificial Intelligence/Memory Networks", "parameters": {"knowledge": {"type": "str", "description": "The knowledge to be deleted from the memory network"}}, "required": ["knowledge"], "responses": {"message": {"type": "str", "description": "Indicates whether the memory deletion was successful or not"}}}
{"api_name": "evolutionaryAlgorithm", "api_description": "Implement an evolutionary algorithm for problem optimization", "field": "Artificial Intelligence/Evolutionary Computation", "parameters": {"problem": {"type": "str", "description": "The problem to be optimized (e.g., traveling salesman problem, knapsack problem)"}, "population_size": {"type": "int", "description": "The size of the population in the evolutionary algorithm"}, "mutation_rate": {"type": "float", "description": "The rate at which mutations occur during reproduction"}, "max_generations": {"type": "int", "description": "The maximum number of generations to run the evolutionary algorithm for"}}, "required": ["problem", "population_size"], "responses": {"best_solution": {"type": "str", "description": "The best solution found by the evolutionary algorithm"}, "fitness_score": {"type": "float", "description": "The fitness score of the best solution"}}}
{"api_name": "getSwarmParameters", "api_description": "Retrieve the parameters of swarm intelligence algorithms", "field": "Artificial Intelligence/Swarm Intelligence", "parameters": {}, "required": [], "responses": {"parameters": {"type": "str", "description": "The parameters used in swarm intelligence algorithms, such as population size, communication range, velocity limit"}}}
{"api_name": "calculateMembership", "api_description": "Calculate the membership value of a given input to a fuzzy set", "field": "Artificial Intelligence/Fuzzy Logic", "parameters": {"fuzzy_set": {"type": "str", "description": "The fuzzy set for which you want to calculate the membership value (e.g., 'low', 'medium', 'high')"}, "input_value": {"type": "float", "description": "The input value whose membership value is to be calculated"}}, "required": ["fuzzy_set", "input_value"], "responses": {"membership_value": {"type": "float", "description": "The membership value of the input to the fuzzy set"}}}
{"api_name": "moveAgent", "api_description": "Move an agent to a new position in a multi-agent system", "field": "Artificial Intelligence/Multi-agent Systems", "parameters": {"agent_id": {"type": "int", "description": "The ID of the agent"}, "position": {"type": "str", "description": "The new position to which the agent will be moved"}, "environment": {"type": "str", "description": "The environment in which the agent is located"}}, "required": ["agent_id", "position", "environment"], "responses": {"status": {"type": "str", "description": "Status message indicating if the agent was successfully moved"}}}
{"api_name": "updateAgentKnowledge", "api_description": "Update the knowledge base of an agent in a multi-agent system", "field": "Artificial Intelligence/Multi-agent Systems", "parameters": {"agent_id": {"type": "int", "description": "The ID of the agent"}, "knowledge": {"type": "str", "description": "The new knowledge to be added to the agent's knowledge base"}}, "required": ["agent_id", "knowledge"], "responses": {"status": {"type": "str", "description": "Status message indicating if the knowledge update was successful"}}}
{"api_name": "executeAction", "api_description": "Execute an action on a specific agent in a multi-agent system", "field": "Artificial Intelligence/Multi-agent Systems", "parameters": {"agent_id": {"type": "int", "description": "The unique identifier of the agent on which the action will be executed"}, "action": {"type": "str", "description": "The action to be executed on the agent"}}, "required": ["agent_id", "action"], "responses": {"success": {"type": "bool", "description": "Indicates if the action was successfully executed"}}}
{"api_name": "explainModel", "api_description": "Explains the decision-making process of an AI model", "field": "Artificial Intelligence/Explainable AI", "parameters": {"model": {"type": "str", "description": "The name or ID of the AI model to be explained (e.g., model123, facialRecognition)"}, "input_data": {"type": "str", "description": "The input data used for prediction (e.g., image_path, text_string)"}, "method": {"type": "str", "description": "The explanation method to be used (e.g., LIME, SHAP)"}}, "required": ["model", "input_data"], "responses": {"explanation": {"type": "str", "description": "The explanation of the model's decision-making process"}}}
{"api_name": "greetHuman", "api_description": "Allows a robot to greet a human", "field": "Artificial Intelligence/Human-Robot Interaction", "parameters": {"robot_name": {"type": "str", "description": "The name of the robot"}, "human_name": {"type": "str", "description": "The name of the human"}}, "required": ["robot_name", "human_name"], "responses": {"greeting": {"type": "str", "description": "The greeting message from the robot"}}}
{"api_name": "getVehicleBatteryLevel", "api_description": "Retrieve the battery level of an autonomous vehicle.", "field": "Artificial Intelligence/Autonomous Vehicles", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the autonomous vehicle"}}, "required": ["vehicle_id"], "responses": {"battery_level": {"type": "int", "description": "The current battery level of the vehicle, represented as a percentage"}}}
{"api_name": "startAutonomousVehicle", "api_description": "Start the autonomous vehicle", "field": "Artificial Intelligence/Autonomous Vehicles", "parameters": {"vehicle_id": {"type": "str", "description": "The ID of the autonomous vehicle"}}, "required": ["vehicle_id"], "responses": {"status": {"type": "str", "description": "The status of the autonomous vehicle"}}}
{"api_name": "createVirtualAssistant", "api_description": "Create a virtual assistant", "field": "Artificial Intelligence/Virtual Assistants", "parameters": {"name": {"type": "str", "description": "The name of the virtual assistant to be created"}, "language": {"type": "str", "description": "The language in which the virtual assistant will operate (e.g., English, Spanish, French)"}, "personality": {"type": "str", "description": "The personality traits to be incorporated into the virtual assistant (e.g., friendly, professional, funny)"}, "skills": {"type": "str", "description": "The specific skills or abilities that the virtual assistant should possess (e.g., natural language processing, speech recognition, knowledgebase)"}, "user_preferences": {"type": "str", "description": "The preferences or settings that the user can customize for the virtual assistant"}}, "required": ["name", "language", "skills"], "responses": {"virtual_assistant_id": {"type": "str", "description": "The unique identifier for the created virtual assistant"}, "message": {"type": "str", "description": "A confirmation message indicating the successful creation of the virtual assistant"}}}
{"api_name": "getGeneFunction", "api_description": "Retrieve function annotation of a given gene symbol", "field": "Artificial Intelligence/Bioinformatics", "parameters": {"gene_symbol": {"type": "str", "description": "The symbol of the gene for which you want to retrieve the function (e.g., TP53, BRCA1, APOE)"}, "species": {"type": "str", "description": "The species in which the gene function is required (e.g., human, mouse, rat)"}}, "required": ["gene_symbol"], "responses": {"function": {"type": "str", "description": "The function annotation of the specified gene symbol"}}}
{"api_name": "monitorEnergyGeneration", "api_description": "Monitor energy generation from renewable sources", "field": "Artificial Intelligence/Smart Grids", "parameters": {"region": {"type": "str", "description": "The region for which you want to monitor energy generation"}}, "required": ["region"], "responses": {"energy_generation": {"type": "float", "description": "The amount of energy generated from renewable sources in the specified region"}}}
{"api_name": "getPredictedPowerConsumption", "api_description": "Retrieve the predicted power consumption for a specific time period at a given location", "field": "Artificial Intelligence/Smart Grids", "parameters": {"location": {"type": "str", "description": "The location for which to retrieve the predicted power consumption (e.g., city, town, building)"}, "start_time": {"type": "str", "description": "The start time for the prediction (e.g., 2022-01-01 09:00:00)"}, "end_time": {"type": "str", "description": "The end time for the prediction (e.g., 2022-01-01 18:00:00)"}}, "required": ["location", "start_time", "end_time"], "responses": {"power_consumption": {"type": "float", "description": "The predicted power consumption in kilowatts for the specified location and time period"}}}
{"api_name": "getSmartGridData", "api_description": "Retrieve data related to smart grids in the field of artificial intelligence", "field": "Artificial Intelligence/Smart Grids", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve smart grid data (e.g., city, country)"}}, "required": ["location"], "responses": {"power_consumption": {"type": "float", "description": "The current power consumption in the specified location"}, "renewable_energy": {"type": "float", "description": "The amount of renewable energy being generated in the specified location"}, "grid_status": {"type": "str", "description": "The status of the smart grid in the specified location"}}}
{"api_name": "textRecognition", "api_description": "Recognize text in an image", "field": "Artificial Intelligence/Machine Perception", "parameters": {"image": {"type": "str", "description": "The image file to be processed"}}, "required": ["image"], "responses": {"text": {"type": "str", "description": "The recognized text in the image"}}}
{"api_name": "trainDeepLearningModel", "api_description": "Train a deep learning model with given data", "field": "Machine Learning/Deep Learning", "parameters": {"data_path": {"type": "str", "description": "The path to the directory containing training data"}, "model_architecture": {"type": "str", "description": "The architecture of the deep learning model (e.g., CNN, LSTM)"}, "num_epochs": {"type": "int", "description": "The number of epochs to train the model", "example": "10"}}, "required": ["data_path", "model_architecture"], "responses": {"trained_model": {"type": "str", "description": "The path to the trained deep learning model"}, "training_logs": {"type": "str", "description": "Logs and metrics generated during the training process"}}}
{"api_name": "performTransferLearning", "api_description": "Perform transfer learning on a pre-trained model", "field": "Machine Learning/Transfer Learning", "parameters": {"model": {"type": "str", "description": "The pre-trained model to be used for transfer learning (e.g., ResNet, VGG16, MobileNet)"}, "dataset": {"type": "str", "description": "The dataset to perform transfer learning on (e.g., CIFAR-10, ImageNet)"}, "num_layers": {"type": "int", "description": "The number of layers to retrain for transfer learning"}}, "required": ["model", "dataset"], "responses": {"new_model": {"type": "str", "description": "The new model after performing transfer learning"}}}
{"api_name": "textClassification", "api_description": "Classify given text into predefined categories", "field": "Machine Learning/Natural Language Processing", "parameters": {"text": {"type": "str", "description": "The text to be classified"}, "model": {"type": "str", "description": "The pre-trained model to be used for classification"}, "threshold": {"type": "float", "description": "The confidence threshold for classification (e.g., 0.5, 0.75, 0.9)"}}, "required": ["text", "model"], "responses": {"category": {"type": "str", "description": "The predicted category of the input text"}, "confidence": {"type": "float", "description": "The confidence score of the predicted category"}}}
{"api_name": "recognizeSpeech", "api_description": "Recognize speech in audio file", "field": "Machine Learning/Speech Recognition", "parameters": {"audio_file": {"type": "str", "description": "Path to the audio file for speech recognition"}}, "required": ["audio_file"], "responses": {"transcript": {"type": "str", "description": "The recognized transcript of the speech"}}}
{"api_name": "generateSample", "api_description": "Generate a sample data using generative model", "field": "Machine Learning/Generative Models", "parameters": {"model_name": {"type": "str", "description": "Name of the generative model to be used (e.g., GAN, VAE)"}, "input_data": {"type": "str", "description": "Input data to be used for generating sample"}}, "required": ["model_name", "input_data"], "responses": {"sample_data": {"type": "str", "description": "Generated sample data using the specified generative model"}}}
{"api_name": "getGraphClusteringCoefficient", "api_description": "Calculate the average clustering coefficient of a graph", "field": "Machine Learning/Graph Mining", "parameters": {"graph_data": {"type": "str", "description": "The input graph data in a specific format (e.g., adjacency matrix, edge list)"}}, "required": ["graph_data"], "responses": {"clustering_coefficient": {"type": "float", "description": "The average clustering coefficient of the graph"}}}
{"api_name": "trainBayesianModel", "api_description": "Train a Bayesian model using given data", "field": "Machine Learning/Bayesian Methods", "parameters": {"data": {"type": "str", "description": "The dataset used for training the model"}}, "required": ["data"], "responses": {"model": {"type": "str", "description": "Trained Bayesian model"}}}
{"api_name": "evaluateBayesianModel", "api_description": "Evaluate the performance of a trained Bayesian model", "field": "Machine Learning/Bayesian Methods", "parameters": {"model": {"type": "str", "description": "The trained Bayesian model"}, "test_data": {"type": "str", "description": "The test dataset for evaluation"}}, "required": ["model", "test_data"], "responses": {"accuracy": {"type": "float", "description": "Accuracy of the model on the test data"}}}
{"api_name": "trainSVMModel", "api_description": "Train a support vector machine (SVM) model using the provided dataset", "field": "Machine Learning/Support Vector Machines", "parameters": {"dataset": {"type": "str", "description": "Path to the dataset file in CSV format"}, "kernel": {"type": "str", "description": "The type of kernel function to use (e.g., linear, polynomial, radial)"}, "C": {"type": "float", "description": "The penalty parameter C in the SVM objective function"}, "gamma": {"type": "float", "description": "The kernel coefficient for polynomial and radial basis function kernels"}}, "required": ["dataset"], "responses": {"model": {"type": "str", "description": "The trained SVM model object"}, "accuracy": {"type": "float", "description": "The accuracy of the SVM model on the provided dataset"}}}
{"api_name": "trainSVM", "api_description": "Train a Support Vector Machine model", "field": "Machine Learning/Support Vector Machines", "parameters": {"features": {"type": "str", "description": "The features data used for training the model"}, "labels": {"type": "str", "description": "The ground truth labels for the training data"}}, "required": ["features", "labels"], "responses": {"model": {"type": "str", "description": "The trained Support Vector Machine model"}}}
{"api_name": "compressModel", "api_description": "Compress a machine learning model to reduce its size without significant loss in performance", "field": "Machine Learning/Model Compression", "parameters": {"model_path": {"type": "str", "description": "The path to the machine learning model file to be compressed"}, "compression_method": {"type": "str", "description": "The method used for compressing the model (e.g., pruning, quantization, knowledge distillation)"}, "compression_level": {"type": "str", "description": "The level of compression to apply (e.g., high, medium, low)"}}, "required": ["model_path", "compression_method"], "responses": {"compressed_model_path": {"type": "str", "description": "The path to the compressed model file"}, "compressed_model_size": {"type": "int", "description": "The size of the compressed model file in bytes"}}}
{"api_name": "automatedML", "api_description": "Automated Machine Learning", "field": "Machine Learning/Automated Machine Learning", "parameters": {"dataset": {"type": "str", "description": "The path to the dataset file (e.g., /data/dataset.csv)"}, "target": {"type": "str", "description": "The name of the target variable in the dataset"}, "algorithm": {"type": "str", "description": "The machine learning algorithm to be used (e.g., RandomForest, GradientBoosting)"}, "metrics": {"type": "str", "description": "The evaluation metric for model performance (e.g., accuracy, precision, recall)"}, "time_limit": {"type": "int", "description": "The maximum time limit for model training in minutes"}}, "required": ["dataset", "target"], "responses": {"best_model": {"type": "str", "description": "The best performing model based on the given dataset and target variable"}, "model_performance": {"type": "float", "description": "The performance of the best model based on the given evaluation metric"}}}
{"api_name": "generateAdversarialExample", "api_description": "Generate an adversarial example to fool a machine learning model", "field": "Machine Learning/Adversarial Machine Learning", "parameters": {"input_data": {"type": "str", "description": "The input data for which you want to generate an adversarial example"}, "target_class": {"type": "int", "description": "The target class that you want the machine learning model to misclassify the input as"}, "epsilon": {"type": "float", "description": "The maximum perturbation allowed for the adversarial example"}}, "required": ["input_data", "target_class"], "responses": {"adversarial_example": {"type": "str", "description": "The generated adversarial example"}}}
{"api_name": "createTransferModel", "api_description": "Create a transfer learning model to provide pre-trained weights for a specific task", "field": "Machine Learning/Transfer Learning", "parameters": {"model": {"type": "str", "description": "The name of the pre-trained model used as the base (e.g., VGG16, ResNet50)"}, "task": {"type": "str", "description": "The specific task the transfer learning model is designed for (e.g., image classification, object detection)"}, "freeze_layers": {"type": "int", "description": "The number of layers to freeze during training (e.g., 5, 10, 15)"}, "learning_rate": {"type": "float", "description": "The learning rate for the training process (e.g., 0.001, 0.01, 0.1)"}}, "required": ["model", "task"], "responses": {"transfer_model": {"type": "str", "description": "The transfer learning model with pre-trained weights"}}}
{"api_name": "trainRobot", "api_description": "Train the robot to perform certain tasks", "field": "Machine Learning/Robotics", "parameters": {"task": {"type": "str", "description": "The task you want the robot to learn (e.g., picking objects, navigating, grasping)"}, "dataset": {"type": "str", "description": "The dataset of examples for training the robot"}}, "required": ["task", "dataset"], "responses": {"success": {"type": "bool", "description": "Indicates whether the robot was successfully trained"}}}
{"api_name": "robotVision", "api_description": "Process visual data for a robot", "field": "Machine Learning/Robotics", "parameters": {"image": {"type": "str", "description": "The image data to be processed by the robot"}}, "required": ["image"], "responses": {"processed_image": {"type": "str", "description": "The processed image data with identified objects and their locations"}}}
{"api_name": "robotMovement", "api_description": "Control the movement of a robot", "field": "Machine Learning/Robotics", "parameters": {"direction": {"type": "str", "description": "The direction in which the robot should move (e.g., forward, backward, left, right)"}, "speed": {"type": "int", "description": "The speed at which the robot should move (e.g., 1, 2, 3, ...)"}}, "required": ["direction", "speed"], "responses": {"status": {"type": "str", "description": "The status of the robot movement (e.g., success, failure, busy)"}}}
{"api_name": "updateRobotParameters", "api_description": "Update the parameters of the robotic system", "field": "Machine Learning/Robotics", "parameters": {"parameters": {"type": "str", "description": "The new parameters for the robotic system (e.g., velocity, acceleration, position)"}}, "required": ["parameters"], "responses": {"success": {"type": "bool", "description": "Indicates whether the parameters were successfully updated"}}}
{"api_name": "calibrateRobotSensors", "api_description": "Calibrate the sensors of the robotic system", "field": "Machine Learning/Robotics", "parameters": {"sensors": {"type": "str", "description": "The sensors to be calibrated (e.g., camera, proximity, gyroscope)"}}, "required": ["sensors"], "responses": {"success": {"type": "bool", "description": "Indicates whether the sensor calibration was successful"}}}
{"api_name": "getVehicleFuelLevel", "api_description": "Retrieve the fuel level of an autonomous vehicle", "field": "Machine Learning/Autonomous Vehicles", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier of the autonomous vehicle (e.g., AV123)", "example": "AV123"}}, "required": ["vehicle_id"], "responses": {"fuel_level": {"type": "float", "description": "The current fuel level of the autonomous vehicle as a percentage"}}}
{"api_name": "trainFraudModel", "api_description": "Train a machine learning model for fraud detection", "field": "Machine Learning/Fraud Detection", "parameters": {"training_data": {"type": "str", "description": "The labeled dataset for training the fraud detection model (e.g., historical transaction data labeled as fraud or legitimate)"}, "algorithm": {"type": "str", "description": "The machine learning algorithm to be used for training the model (e.g., Support Vector Machines, Gradient Boosting)"}}, "required": ["training_data"], "responses": {"model": {"type": "str", "description": "The trained fraud detection model"}}}
{"api_name": "predictFraudRisk", "api_description": "Predict the risk of fraud for a given transaction", "field": "Machine Learning/Fraud Detection", "parameters": {"transaction_data": {"type": "str", "description": "The data of the transaction to be analyzed for fraud risk prediction (e.g., transaction amount, transaction location, customer information)"}, "model": {"type": "str", "description": "The machine learning model to be used for fraud risk prediction (e.g., Random Forest, Logistic Regression)"}}, "required": ["transaction_data"], "responses": {"risk_score": {"type": "float", "description": "The risk score indicating the likelihood of the transaction being fraudulent"}}}
{"api_name": "classifySentiment", "api_description": "Classify the sentiment of a given text", "field": "Machine Learning/Sentiment Analysis", "parameters": {"text": {"type": "str", "description": "The text to be analyzed"}}, "required": ["text"], "responses": {"sentiment": {"type": "str", "description": "The sentiment category of the text (e.g., positive, negative, neutral)"}}}
{"api_name": "analyzeImbalancedData", "api_description": "Analyze imbalanced data and provide insights", "field": "Machine Learning/Imbalanced Data Analysis", "parameters": {"data": {"type": "str", "description": "The imbalanced dataset for analysis"}, "target": {"type": "str", "description": "The target variable in the dataset"}, "algorithm": {"type": "str", "description": "The algorithm to use for analysis (e.g., random forest, logistic regression)"}}, "required": ["data", "target"], "responses": {"insights": {"type": "str", "description": "Insights and recommendations for handling imbalanced data"}}}
{"api_name": "trainGameModel", "api_description": "Train a machine learning model to play a game", "field": "Machine Learning/Game Playing", "parameters": {"game_name": {"type": "str", "description": "The name of the game to be played (e.g., Chess, Tic Tac Toe, Connect Four)"}, "model_type": {"type": "str", "description": "The type of machine learning model to be trained (e.g., Reinforcement Learning, Deep Learning)"}, "num_episodes": {"type": "int", "description": "The number of episodes to train the model for"}, "alpha": {"type": "float", "description": "The learning rate for the model training"}, "epsilon": {"type": "float", "description": "The exploration rate for the model training"}}, "required": ["game_name", "model_type", "num_episodes"], "responses": {"trained_model": {"type": "str", "description": "The file path of the trained machine learning model"}}}
{"api_name": "authenticate", "api_description": "Verify the identity of a person using biometric features", "field": "Machine Learning/Biometrics", "parameters": {"image": {"type": "str", "description": "The image file containing the biometric data of the person (e.g., face, fingerprint)"}, "template": {"type": "str", "description": "The pre-built biometric template used for comparison"}}, "required": ["image"], "responses": {"match": {"type": "bool", "description": "Indicates whether the biometric data matches the template"}}}
{"api_name": "biometricAuthentication", "api_description": "Authenticate a user based on biometric data", "field": "Machine Learning/Biometrics", "parameters": {"biometric_data": {"type": "str", "description": "The biometric data of the user (e.g., fingerprint, face scan, iris scan)"}, "authentication_method": {"type": "str", "description": "The specific authentication method to be used (e.g., fingerprint recognition, facial recognition)"}, "security_level": {"type": "int", "description": "The desired security level for authentication (e.g., 1 - low, 2 - medium, 3 - high)"}}, "required": ["biometric_data", "authentication_method"], "responses": {"authentication_result": {"type": "bool", "description": "The result of the biometric authentication process (true - authenticated, false - not authenticated)"}, "confidence_level": {"type": "float", "description": "The confidence level of the authentication result (range: 0.0 - 1.0)"}}}
{"api_name": "identifyFace", "api_description": "Identify a face in an image", "field": "Machine Learning/Biometrics", "parameters": {"image_path": {"type": "str", "description": "The path to the image file containing the face to be identified"}, "model": {"type": "str", "description": "The name or ID of the pre-trained face recognition model to use"}}, "required": ["image_path"], "responses": {"identity": {"type": "str", "description": "The predicted identity of the face"}, "confidence": {"type": "float", "description": "The confidence level of the prediction"}}}
{"api_name": "verifySpeaker", "api_description": "Verify if the speaker is authentic based on voice biometrics", "field": "Machine Learning/Biometrics", "parameters": {"audio_clip": {"type": "str", "description": "The path to the audio clip containing the voice sample to be verified"}, "model": {"type": "str", "description": "The name or ID of the pre-trained voice biometrics model to use"}}, "required": ["audio_clip"], "responses": {"is_authentic": {"type": "bool", "description": "A boolean indicating whether the speaker is authentic"}, "confidence": {"type": "float", "description": "The confidence level of the verification result"}}}
{"api_name": "identifyPerson", "api_description": "Identify a person using biometric data", "field": "Machine Learning/Biometrics", "parameters": {"biometric_data": {"type": "str", "description": "Biometric data of a person (e.g., fingerprint, face scan, retina scan)"}, "database": {"type": "str", "description": "The database to be searched for matching biometric data"}}, "required": ["biometric_data"], "responses": {"person_id": {"type": "str", "description": "The unique identifier of the identified person"}}}
{"api_name": "identifyBiometrics", "api_description": "Identify and authenticate individuals based on biometric data", "field": "Machine Learning/Biometrics", "parameters": {"image": {"type": "str", "description": "Image containing biometric data (e.g., facial image, fingerprint image)"}}, "required": ["image"], "responses": {"identity": {"type": "str", "description": "The identity of the individual identified using biometric data"}}}
{"api_name": "verifyFingerprint", "api_description": "Verify the authenticity of a fingerprint", "field": "Machine Learning/Biometrics", "parameters": {"fingerprint": {"type": "str", "description": "The fingerprint image to be verified (e.g., fingerprint_image.jpg)"}, "database": {"type": "str", "description": "The fingerprint database for verification (e.g., criminal_records, employee_records)"}}, "required": ["fingerprint"], "responses": {"verification_result": {"type": "bool", "description": "The result of fingerprint verification"}}}
{"api_name": "recognizeIris", "api_description": "Recognize and match an individual's iris pattern", "field": "Machine Learning/Biometrics", "parameters": {"iris_image": {"type": "str", "description": "The iris image to be recognized (e.g., iris_image.jpg)"}, "matching_threshold": {"type": "float", "description": "The threshold for iris pattern matching (0.0 to 1.0)"}}, "required": ["iris_image"], "responses": {"matched_identity": {"type": "str", "description": "The identity of the individual matching the iris pattern"}, "similarity_score": {"type": "float", "description": "The similarity score between the iris pattern and the matched identity"}}}
{"api_name": "updateBiometricData", "api_description": "Update biometric data of a person in the database", "field": "Machine Learning/Biometrics", "parameters": {"biometric_data": {"type": "str", "description": "The updated biometric data of the person (e.g., fingerprint, iris scan, voice sample)"}, "person_id": {"type": "str", "description": "The unique identifier of the person"}}, "required": ["biometric_data", "person_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the update was successful"}}}
{"api_name": "getAncientCivilizations", "api_description": "Retrieve information about ancient civilizations", "field": "History/Ancient History", "parameters": {"civilization_name": {"type": "str", "description": "The name of the ancient civilization (e.g., Egypt, Greece, Rome)"}, "time_period": {"type": "str", "description": "The time period in which the civilization existed (e.g., 3000 BC - 30 BC, 1200 BC - 146 BC)"}, "region": {"type": "str", "description": "The region in which the civilization was located (e.g., Middle East, Mediterranean, Asia)"}}, "required": ["civilization_name"], "responses": {"description": {"type": "str", "description": "A brief description of the ancient civilization"}, "achievements": {"type": "str", "description": "Major achievements of the ancient civilization"}, "governance_system": {"type": "str", "description": "The type of governance system followed by the civilization"}}}
{"api_name": "getCulturalHistory", "api_description": "Retrieve information about cultural history", "field": "History/Cultural History", "parameters": {"era": {"type": "str", "description": "The specific era of cultural history (e.g., Renaissance, Industrial Revolution)"}, "country": {"type": "str", "description": "The country for which you want to retrieve cultural history information (e.g., France, China)"}, "topic": {"type": "str", "description": "The specific topic or aspect of cultural history (e.g., art, religion, technology)"}}, "required": ["era", "country"], "responses": {"history_info": {"type": "str", "description": "Detailed information about the cultural history"}, "era": {"type": "str", "description": "The era of cultural history"}, "country": {"type": "str", "description": "The country of cultural history"}, "topic": {"type": "str", "description": "The topic of cultural history"}}}
{"api_name": "getIntellectualHistory", "api_description": "Retrieve information about intellectual history", "field": "History/Intellectual History", "parameters": {"time_period": {"type": "str", "description": "Specify a time period for the intellectual history (e.g., Renaissance, Enlightenment, Industrial Revolution)"}, "location": {"type": "str", "description": "The location for which you want to get the intellectual history (e.g., Europe, Asia, America)"}}, "required": [], "responses": {"history": {"type": "str", "description": "The intellectual history during the specified time period in the specified location"}}}
{"api_name": "getArtHistory", "api_description": "Retrieve information about art history", "field": "History/Art History", "parameters": {"artwork": {"type": "str", "description": "The name of the artwork you want to know about"}, "artist": {"type": "str", "description": "The name of the artist associated with the artwork"}, "period": {"type": "str", "description": "The historical period of the artwork (e.g., Renaissance, Baroque)"}}, "required": ["artwork"], "responses": {"description": {"type": "str", "description": "A description of the artwork and its historical significance"}, "artist": {"type": "str", "description": "The name of the artist"}, "period": {"type": "str", "description": "The historical period of the artwork"}}}
{"api_name": "getGenocideData", "api_description": "Retrieve historical data on genocides", "field": "History/Genocide Studies", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve genocide data (e.g., Rwanda, Cambodia, Bosnia)"}, "year": {"type": "int", "description": "The specific year for which you want to retrieve genocide data"}}, "required": ["country"], "responses": {"genocide_count": {"type": "int", "description": "The number of genocides that occurred in the specified country"}, "genocide_info": {"type": "str", "description": "Detailed information about the genocides in the specified country"}}}
{"api_name": "getWorldWarIInfo", "api_description": "Retrieve information about World War I", "field": "History/World War I History", "parameters": {"location": {"type": "str", "description": "The location for which you want to get World War I information (e.g., Europe, Asia, Africa)"}, "year": {"type": "int", "description": "The specific year for which you want to get World War I information (e.g., 1914, 1918)"}}, "required": [], "responses": {"events": {"type": "str", "description": "Events that occurred during World War I in the specified location"}, "casualties": {"type": "str", "description": "Casualties and losses during World War I in the specified location"}}}
{"api_name": "getSlaveryStudies", "api_description": "Retrieve information on slavery studies", "field": "History/Slavery Studies", "parameters": {"topic": {"type": "str", "description": "The specific topic you want to explore (e.g., transatlantic slave trade, abolition movements)"}, "time_period": {"type": "str", "description": "Specify a time period for slavery studies (e.g., 18th century, post-Civil War)"}, "region": {"type": "str", "description": "The geographical region to focus on (e.g., North America, Caribbean)"}}, "required": ["topic"], "responses": {"information": {"type": "str", "description": "Detailed information about slavery studies for the given topic, time period, and region"}}}
{"api_name": "getCulturalRevolutionHistory", "api_description": "Retrieve information about the Cultural Revolution", "field": "History/Cultural Revolution History", "parameters": {"specific_event": {"type": "str", "description": "Specify a specific event of the Cultural Revolution"}, "year_range": {"type": "str", "description": "Specify a range of years for the Cultural Revolution (e.g., 1966-1976)"}, "location": {"type": "str", "description": "The location associated with the Cultural Revolution (e.g., China)"}, "important_figures": {"type": "str", "description": "Specify important figures of the Cultural Revolution"}}, "required": [], "responses": {"event_description": {"type": "str", "description": "A description of the specific event"}, "year_range": {"type": "str", "description": "The range of years for the Cultural Revolution"}, "location": {"type": "str", "description": "The location associated with the Cultural Revolution"}, "figures_description": {"type": "str", "description": "A description of the important figures"}}}
{"api_name": "getSovietUnionLeaders", "api_description": "Retrieve information about the leaders of the Soviet Union", "field": "History/Soviet Union History", "parameters": {"time_period": {"type": "str", "description": "Specify a time period for which you want to get information about Soviet Union leaders (e.g., 1920-1950, 1950-1991)"}}, "required": [], "responses": {"leaders": {"type": "str", "description": "The names of the leaders of the Soviet Union during the specified time period"}}}
{"api_name": "getGalacticCoordinates", "api_description": "Retrieve galactic coordinates for a given celestial object", "field": "Astronomy/Galactic Astronomy", "parameters": {"celestial_object": {"type": "str", "description": "The name of the celestial object for which you want to get the galactic coordinates (e.g., Andromeda Galaxy, Orion Nebula)"}, "epoch": {"type": "str", "description": "The epoch at which the galactic coordinates are measured (e.g., J2000, B1950)"}, "coordinate_system": {"type": "str", "description": "The coordinate system to represent the galactic coordinates (e.g., equatorial, ecliptic)"}}, "required": ["celestial_object"], "responses": {"galactic_latitude": {"type": "float", "description": "The galactic latitude of the celestial object"}, "galactic_longitude": {"type": "float", "description": "The galactic longitude of the celestial object"}}}
{"api_name": "getExoplanetInfo", "api_description": "Retrieve information about an exoplanet", "field": "Astronomy/Exoplanetology", "parameters": {"exoplanet_id": {"type": "int", "description": "The ID of the exoplanet you want information for"}, "include_orbital": {"type": "bool", "description": "Whether to include orbital information (true or false)"}, "include_surface": {"type": "bool", "description": "Whether to include surface details (true or false)"}}, "required": ["exoplanet_id"], "responses": {"exoplanet_name": {"type": "str", "description": "Name of the exoplanet"}, "orbital_period": {"type": "float", "description": "Orbital period of the exoplanet in Earth days"}, "surface_temperature": {"type": "float", "description": "Surface temperature of the exoplanet in Kelvin"}, "mass": {"type": "float", "description": "Mass of the exoplanet in Earth masses"}}}
{"api_name": "getHoroscope", "api_description": "Retrieve horoscope information for a specific zodiac sign", "field": "Astronomy/Astrology", "parameters": {"zodiac_sign": {"type": "str", "description": "The zodiac sign for which you want to get the horoscope (e.g., Aries, Leo, Sagittarius)"}, "date": {"type": "str", "description": "Specify a date for the horoscope (e.g., today, tomorrow, 2022-01-01)"}}, "required": ["zodiac_sign"], "responses": {"horoscope": {"type": "str", "description": "The daily horoscope for the specified zodiac sign"}}}
{"api_name": "searchExoplanets", "api_description": "Search for exoplanets that may support life", "field": "Astronomy/Astrobiology", "parameters": {"distance": {"type": "int", "description": "The maximum distance in light years from Earth to search for exoplanets"}, "stellar_type": {"type": "str", "description": "The type of star to focus the search on (e.g., G-type, K-type, M-type)"}, "planet_type": {"type": "str", "description": "The type of planet to search for (e.g., rocky, gas giant)"}, "atmosphere": {"type": "str", "description": "The type of atmosphere to search for in exoplanets (e.g., oxygen-rich, hydrogen-rich)"}, "habitable_zone": {"type": "bool", "description": "Indicates if the exoplanet should be in the habitable zone"}}, "required": ["distance"], "responses": {"exoplanets": {"type": "int", "description": "The number of exoplanets found that may support life"}}}
{"api_name": "getSunriseTime", "api_description": "Retrieve the time of sunrise for a given date and location", "field": "Astronomy/Solar Astronomy", "parameters": {"date": {"type": "str", "description": "The date for which you want to get the sunrise time (e.g., 2021-07-15)"}, "location": {"type": "str", "description": "The location for which you want to get the sunrise time (e.g., Beijing, London, New York)"}}, "required": ["date", "location"], "responses": {"sunrise_time": {"type": "str", "description": "The time of sunrise at the specified location on the specified date"}}}
{"api_name": "getXrayFlux", "api_description": "Retrieve X-ray flux information from celestial sources", "field": "Astronomy/X-ray Astronomy", "parameters": {"source_name": {"type": "str", "description": "The name of the celestial source (e.g., Crab Nebula, Cygnus X-1, Sgr A*)"}, "energy_band": {"type": "str", "description": "The desired energy band for X-ray observations (e.g., soft, hard, full)", "example": "soft, hard, full"}}, "required": ["source_name"], "responses": {"flux": {"type": "float", "description": "The X-ray flux emitted by the specified celestial source"}, "energy_band": {"type": "str", "description": "The energy band in which the X-ray flux is measured"}}}
{"api_name": "getGammaRayFlux", "api_description": "Retrieve the flux of gamma-ray emissions from a celestial object", "field": "Astronomy/Gamma-ray Astronomy", "parameters": {"object_name": {"type": "str", "description": "The name of the celestial object (e.g., Crab Nebula, Cygnus X-1)"}, "energy_band": {"type": "str", "description": "The desired energy band for gamma-ray measurements (e.g., GeV, TeV)"}}, "required": ["object_name"], "responses": {"flux": {"type": "float", "description": "The flux of gamma-ray emissions from the specified celestial object"}, "energy_band": {"type": "str", "description": "The energy band in which the flux is measured"}}}
{"api_name": "getGammaRayData", "api_description": "Retrieve gamma-ray astronomy data", "field": "Astronomy/Gamma-ray Astronomy", "parameters": {"coordinates": {"type": "str", "description": "The celestial coordinates where the data should be retrieved (e.g., RA: 10h 20m 30s, Dec: +50° 30' 20'')"}, "energy_range": {"type": "str", "description": "Specify the energy range for the gamma-ray data (e.g., 0.1 GeV to 10 GeV)"}, "time_span": {"type": "int", "description": "The time span in days for which data is required (e.g., 30)"}, "instrument": {"type": "str", "description": "Specify the instrument used for the observations (e.g., Fermi-LAT, MAGIC)"}, "source_type": {"type": "str", "description": "Specify the type of gamma-ray source (e.g., AGN, Pulsar, GRB)"}}, "required": ["coordinates", "energy_range"], "responses": {"data": {"type": "str", "description": "Gamma-ray astronomy data for the specified parameters"}}}
{"api_name": "getAstrogrammetryData", "api_description": "Retrieve astrometry data for a celestial object", "field": "Astronomy/Astrogrammetry", "parameters": {"object_name": {"type": "str", "description": "The name of the celestial object you want astrometry data for (e.g., Mars, Orion Nebula)"}, "observation_date": {"type": "str", "description": "Specify the date of observation for the astrometry data (e.g., 2022-12-31)"}, "telescope": {"type": "str", "description": "Select the telescope used for observation (e.g., Hubble Space Telescope, Gemini Observatory)"}}, "required": ["object_name", "observation_date"], "responses": {"right_ascension": {"type": "float", "description": "The right ascension value of the celestial object in degrees"}, "declination": {"type": "float", "description": "The declination value of the celestial object in degrees"}, "magnitude": {"type": "float", "description": "The apparent magnitude of the celestial object"}, "distance": {"type": "float", "description": "The distance of the celestial object from Earth in parsecs"}}}
{"api_name": "getWordEtymology", "api_description": "Retrieve the etymology of a given word", "field": "Anthropology/Linguistic Anthropology", "parameters": {"word": {"type": "str", "description": "The word for which you want to get the etymology (e.g., apple, love, elephant)"}}, "required": ["word"], "responses": {"etymology": {"type": "str", "description": "The origin and historical development of the specified word"}}}
{"api_name": "compareLanguages", "api_description": "Compare linguistic features between two languages", "field": "Anthropology/Linguistic Anthropology", "parameters": {"language1": {"type": "str", "description": "The first language for comparison"}, "language2": {"type": "str", "description": "The second language for comparison"}}, "required": ["language1", "language2"], "responses": {"linguistic_similarity": {"type": "float", "description": "The measure of linguistic similarity between the two languages"}}}
{"api_name": "analyzeSkeleton", "api_description": "Analyze skeletal remains to determine age, sex, height, and ethnicity", "field": "Anthropology/Forensic Anthropology", "parameters": {"skeleton": {"type": "str", "description": "The skeletal remains for analysis"}, "method": {"type": "str", "description": "The method used for analysis (e.g., osteometry, histology, DNA analysis)"}}, "required": ["skeleton", "method"], "responses": {"age": {"type": "str", "description": "The estimated age at time of death"}, "sex": {"type": "str", "description": "The determined sex"}, "height": {"type": "float", "description": "The estimated height"}, "ethnicity": {"type": "str", "description": "The determined ethnicity"}}}
{"api_name": "estimateTimeSinceDeath", "api_description": "Estimate the time elapsed since death of a corpse", "field": "Anthropology/Forensic Anthropology", "parameters": {"corpse": {"type": "str", "description": "The corpse for analysis"}, "ambient_temperature": {"type": "float", "description": "The ambient temperature at the crime scene at the time of discovery (in Celsius)"}}, "required": ["corpse", "ambient_temperature"], "responses": {"time_since_death": {"type": "str", "description": "The estimated time elapsed since death"}}}
{"api_name": "identifyHumanRemains", "api_description": "Identify human remains based on forensic anthropology", "field": "Anthropology/Forensic Anthropology", "parameters": {"skeletal_elements": {"type": "str", "description": "The skeletal elements found (e.g., skull, femur, pelvis)"}, "sex": {"type": "str", "description": "The estimated biological sex of the individual (e.g., male, female)"}, "age_range": {"type": "str", "description": "The estimated age range of the individual (e.g., child, adult)"}, "ancestry": {"type": "str", "description": "The ethnic ancestry of the individual (e.g., Caucasian, African, Asian)"}, "injuries": {"type": "str", "description": "Any visible injuries present on the remains (e.g., fractures, gunshot wounds)"}, "time_since_death": {"type": "str", "description": "The estimated time since death of the individual (e.g., days, weeks, months)"}}, "required": ["skeletal_elements"], "responses": {"identification_status": {"type": "str", "description": "The status of the human remains identification process (e.g., identified, unidentified)"}, "identification_details": {"type": "str", "description": "Additional details and findings related to the identification process"}}}
{"api_name": "determineCauseOfDeath", "api_description": "Determine the cause of death for a deceased individual", "field": "Anthropology/Forensic Anthropology", "parameters": {"skeletal_remains": {"type": "str", "description": "The skeletal remains of the deceased individual"}}, "required": ["skeletal_remains"], "responses": {"cause_of_death": {"type": "str", "description": "The determined cause of death for the deceased individual"}}}
{"api_name": "getAppliedAnthropologyData", "api_description": "Retrieve data related to applied anthropology", "field": "Anthropology/Applied Anthropology", "parameters": {"topic": {"type": "str", "description": "The specific topic you want to retrieve data for (e.g., healthcare, education, urban development)"}, "location": {"type": "str", "description": "The location for which you want the applied anthropology data (e.g., country, region, city)"}, "time_period": {"type": "str", "description": "Specify a time period for the applied anthropology data (e.g., past 5 years, 2010 - 2020)"}}, "required": ["topic"], "responses": {"data": {"type": "str", "description": "The data related to the applied anthropology topic"}}}
{"api_name": "applyAnthropology", "api_description": "Apply anthropological knowledge and methods to address real-world problems", "field": "Anthropology/Applied Anthropology", "parameters": {"problem": {"type": "str", "description": "The real-world problem to be addressed using anthropological approaches"}, "target_population": {"type": "str", "description": "The specific population or community affected by the problem"}, "methodology": {"type": "str", "description": "The anthropological methodology to be used (e.g., participant observation, interviews, surveys)"}}, "required": ["problem", "target_population"], "responses": {"solution": {"type": "str", "description": "The proposed solution based on anthropological analysis and research"}}}
{"api_name": "getHumanEvolutionTimeline", "api_description": "Retrieve the timeline of human evolution", "field": "Anthropology/Evolutionary Anthropology", "parameters": {}, "required": [], "responses": {"timeline": {"type": "str", "description": "The timeline of major breakthroughs and events in human evolution"}}}
{"api_name": "getNeanderthalGenetics", "api_description": "Retrieve information about Neanderthal genetics", "field": "Anthropology/Evolutionary Anthropology", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about Neanderthal genetics"}}}
{"api_name": "captureVisuals", "api_description": "Capture visual data for anthropological analysis", "field": "Anthropology/Visual Anthropology", "parameters": {"location": {"type": "str", "description": "The location where the visuals are captured (e.g., urban area, rural village)"}, "participants": {"type": "int", "description": "The number of participants involved in the visuals"}, "duration": {"type": "float", "description": "The duration of the visual recording in minutes"}}, "required": ["location", "participants"], "responses": {"visual_data": {"type": "str", "description": "The captured visual data in a format suitable for analysis"}, "metadata": {"type": "str", "description": "Additional metadata about the visual capture"}}}
{"api_name": "getHistoricalAnthropologyData", "api_description": "Retrieve historical anthropology data", "field": "Anthropology/Historical Anthropology", "parameters": {"period": {"type": "str", "description": "The time period for which you want to retrieve data (e.g., ancient, medieval, modern)"}, "region": {"type": "str", "description": "The region for which you want to retrieve data (e.g., Europe, Asia, Americas)"}, "topic": {"type": "str", "description": "The specific topic or theme you are interested in (e.g., gender roles, religion, migration)"}}, "required": ["period"], "responses": {"data": {"type": "str", "description": "The historical anthropology data for the specified period, region, and topic"}}}
{"api_name": "getGeneticAncestry", "api_description": "Retrieve genetic ancestry information", "field": "Anthropology/Molecular Anthropology", "parameters": {"dna_sample": {"type": "str", "description": "The DNA sample to be analyzed for genetic ancestry"}}, "required": ["dna_sample"], "responses": {"ancestry": {"type": "str", "description": "The genetic ancestry of the given DNA sample"}}}
{"api_name": "getUrbanAnthropologyData", "api_description": "Retrieve data related to urban anthropology", "field": "Anthropology/Urban Anthropology", "parameters": {"location": {"type": "str", "description": "The urban area for which you want to retrieve data (e.g., New York, Tokyo, London)"}, "access_date": {"type": "str", "description": "Specify the date of access to the data (e.g., 2022-05-20)"}, "population_size": {"type": "int", "description": "Specify the population size for analysis (e.g., 100000, 500000, 1000000)"}, "data_source": {"type": "str", "description": "Specify the source of the data (e.g., government survey, academic research)"}}, "required": ["location"], "responses": {"data": {"type": "str", "description": "The retrieved data related to urban anthropology"}}}
{"api_name": "getUrbanDevelopmentIndexes", "api_description": "Retrieve the development indexes of urban areas", "field": "Anthropology/Urban Anthropology", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get the development indexes (e.g., United States, Germany, Brazil)"}, "city": {"type": "str", "description": "The name of the city for which you want to get the development indexes (e.g., New York, Tokyo, Sydney)"}}, "required": ["country", "city"], "responses": {"index1": {"type": "float", "description": "Development index 1 of the urban area"}, "index2": {"type": "float", "description": "Development index 2 of the urban area"}, "index3": {"type": "float", "description": "Development index 3 of the urban area"}}}
{"api_name": "getSymbolicAnthropology", "api_description": "Retrieve information about symbolic anthropology", "field": "Anthropology/Symbolic Anthropology", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about symbolic anthropology"}}}
{"api_name": "getEconomicAnthropologyData", "api_description": "Retrieve economic anthropology data", "field": "Anthropology/Economic Anthropology", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve economic anthropology data (e.g., USA, Germany, Japan)"}, "year": {"type": "int", "description": "The year for which you want to retrieve economic anthropology data (e.g., 2010, 2015, 2020)"}}, "required": ["country"], "responses": {"gdp_per_capita": {"type": "float", "description": "The GDP per capita of the specified country"}, "income_inequality": {"type": "float", "description": "The income inequality index of the specified country"}}}
{"api_name": "getEnvironmentalAnthropologyInfo", "api_description": "Retrieve information related to environmental anthropology", "field": "Anthropology/Environmental Anthropology", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about environmental anthropology"}}}
{"api_name": "getKinshipRelations", "api_description": "Retrieve kinship relations for a given individual", "field": "Anthropology/Kinship Studies", "parameters": {"individual": {"type": "str", "description": "The name of the individual for whom you want to retrieve kinship relations"}}, "required": ["individual"], "responses": {"relations": {"type": "str", "description": "The kinship relations of the specified individual"}}}
{"api_name": "getKinshipInfo", "api_description": "Retrieve information about kinship relations", "field": "Anthropology/Kinship Studies", "parameters": {"individual": {"type": "str", "description": "The individual for whom you want to retrieve kinship information (e.g., John Smith, Jane Doe)"}, "relationship": {"type": "str", "description": "The type of relationship you are interested in (e.g., parent, sibling, cousin)"}}, "required": ["individual"], "responses": {"kinship_info": {"type": "str", "description": "Information about the kinship relation of the specified individual"}}}
{"api_name": "getKinshipData", "api_description": "Retrieve kinship data for a given individual or group", "field": "Anthropology/Kinship Studies", "parameters": {"name": {"type": "str", "description": "The name of the individual or group for which you want to retrieve kinship data"}, "relationship_type": {"type": "str", "description": "The type of relationship to consider (e.g., parent-child, sibling, spouse)"}}, "required": ["name"], "responses": {"kinship_data": {"type": "str", "description": "The kinship data for the specified individual or group"}}}
{"api_name": "getCoachingTips", "api_description": "Retrieve coaching tips for a specific sport", "field": "Physical Education/Sports coaching", "parameters": {"sport": {"type": "str", "description": "The sport for which you want to get coaching tips (e.g., football, basketball, swimming)"}}, "required": ["sport"], "responses": {"tips": {"type": "str", "description": "Coaching tips for the specified sport"}}}
{"api_name": "getSportEquipment", "api_description": "Get information about sports equipment for a particular sport", "field": "Physical Education/Sports coaching", "parameters": {"sport": {"type": "str", "description": "The sport for which you need information about equipment (e.g., cricket, skiing, cycling)"}, "level": {"type": "str", "description": "The desired level of play (e.g., beginner, intermediate, professional)"}}, "required": ["sport"], "responses": {"equipment_list": {"type": "str", "description": "A list of required equipment for the sport"}, "recommended_brands": {"type": "str", "description": "Recommended brands for the equipment"}}}
{"api_name": "calculateVO2Max", "api_description": "Calculate VO2 max based on age, gender, and fitness level", "field": "Physical Education/Exercise physiology", "parameters": {"age": {"type": "int", "description": "The age of the person (e.g., 20, 30, 40, ...)"}, "gender": {"type": "str", "description": "The gender of the person (e.g., male, female)"}, "fitness_level": {"type": "str", "description": "The fitness level of the person (e.g., sedentary, moderately active, highly active)"}}, "required": ["age", "gender", "fitness_level"], "responses": {"vo2_max": {"type": "float", "description": "The calculated VO2 max value"}}}
{"api_name": "getInjuryReport", "api_description": "Retrieve injury report for a specific athlete or team", "field": "Physical Education/Sports medicine", "parameters": {"athlete_name": {"type": "str", "description": "The name of the athlete (e.g., John Smith, Olivia Davis)"}, "team_name": {"type": "str", "description": "The name of the team (e.g., Los Angeles Lakers, New York Yankees)"}}, "required": ["athlete_name"], "responses": {"injuries": {"type": "str", "description": "List of injuries reported for the athlete or the team"}}}
{"api_name": "getExerciseInjury", "api_description": "Retrieve information about exercise-related injuries", "field": "Physical Education/Sports medicine", "parameters": {"injury_type": {"type": "str", "description": "Specify the type of injury (e.g., sprain, strain, concussion)"}, "body_part": {"type": "str", "description": "Specify the affected body part (e.g., knee, ankle, head)"}, "severity": {"type": "str", "description": "Specify the severity of the injury (e.g., mild, moderate, severe)"}, "age": {"type": "int", "description": "Specify the age of the individual affected"}}, "required": ["injury_type"], "responses": {"injury_info": {"type": "str", "description": "Detailed information about the specified injury"}}}
{"api_name": "getPsychologicalStrength", "api_description": "Retrieve information about psychological strength of an athlete", "field": "Physical Education/Sports psychology", "parameters": {"athlete_name": {"type": "str", "description": "The name of the athlete (e.g., Michael Phelps, Serena Williams)"}, "sport": {"type": "str", "description": "The sport of the athlete (e.g., swimming, tennis)"}}, "required": ["athlete_name"], "responses": {"psychological_strength": {"type": "str", "description": "The psychological strength or mindset of the athlete"}}}
{"api_name": "getJointRangeOfMotion", "api_description": "Retrieve the range of motion of a specific joint", "field": "Physical Education/Kinesiology", "parameters": {"joint": {"type": "str", "description": "The specific joint for which you want to get the range of motion (e.g., knee, shoulder, hip)"}, "measurement_type": {"type": "str", "description": "Specify the type of measurement for range of motion (e.g., active, passive, functional)", "examples": "active, passive, functional"}}, "required": ["joint"], "responses": {"range_of_motion": {"type": "float", "description": "The range of motion in degrees of the specified joint"}}}
{"api_name": "getPowerOutput", "api_description": "Retrieve power output information during physical activity", "field": "Physical Education/Kinesiology", "parameters": {"activity": {"type": "str", "description": "The physical activity you want to get power output information for (e.g., cycling, rowing, weightlifting)"}, "duration": {"type": "int", "description": "The duration of the activity in minutes"}}, "required": ["activity", "duration"], "responses": {"power_output": {"type": "float", "description": "The power output during the specified physical activity"}}}
{"api_name": "getSkillLevel", "api_description": "Retrieve the skill level of a specific motor skill", "field": "Physical Education/Motor learning", "parameters": {"skill": {"type": "str", "description": "The motor skill for which you want to get the skill level (e.g., running, jumping, throwing)"}, "age": {"type": "int", "description": "The age of the individual performing the motor skill"}}, "required": ["skill", "age"], "responses": {"skill_level": {"type": "str", "description": "The skill level of the specified motor skill"}, "progression": {"type": "str", "description": "The suggested progression for improving the skill level of the motor skill"}}}
{"api_name": "recordProgress", "api_description": "Record progress in motor learning", "field": "Physical Education/Motor learning", "parameters": {"skill_name": {"type": "str", "description": "The name of the skill being practiced (e.g., running, jumping, swimming)"}, "time_spent": {"type": "int", "description": "The time spent practicing the skill in minutes"}, "session_date": {"type": "str", "description": "The date of the practice session (e.g., YYYY-MM-DD)"}}, "required": ["skill_name", "time_spent", "session_date"], "responses": {"success": {"type": "bool", "description": "Indicates if the progress record was successfully saved"}}}
{"api_name": "getFeedback", "api_description": "Get feedback on motor learning", "field": "Physical Education/Motor learning", "parameters": {"skill_name": {"type": "str", "description": "The name of the skill requiring feedback (e.g., cycling, dancing, gymnastics)"}, "performance_level": {"type": "str", "description": "The current performance level of the skill (e.g., poor, average, excellent)"}, "feedback_type": {"type": "str", "description": "The type of feedback desired (e.g., technical, motivational, corrective)"}}, "required": ["skill_name", "performance_level"], "responses": {"feedback": {"type": "str", "description": "Detailed feedback on the performance of the specified skill"}}}
{"api_name": "getMotorLearningData", "api_description": "Retrieve motor learning data for a specific individual", "field": "Physical Education/Motor learning", "parameters": {"student_id": {"type": "str", "description": "The ID of the student for whom you want to retrieve motor learning data"}, "exercise_type": {"type": "str", "description": "The type of exercise for which you want to retrieve motor learning data (e.g., running, jumping, throwing)"}, "duration": {"type": "int", "description": "The duration of the motor learning activity in minutes"}}, "required": ["student_id", "exercise_type"], "responses": {"accuracy": {"type": "float", "description": "The accuracy of the motor learning activity"}, "speed": {"type": "float", "description": "The speed at which the motor learning activity was performed"}}}
{"api_name": "recordMotorSkills", "api_description": "Record the motor skills of a person", "field": "Physical Education/Motor learning", "parameters": {"person_id": {"type": "str", "description": "The ID of the person whose motor skills are being recorded"}, "activity": {"type": "str", "description": "The motor learning activity being performed by the person (e.g., running, jumping, throwing)"}, "duration": {"type": "int", "description": "The duration of the motor learning activity in minutes"}}, "required": ["person_id", "activity", "duration"], "responses": {"motor_skills": {"type": "str", "description": "The recorded motor skills of the person"}}}
{"api_name": "getAdaptedPEProgram", "api_description": "Retrieve an adapted physical education program for individuals with disabilities", "field": "Physical Education/Adapted physical education", "parameters": {"disability_type": {"type": "str", "description": "The type of disability for which you want to find an adapted physical education program (e.g., autism, visual impairment, hearing impairment)"}, "age_range": {"type": "str", "description": "The age range of the target individuals for the adapted physical education program (e.g., 5-10 years, 11-18 years)"}, "location": {"type": "str", "description": "The location where you want to find an adapted physical education program (e.g., city, state, country)"}}, "required": ["disability_type"], "responses": {"program_name": {"type": "str", "description": "The name of the adapted physical education program"}, "program_description": {"type": "str", "description": "A brief description of the program"}}}
{"api_name": "getAdaptedPEInformation", "api_description": "Retrieve information about adapted physical education", "field": "Physical Education/Adapted physical education", "parameters": {"location": {"type": "str", "description": "The location of the school offering adapted physical education (e.g., New York City, Los Angeles)"}, "grade_level": {"type": "str", "description": "The grade level for which you want to get information (e.g., elementary, middle, high school)"}}, "required": ["location"], "responses": {"teacher_name": {"type": "str", "description": "The name of the adapted physical education teacher"}, "class_schedule": {"type": "str", "description": "The schedule of adapted physical education classes"}, "equipment_available": {"type": "str", "description": "The equipment available for adapted physical education classes"}, "activities_offered": {"type": "str", "description": "The activities offered in adapted physical education classes"}}}
{"api_name": "getFacilityAvailability", "api_description": "Retrieve the availability status of a recreation facility", "field": "Physical Education/Recreation management", "parameters": {"facility_name": {"type": "str", "description": "The name of the recreation facility (e.g., swimming pool, tennis court)"}, "date": {"type": "str", "description": "The desired date to check for facility availability (e.g., 2022-01-01)"}, "time_range": {"type": "str", "description": "Specify a time range to check for facility availability (e.g., 09:00-12:00, 15:30-18:00)"}}, "required": ["facility_name", "date"], "responses": {"facility_status": {"type": "str", "description": "The availability status of the specified facility at the given date and time range"}}}
{"api_name": "getExerciseFocus", "api_description": "Retrieve exercise focus information", "field": "Physical Education/Sport and exercise psychology", "parameters": {"exercise_type": {"type": "str", "description": "The type of exercise (e.g., cardio, strength training, yoga)"}, "intensity": {"type": "str", "description": "The intensity level of exercise (e.g., low, moderate, high)"}, "duration": {"type": "int", "description": "The duration of exercise in minutes"}}, "required": ["exercise_type"], "responses": {"focus": {"type": "str", "description": "The psychological focus for the provided exercise type, intensity, and duration"}}}
{"api_name": "getPedagogy", "api_description": "Retrieve pedagogy information for physical education", "field": "Physical Education/Pedagogy of physical education", "parameters": {"topic": {"type": "str", "description": "The specific topic you want to get pedagogy information for (e.g., team sports, fitness, coordination)"}, "grade_level": {"type": "str", "description": "The grade level for which you want to get pedagogy information (e.g., elementary, middle school, high school)"}}, "required": ["topic"], "responses": {"pedagogy_info": {"type": "str", "description": "Pedagogy information for the specified topic"}}}
{"api_name": "getPhysicalLiteracyLevel", "api_description": "Retrieve the physical literacy level of an individual", "field": "Physical Education/Physical literacy", "parameters": {"age": {"type": "int", "description": "The age of the individual (e.g., 10, 15, 20)"}, "gender": {"type": "str", "description": "The gender of the individual (e.g., male, female)"}}, "required": ["age", "gender"], "responses": {"physical_literacy_level": {"type": "str", "description": "The physical literacy level of the individual (e.g., beginner, intermediate, advanced)"}}}
{"api_name": "getInclusivePhysicalEducation", "api_description": "Retrieve inclusive physical education information", "field": "Physical Education/Inclusive physical education", "parameters": {"grade_level": {"type": "str", "description": "The grade level for which you want to get the inclusive physical education information (e.g., elementary, middle, high school)"}, "location": {"type": "str", "description": "The location where you want to get the inclusive physical education information (e.g., school, community center)"}}, "required": ["grade_level"], "responses": {"activities": {"type": "str", "description": "The inclusive physical activities available at the specified grade level and location"}, "equipment_needed": {"type": "str", "description": "The equipment needed for the inclusive physical activities"}, "instructions": {"type": "str", "description": "The instructions for carrying out the inclusive physical activities"}}}
{"api_name": "getFitnessLevels", "api_description": "Retrieve fitness levels of diverse learners in physical education", "field": "Physical Education/Diverse learners in physical education", "parameters": {"age": {"type": "int", "description": "The age of the learners (e.g., 10, 15, 20)"}, "gender": {"type": "str", "description": "The gender of the learners (e.g., male, female)"}, "ability_level": {"type": "str", "description": "The ability level of the learners (e.g., beginner, intermediate, advanced)"}, "health_conditions": {"type": "str", "description": "Any health conditions or limitations the learners may have (e.g., asthma, diabetes, hearing impairment)"}}, "required": ["age", "gender"], "responses": {"fitness_level": {"type": "str", "description": "The fitness level of the learner based on age, gender, ability level, and health conditions"}}}
{"api_name": "recordAttendance", "api_description": "Record attendance of students in physical education class", "field": "Physical Education/Diverse learners in physical education", "parameters": {"class_id": {"type": "int", "description": "The ID of the class for which you want to record attendance"}, "attendance_list": {"type": "str", "description": "A list of student IDs representing attendance (e.g., [1001, 1002, 1005])"}}, "required": ["class_id", "attendance_list"], "responses": {"status": {"type": "str", "description": "The status of attendance recording"}}}
{"api_name": "getPhysicalEducationPhilosophy", "api_description": "Retrieve information about the philosophy of physical education", "field": "Physical Education/Physical education philosophy", "parameters": {}, "required": [], "responses": {"philosophy": {"type": "str", "description": "The philosophy of physical education"}}}
{"api_name": "estimateVO2Max", "api_description": "Estimate the maximal oxygen uptake (VO2 max) based on a 1-mile walk test", "field": "Physical Education/Fitness assessment and evaluation", "parameters": {"gender": {"type": "str", "description": "The gender of the person (e.g., male, female)"}, "age": {"type": "int", "description": "The age of the person in years (e.g., 30)"}, "weight": {"type": "float", "description": "The weight of the person in kilograms (e.g., 75)"}, "time": {"type": "float", "description": "The time taken to complete the 1-mile walk test in minutes and seconds (e.g., 12.5)"}, "heart_rate": {"type": "int", "description": "The heart rate immediately after completing the 1-mile walk test"}}, "required": ["gender", "age", "weight", "time", "heart_rate"], "responses": {"vo2_max": {"type": "float", "description": "The estimated maximal oxygen uptake (VO2 max)"}}}
{"api_name": "promotePhysicalActivity", "api_description": "Promote physical activity to improve health and fitness levels", "field": "Physical Education/Physical activity promotion", "parameters": {"age_group": {"type": "str", "description": "Target age group to promote physical activity (e.g., children, teenagers, adults, seniors)"}, "activity_type": {"type": "str", "description": "Type of physical activity to promote (e.g., aerobic exercises, strength training, yoga, outdoor sports)"}, "duration": {"type": "int", "description": "Duration of physical activity session in minutes (e.g., 30, 60, 90)"}, "intensity": {"type": "str", "description": "Intensity level of physical activity (e.g., low, moderate, high)"}}, "required": ["age_group", "activity_type"], "responses": {"recommendations": {"type": "str", "description": "Recommendations for promoting physical activity based on the parameters specified"}, "benefits": {"type": "str", "description": "Health benefits of engaging in the recommended physical activity"}}}
{"api_name": "getAdaptivePE", "api_description": "Retrieve information about adaptive physical education", "field": "Physical Education/Adaptive physical education", "parameters": {"student_name": {"type": "str", "description": "The name of the student requiring adaptive physical education"}, "age": {"type": "int", "description": "The age of the student requiring adaptive physical education"}, "grade": {"type": "int", "description": "The grade level of the student requiring adaptive physical education"}, "disability_type": {"type": "str", "description": "The type of disability the student has (e.g., visual impairment, intellectual disability, physical disability)"}, "sport_preferences": {"type": "str", "description": "The preferred sports or activities of the student (e.g., swimming, basketball, yoga)"}}, "required": ["student_name", "disability_type"], "responses": {"recommended_activities": {"type": "str", "description": "The recommended adaptive physical activities for the student"}, "sport_equipment": {"type": "str", "description": "The specialized sports equipment required for the student"}, "fitness_goals": {"type": "str", "description": "The fitness goals set for the student in adaptive physical education"}}}
{"api_name": "getTGUFundamentals", "api_description": "Retrieve the fundamental skills and concepts of Teaching Games for Understanding", "field": "Physical Education/Teaching games for understanding", "parameters": {}, "required": [], "responses": {"fundamentals": {"type": "str", "description": "The fundamental skills and concepts of Teaching Games for Understanding"}}}
{"api_name": "getTGUAssessment", "api_description": "Retrieve the assessment criteria for Teaching Games for Understanding", "field": "Physical Education/Teaching games for understanding", "parameters": {}, "required": [], "responses": {"assessment_criteria": {"type": "str", "description": "The assessment criteria for Teaching Games for Understanding"}}}
{"api_name": "getSwimmingTechnique", "api_description": "Retrieve information about swimming technique", "field": "Physical Education/Aquatics", "parameters": {"stroke": {"type": "str", "description": "The swimming stroke you want information on (e.g., freestyle, breaststroke, backstroke)"}, "level": {"type": "str", "description": "The difficulty level of the swimming technique (e.g., beginner, intermediate, advanced)"}}, "required": ["stroke"], "responses": {"technique_description": {"type": "str", "description": "The detailed description and guidance for the specified swimming technique"}}}
{"api_name": "getRunningDistance", "api_description": "Calculate the distance covered in a running event", "field": "Physical Education/Track and field", "parameters": {"time_taken": {"type": "float", "description": "The time taken to complete the running event in minutes (e.g., 10.5, 15.2, 20.3)"}, "speed": {"type": "float", "description": "The average speed during the running event in meters per second (e.g., 3.5, 4.2, 5.1)"}, "event_type": {"type": "str", "description": "Specify the type of running event (e.g., marathon, 100 meters, 400 meters)"}, "unit": {"type": "str", "description": "The desired unit of distance (e.g., meters, kilometers, miles)"}}, "required": ["time_taken", "speed", "event_type"], "responses": {"distance": {"type": "float", "description": "The distance covered during the running event"}, "unit": {"type": "str", "description": "The unit of distance in which the distance is provided"}}}
{"api_name": "trackSteps", "api_description": "Track the number of steps taken by a person for health promotion", "field": "Physical Education/Health promotion", "parameters": {"person_id": {"type": "str", "description": "The unique identifier of the person"}, "start_date": {"type": "str", "description": "The start date of tracking steps (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date of tracking steps (e.g., 2022-01-31)"}}, "required": ["person_id", "start_date", "end_date"], "responses": {"total_steps": {"type": "int", "description": "The total number of steps taken during the specified period"}, "average_steps_per_day": {"type": "float", "description": "The average number of steps taken per day during the specified period"}}}
{"api_name": "getInjuryManagementGuidelines", "api_description": "Retrieve injury management guidelines", "field": "Physical Education/Sports injury prevention and management", "parameters": {"injury_type": {"type": "str", "description": "The type of injury for which you want to get management guidelines (e.g., sprain, strain, fracture)"}, "sport": {"type": "str", "description": "The sport for which you want to get injury management guidelines (e.g., soccer, basketball, running)"}}, "required": ["injury_type", "sport"], "responses": {"guidelines": {"type": "str", "description": "Injury management guidelines for the specified injury type and sport"}}}
{"api_name": "exerciseRecommendation", "api_description": "Get exercise recommendations for aging population", "field": "Physical Education/Exercise and aging", "parameters": {"age": {"type": "int", "description": "Age of the person to recommend exercise for (e.g., 60)"}, "gender": {"type": "str", "description": "Gender of the person (e.g., male, female)"}, "existing_conditions": {"type": "str", "description": "Existing health conditions that the person has (e.g., arthritis, diabetes)"}, "fitness_level": {"type": "str", "description": "Fitness level of the person (e.g., sedentary, moderately active)"}}, "required": ["age", "gender"], "responses": {"exercise": {"type": "str", "description": "Recommended exercise for the person"}, "duration": {"type": "str", "description": "Recommended duration of exercise (e.g., 30 minutes)"}, "intensity": {"type": "str", "description": "Recommended intensity of exercise (e.g., low, moderate)"}}}
{"api_name": "getDeviceUsageGuidelines", "api_description": "Retrieve the usage guidelines for a specific assistive device used in physical education", "field": "Physical Education/Assistive devices and technology in physical education", "parameters": {"device_name": {"type": "str", "description": "The name of the assistive device you want to get usage guidelines for"}}, "required": ["device_name"], "responses": {"usage_guidelines": {"type": "str", "description": "Guidelines for using the specified assistive device in physical education"}}}
{"api_name": "getAssistiveDevices", "api_description": "Retrieve information about assistive devices and technology used in physical education", "field": "Physical Education/Assistive devices and technology in physical education", "parameters": {"disability_type": {"type": "str", "description": "Specify the type of disability for which you want to get assistive devices (e.g., visual impairment, mobility impairment, intellectual disability)"}, "age_group": {"type": "str", "description": "Specify the age group for which you want to get assistive devices (e.g., children, adults)"}, "location": {"type": "str", "description": "Specify the location for which you want to get assistive devices (e.g., school, sports facility)"}}, "required": ["disability_type", "age_group"], "responses": {"devices": {"type": "str", "description": "The assistive devices available for the specified disability type and age group"}, "technology": {"type": "str", "description": "The technology used to enhance physical education for individuals with disabilities"}}}
{"api_name": "getPsychomotorDevelopmentSkills", "api_description": "Retrieve information about psychomotor development skills", "field": "Physical Education/Psychomotor development", "parameters": {"age": {"type": "int", "description": "The age of the individual for which you want to get the psychomotor development skills (e.g., 5, 10, 15)"}, "gender": {"type": "str", "description": "The gender of the individual for which you want to get the psychomotor development skills (e.g., male, female)"}, "activity_level": {"type": "str", "description": "The activity level of the individual for which you want to get the psychomotor development skills (e.g., low, moderate, high)"}, "focus_area": {"type": "str", "description": "The specific focus area of psychomotor development skills (e.g., balance, coordination, agility)"}}, "required": ["age"], "responses": {"skills": {"type": "str", "description": "The psychomotor development skills of the individual at the specified age, gender, and activity level"}}}
{"api_name": "getPsychomotorSkills", "api_description": "Retrieve psychomotor skill development information", "field": "Physical Education/Psychomotor development", "parameters": {"age": {"type": "int", "description": "The age of the individual (e.g., 5, 10, 15)"}, "exercise_type": {"type": "str", "description": "Type of exercise to focus on (e.g., balance, coordination, flexibility, strength)"}, "duration": {"type": "int", "description": "Duration of the exercise in minutes (e.g., 30, 60, 90)"}, "level": {"type": "str", "description": "The level of difficulty of the exercise (e.g., beginner, intermediate, advanced)"}}, "required": ["age"], "responses": {"skill_level": {"type": "str", "description": "The skill level achieved in the given exercise type (e.g., novice, proficient, expert)"}, "development_area": {"type": "str", "description": "The specific area of psychomotor development that is targeted (e.g., fine motor skills, gross motor skills)"}}}
{"api_name": "scheduleClass", "api_description": "Schedule a physical education class", "field": "Physical Education/Classroom management in physical education", "parameters": {"class_id": {"type": "str", "description": "The unique ID of the physical education class"}, "day_of_week": {"type": "str", "description": "The day of the week for the class (e.g., Monday, Tuesday)"}, "start_time": {"type": "str", "description": "The start time of the class in 24-hour format"}, "end_time": {"type": "str", "description": "The end time of the class in 24-hour format"}, "location": {"type": "str", "description": "The location where the class will be held"}}, "required": ["class_id", "day_of_week", "start_time", "end_time", "location"], "responses": {"success": {"type": "bool", "description": "Indicates whether the class scheduling was successful"}}}
{"api_name": "getMovementSkills", "api_description": "Retrieve information about motor skills and learning", "field": "Physical Education/Motor control and learning", "parameters": {"skill_type": {"type": "str", "description": "The type of motor skill you want to retrieve information about (e.g., locomotor, object control)"}, "age_group": {"type": "str", "description": "The age group for which you want to retrieve information about motor control and learning (e.g., children, adolescents, adults)"}}, "required": ["skill_type"], "responses": {"skill_description": {"type": "str", "description": "Description of the selected motor skill"}, "learning_tips": {"type": "str", "description": "Tips and strategies for learning and improving the selected motor skill"}}}
{"api_name": "getMotorDevelopment", "api_description": "Retrieve motor development information", "field": "Physical Education/Motor development and learning", "parameters": {"age": {"type": "int", "description": "The age of the individual you want to get motor development information for (e.g., 5, 10, 15)"}, "activity": {"type": "str", "description": "The specific activity for which you want to get motor development information (e.g., running, jumping, throwing)"}, "skill_level": {"type": "str", "description": "Specify the skill level of the individual (e.g., beginner, intermediate, advanced)"}}, "required": ["age", "activity"], "responses": {"development_score": {"type": "float", "description": "The motor development score for the specified age and activity"}, "age_range": {"type": "str", "description": "The age range within which the motor development score is applicable"}}}
{"api_name": "getFitnessTestResult", "api_description": "Retrieve physical fitness test result for an individual", "field": "Physical Education/Physical fitness testing and assessment", "parameters": {"person_id": {"type": "str", "description": "The ID of the person for whom you want to get the fitness test result"}, "test_type": {"type": "str", "description": "The type of fitness test to retrieve the result (e.g., aerobic capacity, muscular strength)"}}, "required": ["person_id"], "responses": {"test_result": {"type": "str", "description": "The fitness test result for the specified person and test type"}, "unit": {"type": "str", "description": "The unit of measurement for the fitness test result"}}}
{"api_name": "getPlaygroundAvailability", "api_description": "Check the availability of a playground", "field": "Physical Education/Play and recreation", "parameters": {"location": {"type": "str", "description": "The location of the playground (e.g., park, school, community center)"}, "time": {"type": "str", "description": "The desired time to check the availability (e.g., morning, afternoon, evening)"}}, "required": ["location"], "responses": {"availability": {"type": "bool", "description": "Whether the playground is available at the specified time"}}}
{"api_name": "getPlaygroundRules", "api_description": "Retrieve rules and regulations of a playground", "field": "Physical Education/Play and recreation", "parameters": {"location": {"type": "str", "description": "The location of the playground (e.g., park, school, community center)"}}, "required": ["location"], "responses": {"rules": {"type": "str", "description": "Rules and regulations of the specified playground"}}}
{"api_name": "reservePlayground", "api_description": "Reserve a playground for a specific date and time", "field": "Physical Education/Play and recreation", "parameters": {"playground_id": {"type": "int", "description": "The ID of the playground to reserve"}, "date": {"type": "str", "description": "The date for the reservation (e.g., YYYY-MM-DD)"}, "time": {"type": "str", "description": "The time for the reservation (e.g., HH:MM)"}}, "required": ["playground_id", "date", "time"], "responses": {"reservation_id": {"type": "str", "description": "The reservation ID for the reserved playground"}}}
{"api_name": "lessonPlanning", "api_description": "Create a lesson plan for a physical education class", "field": "Physical Education/Lesson planning in physical education", "parameters": {"grade_level": {"type": "str", "description": "The grade level for which the lesson plan is being created (e.g., 1st grade, 5th grade, high school)"}, "duration": {"type": "int", "description": "The duration of the lesson in minutes"}, "skills_covered": {"type": "str", "description": "The skills that will be covered in the lesson (e.g., throwing, jumping, dribbling)"}, "equipment_needed": {"type": "str", "description": "The equipment needed for the lesson (e.g., cones, balls, mats)"}, "safety_precautions": {"type": "str", "description": "Any safety precautions that need to be taken during the lesson"}}, "required": ["grade_level", "duration", "skills_covered"], "responses": {"lesson_plan": {"type": "str", "description": "The detailed lesson plan for the physical education class"}}}
{"api_name": "getPhysicalActivityMentalHealth", "api_description": "Retrieve information about the relationship between physical activity and mental health", "field": "Physical Education/Physical activity and mental health", "parameters": {"activity_type": {"type": "str", "description": "The type of physical activity (e.g., running, yoga, swimming)"}, "duration": {"type": "int", "description": "The duration of the physical activity in minutes"}, "intensity": {"type": "str", "description": "The intensity level of the physical activity (e.g., low, moderate, high)"}, "age_group": {"type": "str", "description": "The age group for which the information is desired (e.g., children, adults, elderly)"}, "mental_health_condition": {"type": "str", "description": "The mental health condition of interest (e.g., depression, anxiety, stress)"}, "gender": {"type": "str", "description": "The gender for which the information is desired (e.g., male, female, non-binary)"}}, "required": ["activity_type", "duration"], "responses": {"relationship": {"type": "str", "description": "The relationship between physical activity and mental health"}, "recommendations": {"type": "str", "description": "Recommendations for physical activity to improve mental health"}}}
{"api_name": "analyzeSample", "api_description": "Analyze a given sample using analytical chemistry techniques", "field": "Chemistry/Analytical chemistry", "parameters": {"sample": {"type": "str", "description": "The sample to be analyzed"}, "method": {"type": "str", "description": "The analytical method to be used for analysis (e.g., chromatography, spectroscopy)"}, "instrument": {"type": "str", "description": "The instrument or equipment to be used for analysis (e.g., gas chromatograph, mass spectrometer)"}, "conditions": {"type": "str", "description": "Any specific conditions required for the analysis (e.g., temperature, pressure)"}}, "required": ["sample", "method"], "responses": {"results": {"type": "str", "description": "The analysis results containing information about the sample"}}}
{"api_name": "getAtomicNumber", "api_description": "Retrieve the atomic number of an element", "field": "Chemistry/Inorganic chemistry", "parameters": {"element_name": {"type": "str", "description": "The name of the element for which you want to get the atomic number (e.g., hydrogen, oxygen, iron)"}}, "required": ["element_name"], "responses": {"atomic_number": {"type": "int", "description": "The atomic number of the specified element"}}}
{"api_name": "convertMolecule", "api_description": "Convert a molecule from one form to another", "field": "Chemistry/Organic chemistry", "parameters": {"molecule": {"type": "str", "description": "The molecule to be converted (e.g., ethanol, glucose)"}, "conversion": {"type": "str", "description": "The desired conversion for the molecule (e.g., structure to name, name to structure)"}, "format": {"type": "str", "description": "The format of the input molecule (e.g., SMILES, InChI)"}}, "required": ["molecule", "conversion"], "responses": {"converted_molecule": {"type": "str", "description": "The molecule after conversion in the desired format"}}}
{"api_name": "determineIsomer", "api_description": "Determine if two molecules are isomers", "field": "Chemistry/Organic chemistry", "parameters": {"molecule1": {"type": "str", "description": "The first molecule for comparison (e.g., butane)"}, "molecule2": {"type": "str", "description": "The second molecule for comparison (e.g., isobutane)"}}, "required": ["molecule1", "molecule2"], "responses": {"is_isomer": {"type": "bool", "description": "A boolean indicating if the two molecules are isomers"}}}
{"api_name": "getMolecularFormula", "api_description": "Retrieve the molecular formula of a given organic compound", "field": "Chemistry/Organic chemistry", "parameters": {"compound_name": {"type": "str", "description": "The name of the organic compound (e.g., Methane, Ethanol, Benzene)"}}, "required": ["compound_name"], "responses": {"molecular_formula": {"type": "str", "description": "The molecular formula of the given organic compound"}}}
{"api_name": "getStructuralFormula", "api_description": "Retrieve the structural formula of a given organic compound", "field": "Chemistry/Organic chemistry", "parameters": {"compound_name": {"type": "str", "description": "The name of the organic compound (e.g., Methane, Ethanol, Benzene)"}}, "required": ["compound_name"], "responses": {"structural_formula": {"type": "str", "description": "The structural formula of the given organic compound"}}}
{"api_name": "generateIUPACName", "api_description": "Generate the IUPAC name of a given organic compound", "field": "Chemistry/Organic chemistry", "parameters": {"compound": {"type": "str", "description": "The name of the organic compound for which you want to generate the IUPAC name (e.g., Propane, Butanone)"}, "structure": {"type": "str", "description": "The structure of the organic compound (e.g., H3C-CH2-CH3, CH3-CO-CH3)"}}, "required": ["compound", "structure"], "responses": {"iupac_name": {"type": "str", "description": "The IUPAC name of the given organic compound"}}}
{"api_name": "getOrganicCompoundInfo", "api_description": "Retrieve information about an organic compound", "field": "Chemistry/Organic chemistry", "parameters": {"compound_name": {"type": "str", "description": "The name of the organic compound for which you want to retrieve information (e.g., Benzene, Ethanol, Acetone)"}, "formula": {"type": "str", "description": "The chemical formula of the organic compound (e.g., C6H6, C2H5OH, CH3COCH3)"}}, "required": ["compound_name"], "responses": {"molecular_weight": {"type": "float", "description": "The molecular weight of the organic compound"}, "melting_point": {"type": "float", "description": "The melting point of the organic compound"}, "boiling_point": {"type": "float", "description": "The boiling point of the organic compound"}}}
{"api_name": "searchCompound", "api_description": "Search for information about a specific compound in organic chemistry", "field": "Chemistry/Organic chemistry", "parameters": {"compound_name": {"type": "str", "description": "The name of the compound you want to search for (e.g., methane, benzene, ethanol)"}}, "required": ["compound_name"], "responses": {"compound_properties": {"type": "str", "description": "The properties of the compound such as molecular formula, molar mass, boiling point, and melting point"}}}
{"api_name": "getPollutantConcentration", "api_description": "Retrieve the concentration of a pollutant in a given environment", "field": "Chemistry/Environmental chemistry", "parameters": {"pollutant": {"type": "str", "description": "The type of pollutant for which you want to get the concentration (e.g., carbon monoxide, nitrogen dioxide, ozone)"}, "location": {"type": "str", "description": "The location from which the pollutant concentration is measured (e.g., city, industrial area, forest)"}}, "required": ["pollutant"], "responses": {"concentration": {"type": "float", "description": "The concentration of the specified pollutant in the given environment"}}}
{"api_name": "getAQI", "api_description": "Retrieve the Air Quality Index (AQI) for a specific location", "field": "Chemistry/Environmental chemistry", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve the AQI (e.g., city, country)"}, "time_frame": {"type": "str", "description": "Specify the time frame for the AQI calculation (e.g., hourly, daily, monthly)"}, "averaging_period": {"type": "str", "description": "Specify the averaging period for the AQI calculation (e.g., 8-hour, 24-hour)"}}, "required": ["location"], "responses": {"aqi": {"type": "int", "description": "The Air Quality Index (AQI) for the specified location"}}}
{"api_name": "getMonomerProperties", "api_description": "Retrieve properties of a monomer in polymer chemistry", "field": "Chemistry/Polymer chemistry", "parameters": {"monomer_name": {"type": "str", "description": "The name of the monomer for which you want to retrieve properties"}}, "required": ["monomer_name"], "responses": {"density": {"type": "float", "description": "The density of the monomer in g/cm³"}, "molecular_weight": {"type": "float", "description": "The molecular weight of the monomer in g/mol"}, "boiling_point": {"type": "float", "description": "The boiling point of the monomer in °C"}, "melting_point": {"type": "float", "description": "The melting point of the monomer in °C"}}}
{"api_name": "calculatePolymerProperties", "api_description": "Calculate properties of a polymer", "field": "Chemistry/Polymer chemistry", "parameters": {"polymer_formula": {"type": "str", "description": "The chemical formula of the polymer"}, "temperature": {"type": "float", "description": "The temperature at which the properties are to be calculated in °C"}}, "required": ["polymer_formula", "temperature"], "responses": {"density": {"type": "float", "description": "The density of the polymer in g/cm³"}, "molecular_weight": {"type": "float", "description": "The molecular weight of the polymer in g/mol"}, "boiling_point": {"type": "float", "description": "The boiling point of the polymer in °C"}, "melting_point": {"type": "float", "description": "The melting point of the polymer in °C"}}}
{"api_name": "identifyMolecule", "api_description": "Identify a molecule based on its chemical structure", "field": "Chemistry/Chemical biology", "parameters": {"structure": {"type": "str", "description": "The chemical structure of the molecule in a specific format (e.g., smiles, inchi)"}, "method": {"type": "str", "description": "The identification method to use (e.g., spectral analysis, docking simulation)"}, "confidence_threshold": {"type": "float", "description": "The minimum confidence level required for identification (e.g., 0.9)"}, "database": {"type": "str", "description": "The database to search for molecule identification (e.g., PubChem, ChemSpider)"}}, "required": ["structure", "method"], "responses": {"molecule_name": {"type": "str", "description": "The name of the identified molecule"}, "confidence_score": {"type": "float", "description": "The confidence score of the identification"}, "related_information": {"type": "str", "description": "Additional information related to the identified molecule"}}}
{"api_name": "calculateLipophilicity", "api_description": "Calculate the lipophilicity of a molecule", "field": "Chemistry/Chemical biology", "parameters": {"structure": {"type": "str", "description": "The chemical structure of the molecule in a specific format (e.g., smiles, inchi)"}}, "required": ["structure"], "responses": {"lipophilicity_value": {"type": "float", "description": "The calculated lipophilicity value of the molecule"}}}
{"api_name": "getSurfaceArea", "api_description": "Retrieve the surface area of a material", "field": "Chemistry/Surface chemistry", "parameters": {"material": {"type": "str", "description": "The name of the material for which you want to get the surface area (e.g., gold, silver, silicon dioxide)"}, "temperature": {"type": "float", "description": "The temperature at which the surface area is measured in degrees Celsius"}, "pressure": {"type": "float", "description": "The pressure at which the surface area is measured in pascals"}}, "required": ["material"], "responses": {"surface_area": {"type": "float", "description": "The surface area of the specified material in square meters"}}}
{"api_name": "calculateSurfaceTension", "api_description": "Calculate the surface tension of a liquid", "field": "Chemistry/Surface chemistry", "parameters": {"liquid": {"type": "str", "description": "The name of the liquid for which you want to calculate the surface tension (e.g., water, ethanol, oil)"}, "temperature": {"type": "float", "description": "The temperature at which the surface tension needs to be calculated (in degrees Celsius)"}, "ambient_pressure": {"type": "float", "description": "The ambient pressure at which the surface tension needs to be calculated (in pascals)"}, "molecular_weight": {"type": "float", "description": "The molecular weight of the liquid (in g/mol)"}}, "required": ["liquid"], "responses": {"surface_tension": {"type": "float", "description": "The surface tension of the liquid at the specified conditions"}}}
{"api_name": "getContactAngle", "api_description": "Calculate the contact angle of a liquid droplet on a solid surface", "field": "Chemistry/Surface chemistry", "parameters": {"liquid": {"type": "str", "description": "The liquid droplet used in the experiment (e.g., water, oil, alcohol)"}, "solid": {"type": "str", "description": "The solid surface on which the droplet is placed (e.g., glass, metal, polymer)"}, "temperature": {"type": "float", "description": "The temperature at which the contact angle is measured"}}, "required": ["liquid", "solid"], "responses": {"contact_angle": {"type": "float", "description": "The contact angle of the liquid droplet on the solid surface"}}}
{"api_name": "getSurfaceChemistryInfo", "api_description": "Retrieve information on surface chemistry", "field": "Chemistry/Surface chemistry", "parameters": {"material": {"type": "str", "description": "The material for which you want to get surface chemistry information (e.g., gold, silicon, glass)"}, "temperature": {"type": "float", "description": "The temperature at which you want to study the surface chemistry (e.g., 25, 100, 500 degrees Celsius)"}, "gas_environment": {"type": "str", "description": "The gas environment in which you want to study the surface chemistry (e.g., air, nitrogen, hydrogen)"}, "pressure": {"type": "float", "description": "The pressure at which you want to study the surface chemistry (e.g., 1, 10, 1000 millibar)"}}, "required": ["material"], "responses": {"composition": {"type": "str", "description": "The composition of the surface of the specified material"}, "reactions": {"type": "str", "description": "The possible reactions that can occur on the surface of the specified material"}, "kinetics": {"type": "str", "description": "The rate at which surface reactions occur on the specified material"}}}
{"api_name": "getElectrodePotential", "api_description": "Retrieve the electrode potential of a chemical species", "field": "Chemistry/Electrochemistry", "parameters": {"species": {"type": "str", "description": "The chemical species for which you want to get the electrode potential (e.g., H2, Cu2+, Fe3+)"}, "standard_condition": {"type": "bool", "description": "Specify whether to retrieve the standard electrode potential (default: False)"}}, "required": ["species"], "responses": {"potential": {"type": "float", "description": "The electrode potential of the specified species"}, "unit": {"type": "str", "description": "The unit of electrode potential"}}}
{"api_name": "calculateElectrochemicalCellPotential", "api_description": "Calculate the overall potential of an electrochemical cell", "field": "Chemistry/Electrochemistry", "parameters": {"cathode": {"type": "str", "description": "The chemical species at the cathode (e.g., Ag, Cu2+)"}, "anode": {"type": "str", "description": "The chemical species at the anode (e.g., Zn, Fe3+)"}, "temperature": {"type": "int", "description": "The temperature in Kelvin at which the calculation is performed"}}, "required": ["cathode", "anode"], "responses": {"cell_potential": {"type": "float", "description": "The overall potential of the electrochemical cell"}, "unit": {"type": "str", "description": "The unit of cell potential"}}}
{"api_name": "getPhotochemicalReactionRate", "api_description": "Calculate the rate of photochemical reaction", "field": "Chemistry/Photochemistry", "parameters": {"reactants": {"type": "str", "description": "The reactants participating in the photochemical reaction (e.g., H2O, CO2, O3)"}, "intensity": {"type": "float", "description": "The intensity of light (e.g., 2.5)"}, "wavelength": {"type": "float", "description": "The wavelength of light (e.g., 455)"}, "temperature": {"type": "float", "description": "The temperature at which the reaction occurs (e.g., 298)"}, "pressure": {"type": "float", "description": "The pressure at which the reaction occurs (e.g., 1)"}, "time": {"type": "float", "description": "The time duration of the reaction (e.g., 5.0)"}}, "required": ["reactants", "intensity", "wavelength"], "responses": {"rate": {"type": "float", "description": "The rate of the photochemical reaction"}}}
{"api_name": "optimizeGeometry", "api_description": "Optimize the geometry of a molecule using computational chemistry methods", "field": "Chemistry/Computational chemistry", "parameters": {"molecule": {"type": "str", "description": "The molecular structure to optimize"}, "method": {"type": "str", "description": "The computational method to use for geometry optimization (e.g., B3LYP, MP2, CCSD(T))"}, "basis_set": {"type": "str", "description": "The basis set to use for geometry optimization (e.g., 6-31G, cc-pVDZ)"}, "solvent": {"type": "str", "description": "The solvent model to include in geometry optimization (e.g., PCM, COSMO)"}, "convergence_criteria": {"type": "float", "description": "The convergence criteria for geometry optimization"}, "charge": {"type": "int", "description": "The total charge of the molecule"}, "spin_multiplicity": {"type": "int", "description": "The spin multiplicity of the molecule"}}, "required": ["molecule", "method"], "responses": {"optimized_structure": {"type": "str", "description": "The optimized molecular structure"}}}
{"api_name": "getChemicalElements", "api_description": "Retrieve information about chemical elements", "field": "Chemistry/Chemical education", "parameters": {"element": {"type": "str", "description": "The name or symbol of the chemical element (e.g., Hydrogen, H)"}}, "required": ["element"], "responses": {"atomic_number": {"type": "int", "description": "The atomic number of the specified element"}, "atomic_weight": {"type": "float", "description": "The atomic weight of the specified element"}, "electronic_configuration": {"type": "str", "description": "The electronic configuration of the specified element"}}}
{"api_name": "getGreenChemistryPrinciples", "api_description": "Retrieve the principles of green chemistry", "field": "Chemistry/Green chemistry", "parameters": {}, "required": [], "responses": {"principles": {"type": "str", "description": "The principles of green chemistry"}}}
{"api_name": "getRingAtoms", "api_description": "Retrieve the number of ring atoms in a heterocyclic compound", "field": "Chemistry/Heterocyclic chemistry", "parameters": {"compound": {"type": "str", "description": "The name or formula of the heterocyclic compound (e.g., pyridine, C5H5N)"}, "element": {"type": "str", "description": "The element used to form the ring in the heterocyclic compound (e.g., nitrogen, oxygen, sulfur)"}, "saturated": {"type": "bool", "description": "Specify whether the ring is saturated or not (e.g., True, False)"}, "aromatic": {"type": "bool", "description": "Specify whether the ring is aromatic or not (e.g., True, False)"}}, "required": ["compound"], "responses": {"ring_atoms": {"type": "int", "description": "The number of ring atoms in the heterocyclic compound"}}}
{"api_name": "getHeterocycleProperties", "api_description": "Retrieve properties of a heterocycle", "field": "Chemistry/Heterocyclic chemistry", "parameters": {"heterocycle_name": {"type": "str", "description": "The name of the heterocycle for which you want to retrieve properties (e.g., pyridine, furan, thiophene)"}, "substituents": {"type": "str", "description": "Substituents present in the heterocycle (e.g., methyl, ethyl, phenyl)"}, "is_aromatic": {"type": "bool", "description": "Specify whether the heterocycle is aromatic (true/false)"}}, "required": ["heterocycle_name"], "responses": {"molecular_formula": {"type": "str", "description": "The molecular formula of the specified heterocycle"}, "molar_mass": {"type": "float", "description": "The molar mass of the heterocycle in g/mol"}, "boiling_point": {"type": "float", "description": "The boiling point of the heterocycle in °C"}, "melting_point": {"type": "float", "description": "The melting point of the heterocycle in °C"}}}
{"api_name": "getDrugProperties", "api_description": "Retrieve properties of a specific drug", "field": "Chemistry/Pharmaceutical chemistry", "parameters": {"name": {"type": "str", "description": "The name of the drug you want to get properties for (e.g., Aspirin, Paracetamol)"}, "brand": {"type": "str", "description": "The brand name of the drug (e.g., Tylenol, Advil)"}, "dosage_form": {"type": "str", "description": "The dosage form of the drug (e.g., tablet, capsule)"}, "strength": {"type": "str", "description": "The strength of the drug (e.g., 500mg, 100mg/ml)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the drug"}}, "required": ["name", "dosage_form"], "responses": {"properties": {"type": "str", "description": "The properties of the drug (e.g., molecular weight, chemical structure)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the drug"}, "therapeutic_class": {"type": "str", "description": "The therapeutic class of the drug (e.g., analgesic, antibiotic)"}}}
{"api_name": "getCompoundFormula", "api_description": "Retrieve the chemical formula of a compound", "field": "Chemistry/Solid-state chemistry", "parameters": {"compound_name": {"type": "str", "description": "The name of the compound for which you want to get the formula (e.g., Sodium chloride, Carbon dioxide)"}, "is_organic": {"type": "bool", "description": "Specify whether the compound is organic or not"}}, "required": ["compound_name"], "responses": {"formula": {"type": "str", "description": "The chemical formula of the specified compound"}}}
{"api_name": "getColloidProperties", "api_description": "Retrieve properties of colloidal solutions", "field": "Chemistry/Colloid chemistry", "parameters": {"solution_name": {"type": "str", "description": "The name of the colloidal solution"}, "concentration": {"type": "float", "description": "The concentration of the colloidal solution in mol/L"}}, "required": ["solution_name", "concentration"], "responses": {"particle_size": {"type": "str", "description": "The average particle size of the colloidal solution in nanometers"}, "zeta_potential": {"type": "float", "description": "The zeta potential of the colloidal solution in millivolts"}, "viscosity": {"type": "float", "description": "The viscosity of the colloidal solution in centipoise"}}}
{"api_name": "getFragranceChemistry", "api_description": "Retrieve information about fragrance chemistry", "field": "Chemistry/Fragrance chemistry", "parameters": {}, "required": [], "responses": {"fragrance_compounds": {"type": "str", "description": "The list of fragrance compounds used in a perfume"}}}
{"api_name": "calculateGibbsFreeEnergy", "api_description": "Calculate the Gibbs Free Energy of a chemical reaction", "field": "Chemistry/Chemical thermodynamics", "parameters": {"reactants": {"type": "str", "description": "The chemical equation of the reactants (e.g., H2 + O2)"}, "temperature": {"type": "float", "description": "The temperature at which the reaction is occurring (e.g., 298.15 K)"}, "pressure": {"type": "float", "description": "The pressure at which the reaction is occurring (e.g., 1 atm)"}}, "required": ["reactants"], "responses": {"gibbs_free_energy": {"type": "float", "description": "The Gibbs Free Energy of the reaction"}}}
{"api_name": "getEnthalpyChange", "api_description": "Calculate the enthalpy change of a chemical reaction", "field": "Chemistry/Chemical thermodynamics", "parameters": {"reactants": {"type": "str", "description": "The reactants involved in the chemical reaction (e.g., H2 + O2)"}, "products": {"type": "str", "description": "The products obtained from the chemical reaction (e.g., H2O)"}, "temperature": {"type": "float", "description": "The temperature at which the reaction occurs (e.g., 298.15 K)"}, "pressure": {"type": "float", "description": "The pressure at which the reaction occurs (e.g., 1 atm)"}}, "required": ["reactants", "products"], "responses": {"enthalpy_change": {"type": "float", "description": "The enthalpy change of the chemical reaction"}}}
{"api_name": "generateFingerprint", "api_description": "Generate a molecular fingerprint for a given chemical compound", "field": "Chemistry/Chemoinformatics", "parameters": {"chemical_formula": {"type": "str", "description": "The chemical formula of the compound (e.g., C6H12O6, C10H13N5O4)"}}, "required": ["chemical_formula"], "responses": {"fingerprint": {"type": "str", "description": "The molecular fingerprint generated for the chemical compound"}}}
{"api_name": "analyzeCrystalSymmetry", "api_description": "Analyze the symmetry of a given crystal structure", "field": "Chemistry/Crystallography", "parameters": {"structure": {"type": "str", "description": "The crystal structure to be analyzed"}}, "required": ["structure"], "responses": {"symmetry": {"type": "str", "description": "The symmetry of the given crystal structure"}}}
{"api_name": "predictDrugActivity", "api_description": "Predict the activity of a drug on a specific target", "field": "Chemistry/Drug design", "parameters": {"drug_name": {"type": "str", "description": "The name of the drug you want to predict activity for"}, "target_name": {"type": "str", "description": "The name of the drug target"}}, "required": ["drug_name", "target_name"], "responses": {"predicted_activity": {"type": "str", "description": "The predicted activity of the drug on the target"}}}
{"api_name": "predictSolubility", "api_description": "Predict the solubility of a given compound in a specific solvent", "field": "Chemistry/Molecular modeling", "parameters": {"compound": {"type": "str", "description": "The chemical compound for which you want to predict the solubility (e.g., caffeine, aspirin)"}, "solvent": {"type": "str", "description": "The solvent in which you want to predict the solubility (e.g., water, ethanol)"}}, "required": ["compound", "solvent"], "responses": {"solubility": {"type": "str", "description": "The predicted solubility of the compound in the specified solvent"}}}
{"api_name": "calculateOpticalRotation", "api_description": "Calculate the optical rotation of a given compound", "field": "Chemistry/Molecular modeling", "parameters": {"chemical_formula": {"type": "str", "description": "The chemical formula of the compound for which you want to calculate the optical rotation (e.g., glucose, sucrose)"}, "wavelength": {"type": "float", "description": "The wavelength of the light used in the measurement (in nm)"}, "concentration": {"type": "float", "description": "The concentration of the compound in the sample solution (in g/mL)"}}, "required": ["chemical_formula", "wavelength", "concentration"], "responses": {"optical_rotation": {"type": "float", "description": "The calculated optical rotation of the compound in degrees"}}}
{"api_name": "generateMolecularStructure", "api_description": "Generate a 3D molecular structure based on the input chemical formula", "field": "Chemistry/Molecular modeling", "parameters": {"chemical_formula": {"type": "str", "description": "The chemical formula of the molecule (e.g., H2O, CH4)"}}, "required": ["chemical_formula"], "responses": {"molecular_structure": {"type": "str", "description": "The generated 3D molecular structure in a specific format"}}}
{"api_name": "synthesizePeptide", "api_description": "Synthesize a peptide sequence", "field": "Chemistry/Peptide chemistry", "parameters": {"sequence": {"type": "str", "description": "The amino acid sequence of the peptide (e.g., VYFQRWRK)"}, "modifications": {"type": "str", "description": "Any modifications to the peptide sequence (e.g., phosphorylation on Serine at position 3)"}}, "required": ["sequence"], "responses": {"peptide": {"type": "str", "description": "The synthesized peptide"}}}
{"api_name": "getWaterChemistry", "api_description": "Retrieve water chemistry information", "field": "Chemistry/Water chemistry", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the water chemistry (e.g., lake, river, swimming pool)"}, "parameter": {"type": "str", "description": "The specific water chemistry parameter you want to retrieve (e.g., pH, turbidity, conductivity)"}}, "required": ["location", "parameter"], "responses": {"value": {"type": "float", "description": "The value of the specified water chemistry parameter at the specified location"}, "unit": {"type": "str", "description": "The unit in which the water chemistry parameter is provided"}}}
{"api_name": "getSportsNutritionInfo", "api_description": "Retrieve information about sports nutrition", "field": "Nutrition/Sports Nutrition", "parameters": {"sport": {"type": "str", "description": "The sport for which you want to get nutrition information (e.g., running, weightlifting, swimming)"}, "goal": {"type": "str", "description": "The nutrition goal (e.g., muscle gain, weight loss, endurance)"}}, "required": ["sport"], "responses": {"nutrition_info": {"type": "str", "description": "Detailed information about the recommended sports nutrition"}}}
{"api_name": "getGeriatricNutrition", "api_description": "Retrieve geriatric nutrition information", "field": "Nutrition/Geriatric Nutrition", "parameters": {"age": {"type": "int", "description": "The age of the geriatric person (e.g., 60, 70, 80)"}, "gender": {"type": "str", "description": "The gender of the geriatric person (e.g., male, female)"}, "health_conditions": {"type": "str", "description": "Specify any health conditions of the geriatric person (e.g., diabetes, hypertension)"}}, "required": ["age", "gender"], "responses": {"calories": {"type": "int", "description": "The recommended daily calorie intake for the geriatric person"}, "protein": {"type": "int", "description": "The recommended daily protein intake for the geriatric person"}, "vitamins": {"type": "str", "description": "The recommended vitamins to include in the geriatric person's diet"}}}
{"api_name": "getNutrientIntake", "api_description": "Retrieve daily nutrient intake information", "field": "Nutrition/Nutritional Epidemiology", "parameters": {"age": {"type": "int", "description": "Age of the individual (in years, e.g., 25)"}, "sex": {"type": "str", "description": "Sex of the individual (e.g., male, female)"}, "weight": {"type": "float", "description": "Weight of the individual (in kilograms, e.g., 65.5)"}, "height": {"type": "float", "description": "Height of the individual (in centimeters, e.g., 170)"}, "activity_level": {"type": "str", "description": "Activity level of the individual (e.g., sedentary, active)"}}, "required": ["age", "sex", "weight", "height"], "responses": {"calories": {"type": "float", "description": "Recommended daily calorie intake"}, "protein": {"type": "float", "description": "Recommended daily protein intake"}, "carbohydrates": {"type": "float", "description": "Recommended daily carbohydrate intake"}, "fat": {"type": "float", "description": "Recommended daily fat intake"}}}
{"api_name": "getFoodIntake", "api_description": "Retrieve information about food intake of individuals", "field": "Nutrition/Nutritional Epidemiology", "parameters": {"age": {"type": "int", "description": "The age of the individual (e.g., 25, 40, 55)"}, "gender": {"type": "str", "description": "The gender of the individual (e.g., male, female)"}, "BMI": {"type": "float", "description": "The Body Mass Index of the individual"}, "food_group": {"type": "str", "description": "The type of food group to get intake for (e.g., dairy, fruits, grains, proteins, vegetables)"}}, "required": ["age", "gender", "food_group"], "responses": {"daily_intake": {"type": "float", "description": "The recommended daily intake of the specified food group for the individual"}, "difference": {"type": "float", "description": "The difference between the individual's actual intake and the recommended daily intake of the specified food group"}}}
{"api_name": "getNutritionTips", "api_description": "Retrieve nutrition education and tips", "field": "Nutrition/Nutrition Education", "parameters": {"age_group": {"type": "str", "description": "The age group for which you want to get nutrition education (e.g., children, adults, elderly)"}, "topic": {"type": "str", "description": "The topic you are interested in learning about (e.g., weight management, healthy eating, sports nutrition)"}, "language": {"type": "str", "description": "Specify the language in which you want to receive the education (e.g., English, Spanish, French)"}}, "required": ["age_group"], "responses": {"education_content": {"type": "str", "description": "The nutrition education content for the specified age group and topic"}, "author": {"type": "str", "description": "The author or source of the nutrition education"}}}
{"api_name": "getMovementAccuracy", "api_description": "Retrieve the accuracy of a specific movement", "field": "Sports Science/Motor control and learning", "parameters": {"movement_type": {"type": "str", "description": "The type of movement you want to analyze (e.g., throw, kick, jump)"}, "athlete_id": {"type": "int", "description": "The unique ID of the athlete you want to analyze"}, "environment": {"type": "str", "description": "The environmental conditions during the movement (e.g., indoor, outdoor)"}}, "required": ["movement_type", "athlete_id"], "responses": {"accuracy": {"type": "float", "description": "The accuracy score of the specific movement"}, "unit": {"type": "str", "description": "The unit of measurement for accuracy"}}}
{"api_name": "evaluateMotorControl", "api_description": "Evaluate motor control and learning abilities of an individual", "field": "Sports Science/Motor control and learning", "parameters": {"athlete_id": {"type": "int", "description": "The unique identifier of the athlete"}, "task_type": {"type": "str", "description": "The type of motor control task to be evaluated (e.g., balance, coordination)"}, "performance_score": {"type": "float", "description": "The performance score achieved by the athlete in the motor control task"}}, "required": ["athlete_id", "task_type", "performance_score"], "responses": {"evaluation_result": {"type": "str", "description": "The overall evaluation result of the motor control and learning abilities"}}}
{"api_name": "compareMotorControl", "api_description": "Compare motor control and learning abilities of two individuals", "field": "Sports Science/Motor control and learning", "parameters": {"athlete1_id": {"type": "int", "description": "The unique identifier of the first athlete"}, "athlete2_id": {"type": "int", "description": "The unique identifier of the second athlete"}, "task_type": {"type": "str", "description": "The type of motor control task to be compared (e.g., balance, coordination)"}}, "required": ["athlete1_id", "athlete2_id", "task_type"], "responses": {"comparison_result": {"type": "str", "description": "The comparison result between the motor control and learning abilities of the two athletes"}}}
{"api_name": "analyzeMotorControlPattern", "api_description": "Analyze the motor control pattern of an athlete", "field": "Sports Science/Motor control and learning", "parameters": {"athlete_id": {"type": "int", "description": "The unique identifier of the athlete"}, "task_type": {"type": "str", "description": "The type of motor control task to be analyzed (e.g., balance, coordination)"}}, "required": ["athlete_id", "task_type"], "responses": {"motor_control_pattern": {"type": "str", "description": "The motor control pattern exhibited by the athlete in the specified task"}}}
{"api_name": "getStrengthAndConditioningProgram", "api_description": "Retrieve a strength and conditioning program tailored for an individual's fitness goals", "field": "Sports Science/Strength and conditioning", "parameters": {"age": {"type": "int", "description": "The age of the individual"}, "gender": {"type": "str", "description": "The gender of the individual"}, "fitness_goals": {"type": "str", "description": "The desired fitness goals of the individual (e.g., muscle gain, weight loss, improved performance)"}, "duration": {"type": "int", "description": "The desired duration of the program in weeks"}}, "required": ["age", "gender", "fitness_goals"], "responses": {"program": {"type": "str", "description": "A detailed strength and conditioning program customized for the individual"}}}
{"api_name": "trackWorkoutProgression", "api_description": "Track and monitor workout progression over time to evaluate performance improvements", "field": "Sports Science/Strength and conditioning", "parameters": {"workout_type": {"type": "str", "description": "The type of workout being tracked (e.g., weightlifting, cardio, flexibility)"}, "start_date": {"type": "str", "description": "The start date of the tracking period"}, "end_date": {"type": "str", "description": "The end date of the tracking period"}}, "required": ["workout_type", "start_date", "end_date"], "responses": {"progression_data": {"type": "str", "description": "Data representing the workout progression over the specified period"}}}
{"api_name": "getSportsSociologyDefinition", "api_description": "Retrieve the definition of sports sociology", "field": "Sports Science/Sports sociology", "parameters": {}, "required": [], "responses": {"definition": {"type": "str", "description": "The definition of sports sociology"}}}
{"api_name": "getSportsSociologyTopics", "api_description": "Retrieve a list of sports sociology topics", "field": "Sports Science/Sports sociology", "parameters": {}, "required": [], "responses": {"topics": {"type": "str", "description": "A list of sports sociology topics"}}}
{"api_name": "getSportsManagementInfo", "api_description": "Retrieve sports management information", "field": "Sports Science/Sports management", "parameters": {"sport": {"type": "str", "description": "The sport for which you want to retrieve management information (e.g., football, basketball, tennis)"}, "country": {"type": "str", "description": "The country for which you want to retrieve management information (e.g., United States, United Kingdom, Australia)"}}, "required": ["sport"], "responses": {"management_info": {"type": "str", "description": "The sports management information for the specified sport and country"}}}
{"api_name": "trackPerformance", "api_description": "Track and analyze sports performance using technology", "field": "Sports Science/Sports technology", "parameters": {"athlete_id": {"type": "str", "description": "The unique identifier of the athlete"}, "sport": {"type": "str", "description": "The type of sport being performed"}, "device_type": {"type": "str", "description": "The type of tracking device being used (e.g., GPS watch, heart rate monitor)"}, "duration": {"type": "int", "description": "The duration of the performance in minutes"}}, "required": ["athlete_id", "sport"], "responses": {"performance_data": {"type": "str", "description": "The analyzed performance data of the athlete"}}}
{"api_name": "getVO2Max", "api_description": "Calculate VO2 max value for an athlete", "field": "Sports Science/Sports physiology research", "parameters": {"athlete_id": {"type": "str", "description": "The ID of the athlete for whom VO2 max value is to be calculated"}, "age": {"type": "int", "description": "The age of the athlete in years"}, "gender": {"type": "str", "description": "The gender of the athlete (e.g., male, female)"}, "weight": {"type": "float", "description": "The weight of the athlete in kilograms"}, "vo2_time": {"type": "int", "description": "The time in minutes taken to perform the required VO2 max test"}}, "required": ["athlete_id", "age", "gender", "weight", "vo2_time"], "responses": {"vo2_max": {"type": "float", "description": "The calculated VO2 max value for the athlete"}}}
{"api_name": "calculateWorkDone", "api_description": "Calculate the work done in a thermodynamic process", "field": "Physics/Thermodynamics", "parameters": {"initial_temperature": {"type": "float", "description": "Initial temperature of the system in Kelvin"}, "final_temperature": {"type": "float", "description": "Final temperature of the system in Kelvin"}, "gas_constant": {"type": "float", "description": "Gas constant of the system in J/(mol*K)"}, "moles": {"type": "float", "description": "Number of moles of the gas in the system"}}, "required": ["initial_temperature", "final_temperature", "gas_constant", "moles"], "responses": {"work_done": {"type": "float", "description": "Amount of work done in the thermodynamic process in joules"}}}
{"api_name": "calculateMagneticField", "api_description": "Calculate the magnetic field at a given point due to a current-carrying wire", "field": "Physics/Electromagnetism", "parameters": {"current": {"type": "float", "description": "The magnitude of current flowing through the wire in Amperes"}, "distance": {"type": "float", "description": "The distance between the wire and the point of interest in meters"}, "angle": {"type": "float", "description": "The angle between the wire and the line connecting the wire to the point of interest in degrees"}}, "required": ["current", "distance", "angle"], "responses": {"magnetic_field": {"type": "float", "description": "The magnitude of the magnetic field at the point of interest in Tesla"}}}
{"api_name": "calculateMagnification", "api_description": "Calculate the magnification of an optical system", "field": "Physics/Optics", "parameters": {"object_height": {"type": "float", "description": "The height of the object (in meters)"}, "image_height": {"type": "float", "description": "The height of the image (in meters)"}}, "required": ["object_height", "image_height"], "responses": {"magnification": {"type": "float", "description": "The magnification of the optical system"}}}
{"api_name": "getParticleCharge", "api_description": "Retrieve the charge of a particle", "field": "Physics/Particle Physics", "parameters": {"particle_type": {"type": "str", "description": "The type of particle (e.g., electron, proton, neutrino)"}}, "required": ["particle_type"], "responses": {"charge": {"type": "float", "description": "The charge of the particle in Coulombs"}}}
{"api_name": "calculateEnergyLevel", "api_description": "Calculate the energy level of an atomic or molecular system", "field": "Physics/Atomic and Molecular Physics", "parameters": {"element": {"type": "str", "description": "The chemical element for which you want to calculate the energy level (e.g., Hydrogen, Oxygen, Carbon)"}, "temperature": {"type": "float", "description": "The temperature at which the energy level should be calculated (e.g., 298.15 K, 25 °C)"}, "excitation": {"type": "str", "description": "The type of excitation to consider (e.g., ground state, excited state, Rydberg state)"}}, "required": ["element"], "responses": {"energy_level": {"type": "float", "description": "The calculated energy level of the specified element at the given temperature and excitation"}}}
{"api_name": "simulatePlasmaDischarge", "api_description": "Simulate a plasma discharge", "field": "Physics/Plasma Physics", "parameters": {"discharge_power": {"type": "float", "description": "The power of the plasma discharge in watts"}}, "required": ["discharge_power"], "responses": {"simulation_results": {"type": "str", "description": "The results of the plasma discharge simulation"}}}
{"api_name": "calculateReynoldsNumber", "api_description": "Calculate the Reynolds number of a fluid flow", "field": "Physics/Fluid Mechanics", "parameters": {"density": {"type": "float", "description": "The density of the fluid (in kilograms per cubic meter)"}, "velocity": {"type": "float", "description": "The velocity of the fluid (in meters per second)"}, "viscosity": {"type": "float", "description": "The dynamic viscosity of the fluid (in Pascal-seconds)"}, "characteristic_length": {"type": "float", "description": "The characteristic length of the flow (in meters)"}}, "required": ["density", "velocity", "viscosity", "characteristic_length"], "responses": {"reynolds_number": {"type": "float", "description": "The Reynolds number of the fluid flow"}}}
{"api_name": "getFluidDensity", "api_description": "Retrieve the density of a fluid", "field": "Physics/Fluid Mechanics", "parameters": {"fluid_name": {"type": "str", "description": "The name of the fluid for which you want to get the density (e.g., water, oil, air)"}, "temperature": {"type": "float", "description": "The temperature at which the density should be calculated (e.g., 25.5, 50.0, 100.2)"}}, "required": ["fluid_name"], "responses": {"density": {"type": "float", "description": "The density of the specified fluid at the given temperature"}}}
{"api_name": "calculateBernoulliEquation", "api_description": "Calculate the velocity of a fluid using the Bernoulli equation", "field": "Physics/Fluid Mechanics", "parameters": {"pressure": {"type": "float", "description": "The pressure of the fluid (e.g., 100.5, 200.0, 300.2)"}, "density": {"type": "float", "description": "The density of the fluid (e.g., 1.0, 1.2, 0.9)"}, "height": {"type": "float", "description": "The height at which the fluid is located (e.g., 5.0, 10.5, 15.2)"}}, "required": ["pressure", "density", "height"], "responses": {"velocity": {"type": "float", "description": "The velocity of the fluid based on the Bernoulli equation"}}}
{"api_name": "calculateWavelength", "api_description": "Calculate the wavelength of a sound wave in a given medium", "field": "Physics/Acoustics", "parameters": {"frequency": {"type": "float", "description": "The frequency of the sound wave (e.g., 1000.0, 500.5, 20000.0)"}, "velocity": {"type": "float", "description": "The speed of sound in the medium (e.g., 343.2, 1500.0, 5950.5)"}}, "required": ["frequency", "velocity"], "responses": {"wavelength": {"type": "float", "description": "The wavelength of the sound wave in the specified medium"}}}
{"api_name": "getCosmicAge", "api_description": "Estimate the age of the universe", "field": "Physics/Cosmology", "parameters": {"unit": {"type": "str", "description": "The desired unit for age (e.g., years, seconds)"}}, "required": [], "responses": {"age": {"type": "float", "description": "The estimated age of the universe", "unit": {"type": "str", "description": "The unit in which the age is provided"}}}}
{"api_name": "getLatticeConstant", "api_description": "Retrieve the lattice constant of a given material", "field": "Physics/Solid State Physics", "parameters": {"material": {"type": "str", "description": "The name of the material (e.g., silicon, graphene, diamond)"}}, "required": ["material"], "responses": {"lattice_constant": {"type": "float", "description": "The lattice constant of the specified material"}}}
{"api_name": "calculateBandGap", "api_description": "Calculate the band gap of a solid material", "field": "Physics/Solid State Physics", "parameters": {"material": {"type": "str", "description": "The name of the solid material (e.g., Silicon, Graphene)"}, "temperature": {"type": "float", "description": "The temperature at which to calculate the band gap (e.g., 300 K, 400 K)"}, "pressure": {"type": "float", "description": "The pressure at which to calculate the band gap (e.g., 1 atm, 10 GPa)"}}, "required": ["material"], "responses": {"band_gap": {"type": "float", "description": "The calculated band gap of the solid material"}}}
{"api_name": "getElectricalConductivity", "api_description": "Calculate the electrical conductivity of a solid material", "field": "Physics/Solid State Physics", "parameters": {"material": {"type": "str", "description": "The name of the solid material (e.g., graphene, silver, silicon)"}, "temperature": {"type": "float", "description": "The temperature at which the electrical conductivity is calculated (e.g., 300 K, 500 K)"}, "unit": {"type": "str", "description": "The unit for electrical conductivity (e.g., siemens per meter, ohm^-1 meter^-1)"}}, "required": ["material", "temperature"], "responses": {"electrical_conductivity": {"type": "float", "description": "The calculated electrical conductivity of the material"}}}
{"api_name": "getCountryGDP", "api_description": "Retrieve the GDP information of a country", "field": "Political Science/Comparative Politics", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get the GDP (e.g., United States, China, Germany)"}, "year": {"type": "int", "description": "The year for which you want to get the GDP (e.g., 2020, 2019, 2018)"}}, "required": ["country"], "responses": {"gdp": {"type": "float", "description": "The GDP of the specified country"}, "currency": {"type": "str", "description": "The currency in which the GDP is provided"}}}
{"api_name": "getRegimeType", "api_description": "Retrieve the regime type (e.g., democratic, authoritarian, hybrid) of a country", "field": "Political Science/Comparative Politics", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to retrieve the regime type (e.g., United States)"}, "year": {"type": "int", "description": "The year for which you want to retrieve the regime type (e.g., 2020)"}}, "required": ["country"], "responses": {"regime_type": {"type": "str", "description": "The regime type of the specified country", "example": "democratic"}}}
{"api_name": "getPublicAdminBudget", "api_description": "Retrieve information about public administration budgets", "field": "Political Science/Public Administration", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information about public administration budgets (e.g., United States, Germany, Brazil)"}}, "required": ["country"], "responses": {"budget": {"type": "float", "description": "The total budget allocated for public administration in the specified country"}}}
{"api_name": "getPoliticalPsychologyTheory", "api_description": "Retrieve theories and concepts in political psychology", "field": "Political Science/Political Psychology", "parameters": {}, "required": [], "responses": {"theory": {"type": "str", "description": "The theory or concept in political psychology"}}}
{"api_name": "getExecutivePolicies", "api_description": "Retrieve information about executive policies", "field": "Political Science/Executive Politics", "parameters": {"country": {"type": "str", "description": "The name of the country (e.g., United States, United Kingdom, France)"}, "year": {"type": "int", "description": "The year for which you want to retrieve executive policies"}}, "required": ["country"], "responses": {"policies": {"type": "str", "description": "A list of executive policies implemented by the country"}}}
{"api_name": "getPublicOpinion", "api_description": "Retrieve public opinion information", "field": "Political Science/Public Opinion and Behavior", "parameters": {"topic": {"type": "str", "description": "The topic for which you want to get public opinion information (e.g., elections, government policies)"}, "location": {"type": "str", "description": "The location for which the public opinion is desired (e.g., country, region)"}, "time_period": {"type": "str", "description": "Specify a time period for public opinion (e.g., last week, last month)"}}, "required": ["topic", "location"], "responses": {"opinion_score": {"type": "float", "description": "The overall score representing the public opinion on the given topic and location"}, "opinion_category": {"type": "str", "description": "The category of public opinion, such as positive, negative, neutral"}}}
{"api_name": "getCountryArea", "api_description": "Retrieve the total area of a specific country", "field": "Political Science/Political Geography", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the total area (e.g., Russia, Canada, Australia)"}}, "required": ["country"], "responses": {"area": {"type": "int", "description": "The total area of the specified country"}}}
{"api_name": "getCountryGovernmentType", "api_description": "Retrieve the type of government in a specific country", "field": "Political Science/Political Geography", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the government type (e.g., United Kingdom, Germany, Saudi Arabia)"}}, "required": ["country"], "responses": {"government_type": {"type": "str", "description": "The type of government in the specified country"}}}
{"api_name": "getCountryOfficialLanguage", "api_description": "Retrieve the official language(s) of a specific country", "field": "Political Science/Political Geography", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the official language(s) (e.g., India, South Africa, Mexico)"}}, "required": ["country"], "responses": {"official_language": {"type": "str", "description": "The official language(s) of the specified country"}}}
{"api_name": "getRaceEthnicData", "api_description": "Retrieve race and ethnic data for a specific location", "field": "Political Science/Race and Ethnic Politics", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the race and ethnic data (e.g., United States, California, New York City)"}, "year": {"type": "int", "description": "The year for which you want to retrieve the data (e.g., 2020, 2010, 2000)"}, "group": {"type": "str", "description": "Specify a racial or ethnic group of interest for the data (e.g., Asian, African American, Hispanic)"}}, "required": ["location"], "responses": {"population": {"type": "int", "description": "The population count of the specified racial or ethnic group at the specified location"}, "percentage": {"type": "float", "description": "The percentage representation of the specified racial or ethnic group in the total population"}}}
{"api_name": "getVoterBehavior", "api_description": "Retrieve voter behavior information", "field": "Political Science/Political Psychology", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the voter behavior information (e.g., United States, Germany, Australia)"}, "age_range": {"type": "str", "description": "Specify an age range for voter behavior (e.g., 18-25, 35-50, 60+)"}, "education_level": {"type": "str", "description": "Specify an education level for voter behavior (e.g., high school, college, postgraduate)"}, "political_affiliation": {"type": "str", "description": "Specify a political affiliation for voter behavior (e.g., Democrat, Republican, Independent)"}}, "required": ["country"], "responses": {"voter_turnout": {"type": "float", "description": "The percentage of eligible voters who cast their vote"}, "preferred_campaign_style": {"type": "str", "description": "The preferred style of political campaigns for the specified country"}}}
{"api_name": "getPoliticalAttitudes", "api_description": "Retrieve political attitudes and beliefs of individuals", "field": "Political Science/Political Psychology", "parameters": {"country": {"type": "str", "description": "The country for which you want to obtain political attitudes (e.g., United States, Japan, Germany)"}, "age": {"type": "int", "description": "Specify age range of individuals (e.g., 18-24, 25-34, 35-44)"}, "gender": {"type": "str", "description": "Specify gender of individuals (e.g., male, female)"}, "political_party": {"type": "str", "description": "Specify the political party affiliation of individuals (e.g., Democrat, Republican, Independent)"}}, "required": ["country"], "responses": {"attitudes": {"type": "str", "description": "The political attitudes and beliefs of individuals"}, "population_size": {"type": "int", "description": "The total population size of individuals considered"}}}
{"api_name": "trackPoliticalAdvertising", "api_description": "Track political advertising", "field": "Political Science/Political Communication", "parameters": {"country": {"type": "str", "description": "The country for which you want to track political advertising (e.g., United States, United Kingdom, Germany)"}}, "required": ["country"], "responses": {"advertisements": {"type": "str", "description": "The political advertisements currently being aired"}, "spending": {"type": "float", "description": "The amount of money spent on political advertising"}}}
{"api_name": "getVoterTurnout", "api_description": "Retrieve voter turnout information for an election", "field": "Political Science/Political Behavior", "parameters": {"election_year": {"type": "int", "description": "The year of the election for which you want to get the voter turnout (e.g., 2020, 2016)"}, "country": {"type": "str", "description": "The country where the election took place (e.g., United States, France, Brazil)"}, "region": {"type": "str", "description": "The specific region within the country where the election took place (e.g., Texas, Provence-Alpes-Côte d'Azur, São Paulo)"}}, "required": ["election_year", "country"], "responses": {"voter_turnout_percentage": {"type": "float", "description": "The percentage of eligible voters who cast their vote in the specified election"}, "total_voter_turnout": {"type": "int", "description": "The total number of voters who cast their vote in the specified election"}}}
{"api_name": "getInstitutionalStructure", "api_description": "Retrieve institutional structures and arrangements in different political systems", "field": "Political Science/Comparative Institutions", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve institutional information"}}, "required": ["country"], "responses": {"structure": {"type": "str", "description": "The description of institutional structure in the specified country"}}}
{"api_name": "getDemocracyIndex", "api_description": "Retrieve the democracy index of a country", "field": "Political Science/Democracy and Democratization", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the democracy index"}}, "required": ["country"], "responses": {"democracy_index": {"type": "float", "description": "The democracy index of the specified country"}}}
{"api_name": "getPoliticalRegime", "api_description": "Retrieve information about the political regime of a country", "field": "Political Science/Political Regimes", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to retrieve the political regime (e.g., United States, France, China)"}, "year": {"type": "int", "description": "The year for which you want to retrieve the political regime (e.g., 2020, 2010, 2000)"}}, "required": ["country"], "responses": {"regime_type": {"type": "str", "description": "The type of political regime of the specified country"}, "duration": {"type": "str", "description": "The duration of the political regime"}, "leader": {"type": "str", "description": "The leader of the political regime"}}}
{"api_name": "getConstitutionalismDefinition", "api_description": "Retrieve the definition of constitutionalism", "field": "Political Science/Constitutionalism", "parameters": {}, "required": [], "responses": {"definition": {"type": "str", "description": "The definition of constitutionalism"}}}
{"api_name": "getPresidentialPowers", "api_description": "Retrieve information about the powers of the President", "field": "Political Science/Executive Politics", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get information about presidential powers (e.g., United States, France, Brazil)"}, "year": {"type": "int", "description": "The specific year for which you want to retrieve the information"}}, "required": ["country"], "responses": {"powers": {"type": "str", "description": "The powers possessed by the President of the specified country"}}}
{"api_name": "getPresidentialTermLimits", "api_description": "Retrieve information about term limits for the President", "field": "Political Science/Executive Politics", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get information about presidential term limits (e.g., United States, France, Brazil)"}}, "required": ["country"], "responses": {"term_limits": {"type": "str", "description": "The term limits for the President of the specified country"}}}
{"api_name": "getPresidentialSuccession", "api_description": "Retrieve information about presidential succession", "field": "Political Science/Executive Politics", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get information about presidential succession (e.g., United States, France, Brazil)"}}, "required": ["country"], "responses": {"succession": {"type": "str", "description": "The order of succession in case of vacancy in the office of the President"}}}
{"api_name": "getBureaucracyData", "api_description": "Retrieve data related to Bureaucracy and Public Administration", "field": "Political Science/Bureaucracy and Public Administration", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve bureaucracy data (e.g., United States, France, Japan)"}, "government_type": {"type": "str", "description": "The type of government (e.g., democratic, autocratic)"}, "year": {"type": "int", "description": "Specify a year for the data"}}, "required": ["country"], "responses": {"bureaucracy_data": {"type": "str", "description": "Data related to the bureaucracy and public administration in the specified country"}, "year": {"type": "int", "description": "The year for which the data is provided"}}}
{"api_name": "getImports", "api_description": "Retrieve the current imports information", "field": "Political Science/International Political Economy", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the imports data (e.g., United States, China, Germany)"}}, "required": ["country"], "responses": {"imports": {"type": "str", "description": "The current imports data of the specified country"}}}
{"api_name": "getGlobalGovernanceStatistics", "api_description": "Retrieve global governance statistics", "field": "Political Science/Global Governance", "parameters": {"year": {"type": "int", "description": "The year for which you want to retrieve global governance statistics (e.g., 2019, 2020, 2021)"}, "category": {"type": "str", "description": "The category of global governance statistics (e.g., human rights, peacekeeping, international trade)"}, "region": {"type": "str", "description": "The region for which you want to retrieve global governance statistics (e.g., Africa, Asia, Europe)"}}, "required": ["year"], "responses": {"statistics": {"type": "str", "description": "The global governance statistics for the specified year, category, and region"}}}
{"api_name": "getGlobalGovernanceIndex", "api_description": "Retrieve the global governance index", "field": "Political Science/Global Governance", "parameters": {"year": {"type": "int", "description": "The year for which you want to get the global governance index"}, "region": {"type": "str", "description": "The region for which you want to get the global governance index (e.g., Asia, Europe, Africa)"}, "indicator": {"type": "str", "description": "Specify an indicator for global governance index (e.g., rule of law, corruption, human rights)"}}, "required": ["year", "region"], "responses": {"index_value": {"type": "float", "description": "The value of global governance index for the specified year and region"}, "indicator": {"type": "str", "description": "The indicator for which the global governance index value is provided"}}}
{"api_name": "getGlobalTerrorismIndex", "api_description": "Retrieve the Global Terrorism Index", "field": "Political Science/International Security", "parameters": {}, "required": [], "responses": {"terrorism_index": {"type": "float", "description": "The Global Terrorism Index"}}}
{"api_name": "getCountrySecurity", "api_description": "Retrieve international security information for a specific country", "field": "Political Science/International Security", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get the security information (e.g., United States, Russia, China)"}, "year": {"type": "int", "description": "The year for which you want to get the security information (e.g., 2021, 2022, 2023)"}, "security_level": {"type": "str", "description": "Specify a security level for the country (e.g., high, medium, low)"}}, "required": ["country", "year"], "responses": {"security_score": {"type": "float", "description": "The security score of the country for the specified year"}, "threats": {"type": "str", "description": "The major security threats faced by the country"}}}
{"api_name": "getGlobalThreats", "api_description": "Retrieve information on global security threats", "field": "Political Science/International Security", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get security threat information (e.g., United States, China, Russia)"}, "region": {"type": "str", "description": "The region for which you want to get security threat information (e.g., Middle East, Asia-Pacific, Europe)"}, "incident_type": {"type": "str", "description": "The type of security incident for which you want to get information (e.g., terrorism, cyber attacks, military conflicts)"}}, "required": ["country", "region"], "responses": {"threat_level": {"type": "str", "description": "The level of threat in the specified country/region"}, "incident_details": {"type": "str", "description": "The details and analysis of the security incident"}, "impact": {"type": "str", "description": "The potential impact of the security incident on the country/region"}, "recommendations": {"type": "str", "description": "Recommendations for mitigating the security threat"}}}
{"api_name": "getOrganizationHeadquarters", "api_description": "Retrieve headquarters of an international organization", "field": "Political Science/International Organizations", "parameters": {"organization_name": {"type": "str", "description": "The name of the international organization (e.g., United Nations, World Bank)"}}, "required": ["organization_name"], "responses": {"headquarters": {"type": "str", "description": "The location of the headquarters of the international organization"}}}
{"api_name": "getPoliticalLeaders", "api_description": "Retrieve information about political leaders in Latin American countries", "field": "Political Science/Latin American Politics", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information about political leaders (e.g., Brazil, Mexico, Argentina)"}, "government_type": {"type": "str", "description": "Specify the type of government (e.g., democracy, dictatorship)"}, "party": {"type": "str", "description": "Specify the political party of the leader (e.g., PRI, PT, Peronist)"}, "term": {"type": "int", "description": "Specify the term number of the leader (e.g., 1, 2, 3)"}}, "required": ["country"], "responses": {"leader_name": {"type": "str", "description": "The name of the political leader"}, "government_type": {"type": "str", "description": "The type of government of the leader"}, "party": {"type": "str", "description": "The political party of the leader"}}}
{"api_name": "searchLawsByName", "api_description": "Search for laws by their name or title", "field": "Political Science/Public Law and Judicial Politics", "parameters": {"law_name": {"type": "str", "description": "The name or title of the law you want to search for (e.g., Constitution, Penal Code, Immigration Act)"}}, "required": ["law_name"], "responses": {"law_number": {"type": "str", "description": "The unique identifier or number of the law"}, "law_description": {"type": "str", "description": "A description of the law"}}}
{"api_name": "getJudicialRecords", "api_description": "Retrieve judicial records and public law information", "field": "Political Science/Public Law and Judicial Politics", "parameters": {"case_number": {"type": "str", "description": "The unique case number of the judicial record"}, "court": {"type": "str", "description": "The court where the judicial proceeding took place"}, "year": {"type": "int", "description": "The year in which the judicial proceeding occurred"}}, "required": ["case_number"], "responses": {"case_details": {"type": "str", "description": "The detailed information about the judicial case"}, "court_decision": {"type": "str", "description": "The decision made by the court"}, "judges_names": {"type": "str", "description": "The names of the judges involved in the case"}, "legislation_references": {"type": "str", "description": "The references to relevant public laws and statutes"}}}
{"api_name": "getJudicialDecisions", "api_description": "Retrieve judicial decisions from public law cases", "field": "Political Science/Public Law and Judicial Politics", "parameters": {"court": {"type": "str", "description": "The name of the court whose decisions you want to retrieve (e.g., Supreme Court, Constitutional Court)"}, "year": {"type": "int", "description": "The year in which the judicial decision was made"}, "case_category": {"type": "str", "description": "The category of the case to filter the search (e.g., criminal, civil, administrative)"}, "keywords": {"type": "str", "description": "Keywords or phrases related to the content of the judicial decision"}}, "required": ["court", "year"], "responses": {"judicial_decision": {"type": "str", "description": "The full text of the judicial decision in the specified court and year"}, "case_number": {"type": "str", "description": "The unique identifier of the case"}}}
{"api_name": "getDefensePolicy", "api_description": "Retrieve the defense policy information of a country", "field": "Political Science/Security and Defense Policy", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get the defense policy"}}, "required": ["country"], "responses": {"policy": {"type": "str", "description": "The defense policy of the specified country"}}}
{"api_name": "getIntermarriageRates", "api_description": "Retrieve intermarriage rates between different races and ethnicities", "field": "Sociology/Race and Ethnicity", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the intermarriage rates (e.g., country, city)"}, "year": {"type": "int", "description": "The year for which you want to get the intermarriage rates"}}, "required": ["location"], "responses": {"rates": {"type": "float", "description": "The intermarriage rates between different races and ethnicities"}}}
{"api_name": "getMaritalStatus", "api_description": "Retrieve marital status information", "field": "Sociology/Family and Marriage", "parameters": {"age": {"type": "int", "description": "The age of the individual"}, "gender": {"type": "str", "description": "The gender of the individual (e.g., male, female, non-binary)"}, "location": {"type": "str", "description": "The location of the individual's residence"}}, "required": ["age", "gender"], "responses": {"marital_status": {"type": "str", "description": "The marital status of the individual (e.g., single, married, divorced)"}}}
{"api_name": "getChildrenCount", "api_description": "Retrieve the number of children in a family", "field": "Sociology/Family and Marriage", "parameters": {"family_id": {"type": "str", "description": "The unique identifier of the family"}}, "required": ["family_id"], "responses": {"children_count": {"type": "int", "description": "The number of children in the family"}}}
{"api_name": "getOccupationData", "api_description": "Retrieve information about a specific occupation", "field": "Sociology/Work and Occupations", "parameters": {"occupation": {"type": "str", "description": "The name of the occupation you want to get information about (e.g., doctor, lawyer, teacher)"}}, "required": ["occupation"], "responses": {"occupation_title": {"type": "str", "description": "The title of the occupation"}, "description": {"type": "str", "description": "A brief description of the occupation"}, "salary": {"type": "float", "description": "The average salary of the occupation"}, "skills_required": {"type": "str", "description": "The skills required for the occupation"}}}
{"api_name": "getOccupationStatistics", "api_description": "Retrieve statistical information about a specific occupation", "field": "Sociology/Work and Occupations", "parameters": {"occupation": {"type": "str", "description": "The specific occupation for which you want to retrieve statistics (e.g., doctor, lawyer, accountant)"}, "time_period": {"type": "str", "description": "The time period for which you want to retrieve the statistics (e.g., past year, past decade, past century)"}}, "required": ["occupation"], "responses": {"statistics": {"type": "str", "description": "The statistical information about the specific occupation and time period"}}}
{"api_name": "getOccupationInfo", "api_description": "Retrieve information about a specific occupation", "field": "Sociology/Work and Occupations", "parameters": {"occupation": {"type": "str", "description": "The occupation for which you want to get information (e.g., doctor, teacher, engineer)"}, "country": {"type": "str", "description": "The country in which the occupation is based (e.g., United States, United Kingdom)"}, "industry": {"type": "str", "description": "The industry in which the occupation operates (e.g., healthcare, education)"}}, "required": ["occupation"], "responses": {"job_description": {"type": "str", "description": "A description of the specified occupation"}, "average_salary": {"type": "float", "description": "The average salary for the specified occupation"}, "required_education": {"type": "str", "description": "The minimum level of education required for the specified occupation"}, "required_experience": {"type": "str", "description": "The minimum level of experience required for the specified occupation"}}}
{"api_name": "getBirthRate", "api_description": "Retrieve the birth rate of a given location", "field": "Sociology/Population and Demography", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the birth rate (e.g., city, state, country)"}}, "required": ["location"], "responses": {"birth_rate": {"type": "float", "description": "The birth rate at the specified location"}}}
{"api_name": "getAverageAge", "api_description": "Retrieve the average age of a population", "field": "Sociology/Aging and Gerontology", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the average age (e.g., country, city)"}, "gender": {"type": "str", "description": "Specify the gender for average age calculation (e.g., male, female, all)"}, "ethnicity": {"type": "str", "description": "Specify the ethnicity for average age calculation (e.g., White, Asian, African-American)"}, "income_level": {"type": "str", "description": "Specify the income level range for average age calculation (e.g., low-income, middle-income, high-income)"}}, "required": ["location"], "responses": {"average_age": {"type": "float", "description": "The average age of the specified population"}}}
{"api_name": "getRetirementAge", "api_description": "Retrieve retirement age information", "field": "Sociology/Aging and Gerontology", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the retirement age information"}}, "required": ["country"], "responses": {"retirement_age": {"type": "int", "description": "The retirement age in years for the specified country"}}}
{"api_name": "getMusicInfluence", "api_description": "Retrieve the influence of a music track on society", "field": "Sociology/Sociology of Music", "parameters": {"track_name": {"type": "str", "description": "The name of the music track"}, "artist_name": {"type": "str", "description": "The name of the artist or band for the music track"}}, "required": ["track_name"], "responses": {"influence": {"type": "str", "description": "The influence of the music track on society"}}}
{"api_name": "getMusicGenreFamily", "api_description": "Retrieve the music genre of a song and its classification within a genre family", "field": "Sociology/Sociology of Music", "parameters": {"song_title": {"type": "str", "description": "The title of the song for which you want to retrieve the music genre"}}, "required": ["song_title"], "responses": {"genre": {"type": "str", "description": "The music genre of the specified song"}, "genre_family": {"type": "str", "description": "The classification of the music genre within a genre family"}}}
{"api_name": "getTechnologyImpact", "api_description": "Retrieve the impact of technology on society", "field": "Sociology/Sociology of Technology", "parameters": {"technology": {"type": "str", "description": "The technology for which you want to assess its impact (e.g., artificial intelligence, social media, robotics)"}, "society": {"type": "str", "description": "The society to analyze the impact of technology on (e.g., Western society, Asian society)"}}, "required": ["technology", "society"], "responses": {"impact_summary": {"type": "str", "description": "A summary of the impact of the specified technology on society"}, "positive_effects": {"type": "str", "description": "Positive effects of the technology on society, if any"}, "negative_effects": {"type": "str", "description": "Negative effects of the technology on society, if any"}}}
{"api_name": "getTechnologicalAdvancements", "api_description": "Retrieve information on technological advancements in the field", "field": "Sociology/Sociology of Technology", "parameters": {"year": {"type": "int", "description": "The year for which you want to get technological advancements (e.g., 2022, 2023, 2024)"}, "industry": {"type": "str", "description": "Specify a specific industry to filter technological advancements (e.g., healthcare, automotive, communication)"}, "country": {"type": "str", "description": "Specify a country to filter technological advancements (e.g., United States, China, Germany)"}}, "required": ["year"], "responses": {"advancements": {"type": "str", "description": "The technological advancements in the specified year, industry, and country"}}}
{"api_name": "getAdoptionRate", "api_description": "Retrieve adoption rate of a specific technology", "field": "Sociology/Sociology of Technology", "parameters": {"technology": {"type": "str", "description": "The technology of interest (e.g., smartphones, electric vehicles)"}, "country": {"type": "str", "description": "The country of interest (e.g., United States, China, Germany)"}, "time_period": {"type": "str", "description": "The time period to analyze the adoption rate (e.g., last 5 years, 2000-2020)"}}, "required": ["technology"], "responses": {"adoption_rate": {"type": "float", "description": "Percentage of population that has adopted the given technology in the specified country and time period"}}}
{"api_name": "getLegalSystem", "api_description": "Retrieve information about the legal system of a country", "field": "Sociology/Sociology of Law", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve legal system information (e.g., United States, China, France)"}}, "required": ["country"], "responses": {"legal_system": {"type": "str", "description": "The legal system of the specified country"}}}
{"api_name": "getStructuralFunctionalismTheory", "api_description": "Retrieve information about the theory of Structural Functionalism in Sociology", "field": "Sociology/Structural Functionalism", "parameters": {}, "required": [], "responses": {"theory_description": {"type": "str", "description": "A detailed description of the theory of Structural Functionalism in Sociology"}}}
{"api_name": "getConflictTheory", "api_description": "Retrieve information about conflict theory in sociology", "field": "Sociology/Conflict Theory", "parameters": {}, "required": [], "responses": {"description": {"type": "str", "description": "A comprehensive description of conflict theory in sociology"}}}
{"api_name": "getPostmodernTheory", "api_description": "Retrieve information on postmodern theory in sociology", "field": "Sociology/Postmodern Theory", "parameters": {}, "required": [], "responses": {"theory": {"type": "str", "description": "The postmodern theory in sociology"}}}
{"api_name": "translateSpanish", "api_description": "Translate text from Spanish to another language", "field": "Foreign Languages/Spanish", "parameters": {"text": {"type": "str", "description": "The text that needs to be translated"}, "target_language": {"type": "str", "description": "The language to which the text should be translated (e.g., English, French, German)"}, "source_language": {"type": "str", "description": "The language of the original text (e.g., Spanish)"}}, "required": ["text", "target_language"], "responses": {"translated_text": {"type": "str", "description": "The translated text in the specified language"}}}
{"api_name": "conjugateSpanishVerb", "api_description": "Conjugate a Spanish verb", "field": "Foreign Languages/Spanish", "parameters": {"verb": {"type": "str", "description": "The Spanish verb you want to conjugate"}, "tense": {"type": "str", "description": "The desired tense for conjugation (e.g., present, past, future)"}, "person": {"type": "str", "description": "The desired person for conjugation (e.g., first, second, third)"}}, "required": ["verb", "tense", "person"], "responses": {"conjugation": {"type": "str", "description": "The conjugated form of the verb"}}}
{"api_name": "pronounceSpanishWord", "api_description": "Get the pronunciation of a Spanish word", "field": "Foreign Languages/Spanish", "parameters": {"word": {"type": "str", "description": "The Spanish word you want to know the pronunciation of"}}, "required": ["word"], "responses": {"pronunciation": {"type": "str", "description": "The pronunciation of the word"}}}
{"api_name": "translateToGerman", "api_description": "Translate a text to German", "field": "Foreign Languages/German", "parameters": {"text": {"type": "str", "description": "The text to be translated"}}, "required": ["text"], "responses": {"translation": {"type": "str", "description": "The translated text in German"}}}
{"api_name": "getGermanGrammarRules", "api_description": "Retrieve German grammar rules and explanations", "field": "Foreign Languages/German", "parameters": {}, "required": [], "responses": {"grammar_rules": {"type": "str", "description": "The German grammar rules and explanations"}}}
{"api_name": "translateToItalian", "api_description": "Translate a text to Italian", "field": "Foreign Languages/Italian", "parameters": {"text": {"type": "str", "description": "The text to be translated"}, "source_language": {"type": "str", "description": "The source language of the text (e.g., English, Spanish, French)"}}, "required": ["text"], "responses": {"translated_text": {"type": "str", "description": "The translated text in Italian"}}}
{"api_name": "getItalianVerbConjugation", "api_description": "Retrieve conjugation of an Italian verb", "field": "Foreign Languages/Italian", "parameters": {"verb": {"type": "str", "description": "The Italian verb to conjugate"}}, "required": ["verb"], "responses": {"conjugation": {"type": "str", "description": "The conjugation of the Italian verb"}}}
{"api_name": "pronouncePortuguese", "api_description": "Retrieve the pronunciation of a word or phrase in Portuguese", "field": "Foreign Languages/Portuguese", "parameters": {"word": {"type": "str", "description": "The word or phrase to get the pronunciation of"}}, "required": ["word"], "responses": {"pronunciation": {"type": "str", "description": "The pronunciation of the specified word or phrase"}}}
{"api_name": "translatePhrase", "api_description": "Translate a phrase from English to Portuguese", "field": "Foreign Languages/Portuguese", "parameters": {"phrase": {"type": "str", "description": "The phrase you want to translate (e.g., Hello, how are you?)"}, "source_language": {"type": "str", "description": "The source language of the phrase (e.g., English)"}, "target_language": {"type": "str", "description": "The target language to translate the phrase (e.g., Portuguese)"}}, "required": ["phrase", "target_language"], "responses": {"translated_phrase": {"type": "str", "description": "The translated phrase in the target language"}}}
{"api_name": "getPinyin", "api_description": "Retrieve the Pinyin (pronunciation) of a Chinese character", "field": "Foreign Languages/Chinese", "parameters": {"character": {"type": "str", "description": "The Chinese character to get the Pinyin for"}}, "required": ["character"], "responses": {"pinyin": {"type": "str", "description": "The Pinyin (pronunciation) of the Chinese character"}}}
{"api_name": "translateToJapanese", "api_description": "Translate a given text to Japanese", "field": "Foreign Languages/Japanese", "parameters": {"text": {"type": "str", "description": "The text you want to translate to Japanese"}}, "required": ["text"], "responses": {"translation": {"type": "str", "description": "The translation of the given text in Japanese"}}}
{"api_name": "getKanjiMeaning", "api_description": "Retrieve the meaning of a given Kanji character", "field": "Foreign Languages/Japanese", "parameters": {"kanji": {"type": "str", "description": "The Kanji character you want to get the meaning of"}}, "required": ["kanji"], "responses": {"meaning": {"type": "str", "description": "The meaning of the given Kanji character in English"}}}
{"api_name": "translateKoreanToEnglish", "api_description": "Translate a Korean phrase into English", "field": "Foreign Languages/Korean", "parameters": {"phrase": {"type": "str", "description": "The Korean phrase you want to translate"}}, "required": ["phrase"], "responses": {"translation": {"type": "str", "description": "The English translation of the input phrase"}}}
{"api_name": "findKoreanWord", "api_description": "Find the definition and example sentences of a Korean word", "field": "Foreign Languages/Korean", "parameters": {"word": {"type": "str", "description": "The Korean word you want to find"}}, "required": ["word"], "responses": {"definition": {"type": "str", "description": "The definition of the Korean word"}, "examples": {"type": "str", "description": "Example sentences using the Korean word"}}}
{"api_name": "translateHindi", "api_description": "Translate text from English to Hindi", "field": "Foreign Languages/Hindi", "parameters": {"text": {"type": "str", "description": "The text you want to translate from English to Hindi"}}, "required": ["text"], "responses": {"translated_text": {"type": "str", "description": "The translated text in Hindi"}}}
{"api_name": "translateBengali", "api_description": "Translate text from English to Bengali", "field": "Foreign Languages/Bengali", "parameters": {"text": {"type": "str", "description": "The text to be translated from English to Bengali"}}, "required": ["text"], "responses": {"translated_text": {"type": "str", "description": "The translated text in Bengali"}}}
{"api_name": "translatePunjabi", "api_description": "Translate text from Punjabi to another language", "field": "Foreign Languages/Punjabi", "parameters": {"text": {"type": "str", "description": "The text to be translated from Punjabi to another language"}}, "required": ["text"], "responses": {"translation": {"type": "str", "description": "The translated text"}}}
{"api_name": "guessUrduWord", "api_description": "Guess the Urdu word based on its meaning", "field": "Foreign Languages/Urdu", "parameters": {"meaning": {"type": "str", "description": "The meaning you want to guess the Urdu word for"}}, "required": ["meaning"], "responses": {"word": {"type": "str", "description": "The guessed Urdu word for the meaning"}}}
{"api_name": "learnUrduSentence", "api_description": "Learn a random Urdu sentence with its English translation", "field": "Foreign Languages/Urdu", "parameters": {}, "required": [], "responses": {"urdu_sentence": {"type": "str", "description": "A random Urdu sentence"}, "english_translation": {"type": "str", "description": "The English translation of the sentence"}}}
{"api_name": "translateToTurkish", "api_description": "Translate a given text to Turkish", "field": "Foreign Languages/Turkish", "parameters": {"text": {"type": "str", "description": "The text you want to translate to Turkish (e.g., Hello, How are you?)"}}, "required": ["text"], "responses": {"translation": {"type": "str", "description": "The translated text in Turkish"}}}
{"api_name": "getTurkishAlphabet", "api_description": "Retrieve the Turkish alphabet", "field": "Foreign Languages/Turkish", "parameters": {}, "required": [], "responses": {"alphabet": {"type": "str", "description": "The Turkish alphabet"}}}
{"api_name": "translateDutch", "api_description": "Translate a text from Dutch to another language", "field": "Foreign Languages/Dutch", "parameters": {"text": {"type": "str", "description": "The text that you want to translate from Dutch (e.g., Hallo, Hoe gaat het?)"}, "target_language": {"type": "str", "description": "The desired target language for translation (e.g., English, Spanish, French)"}}, "required": ["text", "target_language"], "responses": {"translated_text": {"type": "str", "description": "The translated text in the specified target language"}}}
{"api_name": "translateToSwedish", "api_description": "Translate a text to Swedish", "field": "Foreign Languages/Swedish", "parameters": {"text": {"type": "str", "description": "The text to be translated to Swedish"}}, "required": ["text"], "responses": {"translation": {"type": "str", "description": "The translated text in Swedish"}}}
{"api_name": "getSwedishWordDefinition", "api_description": "Get the definition of a Swedish word", "field": "Foreign Languages/Swedish", "parameters": {"word": {"type": "str", "description": "The Swedish word for which you want to get the definition"}}, "required": ["word"], "responses": {"definition": {"type": "str", "description": "The definition of the word in Swedish"}}}
{"api_name": "pronounceNorwegianWord", "api_description": "Get the pronunciation of a Norwegian word", "field": "Foreign Languages/Norwegian", "parameters": {"word": {"type": "str", "description": "The word you want to get the pronunciation for"}}, "required": ["word"], "responses": {"pronunciation": {"type": "str", "description": "The pronunciation of the word in Norwegian"}}}
{"api_name": "norwegianDictionary", "api_description": "Get the definition of a word in Norwegian", "field": "Foreign Languages/Norwegian", "parameters": {"word": {"type": "str", "description": "The word you want to get the definition for"}}, "required": ["word"], "responses": {"definition": {"type": "str", "description": "The definition of the word in Norwegian"}}}
{"api_name": "translateToCzech", "api_description": "Translate a text to Czech language", "field": "Foreign Languages/Czech", "parameters": {"text": {"type": "str", "description": "The text you want to translate to Czech"}}, "required": ["text"], "responses": {"translated_text": {"type": "str", "description": "The translated text in Czech language"}}}
{"api_name": "getRandomCzechPhrase", "api_description": "Retrieve a random Czech phrase", "field": "Foreign Languages/Czech", "parameters": {}, "required": [], "responses": {"phrase": {"type": "str", "description": "A randomly selected Czech phrase"}}}
{"api_name": "getGreekAlphabet", "api_description": "Retrieve the Greek alphabet", "field": "Foreign Languages/Greek", "parameters": {}, "required": [], "responses": {"alphabet": {"type": "str", "description": "The Greek alphabet"}}}
{"api_name": "translateGreek", "api_description": "Translate Greek text to another language", "field": "Foreign Languages/Greek", "parameters": {"text": {"type": "str", "description": "The Greek text that needs to be translated"}}, "required": ["text"], "responses": {"translation": {"type": "str", "description": "The translated text in another language"}}}
{"api_name": "pronounceGreek", "api_description": "Get the pronunciation of Greek words", "field": "Foreign Languages/Greek", "parameters": {"word": {"type": "str", "description": "The Greek word to get the pronunciation of"}}, "required": ["word"], "responses": {"pronunciation": {"type": "str", "description": "The pronunciation of the Greek word"}}}
{"api_name": "pronounceHungarian", "api_description": "Provide the pronunciation of a Hungarian word or phrase", "field": "Foreign Languages/Hungarian", "parameters": {"word": {"type": "str", "description": "The word or phrase you want to obtain the pronunciation for"}}, "required": ["word"], "responses": {"pronunciation": {"type": "str", "description": "The pronunciation of the given word or phrase"}}}
{"api_name": "learnHungarianWord", "api_description": "Learn a new Hungarian word along with its translation and pronunciation", "field": "Foreign Languages/Hungarian", "parameters": {}, "required": [], "responses": {"word": {"type": "str", "description": "A new Hungarian word"}, "translation": {"type": "str", "description": "The translation of the Hungarian word"}, "pronunciation": {"type": "str", "description": "The pronunciation of the Hungarian word"}}}
{"api_name": "translateVietnamese", "api_description": "Translate text from Vietnamese to another language", "field": "Foreign Languages/Vietnamese", "parameters": {"text": {"type": "str", "description": "The text to be translated (e.g., Hello, how are you?)"}, "target_language": {"type": "str", "description": "The target language to translate the text into (e.g., English, Spanish, French)"}}, "required": ["text", "target_language"], "responses": {"translated_text": {"type": "str", "description": "The translated text in the specified target language"}}}
{"api_name": "vocabularyLookup", "api_description": "Lookup the meaning and usage of a Vietnamese word", "field": "Foreign Languages/Vietnamese", "parameters": {"word": {"type": "str", "description": "The Vietnamese word to lookup (e.g., mắt, quê hương)"}}, "required": ["word"], "responses": {"meaning": {"type": "str", "description": "The meaning of the Vietnamese word"}, "usage": {"type": "str", "description": "The usage example of the Vietnamese word"}}}
{"api_name": "translateMalay", "api_description": "Translate text from Malay to another language", "field": "Foreign Languages/Malay", "parameters": {"text": {"type": "str", "description": "The text to be translated from Malay to another language"}, "target_language": {"type": "str", "description": "The desired language for translation (e.g., English, Spanish, French)"}}, "required": ["text", "target_language"], "responses": {"translation": {"type": "str", "description": "The translated text"}}}
{"api_name": "detectMalay", "api_description": "Detect the language of a given text", "field": "Foreign Languages/Malay", "parameters": {"text": {"type": "str", "description": "The text for language detection"}}, "required": ["text"], "responses": {"language": {"type": "str", "description": "The detected language"}}}
{"api_name": "translateToFilipino", "api_description": "Translate a given text to Filipino", "field": "Foreign Languages/Filipino", "parameters": {"text": {"type": "str", "description": "The text to be translated to Filipino"}}, "required": ["text"], "responses": {"translated_text": {"type": "str", "description": "The translated text in Filipino"}}}
{"api_name": "translateFromSwahili", "api_description": "Translate a text from Swahili to another language", "field": "Foreign Languages/Swahili", "parameters": {"text": {"type": "str", "description": "The text to be translated from Swahili"}, "target_language": {"type": "str", "description": "The language to which the text will be translated (e.g., English, French, Spanish)"}}, "required": ["text"], "responses": {"translated_text": {"type": "str", "description": "The translated text in the target language"}}}
{"api_name": "translateToHebrew", "api_description": "Translate a text to Hebrew", "field": "Foreign Languages/Hebrew", "parameters": {"text": {"type": "str", "description": "The text to be translated"}, "language": {"type": "str", "description": "The source language of the text (e.g., English, Spanish, French)"}}, "required": ["text"], "responses": {"translated_text": {"type": "str", "description": "The translated text in Hebrew"}}}
{"api_name": "pronounceInTamil", "api_description": "Get the pronunciation of a word in Tamil", "field": "Foreign Languages/Tamil", "parameters": {"word": {"type": "str", "description": "The word for which you want to get the pronunciation in Tamil"}}, "required": ["word"], "responses": {"pronunciation": {"type": "str", "description": "The pronunciation of the word in Tamil"}}}
{"api_name": "translateTeluguToEnglish", "api_description": "Translate Telugu text to English", "field": "Foreign Languages/Telugu", "parameters": {"text": {"type": "str", "description": "The Telugu text you want to translate"}}, "required": ["text"], "responses": {"translation": {"type": "str", "description": "The translated English text"}}}
{"api_name": "marathiDictionary", "api_description": "Lookup words in Marathi dictionary", "field": "Foreign Languages/Marathi", "parameters": {"word": {"type": "str", "description": "The word you want to lookup in Marathi dictionary"}}, "required": ["word"], "responses": {"meaning": {"type": "str", "description": "The meaning of the word in Marathi"}}}
{"api_name": "translateGujarati", "api_description": "Translate text from Gujarati to another language", "field": "Foreign Languages/Gujarati", "parameters": {"text": {"type": "str", "description": "The text to be translated from Gujarati (e.g., સુપ્રંભ, ચોક્કસો)"}, "target_language": {"type": "str", "description": "The target language to which the text should be translated (e.g., English, Spanish, French)"}}, "required": ["text", "target_language"], "responses": {"translated_text": {"type": "str", "description": "The translated text in the target language"}}}
{"api_name": "translateKannada", "api_description": "Translate text from English to Kannada", "field": "Foreign Languages/Kannada", "parameters": {"text": {"type": "str", "description": "The text to be translated from English to Kannada"}}, "required": ["text"], "responses": {"translated_text": {"type": "str", "description": "The translated text in Kannada"}}}
{"api_name": "getMalayalamWord", "api_description": "Retrieve the meaning and usage of a Malayalam word", "field": "Foreign Languages/Malayalam", "parameters": {"word": {"type": "str", "description": "The Malayalam word for which you want to get the meaning and usage"}}, "required": ["word"], "responses": {"meaning": {"type": "str", "description": "The meaning of the Malayalam word"}, "usage": {"type": "str", "description": "The examples of usage of the Malayalam word"}}}
{"api_name": "translateToOdia", "api_description": "Translate a given text to Odia language", "field": "Foreign Languages/Odia", "parameters": {"text": {"type": "str", "description": "The text you want to translate to Odia (e.g., Hello, How are you?)"}, "source_language": {"type": "str", "description": "The source language of the text (e.g., English, French, Spanish)"}, "target_language": {"type": "str", "description": "The target language to translate the text into (e.g., Odia)"}}, "required": ["text", "target_language"], "responses": {"translated_text": {"type": "str", "description": "The translated text in Odia language"}}}
{"api_name": "translateToAfrikaans", "api_description": "Translate text to Afrikaans", "field": "Foreign Languages/Afrikaans", "parameters": {"text": {"type": "str", "description": "The text you want to translate to Afrikaans"}}, "required": ["text"], "responses": {"translated_text": {"type": "str", "description": "The translated text in Afrikaans"}}}
{"api_name": "translateZulu", "api_description": "Translate a phrase from English to Zulu", "field": "Foreign Languages/Zulu", "parameters": {"phrase": {"type": "str", "description": "The phrase you want to translate from English to Zulu"}}, "required": ["phrase"], "responses": {"translated_phrase": {"type": "str", "description": "The translated phrase in Zulu"}}}
{"api_name": "pronounceXhosaPhrase", "api_description": "Get the pronunciation of a given Xhosa phrase", "field": "Foreign Languages/Xhosa", "parameters": {"phrase": {"type": "str", "description": "The Xhosa phrase for which you want to get the pronunciation"}}, "required": ["phrase"], "responses": {"pronunciation": {"type": "str", "description": "The pronunciation of the given Xhosa phrase"}}}
{"api_name": "translateToSotho", "api_description": "Translate text to the Sotho language", "field": "Foreign Languages/Sotho", "parameters": {"text": {"type": "str", "description": "The text to be translated to Sotho"}}, "required": ["text"], "responses": {"translation": {"type": "str", "description": "The translated text in Sotho language"}}}
{"api_name": "translateAmharic", "api_description": "Translate text to Amharic language", "field": "Foreign Languages/Amharic", "parameters": {"text": {"type": "str", "description": "The text to be translated to Amharic"}}, "required": ["text"], "responses": {"translated_text": {"type": "str", "description": "The text translated to Amharic"}}}
{"api_name": "translateIgbo", "api_description": "Translate a word or phrase from English to Igbo", "field": "Foreign Languages/Igbo", "parameters": {"word": {"type": "str", "description": "The word or phrase to be translated from English to Igbo (e.g., Hello, How are you?)"}}, "required": ["word"], "responses": {"translation": {"type": "str", "description": "The translated word or phrase in Igbo"}}}
{"api_name": "translateHausa", "api_description": "Translate text from Hausa to English or vice versa", "field": "Foreign Languages/Hausa", "parameters": {"text": {"type": "str", "description": "The text to be translated"}}, "required": ["text"], "responses": {"translated_text": {"type": "str", "description": "The translated text"}}}
{"api_name": "translateToYoruba", "api_description": "Translate a given text to Yoruba language", "field": "Foreign Languages/Yoruba", "parameters": {"text": {"type": "str", "description": "The text to be translated to Yoruba"}}, "required": ["text"], "responses": {"translated_text": {"type": "str", "description": "The translated text in Yoruba language"}}}
{"api_name": "translateFromBSL", "api_description": "Translate a given British Sign Language text into written language", "field": "Foreign Languages/British Sign Language", "parameters": {"bsl_text": {"type": "str", "description": "The British Sign Language text you want to translate into written language"}}, "required": ["bsl_text"], "responses": {"result": {"type": "str", "description": "The translated text in written language"}}}
{"api_name": "translateInternationalSign", "api_description": "Translate word or phrase into International Sign language.", "field": "Foreign Languages/International Sign", "parameters": {"word": {"type": "str", "description": "The word or phrase to be translated to International Sign language."}}, "required": ["word"], "responses": {"translation": {"type": "str", "description": "The translation of the word or phrase in International Sign language"}}}
{"api_name": "detectIS", "api_description": "Detect International Sign Language in a video", "field": "Foreign Languages/International Sign", "parameters": {"video": {"type": "str", "description": "The video file containing International Sign Language"}}, "required": ["video"], "responses": {"is_detected": {"type": "bool", "description": "Indicates whether International Sign Language is detected in the video"}}}
{"api_name": "analyzeIS", "api_description": "Analyze the grammar and structure of International Sign Language", "field": "Foreign Languages/International Sign", "parameters": {"sentence": {"type": "str", "description": "The sentence in International Sign Language to be analyzed"}}, "required": ["sentence"], "responses": {"grammar_tree": {"type": "str", "description": "The grammar tree representing the sentence in International Sign Language"}}}
{"api_name": "determineEmotion", "api_description": "Analyzes text to determine the emotion expressed", "field": "Computer Science/Artificial Intelligence", "parameters": {"text": {"type": "str", "description": "The text to be analyzed for emotion"}}, "required": ["text"], "responses": {"emotion": {"type": "str", "description": "The emotion identified in the text"}}}
{"api_name": "recommendMovie", "api_description": "Recommends a movie based on user preferences and previous movie ratings", "field": "Computer Science/Artificial Intelligence", "parameters": {"user_preferences": {"type": "str", "description": "User preferences for movie recommendation"}, "previous_ratings": {"type": "str", "description": "Previous movie ratings by the user"}}, "required": ["user_preferences", "previous_ratings"], "responses": {"movie": {"type": "str", "description": "The recommended movie"}}}
{"api_name": "getMemorySize", "api_description": "Retrieve the memory size of a computer system", "field": "Computer Science/Computer Architecture", "parameters": {"system_name": {"type": "str", "description": "The name of the computer system"}, "unit": {"type": "str", "description": "The desired unit for memory size (e.g., GB, TB)"}, "memory_type": {"type": "str", "description": "Specify the type of memory to retrieve size for (e.g., RAM, Cache)"}, "refresh_rate": {"type": "int", "description": "Specify the refresh rate of the memory in milliseconds (e.g., 100, 200, 500)"}}, "required": ["system_name"], "responses": {"memory_size": {"type": "int", "description": "The memory size of the specified computer system"}, "unit": {"type": "str", "description": "The unit of memory size in which the memory size is provided"}}}
{"api_name": "getCacheSize", "api_description": "Retrieve the cache size information", "field": "Computer Science/Computer Architecture", "parameters": {"model": {"type": "str", "description": "The model of the processor (e.g., Intel Core i7, AMD Ryzen 5)"}, "level": {"type": "int", "description": "The cache level (e.g., 1, 2, 3)"}, "unit": {"type": "str", "description": "The desired unit for cache size (e.g., KB, MB)"}}, "required": ["model", "level"], "responses": {"size": {"type": "int", "description": "The size of the cache at the specified level in the specified unit"}}}
{"api_name": "getMemoryUsage", "api_description": "Retrieve the memory usage information of the operating system", "field": "Computer Science/Operating Systems", "parameters": {"unit": {"type": "str", "description": "The desired unit for memory usage (e.g., bytes, kilobytes, megabytes)"}, "include_buffers": {"type": "bool", "description": "Specify whether to include buffer memory in the memory usage calculation"}}, "required": [], "responses": {"memory_usage": {"type": "float", "description": "The memory usage of the operating system"}}}
{"api_name": "getCPUUsage", "api_description": "Retrieve the CPU usage information of the operating system", "field": "Computer Science/Operating Systems", "parameters": {"time_interval": {"type": "int", "description": "The time interval for calculating CPU usage in seconds (e.g., 1, 5, 10)"}, "core_id": {"type": "int", "description": "Specify a particular CPU core to retrieve its usage"}}, "required": [], "responses": {"cpu_usage": {"type": "float", "description": "The CPU usage of the operating system"}}}
{"api_name": "rebootSystem", "api_description": "Reboot the computer system", "field": "Computer Science/Operating Systems", "parameters": {}, "required": [], "responses": {"success": {"type": "bool", "description": "Indicates whether the reboot was successful"}}}
{"api_name": "shutdownSystem", "api_description": "Shutdown the computer system", "field": "Computer Science/Operating Systems", "parameters": {}, "required": [], "responses": {"success": {"type": "bool", "description": "Indicates whether the shutdown was successful"}}}
{"api_name": "getDiskUsage", "api_description": "Retrieve the disk usage of the system", "field": "Computer Science/Operating Systems", "parameters": {"system": {"type": "str", "description": "The operating system of the system (e.g., Windows, Linux, macOS)"}, "disk": {"type": "str", "description": "The specific disk for which you want to retrieve the disk usage"}}, "required": ["system", "disk"], "responses": {"disk_usage": {"type": "float", "description": "The disk usage of the specified disk"}}}
{"api_name": "ping", "api_description": "Send a message to a remote host to check if it is reachable", "field": "Computer Science/Networks", "parameters": {"host": {"type": "str", "description": "The IP address or domain name of the remote host to ping"}}, "required": ["host"], "responses": {"response_time": {"type": "float", "description": "The time taken for the ping request to complete"}, "status": {"type": "str", "description": "The status of the ping request (e.g., Success, Timeout)"}}}
{"api_name": "getPublicIp", "api_description": "Retrieve the public IP address of the network", "field": "Computer Science/Networks", "parameters": {}, "required": [], "responses": {"public_ip": {"type": "str", "description": "The public IP address of the network"}}}
{"api_name": "getIP", "api_description": "Retrieve the IP address of a given hostname", "field": "Computer Science/Networks", "parameters": {"hostname": {"type": "str", "description": "The hostname for which you want to retrieve the IP address (e.g., www.example.com, google.com)"}, "ipv6": {"type": "bool", "description": "Specify whether to retrieve the IPv6 address of the hostname (true/false)"}}, "required": ["hostname"], "responses": {"ip_address": {"type": "str", "description": "The IP address of the specified hostname"}}}
{"api_name": "checkInternetSpeed", "api_description": "Perform an internet speed test", "field": "Computer Science/Networks", "parameters": {}, "required": [], "responses": {"download_speed": {"type": "float", "description": "The download speed in Mbps"}, "upload_speed": {"type": "float", "description": "The upload speed in Mbps"}, "ping_latency": {"type": "int", "description": "The ping latency in milliseconds"}}}
{"api_name": "addMember", "api_description": "Add a team member to a software engineering project", "field": "Computer Science/Software Engineering", "parameters": {"project_id": {"type": "int", "description": "The ID of the project"}, "member_id": {"type": "int", "description": "The ID of the team member to be added"}}, "required": ["project_id", "member_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the team member was successfully added"}}}
{"api_name": "removeMember", "api_description": "Remove a team member from a software engineering project", "field": "Computer Science/Software Engineering", "parameters": {"project_id": {"type": "int", "description": "The ID of the project"}, "member_id": {"type": "int", "description": "The ID of the team member to be removed"}}, "required": ["project_id", "member_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the team member was successfully removed"}}}
{"api_name": "updateSoftwareDocumentation", "api_description": "Update the documentation for a software project", "field": "Computer Science/Software Engineering", "parameters": {"project_id": {"type": "str", "description": "The ID of the software project for which you want to update the documentation"}, "document": {"type": "str", "description": "The updated documentation for the software project"}}, "required": ["project_id", "document"], "responses": {"success": {"type": "bool", "description": "Indicates whether the documentation update was successful"}}}
{"api_name": "encrypt", "api_description": "Encrypts a message using a specified cryptographic algorithm", "field": "Computer Science/Cryptography", "parameters": {"message": {"type": "str", "description": "The message that needs to be encrypted"}, "algorithm": {"type": "str", "description": "The cryptographic algorithm to be used for encryption (e.g., AES, RSA)"}, "key": {"type": "str", "description": "The encryption key to be used"}}, "required": ["message", "algorithm", "key"], "responses": {"encrypted_message": {"type": "str", "description": "The encrypted form of the input message"}}}
{"api_name": "hash", "api_description": "Calculates a hash value of a given input message using a specified cryptographic hash function", "field": "Computer Science/Cryptography", "parameters": {"message": {"type": "str", "description": "The message for which the hash value needs to be calculated"}, "hash_function": {"type": "str", "description": "The cryptographic hash function to be used for hashing (e.g., SHA-256, MD5)"}}, "required": ["message", "hash_function"], "responses": {"hash_value": {"type": "str", "description": "The calculated hash value of the input message"}}}
{"api_name": "getUserInterface", "api_description": "Retrieve information about the user interface design", "field": "Computer Science/Human-Computer Interaction", "parameters": {"system": {"type": "str", "description": "The name of the system for which you want to get the user interface design"}}, "required": ["system"], "responses": {"interface": {"type": "str", "description": "The user interface design for the specified system"}}}
{"api_name": "alignSequence", "api_description": "Align two gene sequences", "field": "Computer Science/Bioinformatics", "parameters": {"sequence1": {"type": "str", "description": "The first gene sequence to align"}, "sequence2": {"type": "str", "description": "The second gene sequence to align"}, "algorithm": {"type": "str", "description": "The alignment algorithm to use (e.g., Needleman-Wunsch, Smith-Waterman)"}, "gap_penalty": {"type": "float", "description": "The penalty for introducing a gap in the alignment (e.g., -1.0, -0.5)"}, "match_score": {"type": "float", "description": "The score for a match between nucleotides (e.g., 1.0, 0.5)"}, "mismatch_penalty": {"type": "float", "description": "The penalty for a mismatch between nucleotides (e.g., -1.0, -0.5)"}}, "required": ["sequence1", "sequence2"], "responses": {"alignment": {"type": "str", "description": "The aligned gene sequences"}, "score": {"type": "float", "description": "The alignment score"}}}
{"api_name": "submitJob", "api_description": "Submit a high-performance computing job", "field": "Computer Science/High-Performance Computing", "parameters": {"job_name": {"type": "str", "description": "The name of the job"}, "job_script": {"type": "str", "description": "The script file to be executed"}, "num_nodes": {"type": "int", "description": "The number of compute nodes to be used for the job"}}, "required": ["job_name", "job_script"], "responses": {"job_id": {"type": "str", "description": "The unique identifier of the submitted job"}}}
{"api_name": "cancelJob", "api_description": "Cancel a high-performance computing job", "field": "Computer Science/High-Performance Computing", "parameters": {"job_id": {"type": "str", "description": "The unique identifier of the job"}}, "required": ["job_id"], "responses": {"message": {"type": "str", "description": "A message indicating the success or failure of the cancellation"}}}
{"api_name": "getJobOutput", "api_description": "Retrieve the output of a high-performance computing job", "field": "Computer Science/High-Performance Computing", "parameters": {"job_id": {"type": "str", "description": "The unique identifier of the job"}}, "required": ["job_id"], "responses": {"output": {"type": "str", "description": "The output generated by the job"}}}
{"api_name": "estimateExecutionTime", "api_description": "Estimate the execution time of a given workload on a high-performance computing system", "field": "Computer Science/High-Performance Computing", "parameters": {"system_config": {"type": "str", "description": "The configuration details of the high-performance computing system (e.g., number of processors, clock speed)"}, "workload": {"type": "str", "description": "The type of workload being performed on the system (e.g., scientific simulations, large-scale data analysis)"}, "input_size": {"type": "int", "description": "The size of the input data for the workload"}}, "required": ["system_config", "workload", "input_size"], "responses": {"execution_time": {"type": "int", "description": "The estimated execution time of the workload on the high-performance computing system (in seconds)"}}}
{"api_name": "optimizeParallelization", "api_description": "Optimize the parallelization strategy for a given workload on a high-performance computing system", "field": "Computer Science/High-Performance Computing", "parameters": {"system_config": {"type": "str", "description": "The configuration details of the high-performance computing system (e.g., number of processors, clock speed)"}, "workload": {"type": "str", "description": "The type of workload being performed on the system (e.g., scientific simulations, large-scale data analysis)"}, "input_size": {"type": "int", "description": "The size of the input data for the workload"}, "current_strategy": {"type": "str", "description": "The current parallelization strategy being used"}}, "required": ["system_config", "workload", "input_size", "current_strategy"], "responses": {"optimized_strategy": {"type": "str", "description": "The optimized parallelization strategy for the workload on the high-performance computing system"}}}
{"api_name": "getVRRating", "api_description": "Retrieve the rating of a virtual reality application", "field": "Computer Science/Virtual Reality", "parameters": {"application_id": {"type": "str", "description": "The unique identifier of the virtual reality application"}}, "required": ["application_id"], "responses": {"rating": {"type": "float", "description": "The rating of the virtual reality application"}}}
{"api_name": "resumeGame", "api_description": "Resume a paused game", "field": "Computer Science/Game Development", "parameters": {"game_session_id": {"type": "str", "description": "The unique identifier of the game session"}}, "required": ["game_session_id"], "responses": {"status": {"type": "str", "description": "The status of the game resume (e.g., Success, Failure)"}}}
{"api_name": "spawnEnemy", "api_description": "Spawn an enemy in a game", "field": "Computer Science/Game Development", "parameters": {"enemy_type": {"type": "str", "description": "The type of enemy to spawn (e.g., zombie, vampire, orc)"}, "spawn_location": {"type": "str", "description": "The location where the enemy will be spawned"}}, "required": ["enemy_type"], "responses": {"success": {"type": "bool", "description": "Indicates whether the enemy was successfully spawned"}}}
{"api_name": "collectPowerUp", "api_description": "Allow a player to collect a power-up in a game", "field": "Computer Science/Game Development", "parameters": {"player_id": {"type": "int", "description": "The unique identifier of the player"}, "power_up_type": {"type": "str", "description": "The type of power-up to be collected (e.g., speed boost, health regeneration, extra life)"}}, "required": ["player_id", "power_up_type"], "responses": {"success": {"type": "bool", "description": "Indicates whether the power-up was successfully collected"}}}
{"api_name": "enrollBiometric", "api_description": "Enroll new biometric information for a user", "field": "Computer Science/Biometrics", "parameters": {"biometric_type": {"type": "str", "description": "The type of biometric information to be enrolled (e.g., fingerprint, face recognition, iris scan)"}, "user_id": {"type": "str", "description": "The user ID of the individual to be enrolled"}, "biometric_data": {"type": "str", "description": "The biometric data to be enrolled (e.g., fingerprint image, facial features, iris scan image)"}}, "required": ["biometric_type", "user_id", "biometric_data"], "responses": {"enrollment_success": {"type": "bool", "description": "Indicates whether the biometric enrollment was successful"}}}
{"api_name": "deleteBiometric", "api_description": "Delete biometric information of a user", "field": "Computer Science/Biometrics", "parameters": {"biometric_type": {"type": "str", "description": "The type of biometric information to be deleted (e.g., fingerprint, face recognition, iris scan)"}, "user_id": {"type": "str", "description": "The user ID of the individual whose biometric information will be deleted"}}, "required": ["biometric_type", "user_id"], "responses": {"deletion_success": {"type": "bool", "description": "Indicates whether the biometric deletion was successful"}}}
{"api_name": "runParallelJob", "api_description": "Run a parallel computing job", "field": "Computer Science/Parallel Computing", "parameters": {"job_name": {"type": "str", "description": "The name of the parallel computing job"}, "input_data": {"type": "str", "description": "The input data for the job"}, "num_processes": {"type": "int", "description": "The number of processes to use for parallel computing"}, "algorithm": {"type": "str", "description": "The algorithm to be used for parallel computing (e.g., MapReduce, MPI)"}}, "required": ["job_name", "input_data", "num_processes"], "responses": {"output_data": {"type": "str", "description": "The output data generated from the parallel computing job"}}}
{"api_name": "createUI", "api_description": "Create a user interface design for a digital product", "field": "Graphic Design/UI/UX Design", "parameters": {"product_name": {"type": "str", "description": "The name of the digital product for which the user interface design is being created"}, "target_audience": {"type": "str", "description": "The target audience for the digital product"}, "color_scheme": {"type": "str", "description": "The preferred color scheme for the user interface design"}, "layout_style": {"type": "str", "description": "The preferred layout style for the user interface design (e.g., grid-based, fluid, asymmetrical)"}, "device_type": {"type": "str", "description": "The device type for which the user interface design is being created (e.g., mobile, desktop, tablet)"}}, "required": ["product_name"], "responses": {"ui_design": {"type": "str", "description": "The user interface design for the specified digital product"}}}
{"api_name": "updateUI", "api_description": "Update an existing user interface design for a digital product", "field": "Graphic Design/UI/UX Design", "parameters": {"ui_design": {"type": "str", "description": "The existing user interface design to be updated"}, "changes": {"type": "str", "description": "The changes to be made to the user interface design (e.g., modify colors, rearrange layout, add new elements)"}, "feedback": {"type": "str", "description": "Optional feedback or specific requirements for the update"}}, "required": ["ui_design", "changes"], "responses": {"updated_ui_design": {"type": "str", "description": "The updated user interface design"}}}
{"api_name": "validateUI", "api_description": "Validate the usability and accessibility of a user interface design", "field": "Graphic Design/UI/UX Design", "parameters": {"ui_design": {"type": "str", "description": "The user interface design to be validated"}, "usability_metrics": {"type": "str", "description": "The usability metrics to be used for validation (e.g., task success rate, user satisfaction)"}, "accessibility_guidelines": {"type": "str", "description": "The accessibility guidelines to be followed for validation (e.g., WCAG 2.0, Section 508)"}}, "required": ["ui_design"], "responses": {"validation_result": {"type": "str", "description": "The validation result indicating whether the user interface design meets the usability and accessibility criteria"}}}
{"api_name": "getFontType", "api_description": "Retrieve available font types for typography", "field": "Graphic Design/Typography", "parameters": {}, "required": [], "responses": {"font_types": {"type": "str", "description": "A list of available font types for typography"}}}
{"api_name": "getFontSize", "api_description": "Retrieve available font sizes for typography", "field": "Graphic Design/Typography", "parameters": {}, "required": [], "responses": {"font_sizes": {"type": "str", "description": "A list of available font sizes for typography"}}}
{"api_name": "getTextEffects", "api_description": "Retrieve available text effects for typography", "field": "Graphic Design/Typography", "parameters": {}, "required": [], "responses": {"text_effects": {"type": "str", "description": "A list of available text effects for typography"}}}
{"api_name": "generateTypographyPreview", "api_description": "Generate a preview of typography with specified parameters", "field": "Graphic Design/Typography", "parameters": {"font": {"type": "str", "description": "The typography font for the preview"}, "style": {"type": "str", "description": "The typography style for the preview"}, "text": {"type": "str", "description": "The text content for the preview"}}, "required": ["font", "style", "text"], "responses": {"preview": {"type": "str", "description": "The preview image of the typography"}}}
{"api_name": "getFontList", "api_description": "Retrieve a list of available fonts", "field": "Graphic Design/Typography", "parameters": {}, "required": [], "responses": {"font_list": {"type": "str", "description": "A list of available fonts for typography"}}}
{"api_name": "getArtDirectionGuidelines", "api_description": "Retrieve art direction guidelines for a graphic design project", "field": "Graphic Design/Art Direction", "parameters": {"project_type": {"type": "str", "description": "The type of graphic design project (e.g., logo design, poster design, website design)"}, "target_audience": {"type": "str", "description": "The target audience for the design (e.g., children, millennials, professionals)"}, "brand_style": {"type": "str", "description": "The desired brand style for the design (e.g., minimalistic, playful, elegant)"}, "color_palette": {"type": "str", "description": "The preferred color palette for the design (e.g., pastel tones, vibrant colors, monochrome)"}, "visual_elements": {"type": "str", "description": "Specific visual elements to be included in the design (e.g., icons, illustrations, patterns)"}, "typography": {"type": "str", "description": "Preference for typography style in the design (e.g., sans-serif, handwritten, serif)"}}, "required": ["project_type", "target_audience"], "responses": {"guidelines": {"type": "str", "description": "Detailed guidelines and suggestions for art direction in the specified graphic design project"}}}
{"api_name": "getAppDesign", "api_description": "Retrieve mobile app design information", "field": "Graphic Design/Mobile App Design", "parameters": {"app_name": {"type": "str", "description": "The name of the mobile app for which you want to get the design"}, "platform": {"type": "str", "description": "The platform for which the app is designed (e.g., iOS, Android, Web)"}, "color_scheme": {"type": "str", "description": "The desired color scheme for the app (e.g., dark mode, light mode, custom)"}, "font": {"type": "str", "description": "The preferred font style for the app (e.g., sans-serif, serif, monospace)"}}, "required": ["app_name", "platform"], "responses": {"design_elements": {"type": "str", "description": "The design elements for the specified app"}, "color_palette": {"type": "str", "description": "The color palette used in the app"}, "typography": {"type": "str", "description": "The typography style for the app"}}}
{"api_name": "addLevel", "api_description": "Add a level to the game design", "field": "Graphic Design/Game Design", "parameters": {"game_id": {"type": "str", "description": "The unique identifier of the game"}, "level_name": {"type": "str", "description": "The name of the level"}, "difficulty": {"type": "str", "description": "The difficulty level of the level (e.g., easy, medium, hard)"}, "background": {"type": "str", "description": "The background image for the level"}, "obstacles": {"type": "str", "description": "The obstacles present in the level"}, "enemies": {"type": "str", "description": "The enemies present in the level"}}, "required": ["game_id", "level_name"], "responses": {"level_id": {"type": "str", "description": "The unique identifier for the added level"}}}
{"api_name": "getLogo", "api_description": "Retrieve the logo of a company", "field": "Graphic Design/Corporate Design", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to retrieve the logo"}}, "required": ["company_name"], "responses": {"logo": {"type": "str", "description": "The logo image of the specified company"}}}
{"api_name": "addTextOverlay", "api_description": "Add a text overlay to an image", "field": "Graphic Design/Photomanipulation", "parameters": {"image_url": {"type": "str", "description": "The URL of the image to add the text overlay to"}, "text": {"type": "str", "description": "The text to be displayed as the overlay"}, "position": {"type": "str", "description": "The position of the text overlay (e.g., top-left, top-right, center)"}, "font_size": {"type": "int", "description": "The font size of the text (e.g., 12, 16, 20)"}, "font_color": {"type": "str", "description": "The color of the text (e.g., 'red', 'green', 'blue')"}}, "required": ["image_url", "text"], "responses": {"image_with_overlay_url": {"type": "str", "description": "The URL of the image with the text overlay"}}}
{"api_name": "getSignageDesign", "api_description": "Retrieve signage design information", "field": "Graphic Design/Signage Design", "parameters": {"location": {"type": "str", "description": "The location where the signage design is needed (e.g., shopping mall, airport, hospital)"}, "target_audience": {"type": "str", "description": "The target audience for the signage design (e.g., children, adults, elderly)"}, "brand_colors": {"type": "str", "description": "The brand colors to be used in the signage design (e.g., red, blue, yellow)"}, "dimensions": {"type": "str", "description": "The dimensions of the signage design (e.g., 4ft x 8ft, 2m x 3m)"}}, "required": ["location", "target_audience"], "responses": {"design_concepts": {"type": "str", "description": "Different design concepts for the signage design"}, "final_design": {"type": "str", "description": "The final signage design"}, "branding_elements": {"type": "str", "description": "The branding elements incorporated in the design"}}}
{"api_name": "createBrochureDesign", "api_description": "Create a new brochure design", "field": "Graphic Design/Brochure Design", "parameters": {"title": {"type": "str", "description": "The title of the brochure"}, "size": {"type": "str", "description": "The size of the brochure (e.g., A4, Letter)"}, "layout": {"type": "str", "description": "The layout style of the brochure (e.g., trifold, bifold)"}, "content": {"type": "str", "description": "The content or text to be included in the brochure"}}, "required": ["title", "size", "layout"], "responses": {"status": {"type": "str", "description": "The status of the brochure design (e.g., success, failed)"}, "design_file": {"type": "str", "description": "The downloadable file of the brochure design"}}}
{"api_name": "getCatalogDesign", "api_description": "Retrieve catalog design information", "field": "Graphic Design/Catalog Design", "parameters": {"theme": {"type": "str", "description": "Specify a theme for the catalog design (e.g., modern, vintage, minimalist)"}, "font_style": {"type": "str", "description": "Specify a font style for the catalog design (e.g., serif, sans-serif, script)"}, "color_scheme": {"type": "str", "description": "Specify a color scheme for the catalog design (e.g., monochromatic, complementary, analogous)"}}, "required": ["theme"], "responses": {"design_file": {"type": "str", "description": "The file containing the catalog design"}, "preview_image": {"type": "str", "description": "An image preview of the catalog design"}}}
{"api_name": "getBookCoverDesign", "api_description": "Retrieve book cover design information", "field": "Graphic Design/Book Cover Design", "parameters": {"title": {"type": "str", "description": "The title of the book"}, "author": {"type": "str", "description": "The name of the book's author"}, "genre": {"type": "str", "description": "The genre of the book"}, "color_scheme": {"type": "str", "description": "The desired color scheme for the book cover"}, "image_resolution": {"type": "str", "description": "The resolution of the book cover image"}}, "required": ["title", "author"], "responses": {"design_details": {"type": "str", "description": "Details about the book cover design"}, "image_url": {"type": "str", "description": "The URL of the book cover image"}}}
{"api_name": "createBookCover", "api_description": "Create a unique and attractive book cover design", "field": "Graphic Design/Book Cover Design", "parameters": {"title": {"type": "str", "description": "The title of the book"}, "author": {"type": "str", "description": "The name of the book author"}, "genre": {"type": "str", "description": "The genre of the book (e.g., romance, thriller, science fiction)"}, "color_scheme": {"type": "str", "description": "The desired color scheme for the book cover design (e.g., vibrant, pastel, monochrome)"}, "image": {"type": "str", "description": "The path or URL of an optional image to be included in the book cover design"}}, "required": ["title", "author"], "responses": {"book_cover": {"type": "str", "description": "The generated book cover design in a specific format (e.g., JPEG, PNG)"}}}
{"api_name": "createGif", "api_description": "Create a custom GIF animation", "field": "Graphic Design/GIF Design", "parameters": {"frames": {"type": "int", "description": "Number of frames in the GIF animation (e.g., 10, 20, 30)"}, "duration": {"type": "int", "description": "Duration of each frame in milliseconds (e.g., 100, 200, 300)"}, "size": {"type": "str", "description": "Dimensions of the GIF animation (e.g., 500x500, 800x600)"}, "colors": {"type": "int", "description": "Number of colors in the GIF palette (e.g., 16, 256, 1024)"}}, "required": ["frames", "duration", "size"], "responses": {"gif_url": {"type": "str", "description": "URL to download the created GIF animation"}}}
{"api_name": "getMetaphysicsDefinition", "api_description": "Retrieve the definition of metaphysics", "field": "Philosophy/Metaphysics", "parameters": {}, "required": [], "responses": {"definition": {"type": "str", "description": "The definition of metaphysics"}}}
{"api_name": "evaluateEthicalDilemma", "api_description": "Evaluate an ethical dilemma and provide a recommendation", "field": "Philosophy/Ethics", "parameters": {"dilemma_description": {"type": "str", "description": "Description of the ethical dilemma"}}, "required": ["dilemma_description"], "responses": {"recommendation": {"type": "str", "description": "Recommended ethical action or approach"}}}
{"api_name": "getLanguageEvolution", "api_description": "Retrieve information on the evolution of languages over time", "field": "Philosophy/Philosophy of Language", "parameters": {}, "required": [], "responses": {"evolution": {"type": "str", "description": "The theories and processes of language evolution"}}}
{"api_name": "getLanguageRelativity", "api_description": "Retrieve information on the theory of linguistic relativity", "field": "Philosophy/Philosophy of Language", "parameters": {}, "required": [], "responses": {"relativity": {"type": "str", "description": "The principles and ideas of linguistic relativity"}}}
{"api_name": "getLanguageNature", "api_description": "Retrieve the nature of language", "field": "Philosophy/Philosophy of Language", "parameters": {}, "required": [], "responses": {"nature": {"type": "str", "description": "The nature of language"}}}
{"api_name": "getPhilosophyOfMathematics", "api_description": "Retrieve the philosophy behind mathematics", "field": "Philosophy/Philosophy of Mathematics", "parameters": {}, "required": [], "responses": {"philosophy": {"type": "str", "description": "The philosophy behind mathematics"}}}
{"api_name": "getPhilosophyHistory", "api_description": "Retrieve philosophy of history information", "field": "Philosophy/Philosophy of History", "parameters": {"philosopher": {"type": "str", "description": "The philosopher whose philosophy of history you want to retrieve (e.g., Hegel, Marx, Nietzsche)"}, "time_period": {"type": "str", "description": "The time period in which the philosopher developed their philosophy of history (e.g., Ancient, Medieval, Modern)"}}, "required": ["philosopher"], "responses": {"philosophy": {"type": "str", "description": "The philosophy of history developed by the specified philosopher"}}}
{"api_name": "getPhilosophyOfEconomics", "api_description": "Retrieve information about the philosophy of economics", "field": "Philosophy/Philosophy of Economics", "parameters": {"economic_theory": {"type": "str", "description": "The economic theory you want to learn about (e.g., capitalism, socialism, Keynesianism)"}, "philosopher": {"type": "str", "description": "The philosopher whose ideas you want to explore (e.g., Adam Smith, Karl Marx)"}}, "required": ["economic_theory"], "responses": {"philosophy": {"type": "str", "description": "The philosophy behind the specified economic theory"}}}
{"api_name": "getMetaethicsTheories", "api_description": "Retrieve the theories of metaethics", "field": "Philosophy/Metaethics", "parameters": {}, "required": [], "responses": {"theories": {"type": "str", "description": "The theories of metaethics"}}}
{"api_name": "getMetaethicsQuestions", "api_description": "Retrieve common questions in metaethics", "field": "Philosophy/Metaethics", "parameters": {}, "required": [], "responses": {"questions": {"type": "str", "description": "Common questions in metaethics"}}}
{"api_name": "getMoralNihilism", "api_description": "Retrieve information about moral nihilism", "field": "Philosophy/Metaethics", "parameters": {"none": {"type": "str", "description": "No parameters required for this API"}}, "required": [], "responses": {"moral_nihilism": {"type": "bool", "description": "Boolean indicating whether moral nihilism is true or false"}, "explanation": {"type": "str", "description": "Brief explanation about moral nihilism"}}}
{"api_name": "getAnalyticPhilosophyOverview", "api_description": "Retrieve an overview of analytic philosophy", "field": "Philosophy/Analytic Philosophy", "parameters": {}, "required": [], "responses": {"overview": {"type": "str", "description": "An overview of analytic philosophy"}}}
{"api_name": "getPhilosophyOfPhysics", "api_description": "Retrieve the philosophy behind physics", "field": "Philosophy/Philosophy of Physics", "parameters": {"theory": {"type": "str", "description": "The physics theory you want to explore (e.g., Quantum Mechanics, General Relativity)"}, "philosopher": {"type": "str", "description": "The philosopher who contributed to the philosophy of the selected physics theory (e.g., Niels Bohr, Albert Einstein)"}, "area": {"type": "str", "description": "The area of philosophy questions you want to focus on (e.g., ontology, epistemology)"}}, "required": ["theory", "philosopher"], "responses": {"philosophy": {"type": "str", "description": "The philosophical concepts and ideas related to the selected physics theory and philosopher"}}}
{"api_name": "getPhilosophyOfSpaceAndTime", "api_description": "Retrieve information about the philosophy of space and time", "field": "Philosophy/Philosophy of Space and Time", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about the philosophy of space and time"}}}
{"api_name": "getSocialPoliticalPhilosophy", "api_description": "Retrieve social and political philosophy information", "field": "Philosophy/Social and Political Philosophy", "parameters": {"theory": {"type": "str", "description": "The social or political theory to retrieve information about (e.g., liberalism, Marxism, feminism)"}, "philosopher": {"type": "str", "description": "The philosopher associated with the theory (e.g., John Locke, Karl Marx, Judith Butler)"}}, "required": ["theory"], "responses": {"description": {"type": "str", "description": "The description of the social or political theory"}, "philosopher": {"type": "str", "description": "The philosopher associated with the theory"}, "key_contributions": {"type": "str", "description": "Key contributions of the theory"}, "criticisms": {"type": "str", "description": "Criticisms of the theory"}}}
{"api_name": "getBioethicsIssues", "api_description": "Retrieve current bioethical issues", "field": "Philosophy/Bioethics", "parameters": {}, "required": [], "responses": {"bioethical_issues": {"type": "str", "description": "A list of current bioethical issues"}}}
{"api_name": "getBioethicsOrganizations", "api_description": "Retrieve bioethics organizations", "field": "Philosophy/Bioethics", "parameters": {}, "required": [], "responses": {"bioethics_organizations": {"type": "str", "description": "A list of bioethics organizations"}}}
{"api_name": "getBioethicsJournals", "api_description": "Retrieve bioethics journals", "field": "Philosophy/Bioethics", "parameters": {}, "required": [], "responses": {"bioethics_journals": {"type": "str", "description": "A list of bioethics journals"}}}
{"api_name": "getLanguagePhilosophy", "api_description": "Retrieve information about the philosophy of language", "field": "Philosophy/Philosophy of Language", "parameters": {"language": {"type": "str", "description": "The language for which you want to get the philosophy (e.g., English, French, Chinese)"}, "theory": {"type": "str", "description": "Specify a theory of philosophy (e.g., referential theory, speech act theory)"}, "philosopher": {"type": "str", "description": "Specify a philosopher known for their contributions to the philosophy of language (e.g., Ludwig Wittgenstein, Noam Chomsky)"}}, "required": ["language"], "responses": {"philosophy": {"type": "str", "description": "The philosophy of language for the specified language"}, "theory": {"type": "str", "description": "The theory of philosophy used to analyze language"}, "philosopher": {"type": "str", "description": "The philosopher associated with the philosophy of language"}}}
{"api_name": "getPhilosophyOfLiterature", "api_description": "Retrieve philosophical insights into literature", "field": "Philosophy/Philosophy of Literature", "parameters": {"literary_work": {"type": "str", "description": "The name of the literary work to analyze (e.g., War and Peace, Romeo and Juliet)"}, "author": {"type": "str", "description": "The author of the literary work"}, "theme": {"type": "str", "description": "The theme to explore in the literary work (e.g., love, morality, existence)"}}, "required": ["literary_work"], "responses": {"insights": {"type": "str", "description": "Philosophical insights into the chosen literary work"}, "author_quotes": {"type": "str", "description": "Notable quotes by the author regarding literature"}}}
{"api_name": "getPhilosophicalIdeas", "api_description": "Retrieve philosophical ideas from the medieval period", "field": "Philosophy/Medieval Philosophy", "parameters": {"philosopher": {"type": "str", "description": "The name of the philosopher whose ideas you want to retrieve (e.g., Thomas Aquinas, Duns Scotus)"}, "time_period": {"type": "str", "description": "Specify a time period within the medieval era (e.g., 9th century, 12th century)"}, "topic": {"type": "str", "description": "The topic or theme of the philosophical ideas you are interested in (e.g., metaphysics, ethics)"}}, "required": ["philosopher"], "responses": {"ideas": {"type": "str", "description": "The philosophical ideas proposed by the specified philosopher"}, "time_period": {"type": "str", "description": "The time period of the medieval era in which the philosopher's ideas were prominent"}}}
{"api_name": "getFilmHistory", "api_description": "Retrieve information about the history of films", "field": "Film Studies/Film history", "parameters": {}, "required": [], "responses": {"film_history": {"type": "str", "description": "Information about the history of films"}}}
{"api_name": "getFilmAspectRatio", "api_description": "Retrieve the aspect ratio of a film", "field": "Film Studies/Cinematography", "parameters": {"film_title": {"type": "str", "description": "The title of the film for which you want to get the aspect ratio (e.g., The Godfather, Inception)"}, "release_year": {"type": "int", "description": "The release year of the film"}}, "required": ["film_title"], "responses": {"aspect_ratio": {"type": "str", "description": "The aspect ratio of the specified film"}}}
{"api_name": "getFilmLighting", "api_description": "Retrieve information about film lighting techniques", "field": "Film Studies/Film lighting", "parameters": {"film_title": {"type": "str", "description": "The title of the film for which you want to get information"}, "lighting_technique": {"type": "str", "description": "The specific lighting technique you want to learn about (e.g., three-point lighting, high-key lighting, low-key lighting)"}}, "required": ["film_title"], "responses": {"description": {"type": "str", "description": "A description of the selected lighting technique and how it is used in the film"}, "examples": {"type": "str", "description": "Examples of scenes from the film that showcase the chosen lighting technique"}}}
{"api_name": "getLightingInfo", "api_description": "Retrieve information about film lighting", "field": "Film Studies/Film lighting", "parameters": {"film_title": {"type": "str", "description": "The title of the film for which you want to get lighting information"}}, "required": ["film_title"], "responses": {"lighting_type": {"type": "str", "description": "The type of lighting used in the film (e.g., natural light, artificial light)"}, "lighting_techniques": {"type": "str", "description": "The specific lighting techniques used in the film (e.g., key light, fill light)"}}}
{"api_name": "calculateLightingIntensity", "api_description": "Calculate the intensity of film lighting", "field": "Film Studies/Film lighting", "parameters": {"power": {"type": "float", "description": "The power of the lighting equipment in watts"}, "distance": {"type": "float", "description": "The distance between the lighting equipment and the subject in meters"}}, "required": ["power", "distance"], "responses": {"intensity": {"type": "float", "description": "The intensity of the film lighting in lux"}}}
{"api_name": "getActors", "api_description": "Retrieve information about actors in films", "field": "Film Studies/Acting for film", "parameters": {"film_title": {"type": "str", "description": "The title of the film (e.g., Titanic, The Shawshank Redemption)"}, "actor_name": {"type": "str", "description": "The name of the actor (e.g., Tom Hanks, Meryl Streep)"}}, "required": ["film_title"], "responses": {"actor_information": {"type": "str", "description": "Information about the actor in relation to the film"}}}
{"api_name": "getActingTips", "api_description": "Retrieve tips and techniques for acting in films", "field": "Film Studies/Acting for film", "parameters": {"film_genre": {"type": "str", "description": "The genre of the film (e.g., drama, comedy, action)"}, "actors_count": {"type": "int", "description": "The number of actors involved in the scene"}}, "required": ["film_genre"], "responses": {"tips": {"type": "str", "description": "Tips and techniques for acting in films"}}}
{"api_name": "getActingTechniques", "api_description": "Retrieve techniques used in acting for film", "field": "Film Studies/Acting for film", "parameters": {}, "required": [], "responses": {"techniques": {"type": "str", "description": "The various techniques used in acting for film"}}}
{"api_name": "getFilmTechnology", "api_description": "Retrieve information about film technology", "field": "Film Studies/Film technology", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about film technology"}}}
{"api_name": "getMarketDemand", "api_description": "Retrieve market demand information", "field": "Economics/Microeconomics", "parameters": {"product": {"type": "str", "description": "The name of the product for which you want to get market demand (e.g., cars, smartphones, clothing)"}, "price": {"type": "float", "description": "The price at which the product is being sold in the market"}}, "required": ["product", "price"], "responses": {"demand": {"type": "int", "description": "The quantity demanded for the given product at the specified price"}}}
{"api_name": "calculateSupplyAndDemand", "api_description": "Calculate the equilibrium quantity and price in a market", "field": "Economics/Microeconomics", "parameters": {"demand": {"type": "str", "description": "The demand function for the market (e.g., Qd = 100 - 2P)"}, "supply": {"type": "str", "description": "The supply function for the market (e.g., Qs = 50 + 3P)"}}, "required": ["demand", "supply"], "responses": {"equilibrium_quantity": {"type": "float", "description": "The quantity at equilibrium in the market"}, "equilibrium_price": {"type": "float", "description": "The price at equilibrium in the market"}}}
{"api_name": "calculateHealthcareExpenditure", "api_description": "Calculate total healthcare expenditure", "field": "Economics/Health Economics", "parameters": {"country": {"type": "str", "description": "The country for which you want to calculate healthcare expenditure"}, "year": {"type": "int", "description": "The year for which you want to calculate healthcare expenditure"}}, "required": ["country", "year"], "responses": {"expenditure": {"type": "float", "description": "The total healthcare expenditure in the specified country and year"}}}
{"api_name": "getLaborForceParticipationRate", "api_description": "Retrieve the labor force participation rate", "field": "Economics/Labor Economics", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the labor force participation rate (e.g., United States, Germany, Japan)"}, "age_group": {"type": "str", "description": "Specify an age group for the labor force participation rate (e.g., 18-24, 25-34, 35-44)"}, "gender": {"type": "str", "description": "Specify a gender for the labor force participation rate (e.g., Male, Female)"}}, "required": ["country"], "responses": {"participation_rate": {"type": "float", "description": "The labor force participation rate for the specified country"}}}
{"api_name": "getWelfareSpending", "api_description": "Retrieve welfare spending information", "field": "Economics/Public Economics", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the welfare spending (e.g., United States, Germany, Japan)"}, "year": {"type": "int", "description": "The year for which you want to get the welfare spending"}}, "required": ["country", "year"], "responses": {"welfare_spending": {"type": "float", "description": "The welfare spending in the specified country and year"}, "unit": {"type": "str", "description": "The currency unit in which the welfare spending is provided"}}}
{"api_name": "getTradeVolume", "api_description": "Retrieve the trade volume between two countries", "field": "Economics/International Trade", "parameters": {"export_country": {"type": "str", "description": "The exporting country (e.g., China, USA, Germany)"}, "import_country": {"type": "str", "description": "The importing country (e.g., India, Japan, Brazil)"}, "year": {"type": "int", "description": "The year for which you want to retrieve the trade volume"}}, "required": ["export_country", "import_country", "year"], "responses": {"trade_volume": {"type": "float", "description": "The trade volume between the two countries in the specified year"}}}
{"api_name": "getMarketStructure", "api_description": "Retrieve information about the market structure of a particular industry", "field": "Economics/Industrial Organization", "parameters": {"industry": {"type": "str", "description": "The industry for which you want to get market structure information (e.g., telecommunications, automobile, pharmaceutical)"}, "country": {"type": "str", "description": "The country for which you want to get market structure information (e.g., United States, China, Germany)"}, "time_period": {"type": "str", "description": "Specify a time period for market structure information (e.g., current, past 5 years, 2020)"}, "market_concentration": {"type": "bool", "description": "Specify whether you want to include market concentration measures (e.g., HHI, CR4) in the response"}}, "required": ["industry", "country"], "responses": {"market_structure": {"type": "str", "description": "The market structure of the specified industry and country"}, "market_share": {"type": "float", "description": "The market share of the largest firms in the industry"}, "market_concentration": {"type": "float", "description": "The market concentration measure of the industry, if requested"}}}
{"api_name": "getUrbanGDP", "api_description": "Retrieve the GDP (Gross Domestic Product) of a specified city or country", "field": "Economics/Urban Economics", "parameters": {"location": {"type": "str", "description": "The city or country for which you want to retrieve the GDP (e.g., Tokyo, Japan)"}, "year": {"type": "int", "description": "The desired year for which you want to retrieve the GDP (e.g., 2020, 2015, 2010)"}, "unit": {"type": "str", "description": "The desired unit for GDP (e.g., USD, EUR, JPY)"}}, "required": ["location", "year"], "responses": {"gdp": {"type": "float", "description": "The GDP of the specified location and year"}, "unit": {"type": "str", "description": "The unit of GDP in which the value is provided"}}}
{"api_name": "calculateConsumerSurplus", "api_description": "Calculate the consumer surplus based on the market price and consumer demand", "field": "Economics/Welfare Economics", "parameters": {"market_price": {"type": "float", "description": "The price at which a good or service is traded in the market (e.g., $10, €15)"}, "consumer_demand": {"type": "int", "description": "The quantity of the good or service that consumers are willing and able to purchase at a given price (e.g., 100, 500)"}}, "required": ["market_price", "consumer_demand"], "responses": {"consumer_surplus": {"type": "float", "description": "The difference between the maximum price a consumer is willing to pay for a good or service and the actual price"}}}
{"api_name": "getWelfareChange", "api_description": "Calculate the change in welfare due to a policy or economic event", "field": "Economics/Welfare Economics", "parameters": {"initial_welfare": {"type": "float", "description": "The initial welfare level"}, "final_welfare": {"type": "float", "description": "The final welfare level"}}, "required": ["initial_welfare", "final_welfare"], "responses": {"welfare_change": {"type": "float", "description": "The change in welfare between the initial and final levels"}}}
{"api_name": "getHeterodoxEconomicsInfo", "api_description": "Retrieve information on heterodox economics", "field": "Economics/Heterodox Economics", "parameters": {}, "required": [], "responses": {"info": {"type": "str", "description": "Information on heterodox economics"}}}
{"api_name": "getPhenotype", "api_description": "Retrieve the phenotype information of an individual", "field": "Biology/Genetics", "parameters": {"individual_id": {"type": "str", "description": "The unique identifier of the individual for which you want to retrieve phenotype information"}}, "required": ["individual_id"], "responses": {"phenotype": {"type": "str", "description": "The phenotype of the specified individual (e.g., brown eyes, black hair, tall)"}}}
{"api_name": "extractDNA", "api_description": "Extract DNA from a biological sample", "field": "Biology/Molecular Biology", "parameters": {"sample": {"type": "str", "description": "Biological sample from which DNA will be extracted (e.g., blood, tissue, saliva)"}, "protocol": {"type": "str", "description": "Extraction protocol to be used (e.g., phenol-chloroform method, spin column method)"}}, "required": ["sample"], "responses": {"dna_yield": {"type": "float", "description": "Amount of DNA extracted in micrograms"}, "dna_quality": {"type": "str", "description": "Quality assessment of the extracted DNA"}}}
{"api_name": "translateDNAStrand", "api_description": "Translate a DNA sequence into its corresponding protein sequence.", "field": "Biology/Molecular Biology", "parameters": {"dna_sequence": {"type": "str", "description": "The DNA sequence to be translated"}}, "required": ["dna_sequence"], "responses": {"protein_sequence": {"type": "str", "description": "The translated protein sequence"}}}
{"api_name": "findProteinCodingRegion", "api_description": "Find the protein coding region in a DNA sequence", "field": "Biology/Molecular Biology", "parameters": {"sequence": {"type": "str", "description": "The DNA sequence to be analyzed"}}, "required": ["sequence"], "responses": {"protein_coding_region": {"type": "str", "description": "The protein coding region found in the DNA sequence"}}}
{"api_name": "convertDNAtoRNA", "api_description": "Convert a DNA sequence to an RNA sequence", "field": "Biology/Biotechnology", "parameters": {"dna_sequence": {"type": "str", "description": "The DNA sequence to be converted"}}, "required": ["dna_sequence"], "responses": {"rna_sequence": {"type": "str", "description": "The RNA sequence converted from the DNA sequence"}}}
{"api_name": "getMarineLife", "api_description": "Retrieve information about marine life", "field": "Biology/Marine Biology", "parameters": {"species": {"type": "str", "description": "The specific species of marine life to retrieve information about (e.g., dolphins, sharks, whales)"}, "location": {"type": "str", "description": "The location where the marine life can be found (e.g., Pacific Ocean, Great Barrier Reef)"}}, "required": ["species"], "responses": {"description": {"type": "str", "description": "A description of the marine life species"}, "habitat": {"type": "str", "description": "The habitat or environment where the marine life species is typically found"}, "conservation_status": {"type": "str", "description": "The conservation status of the marine life species"}}}
{"api_name": "getSynapticConnections", "api_description": "Retrieve synaptic connections of a neuron", "field": "Biology/Neurobiology", "parameters": {"neuron_id": {"type": "str", "description": "The ID of the neuron for which you want to get synaptic connections"}}, "required": ["neuron_id"], "responses": {"synaptic_connections": {"type": "str", "description": "The synaptic connections of the specified neuron"}}}
{"api_name": "detectVaccineResponse", "api_description": "Detect the effectiveness of a vaccine on an individual", "field": "Biology/Immunology", "parameters": {"vaccine_id": {"type": "str", "description": "The identifier of the vaccine to be tested"}, "person_id": {"type": "str", "description": "The identifier of the individual to test the vaccine on"}}, "required": ["vaccine_id", "person_id"], "responses": {"response": {"type": "str", "description": "The response of the individual to the vaccine (e.g., immune, non-immune)"}}}
{"api_name": "getImmuneResponse", "api_description": "Retrieve the immune response of an organism", "field": "Biology/Immunology", "parameters": {"organism": {"type": "str", "description": "The name of the organism to get the immune response (e.g., human, mouse, dog)"}}, "required": ["organism"], "responses": {"immune_response": {"type": "str", "description": "The immune response of the specified organism"}}}
{"api_name": "getImmuneCellsCount", "api_description": "Retrieve the count of different immune cells in an organism", "field": "Biology/Immunology", "parameters": {"organism": {"type": "str", "description": "The name of the organism to get the immune cell count (e.g., human, mouse, dog)"}}, "required": ["organism"], "responses": {"immune_cells_count": {"type": "str", "description": "The count of different immune cells in the specified organism"}}}
{"api_name": "getDiffusionCoefficient", "api_description": "Retrieve the diffusion coefficient of a molecule", "field": "Biology/Biophysics", "parameters": {"molecule": {"type": "str", "description": "The name of the molecule (e.g., glucose, oxygen)"}, "temperature": {"type": "float", "description": "The temperature in Kelvin at which diffusion coefficient is to be calculated"}}, "required": ["molecule", "temperature"], "responses": {"diffusion_coefficient": {"type": "float", "description": "The diffusion coefficient of the molecule at the specified temperature"}}}
{"api_name": "getSpeciesToxicity", "api_description": "Retrieve information on the toxicity of a species", "field": "Biology/Ecotoxicology", "parameters": {"species": {"type": "str", "description": "The name of the species for which you want to get the toxicity information (e.g., Daphnia magna, Escherichia coli, Zebrafish)"}, "exposure_time": {"type": "str", "description": "The duration of exposure to the toxic substance (e.g., 24 hours, 7 days)"}, "concentration": {"type": "float", "description": "The concentration of the toxic substance"}, "test_conditions": {"type": "str", "description": "The test conditions under which the toxicity was evaluated (e.g., temperature, pH, salinity)"}}, "required": ["species", "exposure_time", "concentration"], "responses": {"toxicity": {"type": "str", "description": "The level of toxicity of the species to the given concentration of the toxic substance"}, "evaluation": {"type": "str", "description": "The overall evaluation of the toxicological response of the species to the given concentration and exposure time"}}}
{"api_name": "getInsectSpecies", "api_description": "Retrieve information about insect species", "field": "Biology/Entomology", "parameters": {"location": {"type": "str", "description": "The location for which you want to get information about insect species (e.g., forest, garden, pond)"}, "type": {"type": "str", "description": "Specify the type of insect species (e.g., beetles, butterflies, ants)"}, "season": {"type": "str", "description": "Specify the season for insect species (e.g., spring, summer, autumn, winter)"}}, "required": ["location", "type"], "responses": {"species": {"type": "str", "description": "The list of insect species found at the specified location and of the specified type"}}}
{"api_name": "getInsectHabitat", "api_description": "Retrieve habitat information for insect species", "field": "Biology/Entomology", "parameters": {"species": {"type": "str", "description": "The name of the insect species for which you want to retrieve habitat information"}}, "required": ["species"], "responses": {"habitat": {"type": "str", "description": "The habitat description of the specified insect species"}}}
{"api_name": "getInsectLifeCycle", "api_description": "Retrieve the life cycle information of insect species", "field": "Biology/Entomology", "parameters": {"species": {"type": "str", "description": "The name of the insect species for which you want to retrieve life cycle information"}}, "required": ["species"], "responses": {"life_cycle": {"type": "str", "description": "The life cycle stages and duration of the specified insect species"}}}
{"api_name": "getBirdSounds", "api_description": "Retrieve sounds of a specific bird species", "field": "Biology/Ornithology", "parameters": {"species_name": {"type": "str", "description": "The name of the bird species for which you want to get sounds"}}, "required": ["species_name"], "responses": {"sounds": {"type": "str", "description": "URLs of audio files containing the sounds of the bird species"}}}
{"api_name": "getOxygenSaturation", "api_description": "Retrieve the oxygen saturation level of a vertebrate organism's blood", "field": "Biology/Vertebrate Physiology", "parameters": {"organism": {"type": "str", "description": "The name of the vertebrate organism (e.g., human, dog, cat)"}}, "required": ["organism"], "responses": {"oxygen_saturation": {"type": "float", "description": "The oxygen saturation level of the specified organism's blood as a percentage"}}}
{"api_name": "getSkeletalSystem", "api_description": "Retrieve skeletal system information of vertebrate organisms", "field": "Biology/Vertebrate Physiology", "parameters": {"organism": {"type": "str", "description": "The name of the vertebrate organism (e.g., human, dog, cat)"}}, "required": ["organism"], "responses": {"skeletal_system": {"type": "str", "description": "The description of the skeletal system of the specified vertebrate"}}}
{"api_name": "getReproductiveCycle", "api_description": "Retrieve information about the reproductive cycle of a species", "field": "Biology/Reproductive Biology", "parameters": {"species": {"type": "str", "description": "The species for which you want to get the reproductive cycle information (e.g., human, mouse, elephant)"}}, "required": ["species"], "responses": {"reproductive_cycle": {"type": "str", "description": "The reproductive cycle of the specified species"}}}
{"api_name": "getMatingBehaviour", "api_description": "Retrieve information about the mating behavior of a species", "field": "Biology/Reproductive Biology", "parameters": {"species": {"type": "str", "description": "The species for which you want to get the mating behavior information (e.g., bird, fish, lion)"}, "location": {"type": "str", "description": "The location where the species exhibits mating behavior"}}, "required": ["species"], "responses": {"mating_behavior": {"type": "str", "description": "The mating behavior of the specified species"}}}
{"api_name": "getOrganComparison", "api_description": "Retrieve the comparison of organs between two different species", "field": "Biology/Comparative Anatomy", "parameters": {"species1": {"type": "str", "description": "The name of the first species for organ comparison (e.g., human, dog, cat)"}, "species2": {"type": "str", "description": "The name of the second species for organ comparison (e.g., chimpanzee, rat, bird)"}}, "required": ["species1", "species2"], "responses": {"organ_similarity": {"type": "float", "description": "The similarity score between the organs of the two species"}}}
{"api_name": "compareBoneStructure", "api_description": "Compare the bone structures between two different species", "field": "Biology/Comparative Anatomy", "parameters": {"species1": {"type": "str", "description": "The name of the first species for bone structure comparison (e.g., lion, horse, snake)"}, "species2": {"type": "str", "description": "The name of the second species for bone structure comparison (e.g., bear, crocodile, sheep)"}}, "required": ["species1", "species2"], "responses": {"structural_similarity": {"type": "float", "description": "The similarity score between the bone structures of the two species"}}}
{"api_name": "getOrganShape", "api_description": "Retrieve the shape of a specific organ in different animal species", "field": "Biology/Comparative Anatomy", "parameters": {"organ": {"type": "str", "description": "The organ for which you want to retrieve the shape (e.g., heart, brain, lungs)"}, "species": {"type": "str", "description": "The specific animal species for comparing the organ shape (e.g., human, lion, elephant)"}}, "required": ["organ", "species"], "responses": {"shape": {"type": "str", "description": "The shape of the specified organ in the given animal species"}}}
{"api_name": "getPlantHeight", "api_description": "Retrieve the height of a plant", "field": "Biology/Plant Physiology", "parameters": {"plant_species": {"type": "str", "description": "The species of the plant for which you want to get the height (e.g., rose, oak, sunflower)"}, "measurement_unit": {"type": "str", "description": "The unit in which you want to obtain the plant height (e.g., centimeters, inches)"}, "age": {"type": "int", "description": "The age of the plant in days"}}, "required": ["plant_species"], "responses": {"plant_height": {"type": "float", "description": "The height of the plant"}, "unit": {"type": "str", "description": "The unit in which the plant height is provided"}}}
{"api_name": "getPhotosynthesisRate", "api_description": "Retrieve the rate of photosynthesis for a plant", "field": "Biology/Plant Physiology", "parameters": {"plant_species": {"type": "str", "description": "The species of the plant for which you want to get the photosynthesis rate (e.g., rose, oak, sunflower)"}, "light_intensity": {"type": "int", "description": "The intensity of light in micromoles/m^2/s"}, "carbon_dioxide_concentration": {"type": "float", "description": "The concentration of carbon dioxide in parts per million (ppm)"}, "temperature": {"type": "float", "description": "The temperature in degrees Celsius"}}, "required": ["plant_species", "light_intensity", "carbon_dioxide_concentration", "temperature"], "responses": {"photosynthesis_rate": {"type": "float", "description": "The rate of photosynthesis for the specified plant"}}}
{"api_name": "calculateSpeciesRichness", "api_description": "Calculate the species richness of a given area", "field": "Biology/Conservation Biology", "parameters": {"location": {"type": "str", "description": "The location for which you want to calculate the species richness (e.g., rainforest, grasslands, wetlands)"}, "time_period": {"type": "str", "description": "The time period for which you want to calculate species richness (e.g., past decade, current year, future projections)"}, "sampling_method": {"type": "str", "description": "The method used for species sampling (e.g., point quadrat method, line transect method, camera trapping)"}}, "required": ["location", "time_period"], "responses": {"species_richness": {"type": "int", "description": "The number of different species found in the specified location and time period"}}}
{"api_name": "optimizeExpression", "api_description": "Optimize gene expression in a host organism", "field": "Biology/Synthetic Biology", "parameters": {"gene_id": {"type": "str", "description": "The identifier of the gene to be optimized"}, "host_organism": {"type": "str", "description": "The host organism in which the gene will be expressed (e.g., E. coli, yeast, mammalian cells)"}, "expression_level": {"type": "str", "description": "The desired expression level of the gene (e.g., low, moderate, high)"}}, "required": ["gene_id", "host_organism"], "responses": {"optimized_sequence": {"type": "str", "description": "The optimized DNA sequence for the gene in the specified host organism"}}}
{"api_name": "getPredatorPreyRelationship", "api_description": "Retrieve the predator-prey relationship between two species", "field": "Biology/Terrestrial Ecology", "parameters": {"predator": {"type": "str", "description": "The predator species in the relationship (e.g., lion, wolf, snake)"}, "prey": {"type": "str", "description": "The prey species in the relationship (e.g., deer, rabbit, mouse)"}}, "required": ["predator", "prey"], "responses": {"relationship": {"type": "str", "description": "The nature of the predator-prey relationship (e.g., predator hunts and consumes prey)"}}}
{"api_name": "getInvertebrateZoologyInfo", "api_description": "Retrieve information about invertebrate zoology", "field": "Biology/Invertebrate Zoology", "parameters": {"species_name": {"type": "str", "description": "The name of the species you want information about (e.g., Octopus vulgaris, Honey bee, Butterfly)"}, "habitat": {"type": "str", "description": "The habitat of the species (e.g., marine, terrestrial)"}, "region": {"type": "str", "description": "The region where the species is commonly found (e.g., tropical, Arctic)"}, "classification": {"type": "str", "description": "The taxonomic classification of the species (e.g., Phylum, Class, Order)"}}, "required": ["species_name"], "responses": {"information": {"type": "str", "description": "Detailed information about the invertebrate species"}}}
{"api_name": "getForensicBiologyProfile", "api_description": "Retrieve forensic biology profile for a given sample", "field": "Biology/Forensic Biology", "parameters": {"sample_id": {"type": "str", "description": "The unique identifier of the sample"}, "location": {"type": "str", "description": "The location where the sample was collected"}, "analytical_method": {"type": "str", "description": "The method used for analyzing the sample"}}, "required": ["sample_id"], "responses": {"dna_profile": {"type": "str", "description": "The DNA profile of the sample"}, "matched_individual": {"type": "str", "description": "The individual matched to the DNA profile"}, "probability_of_match": {"type": "float", "description": "The probability of the match with the matched individual"}}}
{"api_name": "searchDNA", "api_description": "Search DNA database for a match", "field": "Biology/Forensic Biology", "parameters": {"sample": {"type": "str", "description": "The DNA sample to be searched in the database"}, "threshold": {"type": "float", "description": "The minimum match threshold for a positive match (e.g., 0.8, 0.9, 0.95)"}, "database": {"type": "str", "description": "The DNA database to be searched (e.g., national database, local database)"}}, "required": ["sample", "database"], "responses": {"match_found": {"type": "bool", "description": "Indicates whether a match was found in the DNA database"}, "matched_profile": {"type": "str", "description": "The matched DNA profile"}}}
{"api_name": "calculateAlleleFrequency", "api_description": "Calculate allele frequency of a specific gene in a population", "field": "Biology/Population Genetics", "parameters": {"gene": {"type": "str", "description": "The gene for which you want to calculate the allele frequency (e.g., ABO, BRCA1, TP53)"}, "population": {"type": "str", "description": "The population for which you want to calculate the allele frequency (e.g., African, European, Asian)"}}, "required": ["gene", "population"], "responses": {"allele_frequency": {"type": "float", "description": "The allele frequency of the specified gene in the population"}}}
{"api_name": "calculateHardyWeinberg", "api_description": "Calculate Hardy-Weinberg equilibrium for a specific gene in a population", "field": "Biology/Population Genetics", "parameters": {"gene": {"type": "str", "description": "The gene for which you want to calculate Hardy-Weinberg equilibrium (e.g., ABO, BRCA1, TP53)"}, "p": {"type": "float", "description": "The frequency of one allele (e.g., 0.3)"}, "q": {"type": "float", "description": "The frequency of the other allele (e.g., 0.7)"}}, "required": ["gene", "p", "q"], "responses": {"expected_genotype_frequency": {"type": "float", "description": "The expected genotype frequency in Hardy-Weinberg equilibrium"}}}
{"api_name": "predictInheritedTraits", "api_description": "Predict inherited traits or risk of certain diseases based on genetic data", "field": "Biology/Human Genetics", "parameters": {"genome_file": {"type": "str", "description": "The file containing genetic data for prediction (e.g., FASTQ format)", "example": "genome.fastq"}, "traits": {"type": "str", "description": "The specific traits or diseases to predict based on genetic data (e.g., eye color, breast cancer)", "example": "eye color, Alzheimer's disease"}}, "required": ["genome_file", "traits"], "responses": {"prediction_results": {"type": "str", "description": "Predicted inherited traits or risk of diseases based on the genetic data"}}}
{"api_name": "getDirectors", "api_description": "Retrieve information about movie directors", "field": "Theater/Directing", "parameters": {"movie": {"type": "str", "description": "The title of the movie for which you want to get the director information"}}, "required": ["movie"], "responses": {"director": {"type": "str", "description": "The name of the director of the specified movie"}, "nationality": {"type": "str", "description": "The nationality of the director"}}}
{"api_name": "getPlay", "api_description": "Retrieve information about a specific play", "field": "Theater/Playwriting", "parameters": {"play_title": {"type": "str", "description": "The title of the play you want information about (e.g., Hamlet, Romeo and Juliet)"}}, "required": ["play_title"], "responses": {"plot": {"type": "str", "description": "The plot summary of the play"}, "characters": {"type": "str", "description": "The list of characters in the play"}}}
{"api_name": "getPlaywritingStyle", "api_description": "Retrieve the style of playwriting", "field": "Theater/Playwriting", "parameters": {}, "required": [], "responses": {"style": {"type": "str", "description": "The style of playwriting (e.g., classical, contemporary)"}}}
{"api_name": "getPlayTime", "api_description": "Retrieve the time duration of a play", "field": "Theater/Playwriting", "parameters": {"title": {"type": "str", "description": "The title of the play"}}, "required": ["title"], "responses": {"duration": {"type": "str", "description": "The duration of the play in minutes"}}}
{"api_name": "addNewProp", "api_description": "Add a new prop to the inventory for a theater production", "field": "Theater/Props Design", "parameters": {"production_title": {"type": "str", "description": "The title of the theater production for which you want to add a new prop"}, "prop_name": {"type": "str", "description": "The name of the new prop being added"}, "prop_type": {"type": "str", "description": "The type/category of the prop (e.g., furniture, accessories, costumes)"}}, "required": ["production_title", "prop_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the prop was successfully added to the inventory"}}}
{"api_name": "getPropsDesign", "api_description": "Retrieve props design information for a theater production", "field": "Theater/Props Design", "parameters": {"production_title": {"type": "str", "description": "The title of the theater production for which you want to get the props design"}}, "required": ["production_title"], "responses": {"props_design": {"type": "str", "description": "The props design for the specified theater production"}}}
{"api_name": "getCasting", "api_description": "Retrieve casting information of a theater production", "field": "Theater/Casting", "parameters": {"production_title": {"type": "str", "description": "The title of the production (e.g., Hamlet, Cats, Les Misérables)"}, "location": {"type": "str", "description": "The location of the theater (e.g., New York, London, Sydney)"}}, "required": ["production_title", "location"], "responses": {"casting": {"type": "str", "description": "The list of actors and actresses in the production"}}}
{"api_name": "createTheater", "api_description": "Create a new theater", "field": "Theater/Theater Administration", "parameters": {"name": {"type": "str", "description": "The name of the theater"}, "location": {"type": "str", "description": "The location of the theater"}, "capacity": {"type": "int", "description": "The maximum capacity of the theater"}}, "required": ["name", "location"], "responses": {"theater_id": {"type": "str", "description": "The unique ID assigned to the created theater"}}}
{"api_name": "getScenicPainting", "api_description": "Retrieve information about a scenic painting", "field": "Theater/Scenic Painting", "parameters": {"painting_name": {"type": "str", "description": "The name of the scenic painting (e.g., The Mona Lisa, Starry Night)"}}, "required": ["painting_name"], "responses": {"painting_description": {"type": "str", "description": "A brief description of the scenic painting"}, "painting_image": {"type": "str", "description": "Image URL of the scenic painting"}}}
{"api_name": "isPerfectSquare", "api_description": "Check if a number is a perfect square", "field": "Mathematics/Number Theory", "parameters": {"number": {"type": "int", "description": "The number to be checked"}}, "required": ["number"], "responses": {"is_perfect_square": {"type": "bool", "description": "A flag indicating whether the given number is a perfect square"}}}
{"api_name": "checkConnectedness", "api_description": "Check if a given topological space is connected", "field": "Mathematics/Topology", "parameters": {"space": {"type": "str", "description": "The name or description of the topological space"}}, "required": ["space"], "responses": {"connected": {"type": "bool", "description": "True if the given topological space is connected, False otherwise"}}}
{"api_name": "checkCompactness", "api_description": "Check if a given topological space is compact", "field": "Mathematics/Topology", "parameters": {"space": {"type": "str", "description": "The name or description of the topological space"}}, "required": ["space"], "responses": {"compact": {"type": "bool", "description": "True if the given topological space is compact, False otherwise"}}}
{"api_name": "findMinimumSpanningTree", "api_description": "Find the minimum spanning tree of a graph", "field": "Mathematics/Graph Theory", "parameters": {"graph": {"type": "str", "description": "The graph for which you want to find the minimum spanning tree"}}, "required": ["graph"], "responses": {"minimum_spanning_tree": {"type": "str", "description": "The minimum spanning tree of the graph"}}}
{"api_name": "findShortestPath", "api_description": "Find the shortest path between two nodes in a graph", "field": "Mathematics/Graph Theory", "parameters": {"graph": {"type": "str", "description": "The graph in which you want to find the shortest path"}, "start_node": {"type": "str", "description": "The starting node for the path"}, "end_node": {"type": "str", "description": "The ending node for the path"}}, "required": ["graph", "start_node", "end_node"], "responses": {"shortest_path": {"type": "str", "description": "The shortest path between the starting and ending nodes"}}}
{"api_name": "findEulerianPath", "api_description": "Find an Eulerian path in a graph", "field": "Mathematics/Graph Theory", "parameters": {"graph": {"type": "str", "description": "The graph in which you want to find an Eulerian path"}}, "required": ["graph"], "responses": {"eulerian_path": {"type": "str", "description": "An Eulerian path in the graph"}}}
{"api_name": "getLimit", "api_description": "Calculate the limit of a function", "field": "Mathematics/Real Analysis", "parameters": {"function": {"type": "str", "description": "The function to calculate the limit for", "example": "sin(x)/x"}}, "required": ["function"], "responses": {"limit": {"type": "float", "description": "The calculated limit of the function"}}}
{"api_name": "calculateLimit", "api_description": "Calculate the limit of a function", "field": "Mathematics/Real Analysis", "parameters": {"function": {"type": "str", "description": "The function for which you want to calculate the limit (e.g., f(x) = x^2 + 3x + 2)"}, "variable": {"type": "str", "description": "The variable of the function (e.g., x)"}, "approach": {"type": "float", "description": "The value at which the variable approaches the limit (e.g., 0)"}, "direction": {"type": "str", "description": "The direction in which the variable approaches the limit (e.g., from the left, from the right)"}}, "required": ["function", "variable", "approach"], "responses": {"limit": {"type": "float", "description": "The calculated limit of the function"}}}
{"api_name": "addComplexNumbers", "api_description": "Add two complex numbers", "field": "Mathematics/Complex Analysis", "parameters": {"real_part1": {"type": "float", "description": "The real part of the first complex number"}, "imaginary_part1": {"type": "float", "description": "The imaginary part of the first complex number"}, "real_part2": {"type": "float", "description": "The real part of the second complex number"}, "imaginary_part2": {"type": "float", "description": "The imaginary part of the second complex number"}}, "required": ["real_part1", "imaginary_part1", "real_part2", "imaginary_part2"], "responses": {"sum": {"type": "str", "description": "The sum of the two complex numbers"}}}
{"api_name": "multiplyComplexNumbers", "api_description": "Multiply two complex numbers", "field": "Mathematics/Complex Analysis", "parameters": {"real_part1": {"type": "float", "description": "The real part of the first complex number"}, "imaginary_part1": {"type": "float", "description": "The imaginary part of the first complex number"}, "real_part2": {"type": "float", "description": "The real part of the second complex number"}, "imaginary_part2": {"type": "float", "description": "The imaginary part of the second complex number"}}, "required": ["real_part1", "imaginary_part1", "real_part2", "imaginary_part2"], "responses": {"product": {"type": "str", "description": "The product of the two complex numbers"}}}
{"api_name": "computeCombination", "api_description": "Compute the combination of two numbers", "field": "Mathematics/Discrete Mathematics", "parameters": {"number1": {"type": "int", "description": "The first number for combination calculation"}, "number2": {"type": "int", "description": "The second number for combination calculation"}}, "required": ["number1", "number2"], "responses": {"combination": {"type": "int", "description": "The combination of the two numbers provided"}}}
{"api_name": "computeBinomialCoefficient", "api_description": "Compute the binomial coefficient of two numbers", "field": "Mathematics/Discrete Mathematics", "parameters": {"number1": {"type": "int", "description": "The first number for binomial coefficient calculation"}, "number2": {"type": "int", "description": "The second number for binomial coefficient calculation"}}, "required": ["number1", "number2"], "responses": {"binomial_coefficient": {"type": "int", "description": "The binomial coefficient of the two numbers provided"}}}
{"api_name": "proveStatement", "api_description": "Prove the truth of a given mathematical statement using logical reasoning", "field": "Mathematics/Mathematical Logic", "parameters": {"statement": {"type": "str", "description": "The mathematical statement to be proven (e.g., P => Q, ~(P & Q), P v Q)"}}, "required": ["statement"], "responses": {"proof": {"type": "str", "description": "The logical proof demonstrating the truth of the given mathematical statement"}}}
{"api_name": "convertToCNF", "api_description": "Convert a mathematical logic expression to Conjunctive Normal Form (CNF)", "field": "Mathematics/Mathematical Logic", "parameters": {"expression": {"type": "str", "description": "The mathematical logic expression to be converted to CNF (e.g., (P OR Q) AND (R OR S) AND (T OR U)"}}, "required": ["expression"], "responses": {"cnf_expression": {"type": "str", "description": "The converted expression in CNF"}}}
{"api_name": "checkLogicExpression", "api_description": "Check the validity of a logical expression", "field": "Mathematics/Mathematical Logic", "parameters": {"expression": {"type": "str", "description": "The logical expression you want to check (e.g., (p AND q) OR r)"}}, "required": ["expression"], "responses": {"is_valid": {"type": "bool", "description": "Indicates whether the logical expression is valid or not"}}}
{"api_name": "validateProof", "api_description": "Validate a proof in mathematical logic", "field": "Mathematics/Mathematical Logic", "parameters": {"proof": {"type": "str", "description": "The proof to be validated"}, "axioms": {"type": "str", "description": "The set of axioms to be used for validation"}}, "required": ["proof", "axioms"], "responses": {"is_valid": {"type": "bool", "description": "Indicates whether the proof is valid or not"}}}
{"api_name": "findRoot", "api_description": "Find the root of a given function using numerical analysis methods", "field": "Mathematics/Numerical Analysis", "parameters": {"function": {"type": "str", "description": "The function for which you want to find the root"}, "initial_guess": {"type": "float", "description": "The initial guess for the root"}, "tolerance": {"type": "float", "description": "The desired tolerance for the root approximation"}}, "required": ["function", "initial_guess"], "responses": {"root": {"type": "float", "description": "The approximate root of the given function"}}}
{"api_name": "getGamePayoff", "api_description": "Retrieve payoff of a player in a specific game", "field": "Mathematics/Game Theory", "parameters": {"game": {"type": "str", "description": "The name of the game for which you want to get the payoff (e.g., Prisoner's Dilemma, Battle of the Sexes)"}}, "required": ["game"], "responses": {"payoff": {"type": "float", "description": "The payoff of the player in the specified game"}}}
{"api_name": "getGameEquilibrium", "api_description": "Retrieve Nash equilibrium of a specific game", "field": "Mathematics/Game Theory", "parameters": {"game": {"type": "str", "description": "The name of the game for which you want to get the Nash equilibrium (e.g., Chicken, Stag Hunt)"}}, "required": ["game"], "responses": {"nash_equilibrium": {"type": "str", "description": "The Nash equilibrium of the specified game"}}}
{"api_name": "calculateFutureValue", "api_description": "Calculate the future value of an investment given the present value, interest rate, and time period", "field": "Mathematics/Mathematical Finance", "parameters": {"present_value": {"type": "float", "description": "The present value of the investment (e.g., 100000)"}, "interest_rate": {"type": "float", "description": "The interest rate per period (e.g., 0.05 for 5%)"}, "time_period": {"type": "int", "description": "The time period in years (e.g., 5)"}}, "required": ["present_value", "interest_rate", "time_period"], "responses": {"future_value": {"type": "float", "description": "The future value of the investment at the end of the time period"}}}
{"api_name": "optimizeLinearProgramming", "api_description": "Solve a linear programming problem", "field": "Mathematics/Mathematical Programming", "parameters": {"objective": {"type": "str", "description": "The objective function of the linear programming problem (e.g., maximize profit)"}, "constraints": {"type": "str", "description": "The constraints of the linear programming problem (e.g., resource availability, demand)"}}, "required": ["objective", "constraints"], "responses": {"solution": {"type": "str", "description": "The optimal solution of the linear programming problem"}}}
{"api_name": "parseMathematicalExpression", "api_description": "Parse a mathematical expression", "field": "Mathematics/Mathematical Linguistics", "parameters": {"expression": {"type": "str", "description": "The mathematical expression to be parsed (e.g., '2 + 3 * 4')"}}, "required": ["expression"], "responses": {"parse_tree": {"type": "str", "description": "The parse tree representation of the mathematical expression"}}}
{"api_name": "analyzeMathematicalLinguistics", "api_description": "Analyze mathematical linguistics of a given text", "field": "Mathematics/Mathematical Linguistics", "parameters": {"text": {"type": "str", "description": "The text you want to analyze the mathematical linguistics of"}}, "required": ["text"], "responses": {"linguistic_info": {"type": "str", "description": "The linguistic information extracted from the text"}}}
{"api_name": "convertLinguisticRepresentation", "api_description": "Convert a linguistic representation of a mathematical expression to its mathematical equivalent", "field": "Mathematics/Mathematical Linguistics", "parameters": {"linguistic_representation": {"type": "str", "description": "The linguistic representation of the mathematical expression to be converted (e.g., 'two plus three times five minus open parenthesis four divided by two')"}}, "required": ["linguistic_representation"], "responses": {"mathematical_expression": {"type": "str", "description": "The mathematical expression equivalent to the given linguistic representation"}}}
{"api_name": "decodeMessage", "api_description": "Decode an encoded message using coding theory", "field": "Mathematics/Coding Theory", "parameters": {"encoded_message": {"type": "str", "description": "The encoded message to be decoded"}}, "required": ["encoded_message"], "responses": {"decoded_message": {"type": "str", "description": "The decoded message"}}}
{"api_name": "calculateErrorCorrection", "api_description": "Calculate error correction code for a given message using coding theory", "field": "Mathematics/Coding Theory", "parameters": {"message": {"type": "str", "description": "The message for which error correction code needs to be calculated"}}, "required": ["message"], "responses": {"error_correction_code": {"type": "str", "description": "The calculated error correction code"}}}
{"api_name": "biomoleculeComparison", "api_description": "Compare two biomolecules and identify the similarities and differences", "field": "Mathematics/Bioinformatics", "parameters": {"biomolecule1": {"type": "str", "description": "The first biomolecule for comparison (e.g., DNA, protein)"}, "biomolecule2": {"type": "str", "description": "The second biomolecule for comparison (e.g., RNA, peptide)"}}, "required": ["biomolecule1", "biomolecule2"], "responses": {"common_elements": {"type": "int", "description": "Number of common elements between the two biomolecules"}, "differences": {"type": "int", "description": "Number of differences between the two biomolecules"}}}
{"api_name": "generateRandomSequence", "api_description": "Generate a random DNA or RNA sequence of a specified length", "field": "Mathematics/Bioinformatics", "parameters": {"length": {"type": "int", "description": "The desired length of the random sequence"}}, "required": ["length"], "responses": {"sequence": {"type": "str", "description": "The randomly generated DNA or RNA sequence"}}}
{"api_name": "calculatePsychologicalIndex", "api_description": "Calculate a psychological index based on mathematical models", "field": "Mathematics/Mathematical Psychology", "parameters": {"personality_traits": {"type": "str", "description": "A list of personality traits of an individual (e.g., extroversion, neuroticism, conscientiousness)"}, "environmental_factors": {"type": "str", "description": "A list of environmental factors affecting the individual (e.g., stress, social support)"}, "time_period": {"type": "int", "description": "The time period over which the psychological index will be calculated"}}, "required": ["personality_traits", "environmental_factors"], "responses": {"psychological_index": {"type": "float", "description": "The calculated psychological index for the individual"}}}
{"api_name": "getTemperatureSensorData", "api_description": "Retrieve temperature sensor data", "field": "Internet of Things/Embedded Systems", "parameters": {"device_id": {"type": "str", "description": "The ID of the temperature sensor device"}}, "required": ["device_id"], "responses": {"temperature_data": {"type": "float", "description": "Temperature data measured by the sensor"}}}
{"api_name": "updateDeviceFirmware", "api_description": "Update the firmware of a device in the Internet of Things network", "field": "Internet of Things/Cybersecurity", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the device in the IoT network"}, "firmware_version": {"type": "str", "description": "The new firmware version to be installed on the device"}}, "required": ["device_id", "firmware_version"], "responses": {"status": {"type": "str", "description": "The status of the firmware update process (e.g., success, failure)"}}}
{"api_name": "getBlock", "api_description": "Retrieves information about a particular block in the blockchain network", "field": "Internet of Things/Blockchain and Distributed Ledger Technology", "parameters": {"block_number": {"type": "int", "description": "The number of the block to retrieve"}}, "required": ["block_number"], "responses": {"block_info": {"type": "str", "description": "Detailed information about the requested block"}}}
{"api_name": "createEdgeDevice", "api_description": "Create a new edge device in a network", "field": "Internet of Things/Edge Computing", "parameters": {"network_id": {"type": "str", "description": "The ID of the network in which to create the edge device"}, "device_name": {"type": "str", "description": "The name of the new edge device"}}, "required": ["network_id", "device_name"], "responses": {"success": {"type": "bool", "description": "Indicates if the edge device was created successfully", "example": true}}}
{"api_name": "getSteps", "api_description": "Retrieve daily steps count", "field": "Internet of Things/Wearable Technology", "parameters": {"user_id": {"type": "str", "description": "The ID of the user wearing the device"}}, "required": ["user_id"], "responses": {"steps_count": {"type": "int", "description": "The total number of steps taken by the user today"}}}
{"api_name": "getSleepQuality", "api_description": "Retrieve sleep quality information", "field": "Internet of Things/Wearable Technology", "parameters": {"sensor_id": {"type": "int", "description": "The unique identifier of the sensor attached to the device"}}, "required": ["sensor_id"], "responses": {"sleep_quality": {"type": "str", "description": "The sleep quality level measured by the sensor (e.g., good, fair, poor)"}}}
{"api_name": "getCalorieBurn", "api_description": "Retrieve calorie burn information", "field": "Internet of Things/Wearable Technology", "parameters": {"sensor_id": {"type": "int", "description": "The unique identifier of the sensor attached to the device"}}, "required": ["sensor_id"], "responses": {"calorie_burn": {"type": "float", "description": "The total calorie burn measured by the sensor"}}}
{"api_name": "getTrafficConditions", "api_description": "Retrieve the current traffic conditions", "field": "Internet of Things/Transportation IoT", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve the traffic conditions"}}, "required": ["location"], "responses": {"traffic_level": {"type": "str", "description": "The level of traffic in the specified location (e.g., low, moderate, high)"}, "average_speed": {"type": "int", "description": "The average speed of vehicles in the specified location"}}}
{"api_name": "controlLight", "api_description": "Control the light in a home automation system", "field": "Internet of Things/Home Automation", "parameters": {"light_id": {"type": "str", "description": "The ID or name of the light to control"}, "action": {"type": "str", "description": "The action to perform on the light (e.g., on, off, toggle)"}}, "required": ["light_id", "action"], "responses": {"status": {"type": "str", "description": "The status of the light after performing the action"}}}
{"api_name": "setSmartLockState", "api_description": "Set the state of a smart lock in a home automation system", "field": "Internet of Things/Home Automation", "parameters": {"lock_id": {"type": "str", "description": "The ID or name of the smart lock"}, "state": {"type": "str", "description": "The desired state of the lock (e.g., locked, unlocked)"}}, "required": ["lock_id", "state"], "responses": {"status": {"type": "str", "description": "The status of the lock after setting the state"}}}
{"api_name": "togglePowerOutlet", "api_description": "Toggle the power state of a power outlet in a home automation system", "field": "Internet of Things/Home Automation", "parameters": {"outlet_id": {"type": "str", "description": "The ID or name of the power outlet"}}, "required": ["outlet_id"], "responses": {"status": {"type": "str", "description": "The status of the power outlet after toggling"}}}
{"api_name": "toggleLight", "api_description": "Toggle the state of a light in a home automation system", "field": "Internet of Things/Home Automation", "parameters": {"room": {"type": "str", "description": "The room where the light is located (e.g., living room, bedroom, kitchen)"}, "light_id": {"type": "int", "description": "The ID of the light you want to toggle"}}, "required": ["room", "light_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the light state was successfully toggled"}}}
{"api_name": "adjustThermostat", "api_description": "Adjust the temperature setpoint of a thermostat in a home automation system", "field": "Internet of Things/Home Automation", "parameters": {"room": {"type": "str", "description": "The room where the thermostat is located (e.g., living room, bedroom, kitchen)"}, "temperature": {"type": "float", "description": "The desired temperature setpoint"}}, "required": ["room", "temperature"], "responses": {"success": {"type": "bool", "description": "Indicates whether the thermostat setpoint was successfully adjusted"}}}
{"api_name": "playMusic", "api_description": "Play music on a smart speaker", "field": "Internet of Things/Home Automation", "parameters": {"speaker": {"type": "str", "description": "The smart speaker to play the music on (e.g., living room speaker, bedroom speaker, kitchen speaker)"}, "song": {"type": "str", "description": "The name of the song or playlist to play (e.g., 'My favorite playlist', 'Bohemian Rhapsody')"}, "volume": {"type": "int", "description": "The desired volume level of the music (0-100)"}}, "required": ["speaker", "song"], "responses": {"status": {"type": "str", "description": "The status of the speaker after playing the music"}}}
{"api_name": "turnOnLight", "api_description": "Turn on the light in a specified room", "field": "Internet of Things/Home Automation", "parameters": {"room": {"type": "str", "description": "The room in which you want to turn on the light (e.g., living room, bedroom, kitchen)"}, "brightness": {"type": "int", "description": "The desired brightness level of the light (e.g., 1-10)"}, "color": {"type": "str", "description": "The desired color of the light (e.g., red, blue, green)"}}, "required": ["room"], "responses": {"status": {"type": "str", "description": "The status of the light after the operation (e.g., on, off)"}}}
{"api_name": "controlAppliance", "api_description": "Control a specified appliance in a room", "field": "Internet of Things/Home Automation", "parameters": {"room": {"type": "str", "description": "The room in which the appliance is located (e.g., living room, bedroom, kitchen)"}, "appliance": {"type": "str", "description": "The name of the appliance to be controlled (e.g., TV, air conditioner, coffee machine)"}, "action": {"type": "str", "description": "The action to perform on the appliance (e.g., turn on, turn off, increase volume, decrease temperature)"}}, "required": ["room", "appliance", "action"], "responses": {"status": {"type": "str", "description": "The status of the appliance after the operation (e.g., on, off, changed)"}}}
{"api_name": "openCurtains", "api_description": "Open the curtains in a specific room", "field": "Internet of Things/Home Automation", "parameters": {"room": {"type": "str", "description": "The room where the curtains should be opened (e.g., living room, bedroom, kitchen)"}}, "required": ["room"], "responses": {"status": {"type": "str", "description": "The status of the curtain operation (e.g., opened, closed)"}}}
{"api_name": "getBuildingTemperature", "api_description": "Retrieve the current temperature of a smart building", "field": "Internet of Things/Smart Buildings", "parameters": {"building_id": {"type": "str", "description": "The unique identifier of the smart building"}, "unit": {"type": "str", "description": "The desired unit for temperature (e.g., Celsius, Fahrenheit)"}}, "required": ["building_id"], "responses": {"temperature": {"type": "float", "description": "The current temperature inside the smart building"}, "unit": {"type": "str", "description": "The unit of temperature in which the temperature is provided"}}}
{"api_name": "getBuildingHumidity", "api_description": "Retrieve the current humidity level of a smart building", "field": "Internet of Things/Smart Buildings", "parameters": {"building_id": {"type": "str", "description": "The unique identifier of the smart building"}}, "required": ["building_id"], "responses": {"humidity": {"type": "float", "description": "The current humidity level inside the smart building"}}}
{"api_name": "setTemperatureThreshold", "api_description": "Set the temperature threshold for a smart building", "field": "Internet of Things/Smart Buildings", "parameters": {"building_id": {"type": "str", "description": "The unique identifier of the smart building"}, "threshold": {"type": "float", "description": "The desired temperature threshold for triggering alerts"}}, "required": ["building_id", "threshold"], "responses": {"success": {"type": "bool", "description": "Indicates whether the temperature threshold was successfully set"}}}
{"api_name": "getAssetStatus", "api_description": "Retrieve the current status of an asset", "field": "Internet of Things/Asset Tracking and Management", "parameters": {"asset_id": {"type": "str", "description": "The unique identifier of the asset for which you want to get the status"}}, "required": ["asset_id"], "responses": {"status": {"type": "str", "description": "The current status of the asset"}}}
{"api_name": "getProfit", "api_description": "Retrieve profit information for a specific time period", "field": "Accounting/Managerial Accounting", "parameters": {"start_date": {"type": "str", "description": "The starting date of the time period for which you want to retrieve profit information (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The ending date of the time period for which you want to retrieve profit information (e.g., 2022-12-31)"}}, "required": ["start_date", "end_date"], "responses": {"profit": {"type": "float", "description": "The calculated profit for the specified time period"}}}
{"api_name": "generateTaxReport", "api_description": "Generate tax report based on income and deductions", "field": "Accounting/Tax Accounting", "parameters": {"income": {"type": "float", "description": "The income to be reported for tax purposes"}, "deductions": {"type": "float", "description": "The total deductions available for tax purposes"}}, "required": ["income"], "responses": {"tax_report": {"type": "str", "description": "The generated tax report"}}}
{"api_name": "getTaxBracket", "api_description": "Retrieve tax bracket information based on income", "field": "Accounting/Tax Accounting", "parameters": {"income": {"type": "float", "description": "The income to determine the tax bracket"}}, "required": ["income"], "responses": {"tax_bracket": {"type": "str", "description": "The tax bracket applicable to the provided income"}}}
{"api_name": "applyTaxCredit", "api_description": "Apply tax credit to reduce tax liability", "field": "Accounting/Tax Accounting", "parameters": {"tax_liability": {"type": "float", "description": "The total tax liability before applying tax credit"}, "tax_credit": {"type": "float", "description": "The tax credit amount to be applied"}}, "required": ["tax_liability", "tax_credit"], "responses": {"reduced_tax_liability": {"type": "float", "description": "The tax liability after applying tax credit"}}}
{"api_name": "getBusinessValuation", "api_description": "Retrieve business valuation information", "field": "Accounting/Business Valuation", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to get the business valuation"}, "valuation_date": {"type": "str", "description": "The date on which the business valuation should be calculated (e.g., '2022-01-31')"}, "valuation_method": {"type": "str", "description": "The method used to calculate business valuation (e.g., 'Income Approach', 'Market Approach')"}}, "required": ["company_name", "valuation_date"], "responses": {"valuation_amount": {"type": "float", "description": "The estimated value of the company based on the given business valuation method"}, "currency": {"type": "str", "description": "The currency in which the valuation amount is provided"}}}
{"api_name": "checkEthicalCompliance", "api_description": "Check the ethical compliance of an accounting practice", "field": "Accounting/Ethics in Accounting", "parameters": {"practice_name": {"type": "str", "description": "The name of the accounting practice to be checked for ethical compliance"}}, "required": ["practice_name"], "responses": {"compliance_status": {"type": "str", "description": "The ethical compliance status of the accounting practice"}}}
{"api_name": "getCashFlowAnalysis", "api_description": "Retrieve cash flow analysis for a specific accounting period", "field": "Accounting/Cash Flow Analysis", "parameters": {"accounting_period": {"type": "str", "description": "The accounting period for which you want to get the cash flow analysis (e.g., Q1 2022, FY2021)"}, "company_id": {"type": "int", "description": "The ID of the company for which you want to retrieve the cash flow analysis"}}, "required": ["accounting_period", "company_id"], "responses": {"cash_flow": {"type": "float", "description": "The cash flow amount for the specified accounting period"}, "net_profit": {"type": "float", "description": "The net profit amount for the specified accounting period"}, "operating_activities": {"type": "float", "description": "The cash flow from operating activities for the specified accounting period"}}}
{"api_name": "getCashFlow", "api_description": "Retrieve cash flow analysis information", "field": "Accounting/Cash Flow Analysis", "parameters": {"company": {"type": "str", "description": "The name of the company for which you want to analyze cash flow"}}, "required": ["company"], "responses": {"operating_cash_flow": {"type": "float", "description": "The amount of operating cash flow for the specified company"}, "investing_cash_flow": {"type": "float", "description": "The amount of investing cash flow for the specified company"}, "financing_cash_flow": {"type": "float", "description": "The amount of financing cash flow for the specified company"}}}
{"api_name": "calculateGrossProfitMargin", "api_description": "Calculate the gross profit margin for a business", "field": "Accounting/Financial Management", "parameters": {"revenue": {"type": "float", "description": "The total revenue generated by the business"}, "cost_of_goods_sold": {"type": "float", "description": "The total cost associated with producing the goods sold"}}, "required": ["revenue", "cost_of_goods_sold"], "responses": {"gross_profit_margin": {"type": "float", "description": "The gross profit margin for the business"}}}
{"api_name": "calculateVariance", "api_description": "Calculate variance between actual and budgeted amounts", "field": "Accounting/Variance Analysis", "parameters": {"actual_amount": {"type": "float", "description": "The actual amount spent (e.g., 1000.50)"}, "budgeted_amount": {"type": "float", "description": "The budgeted amount for the expense (e.g., 1500.25)"}}, "required": ["actual_amount", "budgeted_amount"], "responses": {"variance": {"type": "float", "description": "The variance between actual and budgeted amounts"}}}
{"api_name": "recordTransaction", "api_description": "Record a transaction in the bookkeeping system", "field": "Accounting/Bookkeeping", "parameters": {"date": {"type": "str", "description": "The date of the transaction in YYYY-MM-DD format"}, "description": {"type": "str", "description": "A brief description of the transaction"}, "amount": {"type": "float", "description": "The monetary value of the transaction"}, "category": {"type": "str", "description": "The category to which the transaction belongs (e.g., income, expense, asset, liability)"}}, "required": ["date", "description", "amount"], "responses": {"success": {"type": "bool", "description": "Indicates if the transaction was successfully recorded"}}}
{"api_name": "getLiftCoefficient", "api_description": "Calculate the lift coefficient of an aircraft", "field": "Aerospace/Aerodynamics", "parameters": {"airspeed": {"type": "float", "description": "The speed of the aircraft in meters per second (e.g., 100, 200, 300)"}, "density": {"type": "float", "description": "The density of the air in kilograms per cubic meter (e.g., 1.2, 1.5, 2.0)"}, "wing_area": {"type": "float", "description": "The area of the wing in square meters (e.g., 20, 30, 40)"}}, "required": ["airspeed", "density", "wing_area"], "responses": {"lift_coefficient": {"type": "float", "description": "The lift coefficient of the aircraft"}}}
{"api_name": "setAutopilotMode", "api_description": "Set the autopilot mode of an aircraft", "field": "Aerospace/Flight dynamics and control", "parameters": {"aircraft_id": {"type": "str", "description": "The unique identifier of the aircraft"}, "mode": {"type": "str", "description": "The desired autopilot mode (e.g., manual, navigation, approach)"}, "altitude": {"type": "int", "description": "The desired altitude for the aircraft in meters (optional)"}, "speed": {"type": "float", "description": "The desired speed for the aircraft in knots (optional)"}}, "required": ["aircraft_id", "mode"], "responses": {"success": {"type": "bool", "description": "Indicates if the autopilot mode was set successfully"}}}
{"api_name": "getSpecificImpulse", "api_description": "Retrieve the specific impulse of a propulsion system", "field": "Aerospace/Propulsion systems", "parameters": {"engine_type": {"type": "str", "description": "The type of engine used in the propulsion system (e.g., rocket, ion thruster)"}, "propellant": {"type": "str", "description": "The type of propellant used in the propulsion system (e.g., liquid oxygen, xenon gas)"}, "thrust": {"type": "float", "description": "The thrust delivered by the propulsion system in kilonewtons"}}, "required": ["engine_type", "propellant", "thrust"], "responses": {"specific_impulse": {"type": "float", "description": "The specific impulse of the specified propulsion system at the given thrust and propellant"}}}
{"api_name": "getPropulsionSystemStatus", "api_description": "Retrieve the current status of a propulsion system", "field": "Aerospace/Propulsion systems", "parameters": {"engine_id": {"type": "str", "description": "The unique identifier of the engine"}, "status_type": {"type": "str", "description": "Specify the type of status to retrieve (e.g., temperature, pressure, fuel level)"}}, "required": ["engine_id", "status_type"], "responses": {"status_value": {"type": "float", "description": "The value of the requested status"}, "unit": {"type": "str", "description": "The unit of measurement for the status value"}}}
{"api_name": "shutdownEngine", "api_description": "Shutdown the propulsion system engine", "field": "Aerospace/Propulsion systems", "parameters": {"engine_id": {"type": "str", "description": "The unique identifier of the engine"}}, "required": ["engine_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the engine shutdown was successful"}}}
{"api_name": "getFuelFlowRate", "api_description": "Retrieve information about the fuel flow rate of the propulsion system", "field": "Aerospace/Propulsion systems", "parameters": {"engine_type": {"type": "str", "description": "The type of engine (e.g., turbofan, turboprop, rocket)"}}, "required": ["engine_type"], "responses": {"fuel_flow_rate": {"type": "float", "description": "The rate at which the fuel is consumed by the engine in kilograms per second (kg/s)"}}}
{"api_name": "getThrustVectoring", "api_description": "Retrieve information about thrust vectoring capability of the propulsion system", "field": "Aerospace/Propulsion systems", "parameters": {"engine_type": {"type": "str", "description": "The type of engine (e.g., turbofan, turboprop, rocket)"}}, "required": ["engine_type"], "responses": {"thrust_vectoring": {"type": "bool", "description": "Whether the engine has thrust vectoring capability"}}}
{"api_name": "getSpacecraftWeight", "api_description": "Retrieve the weight of a spacecraft", "field": "Aerospace/Spacecraft design", "parameters": {"spacecraft_type": {"type": "str", "description": "The type of spacecraft (e.g., satellite, space shuttle, lunar lander)"}, "payload_weight": {"type": "float", "description": "The weight of payload to be carried by the spacecraft (in kg)"}}, "required": ["spacecraft_type"], "responses": {"spacecraft_weight": {"type": "float", "description": "The weight of the spacecraft (in kg)"}}}
{"api_name": "calculateSpacecraftPower", "api_description": "Calculate the power requirements of a spacecraft", "field": "Aerospace/Spacecraft design", "parameters": {"power_consumption": {"type": "float", "description": "The power consumed by different subsystems of the spacecraft (in watts)"}, "total_satellite_power": {"type": "float", "description": "The total power required for satellite operations (in watts)"}}, "required": ["power_consumption", "total_satellite_power"], "responses": {"spacecraft_power": {"type": "float", "description": "The power requirements of the spacecraft (in watts)"}}}
{"api_name": "getAircraftSystemsStatus", "api_description": "Retrieve the current status of aircraft systems", "field": "Aerospace/Aircraft systems", "parameters": {"aircraft_id": {"type": "str", "description": "The identification number of the aircraft (e.g., A1234, B5678)"}, "system_name": {"type": "str", "description": "The name of the specific aircraft system (e.g., avionics, electrical, hydraulic)"}}, "required": ["aircraft_id", "system_name"], "responses": {"status": {"type": "str", "description": "The current status of the specified aircraft system (e.g., online, offline, malfunction)"}}}
{"api_name": "getAircraftAltitude", "api_description": "Retrieve the current altitude of an aircraft", "field": "Aerospace/Aircraft systems", "parameters": {"aircraft_id": {"type": "str", "description": "The identification number of the aircraft (e.g., A1234, B5678)"}, "unit": {"type": "str", "description": "The desired unit for altitude measurement (e.g., feet, meters)"}}, "required": ["aircraft_id"], "responses": {"altitude": {"type": "float", "description": "The current altitude of the specified aircraft"}}}
{"api_name": "updateMaintenanceRecord", "api_description": "Update the maintenance record of an aircraft", "field": "Aerospace/Aircraft maintenance", "parameters": {"aircraft_id": {"type": "str", "description": "The unique identifier of the aircraft"}, "record_id": {"type": "str", "description": "The unique identifier of the maintenance record"}, "status": {"type": "str", "description": "The updated status of the maintenance record"}}, "required": ["aircraft_id", "record_id", "status"], "responses": {"success": {"type": "bool", "description": "Indicates whether the update was successful"}}}
{"api_name": "performMaintenanceTask", "api_description": "Perform a maintenance task on a specific aircraft", "field": "Aerospace/Aircraft maintenance", "parameters": {"aircraft_id": {"type": "str", "description": "The unique identifier of the aircraft (e.g., ABC123)"}, "task_id": {"type": "str", "description": "The unique identifier of the maintenance task to be performed (e.g., 123456)"}, "task_result": {"type": "str", "description": "The result of the maintenance task (e.g., completed, failed)"}, "comments": {"type": "str", "description": "Additional comments or notes about the maintenance task (e.g., replaced engine part XYZ)"}}, "required": ["aircraft_id", "task_id", "task_result"], "responses": {"success": {"type": "bool", "description": "Indicates whether the maintenance task was successfully performed"}}}
{"api_name": "getSpaceMissions", "api_description": "Retrieve information about space missions", "field": "Aerospace/Space exploration", "parameters": {"agency": {"type": "str", "description": "The space agency responsible for the mission (e.g., NASA, ESA, SpaceX)"}, "year": {"type": "int", "description": "The year in which the mission took place"}, "destination": {"type": "str", "description": "The target destination of the mission (e.g., Moon, Mars, Saturn)"}}, "required": [], "responses": {"mission": {"type": "str", "description": "The name of the mission"}, "agency": {"type": "str", "description": "The space agency responsible for the mission"}, "year": {"type": "int", "description": "The year in which the mission took place"}, "destination": {"type": "str", "description": "The target destination of the mission"}}}
{"api_name": "launchSpacecraft", "api_description": "Launches a spacecraft into space", "field": "Aerospace/Space exploration", "parameters": {"spacecraft_name": {"type": "str", "description": "The name of the spacecraft to be launched"}, "destination": {"type": "str", "description": "The desired destination for the spacecraft (e.g., Moon, Mars, Venus)"}, "payload_weight": {"type": "float", "description": "The weight of the payload to be carried by the spacecraft (in kilograms)"}, "launch_date": {"type": "str", "description": "The desired launch date for the spacecraft (e.g., 2022-12-31)"}, "launch_site": {"type": "str", "description": "The location from where the spacecraft will be launched (e.g., Cape Canaveral, Baikonur Cosmodrome)"}}, "required": ["spacecraft_name", "destination", "launch_date"], "responses": {"success": {"type": "bool", "description": "Indicates whether the spacecraft was successfully launched"}, "mission_id": {"type": "int", "description": "The unique identifier for the mission"}}}
{"api_name": "calculateMachNumber", "api_description": "Calculate the Mach number of a vehicle", "field": "Aerospace/Aerothermodynamics", "parameters": {"velocity": {"type": "float", "description": "The velocity of the vehicle in meters per second"}, "speed_of_sound": {"type": "float", "description": "The speed of sound in meters per second"}}, "required": ["velocity"], "responses": {"mach_number": {"type": "float", "description": "The Mach number of the vehicle"}}}
{"api_name": "getAircraftAerodynamics", "api_description": "Retrieve aircraft aerodynamics information", "field": "Aerospace/Aircraft aerodynamics", "parameters": {"aircraft_type": {"type": "str", "description": "The type of aircraft (e.g., commercial, military, private)"}, "altitude": {"type": "float", "description": "The altitude at which to retrieve aerodynamics data (e.g., 10,000 feet, 30,000 feet)"}, "speed": {"type": "float", "description": "The speed at which to retrieve aerodynamics data (e.g., 300 knots, Mach 0.8)"}}, "required": ["aircraft_type"], "responses": {"lift_coefficient": {"type": "float", "description": "The lift coefficient of the aircraft based on the given altitude and speed"}, "drag_coefficient": {"type": "float", "description": "The drag coefficient of the aircraft based on the given altitude and speed"}, "stall_speed": {"type": "float", "description": "The stall speed of the aircraft based on the given altitude"}}}
{"api_name": "getCompositeMaterialProperties", "api_description": "Retrieve material properties of a composite material", "field": "Aerospace/Composite materials", "parameters": {"material_type": {"type": "str", "description": "The type of composite material (e.g., carbon fiber, fiberglass, Kevlar)"}, "temperature": {"type": "float", "description": "The temperature at which the material properties are desired (e.g., -50, 100, 500)"}, "humidity": {"type": "int", "description": "The relative humidity in percentage for which the material properties are desired (e.g., 30, 50, 80)"}}, "required": ["material_type"], "responses": {"tensile_strength": {"type": "float", "description": "The tensile strength of the composite material"}, "flexural_strength": {"type": "float", "description": "The flexural strength of the composite material"}, "compressive_strength": {"type": "float", "description": "The compressive strength of the composite material"}, "temperature_coefficient": {"type": "float", "description": "The temperature coefficient of the composite material"}, "moisture_absorption": {"type": "float", "description": "The moisture absorption of the composite material"}}}
{"api_name": "getUavStatus", "api_description": "Get the status of a UAV", "field": "Aerospace/Unmanned aerial vehicles (UAV)", "parameters": {"uav_id": {"type": "int", "description": "The ID of the UAV for which you want to get the status"}}, "required": ["uav_id"], "responses": {"status": {"type": "str", "description": "The current status of the UAV (e.g., flying, hover, landing)"}, "battery_level": {"type": "int", "description": "The battery level of the UAV in percentage"}}}
{"api_name": "sendUavCommand", "api_description": "Send a command to control a UAV", "field": "Aerospace/Unmanned aerial vehicles (UAV)", "parameters": {"uav_id": {"type": "int", "description": "The ID of the UAV to which you want to send the command"}, "command": {"type": "str", "description": "The command to be sent to the UAV (e.g., takeoff, land, hover)"}}, "required": ["uav_id", "command"], "responses": {"success": {"type": "bool", "description": "Indicates whether the command was successfully sent"}}}
{"api_name": "getUavLocation", "api_description": "Retrieve the current location of a UAV", "field": "Aerospace/Unmanned aerial vehicles (UAV)", "parameters": {"uav_id": {"type": "int", "description": "The ID of the UAV for which you want to get the location"}}, "required": ["uav_id"], "responses": {"latitude": {"type": "float", "description": "The latitude coordinate of the UAV's current location"}, "longitude": {"type": "float", "description": "The longitude coordinate of the UAV's current location"}}}
{"api_name": "getGNCSData", "api_description": "Retrieve guidance, navigation, and control systems data", "field": "Aerospace/Guidance, navigation, and control systems", "parameters": {"aircraft": {"type": "str", "description": "The name of the aircraft (e.g., Boeing 747, Airbus A320)"}, "location": {"type": "str", "description": "The location of the aircraft (e.g., latitude, longitude)"}}, "required": ["aircraft", "location"], "responses": {"altitude": {"type": "float", "description": "The altitude at the specified location"}, "velocity": {"type": "int", "description": "The velocity of the aircraft"}, "heading": {"type": "int", "description": "The heading of the aircraft"}}}
{"api_name": "getRocketPayloadCapacity", "api_description": "Get the payload capacity of a rocket", "field": "Aerospace/Rocket design", "parameters": {"rocket_name": {"type": "str", "description": "The name of the rocket for which you want to retrieve payload capacity"}}, "required": ["rocket_name"], "responses": {"payload_capacity": {"type": "float", "description": "The payload capacity of the rocket in kilograms"}}}
{"api_name": "getRobotTask", "api_description": "Retrieve the current task assigned to a robotic system in aerospace", "field": "Aerospace/Robotics in aerospace", "parameters": {"system_id": {"type": "int", "description": "The ID of the robotic system"}}, "required": ["system_id"], "responses": {"task": {"type": "str", "description": "The current task assigned to the robotic system"}}}
{"api_name": "launchRobot", "api_description": "Launch a robot for aerospace exploration", "field": "Aerospace/Robotics in aerospace", "parameters": {"destination": {"type": "str", "description": "The destination in aerospace where the robot will explore (e.g., Mars, Moon, Europa)"}, "mission_duration": {"type": "int", "description": "The duration of the robot's mission in days"}, "robot_type": {"type": "str", "description": "Specify the type of robot to be used for aerospace exploration (e.g., Rover, Orbiter, Lander)"}}, "required": ["destination", "mission_duration"], "responses": {"status": {"type": "str", "description": "The status of the robot's launch (e.g., Success, Failure)"}, "mission_objectives": {"type": "str", "description": "The objectives of the robot's mission in aerospace"}}}
{"api_name": "getAircraft", "api_description": "Retrieve aircraft information", "field": "Aerospace/Aircraft manufacturing", "parameters": {"manufacturer": {"type": "str", "description": "The manufacturer of the aircraft (e.g., Boeing, Airbus)"}, "model": {"type": "str", "description": "The model of the aircraft (e.g., 737, A320)"}, "year": {"type": "int", "description": "The manufacturing year of the aircraft"}}, "required": ["manufacturer"], "responses": {"manufacturer": {"type": "str", "description": "The manufacturer of the aircraft"}, "model": {"type": "str", "description": "The model of the aircraft"}, "year": {"type": "int", "description": "The manufacturing year of the aircraft"}}}
{"api_name": "getLaunchVehicleDynamics", "api_description": "Retrieve launch vehicle dynamics information", "field": "Aerospace/Launch vehicle dynamics", "parameters": {"launch_vehicle": {"type": "str", "description": "The name of the launch vehicle (e.g., Falcon 9, Delta IV)"}, "payload_weight": {"type": "float", "description": "The weight of the payload in kilograms"}}, "required": ["launch_vehicle"], "responses": {"thrust": {"type": "float", "description": "The thrust generated by the launch vehicle"}, "velocity": {"type": "float", "description": "The velocity of the launch vehicle"}, "altitude": {"type": "float", "description": "The altitude reached by the launch vehicle"}}}
{"api_name": "getSpacecraftLifespan", "api_description": "Retrieve the expected lifespan of a spacecraft", "field": "Aerospace/Spacecraft structures", "parameters": {"spacecraft_name": {"type": "str", "description": "The name of the spacecraft for which you want to get the expected lifespan"}}, "required": ["spacecraft_name"], "responses": {"lifespan": {"type": "str", "description": "The expected lifespan of the spacecraft in years"}}}
{"api_name": "verifySmartContract", "api_description": "Verify the source code of a smart contract in a blockchain network", "field": "Blockchain/Smart Contracts", "parameters": {"contract_code": {"type": "str", "description": "The code of the smart contract"}, "compiler_version": {"type": "str", "description": "The compiler version used for compiling the smart contract"}, "optimization_enabled": {"type": "bool", "description": "Flag to indicate if optimization is enabled or not"}}, "required": ["contract_code"], "responses": {"verification_result": {"type": "str", "description": "The result of the smart contract verification"}}}
{"api_name": "getDistributedLedgerInfo", "api_description": "Retrieve information about a distributed ledger", "field": "Blockchain/Distributed Ledger", "parameters": {"ledger_id": {"type": "str", "description": "The unique identifier of the distributed ledger"}, "start_date": {"type": "str", "description": "The start date from which to retrieve the ledger information (e.g., 2022-01-01)"}, "end_date": {"type": "str", "description": "The end date until which to retrieve the ledger information (e.g., 2022-02-28)"}}, "required": ["ledger_id"], "responses": {"ledger_info": {"type": "str", "description": "The information about the specified distributed ledger"}}}
{"api_name": "createPermissionedBlockchain", "api_description": "Create a permissioned blockchain network", "field": "Blockchain/Permissioned Blockchain", "parameters": {"network_name": {"type": "str", "description": "The name of the permissioned blockchain network"}, "consensus_algorithm": {"type": "str", "description": "The consensus algorithm to be used in the network (e.g., PBFT, Raft, PoA)"}, "member_count": {"type": "int", "description": "The number of participants/members in the network"}, "permissions": {"type": "str", "description": "The specific permissions granted to participants (e.g., read-only, read-write)"}}, "required": ["network_name", "member_count", "consensus_algorithm"], "responses": {"network_id": {"type": "str", "description": "The unique identifier of the created permissioned blockchain network"}, "participants": {"type": "int", "description": "The number of participants/members in the created network"}, "permissions_granted": {"type": "str", "description": "The permissions granted to the participants in the network"}}}
{"api_name": "getLatestBlock", "api_description": "Retrieve information about the latest block in the permissionless blockchain", "field": "Blockchain/Permissionless Blockchain", "parameters": {}, "required": [], "responses": {"block_number": {"type": "int", "description": "The block number of the latest block"}, "transactions": {"type": "int", "description": "The number of transactions in the latest block"}, "timestamp": {"type": "str", "description": "The timestamp of the latest block"}}}
{"api_name": "checkBlockValidity", "api_description": "Check the validity of a block in the blockchain", "field": "Blockchain/Blockchain Security", "parameters": {"block_hash": {"type": "str", "description": "The hash of the block to be checked"}}, "required": ["block_hash"], "responses": {"is_valid": {"type": "bool", "description": "Indicates whether the block is valid or not"}}}
{"api_name": "calculateBlockHash", "api_description": "Calculate the hash of a block in the blockchain", "field": "Blockchain/Blockchain Security", "parameters": {"block_data": {"type": "str", "description": "The data of the block for which the hash needs to be calculated"}}, "required": ["block_data"], "responses": {"block_hash": {"type": "str", "description": "The hash of the specified block"}}}
{"api_name": "checkTransactionValidity", "api_description": "Check the validity of a blockchain transaction", "field": "Blockchain/Blockchain Security", "parameters": {"transaction_id": {"type": "str", "description": "The ID of the transaction you want to check"}, "blockchain_network": {"type": "str", "description": "The blockchain network where the transaction belongs"}, "transaction_data": {"type": "str", "description": "The data associated with the transaction"}}, "required": ["transaction_id", "blockchain_network"], "responses": {"validity": {"type": "bool", "description": "Indicates whether the transaction is valid or not"}}}
{"api_name": "getTransactionHash", "api_description": "Get the hash value of a blockchain transaction", "field": "Blockchain/Blockchain Security", "parameters": {"transaction_id": {"type": "str", "description": "The ID of the transaction for which you want to retrieve the hash value"}, "blockchain_network": {"type": "str", "description": "The blockchain network where the transaction belongs"}}, "required": ["transaction_id", "blockchain_network"], "responses": {"transaction_hash": {"type": "str", "description": "The hash value of the specified transaction"}}}
{"api_name": "checkTransactionConfirmation", "api_description": "Check the confirmation status of a blockchain transaction", "field": "Blockchain/Blockchain Security", "parameters": {"transaction_hash": {"type": "str", "description": "The hash of the transaction to be checked"}, "blockheight": {"type": "int", "description": "The desired block height to check if the transaction has reached that level of confirmations (e.g., 100, 1000, 10000)"}}, "required": ["transaction_hash"], "responses": {"confirmed": {"type": "bool", "description": "Specifies whether the transaction has reached the desired level of confirmations"}, "current_confirmations": {"type": "int", "description": "The current number of confirmations for the transaction"}}}
{"api_name": "getGovernanceRules", "api_description": "Retrieve the governance rules and regulations of a blockchain network", "field": "Blockchain/Blockchain Governance", "parameters": {}, "required": [], "responses": {"rules": {"type": "str", "description": "The rules and regulations governing the blockchain network"}}}
{"api_name": "createToken", "api_description": "Create a new token", "field": "Blockchain/Tokenization", "parameters": {"token_name": {"type": "str", "description": "The name of the token"}, "total_supply": {"type": "int", "description": "The total supply of the token"}, "decimals": {"type": "int", "description": "The number of decimal places for the token"}}, "required": ["token_name", "total_supply"], "responses": {"token_address": {"type": "str", "description": "The address of the newly created token"}, "total_supply": {"type": "int", "description": "The total supply of the token"}}}
{"api_name": "transferToken", "api_description": "Transfer tokens from one address to another", "field": "Blockchain/Tokenization", "parameters": {"token_address": {"type": "str", "description": "The address of the token"}, "from_address": {"type": "str", "description": "The address from which tokens are being transferred"}, "to_address": {"type": "str", "description": "The address to which tokens are being transferred"}, "amount": {"type": "int", "description": "The amount of tokens being transferred"}}, "required": ["token_address", "from_address", "to_address", "amount"], "responses": {"transaction_hash": {"type": "str", "description": "The hash of the transaction"}}}
{"api_name": "getTokenInfo", "api_description": "Retrieve information about a token", "field": "Blockchain/Tokenization", "parameters": {"token_id": {"type": "str", "description": "The identifier of the token"}}, "required": ["token_id"], "responses": {"token_name": {"type": "str", "description": "The name of the token"}, "total_supply": {"type": "float", "description": "The total supply of the token"}}}
{"api_name": "burnToken", "api_description": "Burn tokens from an account", "field": "Blockchain/Tokenization", "parameters": {"token_id": {"type": "str", "description": "The identifier of the token"}, "account_address": {"type": "str", "description": "The address of the account to burn tokens from"}, "amount": {"type": "float", "description": "The amount of tokens to burn"}}, "required": ["token_id", "account_address", "amount"], "responses": {"success": {"type": "bool", "description": "Indicates if the burning process was successful"}}}
{"api_name": "getAddressBalance", "api_description": "Retrieve the balance of a specific blockchain address", "field": "Blockchain/Blockchain Analytics", "parameters": {"address": {"type": "str", "description": "The blockchain address for which you want to retrieve the balance"}}, "required": ["address"], "responses": {"balance": {"type": "float", "description": "The balance of the specified address"}}}
{"api_name": "createAsset", "api_description": "Create a new asset in the blockchain supply chain system", "field": "Blockchain/Blockchain Supply Chain", "parameters": {"asset_name": {"type": "str", "description": "The name of the asset being created"}, "asset_type": {"type": "str", "description": "The type of the asset being created (e.g., raw material, finished product)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the asset being created"}, "location": {"type": "str", "description": "The current location of the asset being created"}}, "required": ["asset_name", "asset_type", "manufacturer"], "responses": {"asset_id": {"type": "str", "description": "The ID assigned to the newly created asset"}, "message": {"type": "str", "description": "A message indicating the success or failure of the asset creation"}}}
{"api_name": "generateRandomColor", "api_description": "Generate a random color code", "field": "Web Development/Front-end development", "parameters": {}, "required": [], "responses": {"color_code": {"type": "str", "description": "The randomly generated color code"}}}
{"api_name": "getCSSProperty", "api_description": "Retrieve the value of a CSS property for a given element", "field": "Web Development/Front-end development", "parameters": {"element": {"type": "str", "description": "The CSS selector of the element you want to retrieve the property value from (e.g., .my-class, #my-id)"}, "property": {"type": "str", "description": "The CSS property name you want to retrieve the value of (e.g., color, font-size)"}}, "required": ["element", "property"], "responses": {"value": {"type": "str", "description": "The value of the CSS property for the specified element"}}}
{"api_name": "countDOMElements", "api_description": "Count the number of DOM elements matching a given selector", "field": "Web Development/Front-end development", "parameters": {"selector": {"type": "str", "description": "The CSS selector of the elements you want to count (e.g., .my-class, #my-id)"}}, "required": ["selector"], "responses": {"count": {"type": "int", "description": "The number of DOM elements matching the specified selector"}}}
{"api_name": "fetchAPI", "api_description": "Make an HTTP request to fetch data from an API", "field": "Web Development/Front-end development", "parameters": {"url": {"type": "str", "description": "The URL of the API endpoint you want to fetch data from (e.g., https://api.example.com/data)"}, "method": {"type": "str", "description": "The HTTP method to use for the request (e.g., GET, POST)"}, "headers": {"type": "str", "description": "Additional headers to include in the request (e.g., {'Content-Type': 'application/json'})"}}, "required": ["url", "method"], "responses": {"data": {"type": "str", "description": "The response data from the API"}}}
{"api_name": "convertToRGB", "api_description": "Convert a color code to its RGB representation", "field": "Web Development/Front-end development", "parameters": {"color_code": {"type": "str", "description": "The color code to be converted (e.g., #FF0000, rgb(255, 0, 0), hsl(0, 100%, 50%))"}}, "required": ["color_code"], "responses": {"rgb": {"type": "str", "description": "The RGB representation of the color code"}}}
{"api_name": "checkMobileDevice", "api_description": "Check if the user is accessing the website from a mobile device", "field": "Web Development/Front-end development", "parameters": {}, "required": [], "responses": {"is_mobile": {"type": "bool", "description": "Indicates whether the user is using a mobile device"}}}
{"api_name": "getPostsByCategory", "api_description": "Retrieve posts based on category", "field": "Web Development/Full-stack development", "parameters": {"category": {"type": "str", "description": "The category of the posts to retrieve (e.g., technology, sports, news)"}}, "required": ["category"], "responses": {"posts": {"type": "str", "description": "The list of posts matching the specified category"}}}
{"api_name": "updateUserEmail", "api_description": "Update user's email address", "field": "Web Development/Full-stack development", "parameters": {"user_id": {"type": "int", "description": "The ID of the user"}, "email": {"type": "str", "description": "The new email address for the user"}}, "required": ["user_id", "email"], "responses": {"success": {"type": "bool", "description": "A boolean value indicating whether the email update was successful or not"}}}
{"api_name": "checkDeviceType", "api_description": "Check the type of device (mobile, tablet, desktop) accessing the website.", "field": "Web Development/Responsive design", "parameters": {}, "required": [], "responses": {"device_type": {"type": "str", "description": "The type of device accessing the website (e.g., mobile, tablet, desktop)"}}}
{"api_name": "checkResponsiveness", "api_description": "Check if a website has responsive design", "field": "Web Development/Responsive design", "parameters": {"website_url": {"type": "str", "description": "The URL of the website to be checked"}}, "required": ["website_url"], "responses": {"is_responsive": {"type": "bool", "description": "Indicates if the website has responsive design"}}}
{"api_name": "getViewportSize", "api_description": "Retrieve viewport size information", "field": "Web Development/Responsive design", "parameters": {}, "required": [], "responses": {"width": {"type": "int", "description": "The width of the viewport in pixels"}, "height": {"type": "int", "description": "The height of the viewport in pixels"}}}
{"api_name": "getBreakpoints", "api_description": "Retrieve breakpoints used for responsive design", "field": "Web Development/Responsive design", "parameters": {}, "required": [], "responses": {"breakpoints": {"type": "str", "description": "A list of breakpoints used for responsive design"}}}
{"api_name": "optimizeWebsiteForMobile", "api_description": "Optimize the website design for mobile devices to improve user experience", "field": "Web Development/Responsive design", "parameters": {"website_url": {"type": "str", "description": "The URL of the website you want to optimize"}}, "required": ["website_url"], "responses": {"optimized_url": {"type": "str", "description": "The optimized URL of the website for mobile devices"}}}
{"api_name": "getViewportWidth", "api_description": "Retrieve the width of the viewport on the user's device", "field": "Web Development/Responsive design", "parameters": {}, "required": [], "responses": {"viewport_width": {"type": "int", "description": "The width of the viewport in pixels"}}}
{"api_name": "checkoutCart", "api_description": "Proceed to checkout and place an order", "field": "Web Development/E-commerce development", "parameters": {"user_id": {"type": "int", "description": "The ID of the user placing the order"}, "payment_method": {"type": "str", "description": "The chosen payment method for the order"}, "shipping_address": {"type": "str", "description": "The shipping address for the order"}, "coupon_code": {"type": "str", "description": "The coupon code to apply for the order"}}, "required": ["user_id", "payment_method", "shipping_address"], "responses": {"order_id": {"type": "int", "description": "The ID of the created order"}, "total_price": {"type": "float", "description": "The total price of the order"}, "message": {"type": "str", "description": "A message indicating the result of the order placement"}}}
{"api_name": "connectToDatabase", "api_description": "Establish a connection to a database", "field": "Web Development/Database management", "parameters": {"host": {"type": "str", "description": "The host name or IP address of the database server"}, "port": {"type": "int", "description": "The port number of the database server"}, "username": {"type": "str", "description": "The username for database authentication"}, "password": {"type": "str", "description": "The password for database authentication"}, "database": {"type": "str", "description": "The name of the database to connect to"}}, "required": ["host", "port", "username", "password", "database"], "responses": {"success": {"type": "bool", "description": "Indicates whether the connection to the database was successful"}}}
{"api_name": "validateInput", "api_description": "Validate user input for potential security vulnerabilities", "field": "Web Development/Web security", "parameters": {"input": {"type": "str", "description": "The user input to be validated"}}, "required": ["input"], "responses": {"is_valid": {"type": "bool", "description": "A boolean value indicating whether the input is valid or not"}, "sanitized_input": {"type": "str", "description": "The sanitized version of the input (removed potential security vulnerabilities)"}}}
{"api_name": "checkSSLValidity", "api_description": "Check the SSL certificate validity of a website", "field": "Web Development/Web security", "parameters": {"website": {"type": "str", "description": "The URL of the website to be checked"}}, "required": ["website"], "responses": {"validity": {"type": "bool", "description": "True if the SSL certificate is valid, False otherwise"}}}
{"api_name": "getWCAGGuidelines", "api_description": "Retrieve Web Content Accessibility Guidelines (WCAG) information", "field": "Web Development/Web accessibility", "parameters": {}, "required": [], "responses": {"guidelines": {"type": "str", "description": "The WCAG guidelines for developing accessible websites"}}}
{"api_name": "getAccessibleColors", "api_description": "Retrieve accessible color combinations for web design", "field": "Web Development/Web accessibility", "parameters": {}, "required": [], "responses": {"color_combinations": {"type": "str", "description": "Different color combinations that meet WCAG criteria for accessibility"}}}
{"api_name": "debugCode", "api_description": "Debug the code and identify errors", "field": "Web Development/Testing and debugging", "parameters": {"code": {"type": "str", "description": "The code snippet that needs debugging"}}, "required": ["code"], "responses": {"debug_output": {"type": "str", "description": "The output after debugging the code"}, "errors": {"type": "str", "description": "The errors detected during debugging"}}}
{"api_name": "logErrors", "api_description": "Log errors occurring during code execution", "field": "Web Development/Testing and debugging", "parameters": {"error_message": {"type": "str", "description": "The error message to be logged"}}, "required": ["error_message"], "responses": {"success": {"type": "bool", "description": "Indicates whether the error was logged successfully"}}}
{"api_name": "testWebsite", "api_description": "Test a website for errors and bugs", "field": "Web Development/Testing and debugging", "parameters": {"website_url": {"type": "str", "description": "The URL of the website you want to test for errors"}}, "required": ["website_url"], "responses": {"errors_found": {"type": "int", "description": "The number of errors and bugs found during the test"}, "error_details": {"type": "str", "description": "Detailed information about the errors and bugs found"}}}
{"api_name": "deployWebsite", "api_description": "Deploy a website to a web hosting server", "field": "Web Development/Web hosting and deployment", "parameters": {"website_name": {"type": "str", "description": "The name of the website to be deployed"}, "source_code": {"type": "str", "description": "The path or URL of the source code of the website"}, "server": {"type": "str", "description": "The web hosting server where the website will be deployed"}, "credentials": {"type": "str", "description": "Authentication credentials for accessing the web hosting server"}, "domain": {"type": "str", "description": "The domain name to be associated with the website"}}, "required": ["website_name", "source_code", "server", "credentials"], "responses": {"deployment_status": {"type": "str", "description": "The status of the website deployment (e.g., success, failure)"}, "website_url": {"type": "str", "description": "The URL of the deployed website"}}}
{"api_name": "scaleServer", "api_description": "Scale up or down the resources allocated to a server", "field": "Web Development/Scalability and performance", "parameters": {"server_id": {"type": "str", "description": "The ID of the server you want to scale"}, "resource_type": {"type": "str", "description": "The type of resource to scale (e.g., CPU, memory)"}, "scale_factor": {"type": "float", "description": "The factor by which the resources should be scaled (e.g., 0.5, 2.0)"}, "scale_up": {"type": "bool", "description": "A flag indicating whether to scale up (increase resources) or down (decrease resources)"}}, "required": ["server_id", "resource_type", "scale_factor", "scale_up"], "responses": {"success": {"type": "bool", "description": "A flag indicating whether the scaling operation was successful"}}}
{"api_name": "optimizeDatabase", "api_description": "Optimize the performance of a database in a web application", "field": "Web Development/Scalability and performance", "parameters": {"database_name": {"type": "str", "description": "The name of the database to optimize"}, "optimize_strategy": {"type": "str", "description": "The optimization strategy to use (e.g., index optimization, query optimization)"}, "threshold": {"type": "float", "description": "The threshold value above which the optimization should be performed"}}, "required": ["database_name", "optimize_strategy", "threshold"], "responses": {"success": {"type": "bool", "description": "A flag indicating whether the optimization was successful"}}}
{"api_name": "optimizeScalability", "api_description": "Optimize the scalability and performance of a web application", "field": "Web Development/Scalability and performance", "parameters": {"application_name": {"type": "str", "description": "The name of the web application that needs to be optimized for scalability and performance"}, "traffic_load": {"type": "int", "description": "The current traffic load on the web application"}, "server_count": {"type": "int", "description": "The number of servers currently hosting the web application"}, "database_connections": {"type": "int", "description": "The maximum number of concurrent database connections the web application can handle"}}, "required": ["application_name", "traffic_load"], "responses": {"optimized_server_count": {"type": "int", "description": "The recommended number of servers after optimizing for scalability"}, "optimized_database_connections": {"type": "int", "description": "The recommended maximum number of concurrent database connections after optimizing for scalability"}}}
{"api_name": "logoutUser", "api_description": "Invalidate the user's session token and log them out", "field": "Web Development/User authentication and authorization", "parameters": {"session_token": {"type": "str", "description": "The session token of the user"}}, "required": ["session_token"], "responses": {"success": {"type": "bool", "description": "Indicates whether the logout was successful"}, "message": {"type": "str", "description": "A message providing details about the logout"}}}
{"api_name": "verifyUser", "api_description": "Check if the user's session token is still valid", "field": "Web Development/User authentication and authorization", "parameters": {"session_token": {"type": "str", "description": "The session token of the user"}}, "required": ["session_token"], "responses": {"valid_token": {"type": "bool", "description": "Indicates whether the session token is still valid"}, "username": {"type": "str", "description": "The username associated with the session token"}}}
{"api_name": "createWebPage", "api_description": "Create a new web page", "field": "Software/Web development", "parameters": {"page_name": {"type": "str", "description": "The name of the new web page"}, "layout": {"type": "str", "description": "The layout template to be used for the web page"}, "content": {"type": "str", "description": "The content of the web page"}}, "required": ["page_name", "content"], "responses": {"success": {"type": "bool", "description": "Indicates whether the web page creation was successful"}, "message": {"type": "str", "description": "Additional information about the web page creation process"}}}
{"api_name": "sendHTTPRequest", "api_description": "Send an HTTP request to a specified URL", "field": "Software/Network programming", "parameters": {"url": {"type": "str", "description": "The URL to which you want to send the HTTP request (e.g., https://www.example.com/api, http://localhost:8080)"}}, "required": ["url"], "responses": {"response": {"type": "str", "description": "The response received from the specified URL"}}}
{"api_name": "checkDNSRecord", "api_description": "Check the DNS record of a given domain", "field": "Software/Network programming", "parameters": {"domain": {"type": "str", "description": "The domain for which you want to check the DNS record (e.g., example.com, google.com)"}, "record_type": {"type": "str", "description": "The type of DNS record you want to check (e.g., A, MX, CNAME)"}}, "required": ["domain", "record_type"], "responses": {"record": {"type": "str", "description": "The DNS record of the specified domain"}}}
{"api_name": "updateGameTitle", "api_description": "Update the title of a game", "field": "Software/Game development", "parameters": {"game_id": {"type": "str", "description": "The ID of the game to update"}, "new_title": {"type": "str", "description": "The new title for the game"}}, "required": ["game_id", "new_title"], "responses": {"success": {"type": "bool", "description": "Indicates whether the game title was successfully updated"}}}
{"api_name": "publishGame", "api_description": "Publish a game", "field": "Software/Game development", "parameters": {"game_id": {"type": "str", "description": "The ID of the game to publish"}}, "required": ["game_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the game was successfully published"}}}
{"api_name": "restartSystem", "api_description": "Restart an embedded system", "field": "Software/Embedded systems", "parameters": {"system_id": {"type": "int", "description": "The ID of the embedded system"}}, "required": ["system_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the restart operation was successful"}}}
{"api_name": "upgradeFirmware", "api_description": "Upgrade the firmware of an embedded system", "field": "Software/Embedded systems", "parameters": {"system_id": {"type": "int", "description": "The ID of the embedded system"}, "firmware_file": {"type": "str", "description": "The file path or URL of the firmware file to be used for the upgrade"}}, "required": ["system_id", "firmware_file"], "responses": {"success": {"type": "bool", "description": "Indicates whether the firmware upgrade was successful"}}}
{"api_name": "stopProcess", "api_description": "Stop a running process in the embedded system", "field": "Software/Embedded systems", "parameters": {"process_id": {"type": "int", "description": "The ID of the process to stop"}}, "required": ["process_id"], "responses": {"status": {"type": "str", "description": "The status of the process stop operation"}}}
{"api_name": "runTestAutomation", "api_description": "Run test automation on a software product", "field": "Software/Software testing", "parameters": {"product_name": {"type": "str", "description": "The name of the software product to be tested"}, "test_suite": {"type": "str", "description": "The test suite to be executed"}, "environment": {"type": "str", "description": "The testing environment to be used (e.g., staging, production)"}, "browser": {"type": "str", "description": "The browser in which the tests should be executed (e.g., Chrome, Firefox)"}, "headless_mode": {"type": "bool", "description": "Enable headless mode for test execution"}}, "required": ["product_name", "test_suite"], "responses": {"test_results": {"type": "str", "description": "The results of the test execution in a specific format (e.g., JUnit, Cucumber)"}, "execution_time": {"type": "float", "description": "The time taken to execute the tests in seconds"}}}
{"api_name": "deploySoftware", "api_description": "Deploys a software to a specified environment", "field": "Software/DevOps", "parameters": {"software_name": {"type": "str", "description": "The name of the software to be deployed"}, "environment": {"type": "str", "description": "The environment to which the software will be deployed (e.g., development, testing, production)"}, "version": {"type": "str", "description": "The version of the software to be deployed"}}, "required": ["software_name", "environment"], "responses": {"success": {"type": "bool", "description": "Indicates whether the software deployment was successful"}, "message": {"type": "str", "description": "A message providing information about the software deployment"}}}
{"api_name": "monitorApplication", "api_description": "Monitor the performance and health of a software application", "field": "Software/DevOps", "parameters": {"application_name": {"type": "str", "description": "The name of the application to be monitored"}, "metric": {"type": "str", "description": "The metric to be retrieved. Possible values include: 'CPU', 'Memory', 'Network', 'Response Time'"}}, "required": ["application_name", "metric"], "responses": {"value": {"type": "float", "description": "The value of the specified metric for the application"}, "unit": {"type": "str", "description": "The unit in which the metric value is provided"}}}
{"api_name": "createDeploymentPipeline", "api_description": "Create a deployment pipeline for continuous integration and delivery of software", "field": "Software/DevOps", "parameters": {"repository_url": {"type": "str", "description": "The URL of the software repository"}, "build_script": {"type": "str", "description": "The script for building the software"}, "test_script": {"type": "str", "description": "The script for testing the software"}}, "required": ["repository_url", "build_script", "test_script"], "responses": {"pipeline_id": {"type": "str", "description": "The unique identifier of the created deployment pipeline"}}}
{"api_name": "deployToProduction", "api_description": "Deploy the latest version of the software to the production environment", "field": "Software/DevOps", "parameters": {"pipeline_id": {"type": "str", "description": "The ID of the deployment pipeline"}}, "required": ["pipeline_id"], "responses": {"deployment_status": {"type": "str", "description": "The status of the deployment (e.g., success, failure)"}}}
{"api_name": "rollbackDeployment", "api_description": "Rollback the deployed version of the software to a previous version", "field": "Software/DevOps", "parameters": {"pipeline_id": {"type": "str", "description": "The ID of the deployment pipeline"}, "version": {"type": "str", "description": "The version to which the deployment should be rolled back"}}, "required": ["pipeline_id", "version"], "responses": {"rollback_status": {"type": "str", "description": "The status of the rollback (e.g., success, failure)"}}}
{"api_name": "createComputeInstance", "api_description": "Create a new compute instance in the cloud", "field": "Software/Cloud computing", "parameters": {"instance_name": {"type": "str", "description": "The name of the compute instance"}, "instance_type": {"type": "str", "description": "The type of compute instance to create (e.g., small, medium, large)"}, "image_id": {"type": "str", "description": "The ID of the image to use for the compute instance"}, "network_id": {"type": "str", "description": "The ID of the network to connect the compute instance to"}}, "required": ["instance_name", "instance_type", "image_id", "network_id"], "responses": {"instance_id": {"type": "str", "description": "The ID of the created compute instance"}}}
{"api_name": "connectDevice", "api_description": "Establish a connection with an IoT device", "field": "Software/Internet of Things", "parameters": {"device_id": {"type": "str", "description": "The ID of the IoT device to connect"}, "protocol": {"type": "str", "description": "The protocol to use for communication with the device (e.g., MQTT, HTTP, CoAP)"}, "credentials": {"type": "str", "description": "The credentials required to authenticate the connection"}, "timeout": {"type": "int", "description": "The maximum time to wait for the connection to be established in seconds"}}, "required": ["device_id", "protocol"], "responses": {"success": {"type": "bool", "description": "Indicates whether the connection was successfully established or not"}, "error_message": {"type": "str", "description": "An error message describing the reason for connection failure (if any)"}}}
{"api_name": "controlActuator", "api_description": "Send commands to control an actuator connected to an IoT device", "field": "Software/Internet of Things", "parameters": {"device_id": {"type": "str", "description": "The ID of the IoT device"}, "actuator_id": {"type": "str", "description": "The ID of the actuator to control"}, "command": {"type": "str", "description": "The command to send to the actuator"}}, "required": ["device_id", "actuator_id", "command"], "responses": {"success": {"type": "bool", "description": "Indicates whether the command was successfully executed or not"}, "error_message": {"type": "str", "description": "An error message describing the reason for command execution failure (if any)"}}}
{"api_name": "activateActuator", "api_description": "Activate an actuator connected to the Internet of Things network", "field": "Software/Internet of Things", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the device"}, "actuator_id": {"type": "str", "description": "The unique identifier of the actuator"}}, "required": ["device_id", "actuator_id"], "responses": {"activation_status": {"type": "bool", "description": "Indicates the status of the actuator activation"}}}
{"api_name": "getMousePosition", "api_description": "Retrieve current mouse position", "field": "Software/Human-computer interaction", "parameters": {}, "required": [], "responses": {"x": {"type": "int", "description": "The X-coordinate of the mouse position"}, "y": {"type": "int", "description": "The Y-coordinate of the mouse position"}}}
{"api_name": "moveMouseTo", "api_description": "Move mouse cursor to specified position", "field": "Software/Human-computer interaction", "parameters": {"x": {"type": "int", "description": "The X-coordinate to move the mouse cursor to"}, "y": {"type": "int", "description": "The Y-coordinate to move the mouse cursor to"}}, "required": ["x", "y"], "responses": {"success": {"type": "bool", "description": "Indicates whether the mouse cursor was successfully moved"}}}
{"api_name": "clickMouse", "api_description": "Simulate a mouse click at the current position", "field": "Software/Human-computer interaction", "parameters": {}, "required": [], "responses": {"success": {"type": "bool", "description": "Indicates whether the mouse click was successfully performed"}}}
{"api_name": "scrollPage", "api_description": "Scroll the page by a specified amount", "field": "Software/Human-computer interaction", "parameters": {"amount": {"type": "int", "description": "The amount of scrolling to be performed (e.g., -3, 5, 10)"}}, "required": ["amount"], "responses": {"success": {"type": "bool", "description": "Indicates whether the scrolling was successfully performed"}}}
{"api_name": "getRecommendedFeatures", "api_description": "Retrieve recommended features for improving human-computer interaction", "field": "Software/Human-computer interaction", "parameters": {"user_id": {"type": "str", "description": "The ID of the user for whom you want to get recommended features"}}, "required": ["user_id"], "responses": {"features": {"type": "str", "description": "The recommended features for improving human-computer interaction"}}}
{"api_name": "getLayerAttribute", "api_description": "Retrieve a specific attribute of a GIS layer feature", "field": "Software/Geographic Information Systems (GIS)", "parameters": {"layer_name": {"type": "str", "description": "The name of the GIS layer (e.g., roads, buildings, rivers)"}, "feature_id": {"type": "int", "description": "The ID of the feature in the GIS layer"}, "attribute_name": {"type": "str", "description": "The name of the attribute to retrieve"}}, "required": ["layer_name", "feature_id", "attribute_name"], "responses": {"attribute_value": {"type": "str", "description": "The value of the specified attribute"}}}
{"api_name": "readSensorData", "api_description": "Read sensor data from the embedded device", "field": "Software/Embedded programming", "parameters": {"device_id": {"type": "str", "description": "The ID of the embedded device from which to read sensor data"}, "sensor_type": {"type": "str", "description": "The type of sensor from which to read data (e.g., temperature, humidity)"}, "sampling_rate": {"type": "int", "description": "The sampling rate at which the sensor data should be read (e.g., 1, 5, 10 samples per second)"}}, "required": ["device_id", "sensor_type"], "responses": {"sensor_data": {"type": "float", "description": "The sensor data readings"}, "timestamp": {"type": "str", "description": "The timestamp when the sensor data was read"}}}
{"api_name": "configureGPIO", "api_description": "Configure GPIO pins on the embedded device", "field": "Software/Embedded programming", "parameters": {"device_id": {"type": "str", "description": "The ID of the embedded device to configure GPIO pins"}, "pin_num": {"type": "int", "description": "The number of the GPIO pin to configure"}, "direction": {"type": "str", "description": "The direction of the GPIO pin (e.g., input, output)"}, "pull_up_down": {"type": "str", "description": "The pull-up/down resistor configuration of the GPIO pin (e.g., up, down, none)"}}, "required": ["device_id", "pin_num", "direction"], "responses": {"success": {"type": "bool", "description": "Indicates whether the GPIO pin configuration was successful"}, "message": {"type": "str", "description": "Additional information about the GPIO pin configuration"}}}
{"api_name": "modifyProcessPriority", "api_description": "Modify the priority of a specific process in the real-time system", "field": "Software/Real-time systems", "parameters": {"system_name": {"type": "str", "description": "The name of the real-time system"}, "process_id": {"type": "int", "description": "The ID of the process"}, "priority": {"type": "int", "description": "The new priority value for the process (e.g., 1, 2, 3, ...)"}}, "required": ["system_name", "process_id", "priority"], "responses": {"success": {"type": "bool", "description": "Indicates if the priority modification was successful"}}}
{"api_name": "getSystemTime", "api_description": "Retrieve the current system time", "field": "Software/Real-time systems", "parameters": {}, "required": [], "responses": {"system_time": {"type": "str", "description": "The current system time in the format of HH:MM:SS"}}}
{"api_name": "startTask", "api_description": "Start a new real-time task", "field": "Software/Real-time systems", "parameters": {"task_name": {"type": "str", "description": "The name of the task to be started"}, "priority": {"type": "int", "description": "The priority level of the task (e.g., 1-high, 10-low)"}, "deadline": {"type": "str", "description": "The deadline for the task (e.g., 2022/12/31 23:59:59)"}, "execution_time": {"type": "float", "description": "The execution time required for the task (in seconds)"}}, "required": ["task_name", "deadline", "execution_time"], "responses": {"success": {"type": "bool", "description": "Indicates whether the task started successfully"}}}
{"api_name": "stopTask", "api_description": "Stop an existing real-time task", "field": "Software/Real-time systems", "parameters": {"task_name": {"type": "str", "description": "The name of the task to be stopped"}}, "required": ["task_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the task stopped successfully"}}}
{"api_name": "searchSoftware", "api_description": "Retrieve software information based on search query", "field": "Software/Information retrieval", "parameters": {"query": {"type": "str", "description": "The search query to retrieve software information"}}, "required": ["query"], "responses": {"software_info": {"type": "str", "description": "The information about the software that matches the search query"}}}
{"api_name": "simulateQuantumSystem", "api_description": "Simulate a quantum system", "field": "Software/Quantum computing", "parameters": {"system_size": {"type": "int", "description": "The size of the quantum system (e.g., number of qubits)"}}, "required": ["system_size"], "responses": {"simulation_results": {"type": "str", "description": "The results obtained from simulating the quantum system"}}}
{"api_name": "runQuantumAlgorithm", "api_description": "Run a quantum computing algorithm", "field": "Software/Quantum computing", "parameters": {"algorithm": {"type": "str", "description": "The name of the quantum computing algorithm to be executed (e.g., Shor's algorithm, Grover's algorithm)"}, "qubits": {"type": "int", "description": "The number of qubits required for the algorithm"}, "input_data": {"type": "str", "description": "The input data for the quantum algorithm"}}, "required": ["algorithm", "qubits"], "responses": {"result": {"type": "str", "description": "The result obtained after running the quantum computing algorithm"}}}
{"api_name": "runQuantumProgram", "api_description": "Run a quantum computing program on a quantum computer", "field": "Software/Quantum computing", "parameters": {"program": {"type": "str", "description": "The quantum computing program to be executed"}, "backend": {"type": "str", "description": "The backend on which to run the quantum program (e.g., IBM Quantum, Google Quantum)"}}, "required": ["program", "backend"], "responses": {"result": {"type": "str", "description": "The result of the quantum program execution"}}}
{"api_name": "getAdventureTravelDestination", "api_description": "Retrieve adventure travel destination information", "field": "Travel/Adventure travel", "parameters": {"activity": {"type": "str", "description": "The adventure activity you are interested in (e.g., hiking, rock climbing, scuba diving)"}, "difficulty_level": {"type": "str", "description": "The difficulty level of the adventure activity (e.g., easy, moderate, difficult)"}, "duration": {"type": "int", "description": "The duration of the adventure travel in days"}}, "required": ["activity"], "responses": {"destination": {"type": "str", "description": "The recommended adventure travel destination for the specified activity and difficulty level"}}}
{"api_name": "getTravelExpenses", "api_description": "Retrieve travel expenses information for business travel", "field": "Travel/Business travel", "parameters": {"destination": {"type": "str", "description": "The destination of the business travel (e.g., New York, London, Tokyo)"}, "start_date": {"type": "str", "description": "The start date of the business travel (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date of the business travel (e.g., YYYY-MM-DD)"}}, "required": ["destination", "start_date", "end_date"], "responses": {"expenses": {"type": "float", "description": "The total expenses for the business travel"}}}
{"api_name": "getTourismInfo", "api_description": "Retrieve tourism marketing information", "field": "Travel/Tourism marketing", "parameters": {"location": {"type": "str", "description": "The location for which you want to get tourism marketing information (e.g., Paris, Rome, Tokyo)"}, "language": {"type": "str", "description": "The desired language for the tourism marketing content (e.g., English, French, Spanish)"}, "budget": {"type": "float", "description": "The budget for the tourism marketing campaign (e.g., 10000.0, 5000.0, 20000.0)"}, "audience": {"type": "str", "description": "The target audience for the tourism marketing campaign (e.g., families, adventure seekers, millennials)"}, "duration": {"type": "int", "description": "The duration of the tourism marketing campaign in days (e.g., 7, 30, 90)"}}, "required": ["location"], "responses": {"marketing_content": {"type": "str", "description": "The tourism marketing content for the specified location"}, "campaign_cost": {"type": "float", "description": "The cost of the tourism marketing campaign"}, "reach": {"type": "int", "description": "The estimated reach of the tourism marketing campaign"}}}
{"api_name": "getMicroprocessorDetails", "api_description": "Retrieve details of a specific microprocessor", "field": "Hardware/Microprocessors", "parameters": {"microprocessor_name": {"type": "str", "description": "The name of the microprocessor (e.g., Intel Core i7, AMD Ryzen 5)"}, "year_of_release": {"type": "int", "description": "The year of release of the microprocessor"}, "manufacturer": {"type": "str", "description": "The manufacturer of the microprocessor"}}, "required": ["microprocessor_name"], "responses": {"details": {"type": "str", "description": "Detailed information about the specified microprocessor"}}}
{"api_name": "setLEDState", "api_description": "Set the state of an LED on an embedded system", "field": "Hardware/Embedded systems", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the embedded system"}, "led_id": {"type": "int", "description": "The ID of the LED to control"}, "state": {"type": "str", "description": "The desired state of the LED (e.g., on, off)"}}, "required": ["device_id", "led_id", "state"], "responses": {"success": {"type": "bool", "description": "Indicates whether the LED state was successfully set"}}}
{"api_name": "uploadFPGADesign", "api_description": "Upload FPGA design files", "field": "Hardware/FPGA design", "parameters": {"design_file": {"type": "str", "description": "The FPGA design file to be uploaded"}, "target_device": {"type": "str", "description": "The target FPGA device for the design"}, "clock_frequency": {"type": "int", "description": "The desired clock frequency in MHz for the design"}}, "required": ["design_file"], "responses": {"status": {"type": "str", "description": "The status of the upload process", "example": "success"}}}
{"api_name": "runFPGADesign", "api_description": "Run the FPGA design", "field": "Hardware/FPGA design", "parameters": {"design_name": {"type": "str", "description": "The name of the FPGA design to be run"}, "device_id": {"type": "str", "description": "The ID of the FPGA device to run the design on"}, "input_data": {"type": "str", "description": "The input data for the FPGA design"}, "num_iterations": {"type": "int", "description": "The number of iterations to run the design"}}, "required": ["design_name", "device_id"], "responses": {"output_data": {"type": "str", "description": "The output data produced by the FPGA design"}, "status": {"type": "str", "description": "The status of the design execution", "example": "success"}}}
{"api_name": "getFPGADesignStatus", "api_description": "Get the status of a running FPGA design", "field": "Hardware/FPGA design", "parameters": {"design_id": {"type": "str", "description": "The ID of the running FPGA design"}}, "required": ["design_id"], "responses": {"status": {"type": "str", "description": "The current status of the FPGA design", "example": "running"}}}
{"api_name": "testFPGAPerformance", "api_description": "Test the performance of the FPGA design", "field": "Hardware/FPGA design", "parameters": {"test_duration": {"type": "float", "description": "Duration of the performance test in seconds"}, "test_data_size": {"type": "int", "description": "Size of test data in bytes"}}, "required": ["test_duration", "test_data_size"], "responses": {"performance": {"type": "float", "description": "Measured performance of the FPGA design"}}}
{"api_name": "generateFPGADesign", "api_description": "Generate FPGA design for a specific application", "field": "Hardware/FPGA design", "parameters": {"application": {"type": "str", "description": "The specific application for which the FPGA design is to be generated (e.g., image processing, deep learning, cryptography)"}, "performance_requirements": {"type": "str", "description": "The required performance specifications for the FPGA design (e.g., latency, throughput)"}, "resource_constraints": {"type": "str", "description": "The resource constraints for the FPGA design (e.g., number of logic elements, memory requirements)"}}, "required": ["application"], "responses": {"fpga_design": {"type": "str", "description": "The generated FPGA design for the specified application"}}}
{"api_name": "compileFpgaDesign", "api_description": "Compile and synthesize FPGA design", "field": "Hardware/FPGA design", "parameters": {"design_file": {"type": "str", "description": "The path to the FPGA design file to be compiled"}}, "required": ["design_file"], "responses": {"status": {"type": "str", "description": "The compilation status of the FPGA design"}}}
{"api_name": "configureFpgaDesign", "api_description": "Configure FPGA design with custom settings", "field": "Hardware/FPGA design", "parameters": {"settings_file": {"type": "str", "description": "The path to the settings file for configuring the FPGA design"}}, "required": ["settings_file"], "responses": {"status": {"type": "str", "description": "The configuration status of the FPGA design"}}}
{"api_name": "getFpgaTimingReport", "api_description": "Retrieve timing analysis report of FPGA design", "field": "Hardware/FPGA design", "parameters": {}, "required": [], "responses": {"timing_report": {"type": "str", "description": "Timing analysis report of the FPGA design"}}}
{"api_name": "debugHardware", "api_description": "Initiate hardware debugging process", "field": "Hardware/Hardware debugging", "parameters": {"hardware_id": {"type": "str", "description": "The ID of the hardware device to be debugged"}, "debug_level": {"type": "str", "description": "The level of debugging required (e.g., basic, intermediate, advanced)"}, "debug_mode": {"type": "str", "description": "The mode of debugging to be used (e.g., step-by-step, breakpoints, real-time)"}, "log_file": {"type": "str", "description": "The path to the file where the debug logs will be saved"}}, "required": ["hardware_id"], "responses": {"debug_status": {"type": "str", "description": "The current status of the hardware debugging process"}, "log_file_path": {"type": "str", "description": "The absolute path of the debug log file"}}}
{"api_name": "startHardwareDebugging", "api_description": "Start debugging the hardware", "field": "Hardware/Hardware debugging", "parameters": {}, "required": [], "responses": {"status": {"type": "str", "description": "The status of the hardware debugging process"}}}
{"api_name": "setDebugMode", "api_description": "Set the debug mode for the hardware", "field": "Hardware/Hardware debugging", "parameters": {"mode": {"type": "str", "description": "The desired debug mode for the hardware (e.g., single-step mode, breakpoint mode)"}, "breakpoint": {"type": "int", "description": "The specific breakpoint to set (e.g., line number)"}, "target": {"type": "str", "description": "The specific target for debugging (e.g., device name, process name)"}}, "required": ["mode"], "responses": {"status": {"type": "str", "description": "The status of the hardware debugging process"}}}
{"api_name": "processSignal", "api_description": "Process a signal using hardware", "field": "Hardware/Signal processing", "parameters": {"signal_data": {"type": "str", "description": "The input signal data to be processed"}, "processing_type": {"type": "str", "description": "The type of signal processing to be applied (e.g., filtering, modulation)"}, "hardware_device": {"type": "str", "description": "The hardware device used for signal processing (e.g., FPGA, DSP)"}, "sampling_rate": {"type": "int", "description": "The sampling rate of the signal data in Hz"}}, "required": ["signal_data", "processing_type"], "responses": {"processed_signal": {"type": "str", "description": "The processed signal data"}, "processing_time": {"type": "float", "description": "The processing time in seconds"}}}
{"api_name": "analyzeSignal", "api_description": "Analyze a signal using hardware", "field": "Hardware/Signal processing", "parameters": {"signal_data": {"type": "str", "description": "The input signal data to be analyzed"}, "analysis_type": {"type": "str", "description": "The type of signal analysis to be performed (e.g., spectrum analysis, time-domain analysis)"}, "hardware_device": {"type": "str", "description": "The hardware device used for signal analysis (e.g., oscilloscope, spectrum analyzer)"}, "window_size": {"type": "int", "description": "The size of the analysis window in samples"}}, "required": ["signal_data", "analysis_type"], "responses": {"analysis_results": {"type": "str", "description": "The results of the signal analysis"}, "analysis_duration": {"type": "float", "description": "The duration of the analysis in seconds"}}}
{"api_name": "runHardwareTest", "api_description": "Runs a hardware test on a specified device to verify its functionality", "field": "Hardware/Hardware testing and verification", "parameters": {"device_id": {"type": "str", "description": "The unique identifier for the device"}, "test_type": {"type": "str", "description": "The type of test to be performed (e.g., functional, performance)"}, "test_duration": {"type": "int", "description": "The duration of the test in minutes"}}, "required": ["device_id", "test_type"], "responses": {"test_result": {"type": "str", "description": "The result of the hardware test (e.g., pass, fail)"}, "error_message": {"type": "str", "description": "An error message if the test fails"}}}
{"api_name": "getVoltage", "api_description": "Retrieve current voltage information", "field": "Hardware/Analog electronics", "parameters": {"device": {"type": "str", "description": "The device for which you want to get the voltage (e.g., resistor, capacitor, transistor)"}, "measurement_type": {"type": "str", "description": "Specify the type of voltage measurement (e.g., DC, AC)"}}, "required": ["device"], "responses": {"voltage": {"type": "float", "description": "The voltage measured on the specified component"}}}
{"api_name": "getNetworkHardware", "api_description": "Retrieve information about network hardware", "field": "Hardware/Network hardware", "parameters": {"device_type": {"type": "str", "description": "The type of network hardware device (e.g., router, switch, modem)"}, "brand": {"type": "str", "description": "The brand name of the network hardware (e.g., Cisco, Juniper)"}, "model": {"type": "str", "description": "The model number of the network hardware (e.g., XR1234, EX2200)"}, "interface_type": {"type": "str", "description": "The type of interface on the network hardware (e.g., Ethernet, Wi-Fi)"}, "port_number": {"type": "int", "description": "The number of ports on the network hardware"}}, "required": [], "responses": {"device_info": {"type": "str", "description": "Detailed information about the network hardware"}}}
{"api_name": "getMemoryType", "api_description": "Retrieve the type of memory installed in the system", "field": "Hardware/Memory systems", "parameters": {}, "required": [], "responses": {"type": {"type": "str", "description": "The type of memory installed in the system"}}}
{"api_name": "checkMemoryCompatibility", "api_description": "Check memory compatibility of a hardware system", "field": "Hardware/Memory systems", "parameters": {"hardware_model": {"type": "str", "description": "The model of the hardware system for which memory compatibility needs to be checked (e.g., HP ProLiant DL380, Dell PowerEdge R740)"}, "memory_capacity": {"type": "int", "description": "The desired memory capacity to check compatibility for (e.g., 32, 64, 128)"}, "memory_type": {"type": "str", "description": "The type of memory module to check compatibility for (e.g., DDR4, DDR3)"}, "memory_speed": {"type": "str", "description": "The desired speed of the memory module to check compatibility for (e.g., 2133 MHz, 3200 MHz)"}, "ecc_support": {"type": "bool", "description": "Specify if ECC (Error Correcting Code) memory support is required or not"}}, "required": ["hardware_model", "memory_capacity", "memory_type"], "responses": {"compatibility": {"type": "bool", "description": "The compatibility status of the specified memory configuration"}}}
{"api_name": "getRobotModel", "api_description": "Retrieve information about a specific robot model", "field": "Hardware/Robotics hardware", "parameters": {"robot_name": {"type": "str", "description": "The name of the robot model (e.g., Atlas, Pepper, Roomba)"}, "year": {"type": "int", "description": "The year when the robot model was released (e.g., 2015, 2018, 2020)"}}, "required": ["robot_name"], "responses": {"model_description": {"type": "str", "description": "A brief description of the robot model"}, "year_released": {"type": "int", "description": "The year when the robot model was released"}, "manufacturer": {"type": "str", "description": "The manufacturer of the robot model"}}}
{"api_name": "getRobotWeight", "api_description": "Retrieve the weight information of a robot model", "field": "Hardware/Robotics hardware", "parameters": {"robot_name": {"type": "str", "description": "The name of the robot model (e.g., Atlas, Pepper, Roomba)"}, "unit": {"type": "str", "description": "The desired unit for the weight (e.g., kilograms, pounds)"}}, "required": ["robot_name"], "responses": {"weight": {"type": "float", "description": "The weight of the robot model in the specified unit"}, "unit": {"type": "str", "description": "The unit of weight in which the weight is provided"}}}
{"api_name": "getAviationHardwareInfo", "api_description": "Retrieve information about aviation hardware", "field": "Hardware/Aviation hardware", "parameters": {"hardware_type": {"type": "str", "description": "The type of aviation hardware (e.g., aircraft, helicopter, engine)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the aviation hardware"}, "model_number": {"type": "str", "description": "The model number of the aviation hardware"}}, "required": ["hardware_type"], "responses": {"hardware_info": {"type": "str", "description": "Information about the aviation hardware"}}}
{"api_name": "getBiomedicalHardware", "api_description": "Retrieve information about biomedical hardware", "field": "Hardware/Biomedical hardware", "parameters": {"device_type": {"type": "str", "description": "The type of biomedical hardware device (e.g., EKG machine, MRI scanner, pacemaker)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the biomedical hardware"}, "year_of_production": {"type": "int", "description": "The year of production of the biomedical hardware"}}, "required": ["device_type"], "responses": {"device_info": {"type": "str", "description": "Information about the specified biomedical hardware device"}, "manufacturer_info": {"type": "str", "description": "Information about the manufacturer of the biomedical hardware"}}}
{"api_name": "getQuantumComputer", "api_description": "Retrieve information about quantum computers", "field": "Hardware/Quantum computing hardware", "parameters": {"manufacturer": {"type": "str", "description": "The manufacturer of the quantum computer (e.g., IBM, Google, D-Wave)"}, "model": {"type": "str", "description": "The model of the quantum computer (e.g., IBM Q System One, Google Sycamore, D-Wave 2000Q)"}, "architecture": {"type": "str", "description": "The architecture of the quantum computer (e.g., Superconducting qubits, Ion traps, Topological qubits)"}}, "required": [], "responses": {"manufacturer": {"type": "str", "description": "The manufacturer of the quantum computer"}, "model": {"type": "str", "description": "The model of the quantum computer"}, "architecture": {"type": "str", "description": "The architecture of the quantum computer"}, "qubit_count": {"type": "int", "description": "The number of qubits in the quantum computer"}, "maximum_gate_count": {"type": "int", "description": "The maximum number of gates that can be applied to the qubits"}, "connectivity": {"type": "str", "description": "The connectivity between qubits in the quantum computer (e.g., fully connected, grid)"}}}
{"api_name": "customizeChart", "api_description": "Customize the appearance of a chart", "field": "Data Analytics/Data visualization", "parameters": {"chart": {"type": "str", "description": "Chart object obtained from createChart API"}, "title": {"type": "str", "description": "Specify the title of the chart"}, "x_axis_label": {"type": "str", "description": "Label for the x-axis"}, "y_axis_label": {"type": "str", "description": "Label for the y-axis"}, "color_scheme": {"type": "str", "description": "Specify the color scheme for the chart"}}, "required": ["chart"], "responses": {"customized_chart": {"type": "str", "description": "The customized chart object"}}}
{"api_name": "exportChart", "api_description": "Export the chart to a file", "field": "Data Analytics/Data visualization", "parameters": {"chart": {"type": "str", "description": "Chart object to be exported"}, "file_format": {"type": "str", "description": "Specify the file format for export (e.g., PNG, PDF, SVG)"}, "file_name": {"type": "str", "description": "Name of the exported file"}}, "required": ["chart", "file_format"], "responses": {"exported_file": {"type": "str", "description": "Path or URL to the exported file"}}}
{"api_name": "plotScatter", "api_description": "Create a scatter plot of two variables", "field": "Data Analytics/Data visualization", "parameters": {"data": {"type": "str", "description": "The dataset to be visualized"}, "x": {"type": "str", "description": "The variable to be plotted on the x-axis"}, "y": {"type": "str", "description": "The variable to be plotted on the y-axis"}}, "required": ["data", "x", "y"], "responses": {"plot": {"type": "str", "description": "The scatter plot visualization in a file or image format"}}}
{"api_name": "getPrescriptiveAnalysis", "api_description": "Retrieve prescriptive analysis for a given dataset", "field": "Data Analytics/Prescriptive analytics", "parameters": {"dataset": {"type": "str", "description": "The name or ID of the dataset for which you want to get the prescriptive analysis"}, "optimization_goal": {"type": "str", "description": "Specify the optimization goal for the analysis (e.g., maximize profit, minimize cost)"}}, "required": ["dataset"], "responses": {"recommendation": {"type": "str", "description": "The recommended course of action based on the prescriptive analysis"}}}
{"api_name": "getTextSummarization", "api_description": "Generates a summary of a given text", "field": "Data Analytics/Text analytics", "parameters": {"text": {"type": "str", "description": "The text to be summarized"}}, "required": ["text"], "responses": {"summary": {"type": "str", "description": "The summary of the text"}}}
{"api_name": "getSensitiveDataClassification", "api_description": "Retrieve the classification of sensitive data", "field": "Data Analytics/Data governance", "parameters": {"data_source": {"type": "str", "description": "The data source to retrieve the sensitive data classification from"}, "sensitivity_level": {"type": "str", "description": "The desired sensitivity level for the data classification (e.g., high, medium, low)"}}, "required": ["data_source", "sensitivity_level"], "responses": {"classification": {"type": "str", "description": "The classification of sensitive data for the specified data source and sensitivity level"}}}
{"api_name": "exploreData", "api_description": "Perform exploratory data analysis on the given dataset.", "field": "Data Analytics/Exploratory data analysis", "parameters": {"dataset": {"type": "str", "description": "The dataset on which the exploratory data analysis is to be performed."}, "target_variable": {"type": "str", "description": "The variable to be analyzed (e.g., Sales, Age, Temperature)"}, "analysis_type": {"type": "str", "description": "The type of analysis to perform (e.g., summary statistics, data visualization, correlation analysis)"}, "filter": {"type": "str", "description": "The filter condition for the dataset (e.g., age > 18, sales > 1000)"}, "include_missing_values": {"type": "bool", "description": "Specify whether to include missing values in the analysis"}}, "required": ["dataset", "target_variable", "analysis_type"], "responses": {"analysis_result": {"type": "str", "description": "The result of the exploratory data analysis"}}}
{"api_name": "getClickThroughRate", "api_description": "Calculate the click-through rate for a webpage", "field": "Data Analytics/Web analytics", "parameters": {"webpage": {"type": "str", "description": "The webpage for which you want to calculate click-through rate"}, "page_views": {"type": "int", "description": "The number of page views for the webpage"}, "clicks": {"type": "int", "description": "The number of clicks on the webpage"}}, "required": ["webpage", "page_views", "clicks"], "responses": {"click_through_rate": {"type": "float", "description": "The click-through rate for the specified webpage"}}}
{"api_name": "getWebAnalyticsData", "api_description": "Retrieve web analytics data for a given website", "field": "Data Analytics/Web analytics", "parameters": {"website": {"type": "str", "description": "The website for which you want to retrieve the analytics data"}}, "required": ["website"], "responses": {"visitors": {"type": "int", "description": "The number of visitors to the website"}, "page_views": {"type": "int", "description": "The total number of page views on the website"}, "bounce_rate": {"type": "float", "description": "The bounce rate of the website"}}}
{"api_name": "getRaceAndEthnicStudies", "api_description": "Retrieve information about race and ethnic studies", "field": "Cultural Studies/Race and Ethnic Studies", "parameters": {"topic": {"type": "str", "description": "The specific topic you want to gather information about (e.g., stereotypes, discrimination, identity)"}, "region": {"type": "str", "description": "The region or country you are interested in (e.g., United States, Europe, Africa)"}, "timeframe": {"type": "str", "description": "Specify a timeframe for the information (e.g., past 10 years, current decade, historical context)"}}, "required": ["topic"], "responses": {"information": {"type": "str", "description": "The gathered information about the specified topic and region"}, "references": {"type": "str", "description": "References or sources for the information"}}}
{"api_name": "getVisualCultureInfo", "api_description": "Retrieve information about visual culture", "field": "Cultural Studies/Visual Culture Studies", "parameters": {"topic": {"type": "str", "description": "The topic you want to get information about (e.g., modern art, film noir, fashion)"}}, "required": ["topic"], "responses": {"info": {"type": "str", "description": "Information about the visual culture topic"}}}
{"api_name": "analyzeVisualCulture", "api_description": "Analyze visual culture", "field": "Cultural Studies/Visual Culture Studies", "parameters": {"image_file": {"type": "str", "description": "The file path or URL of the image to be analyzed"}}, "required": ["image_file"], "responses": {"analysis_results": {"type": "str", "description": "Results of the visual culture analysis"}}}
{"api_name": "getQueerHistory", "api_description": "Retrieve information about the history of queer studies", "field": "Cultural Studies/Queer Studies", "parameters": {}, "required": [], "responses": {"history": {"type": "str", "description": "The history of queer studies including key events, movements, and contributors"}}}
{"api_name": "getQueerTheories", "api_description": "Retrieve information about key queer theories", "field": "Cultural Studies/Queer Studies", "parameters": {}, "required": [], "responses": {"theories": {"type": "str", "description": "Key queer theories and their concepts and proponents"}}}
{"api_name": "getQueerIdentity", "api_description": "Retrieve information about queer identity and its formation", "field": "Cultural Studies/Queer Studies", "parameters": {}, "required": [], "responses": {"identity": {"type": "str", "description": "Factors influencing queer identity and the formation process"}}}
{"api_name": "getGlobalizationArticles", "api_description": "Retrieve articles related to globalization studies", "field": "Cultural Studies/Globalization Studies", "parameters": {"keywords": {"type": "str", "description": "Keywords for the articles you want to retrieve"}, "year": {"type": "int", "description": "The year when the articles were published"}, "subject": {"type": "str", "description": "The subject of the articles you want to retrieve"}}, "required": ["keywords"], "responses": {"articles": {"type": "str", "description": "A list of articles related to globalization studies"}}}
{"api_name": "getPerformanceInfo", "api_description": "Retrieve performance information", "field": "Cultural Studies/Performance Studies", "parameters": {"performance_name": {"type": "str", "description": "The name of the performance (e.g., Hamlet, Swan Lake, Les Misérables)"}, "venue_location": {"type": "str", "description": "The location of the venue where the performance takes place (e.g., New York, London, Sydney)"}, "start_date": {"type": "str", "description": "The start date of the performance (e.g., 2022-05-20)"}, "end_date": {"type": "str", "description": "The end date of the performance (e.g., 2022-06-10)"}}, "required": ["performance_name", "venue_location"], "responses": {"performance_details": {"type": "str", "description": "Detailed information about the performance (cast, plot, etc.)"}}}
{"api_name": "getCulturalGeography", "api_description": "Retrieve cultural geography information", "field": "Cultural Studies/Cultural Geography", "parameters": {"area": {"type": "str", "description": "The area for which you want to get cultural geography information (e.g., Asia, Europe, North America)"}, "language": {"type": "str", "description": "The desired language for the information (e.g., English, French, Spanish)"}, "culture": {"type": "str", "description": "Specify a culture to get information about (e.g., Chinese, Indian, American)"}, "traditions": {"type": "str", "description": "Specify a tradition to get information about (e.g., food, music, dance)"}}, "required": ["area"], "responses": {"geographical_information": {"type": "str", "description": "The cultural geography information about the specified area, culture, and tradition"}}}
{"api_name": "getCultureOverview", "api_description": "Retrieve an overview of cultural studies", "field": "Cultural Studies/Sociology of Culture", "parameters": {}, "required": [], "responses": {"overview": {"type": "str", "description": "An overview of the concepts and theories in sociology of culture"}}}
{"api_name": "hireEmployee", "api_description": "Hire a new employee", "field": "Business Administration/Human Resources", "parameters": {"name": {"type": "str", "description": "The name of the new employee"}, "position": {"type": "str", "description": "The position of the new employee"}, "salary": {"type": "float", "description": "The salary of the new employee"}}, "required": ["name", "position", "salary"], "responses": {"success": {"type": "bool", "description": "Indicates whether the hiring process was successful"}}}
{"api_name": "getTeamCultureValues", "api_description": "Retrieve the culture values of a team", "field": "Business Administration/Organizational Behavior", "parameters": {"team_id": {"type": "int", "description": "The ID of the team for which you want to get the culture values"}, "time_period": {"type": "str", "description": "The time period for which you want to retrieve the culture values (e.g., last month, current quarter, past year)"}}, "required": ["team_id"], "responses": {"culture_values": {"type": "str", "description": "The culture values of the team (e.g., innovation, collaboration, integrity)"}}}
{"api_name": "getBusinessLawDetails", "api_description": "Retrieve details of a specific business law", "field": "Business Administration/Business Law", "parameters": {"law_name": {"type": "str", "description": "The name or title of the business law you want to retrieve details for (e.g., Contract Law, Intellectual Property Law)"}}, "required": ["law_name"], "responses": {"law_details": {"type": "str", "description": "The details of the specified business law"}}}
{"api_name": "calculateSystemUptime", "api_description": "Calculate the uptime of an information system", "field": "Business Administration/Information Systems", "parameters": {"start_time": {"type": "str", "description": "The start time of the monitoring period (e.g., YYYY-MM-DD HH:MM:SS)"}, "end_time": {"type": "str", "description": "The end time of the monitoring period (e.g., YYYY-MM-DD HH:MM:SS)"}}, "required": ["start_time", "end_time"], "responses": {"uptime": {"type": "float", "description": "The calculated uptime of the system as a percentage"}}}
{"api_name": "updateTaskStatus", "api_description": "Update the status of a task", "field": "Business Administration/Project Management", "parameters": {"task_name": {"type": "str", "description": "The name of the task"}, "status": {"type": "str", "description": "The updated status of the task (e.g., In Progress, Completed)"}}, "required": ["task_name", "status"], "responses": {"message": {"type": "str", "description": "Success message indicating the task status update"}}}
{"api_name": "getBoardMembers", "api_description": "Retrieve information about the members of the corporate board", "field": "Business Administration/Corporate Governance", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to retrieve board members"}, "board_position": {"type": "str", "description": "The position in the board for which you want to retrieve members (e.g., CEO, chairman)"}, "country": {"type": "str", "description": "The country in which the company is located"}}, "required": ["company_name"], "responses": {"board_members": {"type": "str", "description": "The names of the board members of the specified company"}}}
{"api_name": "getScreenplayStructure", "api_description": "Retrieve the structure of a screenplay", "field": "Creative Writing/Screenwriting", "parameters": {"genre": {"type": "str", "description": "The genre of the screenplay (e.g., drama, comedy, thriller)"}, "format": {"type": "str", "description": "The format of the screenplay (e.g., standard, shooting script)"}}, "required": ["genre", "format"], "responses": {"structure": {"type": "str", "description": "The structure of the screenplay"}}}
{"api_name": "getNonFictionWritingTips", "api_description": "Retrieve tips and guidance on non-fiction writing", "field": "Creative Writing/Non-fiction Writing", "parameters": {"topic": {"type": "str", "description": "The specific topic or subject of the non-fiction writing (e.g., history, science, travel)"}, "audience": {"type": "str", "description": "The intended audience for the writing (e.g., children, adults, professionals)"}, "length": {"type": "int", "description": "The desired length in words for the non-fiction content"}, "format": {"type": "str", "description": "The format in which the content will be presented (e.g., article, essay, report)"}}, "required": ["topic", "audience"], "responses": {"tips": {"type": "str", "description": "Tips and guidance on non-fiction writing for the given topic and audience"}, "examples": {"type": "str", "description": "Examples of well-written non-fiction content in the chosen format"}}}
{"api_name": "generateScienceFictionStory", "api_description": "Generate a science fiction story", "field": "Creative Writing/Science Fiction", "parameters": {"story_length": {"type": "int", "description": "The desired length of the story in words (e.g., 500, 1000, 2000)"}, "main_characters": {"type": "str", "description": "The main characters of the story (e.g., scientist, alien, robot)"}, "setting": {"type": "str", "description": "The setting of the story (e.g., distant planet, futuristic city, spaceship)"}, "plot_theme": {"type": "str", "description": "The overall theme or plot of the story (e.g., time travel, artificial intelligence, dystopia)"}, "twist_ending": {"type": "bool", "description": "Whether to include a twist ending in the story"}}, "required": ["story_length"], "responses": {"story": {"type": "str", "description": "The generated science fiction story"}}}
{"api_name": "getRomanticPlot", "api_description": "Generate a romantic plot for a story", "field": "Creative Writing/Romance Writing", "parameters": {"setting": {"type": "str", "description": "The setting of the story (e.g., Paris, beach, small town)"}, "protagonist": {"type": "str", "description": "The name of the protagonist character"}, "love_interest": {"type": "str", "description": "The name of the love interest character"}}, "required": ["setting", "protagonist", "love_interest"], "responses": {"plot": {"type": "str", "description": "A romantic plot for the story"}}}
{"api_name": "getChildStory", "api_description": "Retrieve a children's story", "field": "Creative Writing/Children's Writing", "parameters": {"age_group": {"type": "str", "description": "The target age group for the children's story (e.g., 3-5 years, 6-8 years)"}, "theme": {"type": "str", "description": "The theme or topic of the children's story (e.g., animals, friendship, adventure)"}, "length": {"type": "str", "description": "The desired length of the story (e.g., short, medium, long)"}, "language": {"type": "str", "description": "The language of the story (e.g., English, Spanish, French)"}}, "required": ["age_group"], "responses": {"story": {"type": "str", "description": "The children's story that matches the provided parameters"}}}
{"api_name": "generateThrillerPlot", "api_description": "Generate a thriller plot for a story", "field": "Creative Writing/Thriller Writing", "parameters": {"protagonist": {"type": "str", "description": "The name of the main character of the story"}, "antagonist": {"type": "str", "description": "The name of the main villain or adversary in the story"}, "setting": {"type": "str", "description": "The location or environment where the story takes place"}, "twist": {"type": "bool", "description": "Whether to include a plot twist in the story"}}, "required": ["protagonist", "antagonist"], "responses": {"thriller_plot": {"type": "str", "description": "The generated thriller plot for the story"}}}
{"api_name": "createHorrorStory", "api_description": "Generate a horror story", "field": "Creative Writing/Horror Writing", "parameters": {"length": {"type": "int", "description": "The desired length of the horror story in words (e.g., 500, 1000, 2000)"}, "characters": {"type": "int", "description": "The number of characters to include in the horror story (e.g., 2, 5, 10)"}, "setting": {"type": "str", "description": "The setting for the horror story (e.g., abandoned house, dark forest, haunted castle)"}, "theme": {"type": "str", "description": "The main theme or concept of the horror story (e.g., supernatural, psychological, creature)"}}, "required": ["length"], "responses": {"story": {"type": "str", "description": "The generated horror story"}}}
{"api_name": "getHorrorWritingPrompt", "api_description": "Generate a horror writing prompt to inspire your horror story", "field": "Creative Writing/Horror Writing", "parameters": {}, "required": [], "responses": {"prompt": {"type": "str", "description": "A horror writing prompt to stimulate your imagination and creativity"}}}
{"api_name": "getTravelWritingPrompt", "api_description": "Retrieve a travel writing prompt.", "field": "Creative Writing/Travel Writing", "parameters": {}, "required": [], "responses": {"prompt": {"type": "str", "description": "A travel writing prompt to inspire your writing."}}}
{"api_name": "createFlashFiction", "api_description": "Create a piece of flash fiction", "field": "Creative Writing/Flash Fiction Writing", "parameters": {"genre": {"type": "str", "description": "The genre of the flash fiction (e.g., thriller, romance, sci-fi)"}, "word_limit": {"type": "int", "description": "The maximum number of words allowed for the flash fiction"}}, "required": ["genre"], "responses": {"flash_fiction": {"type": "str", "description": "The created flash fiction"}}}
{"api_name": "generateMicrofiction", "api_description": "Generate a piece of microfiction", "field": "Creative Writing/Microfiction", "parameters": {"theme": {"type": "str", "description": "The theme of the microfiction (e.g., love, mystery, fantasy)"}, "word_limit": {"type": "int", "description": "The maximum number of words allowed in the microfiction"}}, "required": ["theme"], "responses": {"microfiction": {"type": "str", "description": "The generated microfiction within the specified word limit"}}}
{"api_name": "generateJoke", "api_description": "Generate a random joke", "field": "Creative Writing/Comedy Writing", "parameters": {}, "required": [], "responses": {"joke": {"type": "str", "description": "A randomly generated joke"}}}
{"api_name": "generatePersonalEssay", "api_description": "Generate a personal essay", "field": "Creative Writing/Personal Essay Writing", "parameters": {"topic": {"type": "str", "description": "The topic of the personal essay (e.g., childhood memories, personal achievements)"}, "length": {"type": "int", "description": "The desired length of the essay in words"}, "tone": {"type": "str", "description": "The desired tone of the essay (e.g., reflective, humorous, emotional)"}, "audience": {"type": "str", "description": "The target audience for the essay (e.g., general readers, college admissions)"}}, "required": ["topic"], "responses": {"essay": {"type": "str", "description": "The generated personal essay"}}}
{"api_name": "getEssayTopic", "api_description": "Retrieve a topic for personal essay writing", "field": "Creative Writing/Personal Essay Writing", "parameters": {"length": {"type": "str", "description": "Specify the desired length of the essay (e.g., 500 words, 1000 words, 1500 words)"}}, "required": [], "responses": {"topic": {"type": "str", "description": "A suggested topic for personal essay writing"}}}
{"api_name": "getEssayExamples", "api_description": "Retrieve examples of personal essays", "field": "Creative Writing/Personal Essay Writing", "parameters": {}, "required": [], "responses": {"examples": {"type": "str", "description": "Examples of well-written personal essays"}}}
{"api_name": "writeBlog", "api_description": "Create a blog post", "field": "Creative Writing/Blog Writing", "parameters": {"title": {"type": "str", "description": "The title of the blog post"}, "content": {"type": "str", "description": "The content of the blog post"}, "author": {"type": "str", "description": "The name of the author of the blog post"}}, "required": ["title", "content", "author"], "responses": {"success": {"type": "bool", "description": "Indicates if the blog post was created successfully", "example": true}, "blog_id": {"type": "str", "description": "The unique identifier of the created blog post"}}}
{"api_name": "getECG", "api_description": "Retrieve current electrocardiogram (ECG) information", "field": "Medicine/Cardiology", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient for whom you want to get the ECG"}, "time_period": {"type": "str", "description": "Specify a time period for ECG (e.g., daily, weekly, monthly)"}}, "required": ["patient_id"], "responses": {"ecg_data": {"type": "str", "description": "The electrocardiogram data of the specified patient"}}}
{"api_name": "getEndocrinologyInfo", "api_description": "Retrieve information related to endocrinology", "field": "Medicine/Endocrinology", "parameters": {}, "required": [], "responses": {"info": {"type": "str", "description": "Information about endocrinology"}}}
{"api_name": "getNeonatalJaundiceRisk", "api_description": "Evaluate the risk of neonatal jaundice", "field": "Medicine/Neonatology", "parameters": {"age": {"type": "int", "description": "The age of the newborn in days (e.g., 1, 2, 3, ...)"}, "weight": {"type": "float", "description": "The weight of the newborn in kilograms (e.g., 2.5, 3.1, 3.9, ...)"}}, "required": ["age", "weight"], "responses": {"risk": {"type": "str", "description": "The level of risk for neonatal jaundice (e.g., low, moderate, high)"}}}
{"api_name": "calculateNeonatalFluidRequirements", "api_description": "Calculate the fluid requirements for a neonate", "field": "Medicine/Neonatology", "parameters": {"neonate_id": {"type": "str", "description": "The unique identifier of the neonate"}, "weight": {"type": "float", "description": "The weight of the neonate in kilograms"}, "age": {"type": "int", "description": "The age of the neonate in days"}}, "required": ["neonate_id", "weight", "age"], "responses": {"fluid_requirements": {"type": "float", "description": "The calculated fluid requirements for the neonate in milliliters per day"}}}
{"api_name": "recordNeonatalWeight", "api_description": "Record the weight of a neonate", "field": "Medicine/Neonatology", "parameters": {"patient_id": {"type": "str", "description": "Unique identifier for the neonate"}, "weight": {"type": "float", "description": "Weight of the neonate in grams"}}, "required": ["patient_id", "weight"], "responses": {"success": {"type": "bool", "description": "Indicates if the weight was successfully recorded"}}}
{"api_name": "calculateNeonatalGestationalAge", "api_description": "Calculate the gestational age of a neonate", "field": "Medicine/Neonatology", "parameters": {"birth_date": {"type": "str", "description": "Date of birth of the neonate (YYYY-MM-DD)"}, "due_date": {"type": "str", "description": "Due date of the neonate (YYYY-MM-DD)"}}, "required": ["birth_date", "due_date"], "responses": {"gestational_age": {"type": "int", "description": "Gestational age of the neonate in weeks"}}}
{"api_name": "calculateAPGARScore", "api_description": "Calculate the APGAR score of a newborn", "field": "Medicine/Neonatology", "parameters": {"heart_rate": {"type": "int", "description": "The heart rate of the newborn in beats per minute"}, "respiratory_rate": {"type": "int", "description": "The respiratory rate of the newborn in breaths per minute"}, "muscle_tone": {"type": "int", "description": "The muscle tone of the newborn (0-2)"}, "reflex_irritability": {"type": "int", "description": "The reflex irritability of the newborn (0-2)"}, "color": {"type": "str", "description": "The color of the newborn (e.g., 'pink', 'blue', 'pale')"}}, "required": ["heart_rate", "respiratory_rate", "muscle_tone", "reflex_irritability", "color"], "responses": {"apg_score": {"type": "int", "description": "The APGAR score of the newborn (0-10)"}}}
{"api_name": "calcualateBilirubinLevel", "api_description": "Calculate the bilirubin level of a newborn", "field": "Medicine/Neonatology", "parameters": {"age": {"type": "int", "description": "The age of the newborn in days"}, "weight": {"type": "float", "description": "The weight of the newborn in kilograms"}}, "required": ["age", "weight"], "responses": {"bilirubin_level": {"type": "float", "description": "The bilirubin level of the newborn in mg/dL"}}}
{"api_name": "getBrainScan", "api_description": "Retrieve brain scan image", "field": "Medicine/Neurology", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "scan_type": {"type": "str", "description": "The type of brain scan required (e.g., MRI, CT scan)"}}, "required": ["patient_id", "scan_type"], "responses": {"scan_image": {"type": "str", "description": "The brain scan image in JPG format"}, "scan_date": {"type": "str", "description": "The date when the scan was taken"}}}
{"api_name": "getNeurologicalDisorderInfo", "api_description": "Retrieve information about a specific neurological disorder", "field": "Medicine/Neurology", "parameters": {"disorder_name": {"type": "str", "description": "The name of the neurological disorder for which you want to retrieve information (e.g., Alzheimer's, Parkinson's)"}, "patient_age": {"type": "int", "description": "The age of the patient diagnosed with the neurological disorder"}}, "required": ["disorder_name"], "responses": {"symptoms": {"type": "str", "description": "The common symptoms associated with the specified neurological disorder"}, "treatment_options": {"type": "str", "description": "The recommended treatment options for the specified neurological disorder"}, "support_groups": {"type": "str", "description": "Support groups and resources available for individuals with the specified neurological disorder"}}}
{"api_name": "getPsychiatricDiagnosis", "api_description": "Retrieve psychiatric diagnosis based on patient symptoms", "field": "Medicine/Psychiatry", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient"}, "symptoms": {"type": "str", "description": "The symptoms described by the patient"}}, "required": ["patient_id", "symptoms"], "responses": {"diagnosis": {"type": "str", "description": "The psychiatric diagnosis for the patient"}}}
{"api_name": "getMedicationOptions", "api_description": "Retrieve medication options for treating psychiatric disorders", "field": "Medicine/Psychiatry", "parameters": {"disorder": {"type": "str", "description": "The psychiatric disorder for which medication options are needed"}}, "required": ["disorder"], "responses": {"medications": {"type": "str", "description": "The available medication options for treating the psychiatric disorder"}}}
{"api_name": "getPatientProfile", "api_description": "Retrieve patient profile information", "field": "Nursing/Pediatric Nursing", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient you want to get the profile for"}, "name": {"type": "str", "description": "The name of the patient"}}, "required": ["patient_id"], "responses": {"patient_profile": {"type": "str", "description": "The profile of the patient"}}}
{"api_name": "therapeuticIntervention", "api_description": "Perform therapeutic interventions for patients with psychiatric conditions", "field": "Nursing/Psychiatric Nursing", "parameters": {"patient_id": {"type": "str", "description": "The unique identification number of the patient"}, "intervention_type": {"type": "str", "description": "The type of therapeutic intervention to be performed (e.g., art therapy, cognitive-behavioral therapy)"}}, "required": ["patient_id", "intervention_type"], "responses": {"intervention_result": {"type": "str", "description": "The result or outcome of the therapeutic intervention"}}}
{"api_name": "getPsychiatricNursingPatient", "api_description": "Retrieve information about a psychiatric nursing patient", "field": "Nursing/Psychiatric Nursing", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient (e.g., John123, Mary456)"}, "admission_date": {"type": "str", "description": "The date of admission for the patient (e.g., 2022-05-10)"}, "care_team": {"type": "str", "description": "The care team responsible for the patient (e.g., Team A, Team B)"}, "diagnoses": {"type": "str", "description": "The psychiatric diagnoses of the patient (e.g., Schizophrenia, Bipolar Disorder)"}}, "required": ["patient_id", "admission_date"], "responses": {"patient_name": {"type": "str", "description": "The name of the patient"}, "age": {"type": "int", "description": "The age of the patient"}, "assigned_psychiatrist": {"type": "str", "description": "The psychiatrist assigned to the patient"}, "therapies": {"type": "str", "description": "The therapeutic interventions recommended for the patient"}}}
{"api_name": "getNeurologicalCondition", "api_description": "Retrieve the neurological condition of a patient", "field": "Nursing/Neurological Nursing", "parameters": {"patient_id": {"type": "str", "description": "ID of the patient for whom you want to get the neurological condition"}, "date": {"type": "str", "description": "The date for which you want to retrieve the neurological condition (e.g., 2022-01-01)"}, "time": {"type": "str", "description": "The time of day for which you want to retrieve the neurological condition (e.g., morning, afternoon, evening)"}}, "required": ["patient_id"], "responses": {"level_of_consciousness": {"type": "str", "description": "The level of consciousness of the patient (e.g., alert, drowsy, unconscious)"}, "pupil_reactivity": {"type": "str", "description": "The reactivity of the patient's pupils to light (e.g., reactive, non-reactive)"}, "motor_response": {"type": "str", "description": "The motor response of the patient (e.g., purposeful, non-purposeful, absent)"}}}
{"api_name": "getRehabilitationNursingAssessment", "api_description": "Retrieve the assessment information for rehabilitation nursing", "field": "Nursing/Rehabilitation Nursing", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient undergoing rehabilitation"}, "date": {"type": "str", "description": "The date of the assessment in the format of YYYY-MM-DD"}}, "required": ["patient_id", "date"], "responses": {"assessment_data": {"type": "str", "description": "The assessment data for rehabilitation nursing"}}}
{"api_name": "getRehabilitationPlan", "api_description": "Retrieve a rehabilitation plan for a patient", "field": "Nursing/Rehabilitation Nursing", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient for whom you want to retrieve the rehabilitation plan"}, "injury_type": {"type": "str", "description": "The type of injury or condition for which the rehabilitation plan is needed"}, "level_of_functionality": {"type": "str", "description": "The current level of functionality of the patient (e.g., fully independent, partially dependent, bedridden)"}, "treatment_goal": {"type": "str", "description": "The desired treatment goal for the rehabilitation plan (e.g., pain management, mobility improvement, strength building)"}}, "required": ["patient_id", "injury_type"], "responses": {"rehabilitation_plan": {"type": "str", "description": "The rehabilitation plan for the specified patient"}}}
{"api_name": "calculateNursingHours", "api_description": "Calculate the total number of nursing hours required for a community health nursing program", "field": "Nursing/Community Health Nursing", "parameters": {"number_of_patients": {"type": "int", "description": "The total number of patients in the community"}, "hours_per_patient": {"type": "int", "description": "The average number of nursing hours required per patient"}, "visits_per_patient": {"type": "int", "description": "The average number of visits per patient"}}, "required": ["number_of_patients"], "responses": {"total_nursing_hours": {"type": "int", "description": "The total number of nursing hours required for the community health nursing program"}}}
{"api_name": "emergencyAssessment", "api_description": "Perform an emergency assessment on a patient", "field": "Nursing/Emergency Nursing", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient being assessed"}, "symptoms": {"type": "str", "description": "Symptoms exhibited by the patient (e.g., chest pain, shortness of breath)"}, "vital_signs": {"type": "str", "description": "Vital signs of the patient (e.g., heart rate, blood pressure)"}, "allergies": {"type": "str", "description": "Any known allergies of the patient"}}, "required": ["patient_id", "symptoms"], "responses": {"assessment_result": {"type": "str", "description": "The result of the emergency assessment"}}}
{"api_name": "getSurgicalNursingInformation", "api_description": "Retrieve information related to surgical nursing", "field": "Nursing/Surgical Nursing", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient in the surgical unit"}, "procedure_type": {"type": "str", "description": "The type of surgical procedure being performed on the patient"}, "nurse_id": {"type": "str", "description": "The unique identifier of the nurse providing surgical care"}}, "required": ["patient_id", "procedure_type"], "responses": {"patient_name": {"type": "str", "description": "The name of the patient in the surgical unit"}, "surgical_team": {"type": "str", "description": "The names of the healthcare professionals involved in the surgical team"}, "surgical_notes": {"type": "str", "description": "Detailed notes regarding the surgical procedure and post-operative care"}}}
{"api_name": "recordSurgicalNursingTask", "api_description": "Record a surgical nursing task", "field": "Nursing/Surgical Nursing", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient for whom the surgical nursing task is recorded"}, "task": {"type": "str", "description": "The description of the surgical nursing task (e.g., wound dressing, post-operative care)"}}, "required": ["patient_id", "task"], "responses": {"success": {"type": "bool", "description": "Indicates whether the surgical nursing task was successfully recorded"}}}
{"api_name": "getPalliativeCareNursingInfo", "api_description": "Retrieve information on palliative care nursing", "field": "Nursing/Palliative Care Nursing", "parameters": {}, "required": [], "responses": {"info": {"type": "str", "description": "Information on palliative care nursing"}}}
{"api_name": "getHandHygieneTechniques", "api_description": "Retrieve information about hand hygiene techniques in infection control nursing", "field": "Nursing/Infection Control Nursing", "parameters": {}, "required": [], "responses": {"hand_hygiene_techniques": {"type": "str", "description": "Different hand hygiene techniques for infection control nursing"}}}
{"api_name": "infectionControlNursing", "api_description": "Provides information on infection control nursing practices", "field": "Nursing/Infection Control Nursing", "parameters": {"patient_type": {"type": "str", "description": "The type of patient requiring infection control (e.g., adult, pediatric, geriatric)"}, "infection_type": {"type": "str", "description": "The type of infection being treated or prevented (e.g., surgical site infection, urinary tract infection, respiratory infection)"}, "intervention": {"type": "str", "description": "The specific intervention or measure to be taken for infection control (e.g., hand hygiene, isolation precautions, wound dressing)"}}, "required": ["patient_type", "infection_type"], "responses": {"guidelines": {"type": "str", "description": "Provides guidelines and recommendations for infection control"}, "best_practices": {"type": "str", "description": "Provides best practices in infection control nursing"}}}
{"api_name": "checkHandHygiene", "api_description": "Check whether proper hand hygiene is being practiced", "field": "Nursing/Infection Control Nursing", "parameters": {"location": {"type": "str", "description": "The location where hand hygiene is being checked (e.g., patient's room, nurse's station)"}, "staff_id": {"type": "str", "description": "The ID of the staff member performing the hand hygiene check (e.g., nurse ID)"}, "observation_duration": {"type": "int", "description": "The duration of the observation in minutes"}}, "required": ["location", "staff_id", "observation_duration"], "responses": {"hand_hygiene_compliance": {"type": "float", "description": "The percentage of staff members compliant with hand hygiene protocols"}}}
{"api_name": "getInfectionControlNursingGuidelines", "api_description": "Retrieve infection control nursing guidelines", "field": "Nursing/Infection Control Nursing", "parameters": {}, "required": [], "responses": {"guidelines": {"type": "str", "description": "The infection control nursing guidelines for preventing and managing infections"}}}
{"api_name": "recordPatientActivity", "api_description": "Record the activity levels of a patient", "field": "Nursing/Nursing Informatics", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "steps": {"type": "int", "description": "The number of steps taken by the patient"}, "calories_burned": {"type": "int", "description": "The number of calories burned by the patient"}, "duration": {"type": "int", "description": "The duration of the activity in minutes"}}, "required": ["patient_id", "steps"], "responses": {"success": {"type": "bool", "description": "Indicates if the activity was successfully recorded"}}}
{"api_name": "searchCriminalRecords", "api_description": "Search for criminal records of individuals", "field": "Criminal Justice/Law Enforcement", "parameters": {"name": {"type": "str", "description": "The name of the individual whose criminal records you want to search (e.g., John Smith)"}, "date_of_birth": {"type": "str", "description": "The date of birth of the individual whose criminal records you want to search (e.g., 1985-07-15)"}, "location": {"type": "str", "description": "The location where the individual's criminal records should be searched (e.g., New York, Los Angeles)"}, "case_type": {"type": "str", "description": "Specify a case type to narrow down the search results (e.g., theft, assault)"}, "minimum_severity": {"type": "str", "description": "Specify a minimum severity level for the cases (e.g., low, medium, high)"}, "limit": {"type": "int", "description": "Specify the maximum number of results to be returned (e.g., 10)"}}, "required": ["name", "location"], "responses": {"criminal_records": {"type": "str", "description": "The criminal records of the individual"}}}
{"api_name": "analyzeForensicEvidence", "api_description": "Analyze forensic evidence for criminal investigations", "field": "Criminal Justice/Forensic Science", "parameters": {"evidence": {"type": "str", "description": "The type of forensic evidence to be analyzed (e.g., fingerprints, DNA, ballistics)"}, "crime_scene": {"type": "str", "description": "The location of the crime scene where the evidence was collected"}, "analysis_type": {"type": "str", "description": "The type of analysis to be performed on the evidence (e.g., comparison, identification)"}, "conclusion": {"type": "bool", "description": "Determine whether the evidence supports the conclusion of the investigation"}}, "required": ["evidence", "crime_scene"], "responses": {"analysis_results": {"type": "str", "description": "The results of the forensic analysis"}, "conclusion": {"type": "str", "description": "The conclusion drawn from the analysis"}}}
{"api_name": "analyzeFingerprints", "api_description": "Analyze fingerprints for forensic purposes", "field": "Criminal Justice/Forensic Science", "parameters": {"fingerprint_image": {"type": "str", "description": "The image of the fingerprint to be analyzed"}, "database": {"type": "str", "description": "The forensic database to compare the fingerprint against (e.g., national database, local database)"}}, "required": ["fingerprint_image"], "responses": {"match": {"type": "bool", "description": "Indicates whether the fingerprint matches any record in the specified database"}}}
{"api_name": "analyzeBallistics", "api_description": "Analyze firearms ballistics for forensic purposes", "field": "Criminal Justice/Forensic Science", "parameters": {"bullet_image": {"type": "str", "description": "The image of the recovered bullet"}, "firearm": {"type": "str", "description": "The type of firearm used (e.g., handgun, rifle)"}, "database": {"type": "str", "description": "The ballistics database to compare the evidence against (e.g., national database, local database)"}}, "required": ["bullet_image", "firearm"], "responses": {"match": {"type": "bool", "description": "Indicates whether the ballistics match any record in the specified database"}}}
{"api_name": "getJuvenileCases", "api_description": "Retrieve information about juvenile criminal cases", "field": "Criminal Justice/Juvenile Justice", "parameters": {"location": {"type": "str", "description": "The location for which you want to get juvenile cases information (e.g., state, city)"}, "crime_type": {"type": "str", "description": "Specify a type of crime for juvenile cases (e.g., theft, assault)"}, "year": {"type": "int", "description": "Specify a particular year for juvenile cases"}}, "required": ["location"], "responses": {"cases": {"type": "int", "description": "The number of juvenile cases at the specified location"}, "age_range": {"type": "str", "description": "The age range of the juveniles involved in the cases"}}}
{"api_name": "getVictimInfo", "api_description": "Retrieve information about a crime victim", "field": "Criminal Justice/Victim Services", "parameters": {"victim_id": {"type": "str", "description": "The unique identifier of the crime victim"}, "victim_name": {"type": "str", "description": "The name of the crime victim"}, "crime_type": {"type": "str", "description": "Type of crime the victim was involved in (e.g., assault, robbery, homicide)"}, "location": {"type": "str", "description": "The location where the crime took place (e.g., city, state)"}, "case_status": {"type": "str", "description": "Status of the criminal case related to the victim (e.g., open, closed)"}}, "required": ["victim_id"], "responses": {"victim_name": {"type": "str", "description": "Name of the crime victim"}, "crime_type": {"type": "str", "description": "Type of crime the victim was involved in"}, "location": {"type": "str", "description": "Location where the crime took place"}, "case_status": {"type": "str", "description": "Status of the criminal case"}}}
{"api_name": "searchProbationer", "api_description": "Search for information about a probationer", "field": "Criminal Justice/Probation and Parole", "parameters": {"name": {"type": "str", "description": "The name of the probationer or parolee"}, "id": {"type": "str", "description": "The unique identifier of the probationer"}, "location": {"type": "str", "description": "The location where the probationer resides"}, "offense": {"type": "str", "description": "The type of offense committed by the probationer"}, "status": {"type": "str", "description": "The current status of the probationer (e.g., active, inactive, terminated)"}, "supervisor": {"type": "str", "description": "The name of the probation officer supervising the probationer"}}, "required": [], "responses": {"probationer_info": {"type": "str", "description": "Information about the probationer, including personal details and case information"}, "probation_status": {"type": "str", "description": "The current status of the probationer"}, "supervisor": {"type": "str", "description": "The name of the probation officer supervising the probationer"}}}
{"api_name": "getBorderWaitTime", "api_description": "Retrieve the current wait time at a border crossing", "field": "Criminal Justice/Homeland Security", "parameters": {"border_crossing": {"type": "str", "description": "The name or location of the border crossing for which you want to get the wait time (e.g., Canada-US border, Mexico-US border)"}, "direction": {"type": "str", "description": "The direction of travel (e.g., entering US, exiting US)"}}, "required": ["border_crossing"], "responses": {"wait_time": {"type": "int", "description": "The current wait time in minutes at the specified border crossing"}}}
{"api_name": "getTerroristThreatLevel", "api_description": "Retrieve the current terrorist threat level for a specific location", "field": "Criminal Justice/Homeland Security", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the terrorist threat level (e.g., New York City, Washington D.C., London)"}}, "required": ["location"], "responses": {"threat_level": {"type": "int", "description": "The current terrorist threat level at the specified location. Ranges from 1 (low) to 5 (critical)"}}}
{"api_name": "getInmateCount", "api_description": "Retrieve the current count of inmates in a prison facility", "field": "Criminal Justice/Prison Administration", "parameters": {"facility_id": {"type": "str", "description": "The unique identifier of the prison facility"}}, "required": ["facility_id"], "responses": {"count": {"type": "int", "description": "The current count of inmates in the specified facility"}}}
{"api_name": "createPoliceOfficer", "api_description": "Create a new police officer in the police administration", "field": "Criminal Justice/Police Administration", "parameters": {"name": {"type": "str", "description": "The name of the police officer"}, "badge_number": {"type": "str", "description": "The badge number of the police officer"}, "rank": {"type": "str", "description": "The rank of the police officer"}, "department": {"type": "str", "description": "The department to which the police officer belongs"}, "shift": {"type": "str", "description": "The shift timings of the police officer"}}, "required": ["name", "badge_number", "rank"], "responses": {"success": {"type": "bool", "description": "Indicates if the police officer creation was successful"}, "message": {"type": "str", "description": "A message describing the result of the police officer creation"}}}
{"api_name": "getMalwareAnalysis", "api_description": "Retrieve analysis of a malware", "field": "Criminal Justice/Cybersecurity", "parameters": {"file_path": {"type": "str", "description": "The path to the file for malware analysis (e.g., C:/Users/John/Desktop/malware.exe)"}, "hash_type": {"type": "str", "description": "Specify the type of hash for the file (e.g., MD5, SHA1, SHA256)"}, "deep_scan": {"type": "bool", "description": "Perform a deep scan to identify advanced threats (e.g., True, False)"}}, "required": ["file_path"], "responses": {"analysis_report": {"type": "str", "description": "A detailed report of the malware analysis"}}}
{"api_name": "getCybercrimeReport", "api_description": "Retrieve the latest cybercrime report", "field": "Criminal Justice/Cybersecurity", "parameters": {"region": {"type": "str", "description": "The region for which you want to get the cybercrime report (e.g., North America, Europe, Asia)"}, "time_frame": {"type": "str", "description": "Specify a time frame for the report (e.g., this month, last year)"}, "severity_level": {"type": "str", "description": "Specify the severity level of cybercrimes to include in the report (e.g., low, medium, high)"}}, "required": ["region"], "responses": {"report": {"type": "str", "description": "The latest cybercrime report for the specified region and time frame"}}}
{"api_name": "checkAccessRights", "api_description": "Verify access rights of a user for a specific resource", "field": "Criminal Justice/Cybersecurity", "parameters": {"user_id": {"type": "str", "description": "The unique identifier of the user"}, "resource_id": {"type": "str", "description": "The identifier of the resource being accessed"}}, "required": ["user_id", "resource_id"], "responses": {"access_granted": {"type": "bool", "description": "Whether the user has access rights to the specified resource"}}}
{"api_name": "analyzeDrugDistribution", "api_description": "Analyze the distribution patterns of drugs in a specific area", "field": "Criminal Justice/Drug Enforcement", "parameters": {"area": {"type": "str", "description": "The area for which you want to analyze the drug distribution (e.g., city, county, state)"}, "year": {"type": "int", "description": "The year for which you want to analyze the drug distribution"}}, "required": ["area", "year"], "responses": {"distribution_data": {"type": "str", "description": "Data and statistics regarding the drug distribution in the specified area and year"}}}
{"api_name": "getWhiteCollarCrimeStatistics", "api_description": "Retrieve statistics on white-collar crimes in a given jurisdiction", "field": "Criminal Justice/White-Collar Crime", "parameters": {"jurisdiction": {"type": "str", "description": "The jurisdiction for which you want to get the statistics (e.g., country, state, city)"}, "time_period": {"type": "str", "description": "Specify a time period for the statistics (e.g., yearly, quarterly)"}, "crime_type": {"type": "str", "description": "Specify a type of white-collar crime to filter the statistics (e.g., fraud, embezzlement)"}}, "required": ["jurisdiction"], "responses": {"total_cases": {"type": "int", "description": "The total number of white-collar crime cases in the specified jurisdiction and time period"}, "crime_rate": {"type": "float", "description": "The rate of white-collar crimes per capita in the specified jurisdiction and time period"}}}
{"api_name": "getTerrorismStatistics", "api_description": "Retrieve terrorism statistics", "field": "Criminal Justice/Terrorism Studies", "parameters": {"country": {"type": "str", "description": "The country for which you want to get terrorism statistics (e.g., United States, United Kingdom, France)"}, "time_period": {"type": "str", "description": "Specify a time period for terrorism statistics (e.g., last year, last 10 years, all time)"}}, "required": ["country"], "responses": {"incidents": {"type": "int", "description": "The number of terrorism incidents in the specified country and time period"}, "fatalities": {"type": "int", "description": "The total number of fatalities caused by terrorism in the specified country and time period"}}}
{"api_name": "getHumanTraffickingInfo", "api_description": "Retrieve information about human trafficking cases", "field": "Criminal Justice/Human Trafficking", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve human trafficking information (e.g., United States, Germany, Thailand)"}, "year": {"type": "int", "description": "The year for which you want to retrieve human trafficking information"}}, "required": ["country"], "responses": {"cases": {"type": "int", "description": "The number of human trafficking cases reported"}}}
{"api_name": "getEBPInfo", "api_description": "Retrieve information about evidence-based practices in criminal justice", "field": "Criminal Justice/Evidence-based Practices in Criminal Justice", "parameters": {}, "required": [], "responses": {"info": {"type": "str", "description": "Information about evidence-based practices in criminal justice"}}}
{"api_name": "getEBPCJ", "api_description": "Retrieve evidence-based practices in criminal justice", "field": "Criminal Justice/Evidence-based Practices in Criminal Justice", "parameters": {"type": {"type": "str", "description": "Specify the type of evidence-based practice (e.g., intervention, prevention, rehabilitation)"}, "location": {"type": "str", "description": "The location where the practice is being implemented (e.g., city, state, country)"}, "population": {"type": "str", "description": "The target population for the practice (e.g., juveniles, offenders, victims)"}}, "required": ["type"], "responses": {"practice_name": {"type": "str", "description": "The name of the evidence-based practice"}, "description": {"type": "str", "description": "A brief description of the practice"}, "implementation_status": {"type": "str", "description": "The current status of implementation (e.g., implemented, in progress)"}}}
{"api_name": "getEBPImplementationStatus", "api_description": "Retrieve implementation status of evidence-based practices in criminal justice", "field": "Criminal Justice/Evidence-based Practices in Criminal Justice", "parameters": {"status": {"type": "str", "description": "The implementation status of evidence-based practices (e.g., implemented, in progress)"}}, "required": ["status"], "responses": {"practice_name": {"type": "str", "description": "The name of the evidence-based practice"}, "description": {"type": "str", "description": "A brief description of the practice"}, "location": {"type": "str", "description": "The location where the practice is being implemented (e.g., city, state, country)"}}}
{"api_name": "getEBPDescription", "api_description": "Retrieve description of evidence-based practices in criminal justice", "field": "Criminal Justice/Evidence-based Practices in Criminal Justice", "parameters": {"practice_name": {"type": "str", "description": "The name of the evidence-based practice"}}, "required": ["practice_name"], "responses": {"name": {"type": "str", "description": "The name of the evidence-based practice"}, "description": {"type": "str", "description": "A detailed description of the practice"}, "resources": {"type": "str", "description": "Additional resources or references for further information"}}}
{"api_name": "compareLegalSystems", "api_description": "Compare the legal systems of different countries", "field": "Criminal Justice/Comparative Criminal Justice", "parameters": {"countries": {"type": "str", "description": "The countries to compare (e.g., USA, UK, Germany)"}, "aspects": {"type": "str", "description": "The aspects to compare (e.g., laws, court systems, prison systems)"}}, "required": ["countries", "aspects"], "responses": {"comparison_results": {"type": "str", "description": "The comparison results of the legal systems in the specified countries"}}}
{"api_name": "submitRehabilitationEvaluation", "api_description": "Submit an evaluation of a prisoner's rehabilitation progress", "field": "Criminal Justice/Prison Rehabilitation", "parameters": {"prisoner_id": {"type": "str", "description": "The ID of the prisoner to be evaluated"}, "evaluation": {"type": "str", "description": "The evaluation of the prisoner's rehabilitation progress"}}, "required": ["prisoner_id", "evaluation"], "responses": {"success": {"type": "bool", "description": "A boolean value indicating whether the evaluation was successfully submitted"}}}
{"api_name": "getResidentialDesignStyle", "api_description": "Retrieve the design style for residential interior design", "field": "Interior Design/Residential Interior Design", "parameters": {"location": {"type": "str", "description": "The location of the residential property (e.g., Los Angeles, Paris, Tokyo)"}, "budget": {"type": "float", "description": "The budget available for the interior design project in USD"}}, "required": ["location"], "responses": {"style": {"type": "str", "description": "The recommended design style for the residential property"}}}
{"api_name": "getHealthcareInteriorDesignGuidelines", "api_description": "Retrieve guidelines for healthcare interior design", "field": "Interior Design/Healthcare Interior Design", "parameters": {}, "required": [], "responses": {"guidelines": {"type": "str", "description": "Guidelines for healthcare interior design"}}}
{"api_name": "getRestaurantInteriorDesign", "api_description": "Retrieve restaurant interior design information", "field": "Interior Design/Restaurant Interior Design", "parameters": {"restaurant_name": {"type": "str", "description": "The name of the restaurant you want to get the interior design for"}, "style": {"type": "str", "description": "The desired style of the interior design (e.g., modern, rustic, industrial)"}, "color_scheme": {"type": "str", "description": "The preferred color scheme for the interior design (e.g., warm tones, cool tones, neutral tones)"}}, "required": ["restaurant_name"], "responses": {"interior_design": {"type": "str", "description": "The description of the restaurant's interior design"}, "style": {"type": "str", "description": "The style of the interior design"}, "color_scheme": {"type": "str", "description": "The color scheme of the interior design"}}}
{"api_name": "getAcousticAnalysis", "api_description": "Retrieve acoustic analysis data for a theater or entertainment venue", "field": "Interior Design/Theater and Entertainment Design", "parameters": {"venue_name": {"type": "str", "description": "The name of the theater or entertainment venue"}, "room_type": {"type": "str", "description": "The type of room in the venue for which acoustic analysis is desired (e.g., auditorium, rehearsal room)"}, "frequency_range": {"type": "str", "description": "The frequency range for the acoustic analysis (e.g., low frequency, mid frequency, high frequency)"}}, "required": ["venue_name", "room_type"], "responses": {"acoustic_data": {"type": "str", "description": "The acoustic analysis data for the specified venue, room type, and frequency range"}}}
{"api_name": "getSpacePlan", "api_description": "Retrieve the space planning for an interior design project", "field": "Interior Design/Space Planning", "parameters": {"room_dimensions": {"type": "str", "description": "The dimensions of the room (e.g., length x width x height)"}, "desired_functions": {"type": "str", "description": "The desired functions for the space (e.g., living room, dining area, study)"}, "furniture_requirements": {"type": "str", "description": "The specific furniture requirements for the space (e.g., sofa, dining table, desk)"}, "natural_lighting": {"type": "bool", "description": "Specify if natural lighting is preferred in the space"}}, "required": ["room_dimensions", "desired_functions"], "responses": {"space_plan": {"type": "str", "description": "The proposed space plan for the interior design project"}}}
{"api_name": "calculateWallPaint", "api_description": "Calculate the amount of wall paint needed for a room", "field": "Interior Design/Staging and Home Decor", "parameters": {"room": {"type": "str", "description": "Specify the room for which you want to calculate wall paint (e.g., living room, bedroom, kitchen)"}, "wall_area": {"type": "float", "description": "Specify the total wall area in square feet"}}, "required": ["room", "wall_area"], "responses": {"paint_amount": {"type": "float", "description": "The amount of paint (in gallons) needed for the specified room"}}}
{"api_name": "generate3DModel", "api_description": "Generate a 3D model based on specified parameters", "field": "Interior Design/3D Modeling and Rendering", "parameters": {"room_type": {"type": "str", "description": "The type of room for which you want to generate the model (e.g., living room, bedroom, kitchen)"}, "room_size": {"type": "float", "description": "The size of the room in square meters"}, "furniture_style": {"type": "str", "description": "The desired style of furniture for the room (e.g., modern, Scandinavian, traditional)"}, "color_scheme": {"type": "str", "description": "The preferred color scheme for the room (e.g., neutral, vibrant, monochromatic)"}}, "required": ["room_type", "room_size"], "responses": {"model_url": {"type": "str", "description": "The URL of the generated 3D model for visualization"}}}
{"api_name": "getProjectBudget", "api_description": "Retrieve the estimated budget for an interior design project", "field": "Interior Design/Budgeting and Cost Estimation", "parameters": {"project_type": {"type": "str", "description": "The type of interior design project (e.g., residential, commercial)"}, "project_area": {"type": "float", "description": "The total area of the project in square meters"}, "project_location": {"type": "str", "description": "The location of the project (e.g., city, country)"}, "project_style": {"type": "str", "description": "The desired style for the project (e.g., modern, traditional)"}, "deadline": {"type": "str", "description": "The deadline for completing the project"}}, "required": ["project_type", "project_area", "project_location"], "responses": {"estimated_budget": {"type": "float", "description": "The estimated budget for the interior design project"}}}
{"api_name": "getOrthodonticTreatmentPlan", "api_description": "Retrieve the treatment plan for orthodontic treatment", "field": "Dentistry/Orthodontics", "parameters": {"patient_id": {"type": "str", "description": "The unique ID of the patient", "example": "P1234567"}}, "required": ["patient_id"], "responses": {"treatment_plan": {"type": "str", "description": "The detailed plan for orthodontic treatment for the specified patient"}}}
{"api_name": "getGumHealth", "api_description": "Retrieve the health condition of the gums", "field": "Dentistry/Periodontics", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "visit_date": {"type": "str", "description": "The date of the patient's visit to the dentist"}}, "required": ["patient_id", "visit_date"], "responses": {"gum_health": {"type": "str", "description": "The health condition of the patient's gums"}}}
{"api_name": "getProsthodontics", "api_description": "Retrieve information about prosthodontics procedures", "field": "Dentistry/Prosthodontics", "parameters": {"procedure_type": {"type": "str", "description": "Type of prosthodontics procedure (e.g., dental implants, dentures, crowns)"}, "patient_id": {"type": "int", "description": "ID of the patient undergoing the procedure"}, "dentist_id": {"type": "int", "description": "ID of the dentist performing the procedure"}, "material_preference": {"type": "str", "description": "Preference for prosthodontics materials (e.g., porcelain, acrylic)"}, "insurance_coverage": {"type": "bool", "description": "Indicates if the procedure is covered by insurance"}}, "required": ["procedure_type", "patient_id", "dentist_id"], "responses": {"procedure_details": {"type": "str", "description": "Details of the prosthodontics procedure"}, "cost_estimate": {"type": "float", "description": "Estimated cost of the procedure"}, "appointment_date": {"type": "str", "description": "Scheduled date for the procedure"}}}
{"api_name": "getImplantCost", "api_description": "Retrieve the cost of dental implant", "field": "Dentistry/Oral and Maxillofacial Surgery", "parameters": {"jaw": {"type": "str", "description": "The jaw for which implant is required (e.g., upper, lower)", "example": "upper"}, "bone_quality": {"type": "str", "description": "Specify the quality of bone for implant (e.g., good, fair, poor)", "example": "good"}}, "required": ["jaw"], "responses": {"cost": {"type": "float", "description": "The cost of dental implant in the specified location"}, "bone_quality": {"type": "str", "description": "The quality of bone in which implant is performed"}}}
{"api_name": "getWisdomToothRemoval", "api_description": "Retrieve details about wisdom tooth removal", "field": "Dentistry/Oral and Maxillofacial Surgery", "parameters": {"age": {"type": "int", "description": "Age of the patient", "example": "25"}, "anesthesia": {"type": "str", "description": "Specify the type of anesthesia to be used (e.g., local, general)", "example": "general"}, "complications": {"type": "bool", "description": "Specify whether any complications are expected during the procedure", "example": "true"}}, "required": ["age"], "responses": {"procedure_details": {"type": "str", "description": "Details about the wisdom tooth removal procedure"}, "recovery_time": {"type": "str", "description": "Estimated recovery time after the procedure"}}}
{"api_name": "bookPediatricDentalAppointment", "api_description": "Book an appointment with a pediatric dentist", "field": "Dentistry/Pediatric Dentistry", "parameters": {"dentist_name": {"type": "str", "description": "The name of the pediatric dentist"}, "patient_name": {"type": "str", "description": "The name of the patient"}, "appointment_date": {"type": "str", "description": "The desired appointment date (e.g., MM/DD/YYYY)"}, "appointment_time": {"type": "str", "description": "The desired appointment time (e.g., HH:MM AM/PM)"}}, "required": ["dentist_name", "patient_name", "appointment_date", "appointment_time"], "responses": {"confirmation": {"type": "str", "description": "A confirmation message for the booked appointment"}}}
{"api_name": "getOralPathologyReport", "api_description": "Retrieve the pathology report of the oral and maxillofacial region", "field": "Dentistry/Oral and Maxillofacial Pathology", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "date": {"type": "str", "description": "The date of the pathology report in the format YYYY-MM-DD"}, "location": {"type": "str", "description": "The specific location within the oral and maxillofacial region (e.g., tongue, mandible, palate)"}}, "required": ["patient_id", "date"], "responses": {"report_text": {"type": "str", "description": "The detailed pathology report of the specified location"}, "diagnosis": {"type": "str", "description": "The diagnosis of the oral and maxillofacial pathology"}, "severity": {"type": "str", "description": "The severity level of the pathology (e.g., mild, moderate, severe)"}}}
{"api_name": "diagnoseOralPathology", "api_description": "Diagnose oral and maxillofacial pathology based on patient symptoms and history", "field": "Dentistry/Oral and Maxillofacial Pathology", "parameters": {"patient_name": {"type": "str", "description": "The name of the patient"}, "symptoms": {"type": "str", "description": "The symptoms observed in the patient (e.g., ulceration, swelling, pain)"}, "medical_history": {"type": "str", "description": "The medical history of the patient (e.g., previous oral surgeries, chronic diseases)"}}, "required": ["patient_name", "symptoms"], "responses": {"diagnosis": {"type": "str", "description": "The diagnosis of the oral and maxillofacial pathology in the patient"}}}
{"api_name": "analyzeDentalRecords", "api_description": "Analyze dental records for forensic purposes", "field": "Dentistry/Forensic Dentistry", "parameters": {"patient_information": {"type": "str", "description": "The patient's information (e.g., name, age, gender)"}, "dental_records": {"type": "str", "description": "The dental records of the patient"}}, "required": ["patient_information", "dental_records"], "responses": {"identification": {"type": "str", "description": "The identification of the patient based on dental records"}, "forensic_accuracy": {"type": "float", "description": "The accuracy percentage of the forensic analysis"}}}
{"api_name": "identifyHumanRemainsThroughDentalRecords", "api_description": "Identify human remains through dental records", "field": "Dentistry/Forensic Dentistry", "parameters": {"dental_records": {"type": "str", "description": "The dental records of the individual"}, "unknown_teeth": {"type": "str", "description": "The description or images of the unknown teeth found"}}, "required": ["dental_records", "unknown_teeth"], "responses": {"match_probability": {"type": "float", "description": "The probability of a match between the dental records and unknown teeth"}, "matched_dental_records": {"type": "str", "description": "The dental records of the matched individual"}}}
{"api_name": "getOverallOralHealth", "api_description": "Retrieve the overall oral health of a geriatric patient", "field": "Dentistry/Geriatric Dentistry", "parameters": {"patient_id": {"type": "str", "description": "The ID of the geriatric patient whose overall oral health you want to retrieve"}}, "required": ["patient_id"], "responses": {"overall_oral_health": {"type": "str", "description": "The overall oral health of the geriatric patient"}}}
{"api_name": "getOralExamResults", "api_description": "Retrieve the results of an oral examination for a geriatric patient", "field": "Dentistry/Geriatric Dentistry", "parameters": {"patient_id": {"type": "str", "description": "The ID of the geriatric patient whose oral examination results you want to retrieve"}}, "required": ["patient_id"], "responses": {"oral_exam_results": {"type": "str", "description": "The results of the oral examination for the geriatric patient"}}}
{"api_name": "getMouthguard", "api_description": "Retrieve information about mouthguards for sports activities", "field": "Dentistry/Sports Dentistry", "parameters": {"sport": {"type": "str", "description": "The sport for which you need a mouthguard (e.g., football, rugby, boxing)"}, "age_group": {"type": "str", "description": "The age group for which the mouthguard is intended (e.g., children, adults)"}, "type": {"type": "str", "description": "Specify the type of mouthguard (e.g., custom-fit, boil-and-bite, stock)"}, "material": {"type": "str", "description": "Specify the material of the mouthguard (e.g., silicone, polyethylene)"}, "budget": {"type": "float", "description": "Specify your budget range for the mouthguard (e.g., 20.5, 50.0, 100.0)"}, "brand": {"type": "str", "description": "Specify a preferred brand for the mouthguard"}}, "required": ["sport", "age_group", "type"], "responses": {"mouthguard": {"type": "str", "description": "The recommended mouthguard for the specified sport and age group"}, "price": {"type": "float", "description": "The price of the recommended mouthguard"}, "availability": {"type": "bool", "description": "Indicates the availability of the recommended mouthguard"}}}
{"api_name": "getImplantMaterial", "api_description": "Retrieve the materials used in dental implants", "field": "Dentistry/Dental Implantology", "parameters": {}, "required": [], "responses": {"materials": {"type": "str", "description": "The materials used in dental implants"}}}
{"api_name": "getPainIntensity", "api_description": "Retrieve information on Orofacial Pain intensity", "field": "Dentistry/Temporomandibular Joint Disorders and Orofacial Pain", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient for whom you want to retrieve pain intensity information"}}, "required": ["patient_id"], "responses": {"pain_intensity": {"type": "int", "description": "The intensity level of orofacial pain experienced by the patient"}}}
{"api_name": "getSleepApneaRisk", "api_description": "Calculate the risk of sleep apnea for a patient", "field": "Dentistry/Dental Sleep Medicine", "parameters": {"age": {"type": "int", "description": "The age of the patient (e.g., 30, 45, 60)"}, "gender": {"type": "str", "description": "The gender of the patient (e.g., Male, Female)"}, "body_mass_index": {"type": "float", "description": "The body mass index (BMI) of the patient (e.g., 25.7, 29.2, 31.5)"}, "snoring": {"type": "bool", "description": "Indicates if the patient snores or not (true, false)"}, "daytime_sleepiness": {"type": "str", "description": "The level of daytime sleepiness reported by the patient (e.g., None, Mild, Severe)"}}, "required": ["age", "gender", "body_mass_index"], "responses": {"risk_level": {"type": "str", "description": "The calculated risk level of sleep apnea for the patient (e.g., Low, Moderate, High)"}, "advice": {"type": "str", "description": "Recommendations and advice for the patient based on their risk level"}}}
{"api_name": "getSleepApneaTestResults", "api_description": "Retrieve the test results of a sleep apnea test", "field": "Dentistry/Dental Sleep Medicine", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient to retrieve the test results for"}}, "required": ["patient_id"], "responses": {"result": {"type": "str", "description": "The result of the sleep apnea test"}}}
{"api_name": "scheduleSleepStudy", "api_description": "Schedule a sleep study for a patient", "field": "Dentistry/Dental Sleep Medicine", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient to schedule the sleep study for"}, "date": {"type": "str", "description": "The date for the sleep study (e.g., YYYY-MM-DD)"}, "location": {"type": "str", "description": "The location where the sleep study will take place"}}, "required": ["patient_id", "date", "location"], "responses": {"confirmation": {"type": "str", "description": "A confirmation message indicating the sleep study has been scheduled"}}}
{"api_name": "getSleepDisorderRiskScore", "api_description": "Calculate the risk score for sleep disorders based on patient information", "field": "Dentistry/Dental Sleep Medicine", "parameters": {"age": {"type": "int", "description": "The age of the patient (in years)"}, "gender": {"type": "str", "description": "The gender of the patient (e.g., Male, Female)"}, "height": {"type": "float", "description": "The height of the patient in meters"}, "weight": {"type": "float", "description": "The weight of the patient in kilograms"}, "snoring": {"type": "bool", "description": "Indicates if the patient snores"}}, "required": ["age", "gender", "height", "weight"], "responses": {"risk_score": {"type": "float", "description": "The calculated risk score for sleep disorders"}}}
{"api_name": "getDentalXRay", "api_description": "Retrieve dental X-ray image", "field": "Dentistry/Radiology and Imaging in Dentistry", "parameters": {"patient_id": {"type": "int", "description": "The ID of the patient for whom the X-ray is requested"}, "tooth_number": {"type": "int", "description": "The number of the tooth for which the X-ray is required"}}, "required": ["patient_id"], "responses": {"image_url": {"type": "str", "description": "The URL of the dental X-ray image"}, "tooth_condition": {"type": "str", "description": "The condition of the tooth based on the X-ray"}}}
{"api_name": "getToothFracture", "api_description": "Retrieve information about a tooth fracture", "field": "Dentistry/Dental Traumatology", "parameters": {"tooth_number": {"type": "int", "description": "The number of the tooth that has been fractured (e.g., 13, 27, 31)"}, "fracture_type": {"type": "str", "description": "The type of tooth fracture (e.g., enamel fracture, crown-root fracture, root fracture)"}, "severity": {"type": "str", "description": "The severity of the fracture (e.g., mild, moderate, severe)"}, "patient_age": {"type": "int", "description": "The age of the patient who suffered the tooth fracture (e.g., 25, 42, 10)"}}, "required": ["tooth_number", "fracture_type"], "responses": {"treatment_plan": {"type": "str", "description": "The recommended treatment plan for the tooth fracture"}, "pain_level": {"type": "str", "description": "The level of pain experienced by the patient"}}}
{"api_name": "getOcclusalAnalysis", "api_description": "Analyze the occlusion of a patient's teeth", "field": "Dentistry/Bioesthetic Dentistry", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient"}, "patient_age": {"type": "int", "description": "The age of the patient"}, "occlusion_type": {"type": "str", "description": "The type of occlusion for the patient (e.g., Class I, Class II, Class III)"}, "tooth_condition": {"type": "str", "description": "The condition of the patient's teeth (e.g., decay, missing, fractured)"}}, "required": ["patient_id", "patient_age", "occlusion_type"], "responses": {"occlusal_analysis": {"type": "str", "description": "The analysis result of the occlusion for the patient's teeth"}}}
{"api_name": "getBioestheticDentistryInfo", "api_description": "Retrieve bioesthetic dentistry information", "field": "Dentistry/Bioesthetic Dentistry", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier for the patient"}, "tooth_number": {"type": "int", "description": "The number of the tooth to retrieve information for"}, "treatment_type": {"type": "str", "description": "The type of bioesthetic dentistry treatment to retrieve information for (e.g., TMJ, occlusal analysis)"}}, "required": ["patient_id", "tooth_number"], "responses": {"dentistry_info": {"type": "str", "description": "Information about the bioesthetic dentistry treatment for the specified patient and tooth"}}}
{"api_name": "getJawAlignment", "api_description": "Retrieve the alignment of the patient's jaw", "field": "Dentistry/Bioesthetic Dentistry", "parameters": {"patient_id": {"type": "int", "description": "The unique identifier of the patient"}}, "required": ["patient_id"], "responses": {"jaw_alignment": {"type": "str", "description": "The alignment of the patient's jaw"}}}
{"api_name": "performSurfaceElectromyography", "api_description": "Perform surface electromyography to assess muscle activity in the patient's jaw", "field": "Dentistry/Bioesthetic Dentistry", "parameters": {"patient_id": {"type": "int", "description": "The unique identifier of the patient"}, "muscle_group": {"type": "str", "description": "The muscle group to be assessed (e.g., masseter, temporalis)"}}, "required": ["patient_id", "muscle_group"], "responses": {"muscle_activity": {"type": "str", "description": "The assessed muscle activity"}}}
{"api_name": "getTemporomandibularJointStatus", "api_description": "Retrieve the status of the temporomandibular joint", "field": "Dentistry/Bioesthetic Dentistry", "parameters": {}, "required": [], "responses": {"status": {"type": "str", "description": "The status of the temporomandibular joint (e.g., normal, dysfunction)"}}}
{"api_name": "performTMDAssessment", "api_description": "Perform temporomandibular joint disorder (TMD) assessment for bioesthetic dentistry", "field": "Dentistry/Bioesthetic Dentistry", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient for whom you want to perform TMD assessment"}}, "required": ["patient_id"], "responses": {"tmd_symptoms": {"type": "str", "description": "The symptoms of temporomandibular joint disorder (TMD) observed in the patient"}, "tmd_diagnosis": {"type": "str", "description": "The diagnosis of temporomandibular joint disorder (TMD) for the patient"}, "tmd_treatment_plan": {"type": "str", "description": "The treatment plan for temporomandibular joint disorder (TMD) in the patient"}}}
{"api_name": "getDrugDosage", "api_description": "Retrieve the recommended dosage for a specific drug", "field": "Pharmacy/Clinical Pharmacy", "parameters": {"drug_name": {"type": "str", "description": "The name of the drug for which you want to get the dosage (e.g., Ibuprofen, Amoxicillin)"}, "patient_age": {"type": "int", "description": "The age of the patient in years"}, "patient_weight": {"type": "float", "description": "The weight of the patient in kilograms"}}, "required": ["drug_name"], "responses": {"dosage": {"type": "str", "description": "The recommended dosage for the specified drug"}}}
{"api_name": "getDrugPrice", "api_description": "Retrieve the price of a specific drug", "field": "Pharmacy/Pharmacology", "parameters": {"drug_name": {"type": "str", "description": "The name of the drug you want the price for"}}, "required": ["drug_name"], "responses": {"price": {"type": "float", "description": "The price of the specified drug"}}}
{"api_name": "getPharmacokineticsInfo", "api_description": "Retrieve pharmacokinetics information of a drug", "field": "Pharmacy/Pharmacokinetics", "parameters": {"drug_name": {"type": "str", "description": "The name of the drug for which you want to get pharmacokinetics information (e.g., Aspirin, Paracetamol)"}, "dose": {"type": "float", "description": "The dose of the drug in mg (e.g., 500, 1000)"}, "administration_route": {"type": "str", "description": "The route of drug administration (e.g., oral, intravenous, topical)"}, "patient_age": {"type": "int", "description": "The age of the patient in years"}, "patient_weight": {"type": "float", "description": "The weight of the patient in kg"}}, "required": ["drug_name", "dose", "administration_route"], "responses": {"absorption_rate": {"type": "float", "description": "The rate at which the drug is absorbed by the body"}, "distribution_volume": {"type": "float", "description": "The volume into which the drug distributes itself in the body"}, "elimination_rate": {"type": "float", "description": "The rate at which the drug is eliminated from the body"}}}
{"api_name": "calculateDrugHalfLife", "api_description": "Calculate the half-life of a drug", "field": "Pharmacy/Pharmacokinetics", "parameters": {"drug_name": {"type": "str", "description": "The name of the drug (e.g., Aspirin, Atorvastatin)"}, "bioavailability": {"type": "float", "description": "The bioavailability of the drug (e.g., 0.7, 0.9)"}}, "required": ["drug_name", "bioavailability"], "responses": {"half_life": {"type": "float", "description": "The half-life of the drug in hours"}}}
{"api_name": "getPharmacodynamics", "api_description": "Retrieve pharmacodynamics information of a drug", "field": "Pharmacy/Pharmacodynamics", "parameters": {"drug_name": {"type": "str", "description": "The name of the drug for which you want to retrieve pharmacodynamics information"}}, "required": ["drug_name"], "responses": {"mechanism_of_action": {"type": "str", "description": "The mechanism of action of the drug"}, "effect": {"type": "str", "description": "The therapeutic effect of the drug"}, "side_effects": {"type": "str", "description": "The potential side effects of the drug"}}}
{"api_name": "getPharmacyInfo", "api_description": "Retrieve the information of a pharmacy", "field": "Pharmacy/Pharmacy Administration", "parameters": {"pharmacy_id": {"type": "str", "description": "The ID of the pharmacy you want to retrieve information for"}}, "required": ["pharmacy_id"], "responses": {"name": {"type": "str", "description": "The name of the pharmacy"}, "address": {"type": "str", "description": "The address of the pharmacy"}, "phone": {"type": "str", "description": "The phone number of the pharmacy"}}}
{"api_name": "addPharmacy", "api_description": "Add a new pharmacy to the system", "field": "Pharmacy/Pharmacy Administration", "parameters": {"name": {"type": "str", "description": "The name of the pharmacy"}, "location": {"type": "str", "description": "The location of the pharmacy (e.g., address, city, state)"}, "phone_number": {"type": "str", "description": "The contact phone number of the pharmacy"}, "opening_hours": {"type": "str", "description": "The opening hours of the pharmacy (e.g., Monday-Friday: 9am-6pm, Saturday: 10am-4pm)"}, "website": {"type": "str", "description": "The website of the pharmacy"}}, "required": ["name", "location", "phone_number"], "responses": {"success": {"type": "bool", "description": "Indicates if the pharmacy was successfully added"}}}
{"api_name": "deletePharmacy", "api_description": "Delete a specific pharmacy from the system", "field": "Pharmacy/Pharmacy Administration", "parameters": {"pharmacy_id": {"type": "int", "description": "The unique identifier of the pharmacy"}}, "required": ["pharmacy_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the pharmacy was successfully deleted"}}}
{"api_name": "getPharmacyLaw", "api_description": "Retrieve information related to pharmacy law and ethics", "field": "Pharmacy/Pharmacy Law and Ethics", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the pharmacy law information (e.g., United States, United Kingdom, Canada)"}, "language": {"type": "str", "description": "The desired language of the pharmacy law information (e.g., English, Spanish, French)"}, "topic": {"type": "str", "description": "Specify a topic related to pharmacy law (e.g., dispensing medication, patient confidentiality)"}}, "required": ["country"], "responses": {"information": {"type": "str", "description": "The pharmacy law information for the specified country and topic"}}}
{"api_name": "checkPharmacyLicense", "api_description": "Check the license status of a pharmacy", "field": "Pharmacy/Pharmacy Law and Ethics", "parameters": {"pharmacy_id": {"type": "str", "description": "The ID of the pharmacy for which you want to check the license status"}}, "required": ["pharmacy_id"], "responses": {"license_status": {"type": "str", "description": "The current license status of the specified pharmacy"}}}
{"api_name": "getLicensingRequirements", "api_description": "Retrieve the licensing requirements for a pharmacy", "field": "Pharmacy/Pharmacy Law and Ethics", "parameters": {"state": {"type": "str", "description": "The state for which you want to get the licensing requirements (e.g., California, New York, Texas)"}, "type_of_pharmacy": {"type": "str", "description": "Specify the type of pharmacy (e.g., community pharmacy, hospital pharmacy, specialty pharmacy)"}}, "required": ["state"], "responses": {"requirements": {"type": "str", "description": "The licensing requirements for the specified state and type of pharmacy"}}}
{"api_name": "getMedicineAvailability", "api_description": "Check the availability of a medicine at a pharmacy", "field": "Pharmacy/Pharmacy Technology", "parameters": {"medicine_name": {"type": "str", "description": "The name of the medicine you want to check availability for (e.g., Aspirin, Paracetamol)"}, "pharmacy_name": {"type": "str", "description": "The name of the pharmacy where you want to check the availability"}}, "required": ["medicine_name", "pharmacy_name"], "responses": {"availability": {"type": "bool", "description": "Indicates whether the medicine is available at the specified pharmacy"}}}
{"api_name": "getCompoundedMedication", "api_description": "Retrieve information about a compounded medication", "field": "Pharmacy/Pharmaceutical Compounding", "parameters": {"medication_name": {"type": "str", "description": "The name of the medication for which you want information"}, "ingredients": {"type": "str", "description": "List of ingredients in the medication, separated by commas (e.g., ingredient1, ingredient2, ingredient3)"}, "dosage_form": {"type": "str", "description": "The desired dosage form (e.g., tablet, cream, solution)"}, "strength": {"type": "str", "description": "The strength of the medication (e.g., 500mg, 2%, 10mg/ml)"}}, "required": ["medication_name"], "responses": {"medication": {"type": "str", "description": "The information about the compounded medication"}, "dosage_form": {"type": "str", "description": "The dosage form of the compounded medication"}, "strength": {"type": "str", "description": "The strength of the compounded medication"}}}
{"api_name": "findMedication", "api_description": "Search for availability and information of a medication in a pharmacy", "field": "Pharmacy/Pharmacy Practice", "parameters": {"medication": {"type": "str", "description": "The name of the medication you want to find (e.g., Ibuprofen, Amoxicillin)"}, "location": {"type": "str", "description": "The location of the pharmacy where you want to search (e.g., New York, London)"}}, "required": ["medication", "location"], "responses": {"availability": {"type": "bool", "description": "Whether the medication is available in the specified pharmacy"}, "description": {"type": "str", "description": "A brief description of the medication"}, "price": {"type": "float", "description": "The price of the medication in the specified pharmacy"}}}
{"api_name": "getPharmacyPolicy", "api_description": "Retrieve the policy information for a specific pharmacy", "field": "Pharmacy/Pharmacy Policy", "parameters": {"pharmacy_name": {"type": "str", "description": "The name of the pharmacy (e.g., Walgreens, CVS, Rite Aid)"}, "location": {"type": "str", "description": "The location of the pharmacy (e.g., New York, Los Angeles, Chicago)"}}, "required": ["pharmacy_name"], "responses": {"policy": {"type": "str", "description": "The policy for the specified pharmacy"}}}
{"api_name": "getToxicologyReports", "api_description": "Retrieve toxicology reports for a given medication or substance", "field": "Pharmacy/Toxicology", "parameters": {"medication_name": {"type": "str", "description": "The name of the medication or substance for which you want to retrieve toxicity reports (e.g., Aspirin, Paracetamol, Alcohol)"}, "substance_type": {"type": "str", "description": "The type of substance for which you want to retrieve toxicity reports (e.g., drug, chemical, poison)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the medication or substance from which you want to retrieve toxicity reports"}, "country": {"type": "str", "description": "The country for which you want to retrieve toxicity reports (e.g., USA, Canada, UK)"}}, "required": ["medication_name"], "responses": {"reports": {"type": "str", "description": "Toxicology reports for the specified medication or substance"}, "manufacturer": {"type": "str", "description": "The manufacturer of the specified medication or substance"}}}
{"api_name": "getPoetryByTitle", "api_description": "Retrieve poetry information by title", "field": "Literature/Poetry", "parameters": {"title": {"type": "str", "description": "The title of the poetry"}}, "required": ["title"], "responses": {"poetry": {"type": "str", "description": "The content of the poetry"}, "author": {"type": "str", "description": "The author of the poetry"}}}
{"api_name": "getRandomPoetry", "api_description": "Retrieve a random poetry", "field": "Literature/Poetry", "parameters": {}, "required": [], "responses": {"poetry": {"type": "str", "description": "The content of the random poetry"}, "author": {"type": "str", "description": "The author of the random poetry"}, "title": {"type": "str", "description": "The title of the random poetry"}}}
{"api_name": "getPoemText", "api_description": "Retrieve the full text of a poem", "field": "Literature/Poetry", "parameters": {"title": {"type": "str", "description": "The title of the poem"}, "author": {"type": "str", "description": "The author of the poem"}, "language": {"type": "str", "description": "The language of the poem (e.g., English, Spanish, French)"}}, "required": ["title", "author"], "responses": {"poem_text": {"type": "str", "description": "The full text of the specified poem"}}}
{"api_name": "getShortStory", "api_description": "Retrieve a random short story", "field": "Literature/Short stories", "parameters": {}, "required": [], "responses": {"title": {"type": "str", "description": "The title of the short story"}, "author": {"type": "str", "description": "The author of the short story"}, "content": {"type": "str", "description": "The content of the short story"}}}
{"api_name": "getAutobiography", "api_description": "Retrieve autobiography information of a person", "field": "Literature/Biography/Autobiography", "parameters": {"person_name": {"type": "str", "description": "The name of the person you want to retrieve the autobiography for (e.g., Michelle Obama, Nelson Mandela)"}, "publish_year": {"type": "int", "description": "The year of publication of the autobiography (e.g., 2009)"}}, "required": ["person_name"], "responses": {"autobiography": {"type": "str", "description": "The autobiography of the specified person"}}}
{"api_name": "getRomanceNovelDetails", "api_description": "Retrieve details of a specific romance novel", "field": "Literature/Romance", "parameters": {"novel_id": {"type": "str", "description": "The unique identifier of the romance novel"}}, "required": ["novel_id"], "responses": {"title": {"type": "str", "description": "The title of the romance novel"}, "author": {"type": "str", "description": "The author of the romance novel"}, "genre": {"type": "str", "description": "The genre of the romance novel"}, "description": {"type": "str", "description": "A brief description of the romance novel"}, "publication_date": {"type": "str", "description": "The publication date of the romance novel"}}}
{"api_name": "getBookRecommendation", "api_description": "Retrieve a recommended children's book based on specified criteria", "field": "Literature/Children's literature", "parameters": {"age": {"type": "int", "description": "The age of the target audience for the book (e.g., 3, 7, 12)"}, "genre": {"type": "str", "description": "The desired genre of the book (e.g., adventure, fantasy, mystery)"}, "language": {"type": "str", "description": "The language in which the book should be available (e.g., English, Spanish, French)"}}, "required": ["age"], "responses": {"book_title": {"type": "str", "description": "The title of the recommended children's book"}, "author": {"type": "str", "description": "The author of the recommended children's book"}, "genre": {"type": "str", "description": "The genre of the recommended children's book"}, "rating": {"type": "float", "description": "The rating (out of 5) of the recommended children's book"}}}
{"api_name": "getRaceEthnicityInLiterature", "api_description": "Retrieve information about race and ethnicity in literature", "field": "Literature/Race and ethnicity in literature", "parameters": {"author": {"type": "str", "description": "The name of the author whose literature to analyze"}, "genre": {"type": "str", "description": "The genre of literature to analyze (e.g., fiction, poetry, drama)"}, "time_period": {"type": "str", "description": "The time period of literature to analyze (e.g., contemporary, Victorian, Renaissance)"}}, "required": ["author"], "responses": {"representation": {"type": "str", "description": "The representation of race and ethnicity in the author's literature"}, "diversity_score": {"type": "float", "description": "A diversity score indicating the level of representation and inclusivity in the literature"}}}
{"api_name": "getLiteraryHistory", "api_description": "Retrieve literary history information", "field": "Literature/Literary history", "parameters": {"time_period": {"type": "str", "description": "Specify a time period for literary history (e.g., Ancient, Medieval, Renaissance)"}, "country": {"type": "str", "description": "Specify a country for literary history (e.g., England, France, China)"}}, "required": ["time_period"], "responses": {"events": {"type": "str", "description": "The significant events in literary history during the specified time period and country"}, "authors": {"type": "str", "description": "The notable authors who contributed to literary history during the specified time period and country"}}}
{"api_name": "getExperimentalLiterature", "api_description": "Retrieve experimental literature information", "field": "Literature/Experimental literature", "parameters": {"keywords": {"type": "str", "description": "Keywords used to search for experimental literature (e.g., chemistry, physics)"}, "author": {"type": "str", "description": "The author of the experimental literature"}, "year": {"type": "int", "description": "The publication year of the experimental literature"}, "journal": {"type": "str", "description": "The journal in which the experimental literature was published"}}, "required": ["keywords"], "responses": {"title": {"type": "str", "description": "The title of the experimental literature"}, "author": {"type": "str", "description": "The author of the experimental literature"}, "year": {"type": "int", "description": "The publication year of the experimental literature"}, "journal": {"type": "str", "description": "The journal in which the experimental literature was published"}, "abstract": {"type": "str", "description": "The abstract of the experimental literature"}}}
{"api_name": "getFanFiction", "api_description": "Retrieve fan fiction information", "field": "Literature/Fan fiction", "parameters": {"genre": {"type": "str", "description": "The genre of fan fiction (e.g., romance, action, sci-fi)"}, "author": {"type": "str", "description": "The author of the fan fiction"}, "rating": {"type": "str", "description": "The rating of the fan fiction (e.g., G, PG, R)"}, "length": {"type": "int", "description": "The desired length of the fan fiction in words"}}, "required": [], "responses": {"fan_fiction_title": {"type": "str", "description": "The title of the fan fiction"}, "author": {"type": "str", "description": "The author of the fan fiction"}, "genre": {"type": "str", "description": "The genre of the fan fiction"}, "rating": {"type": "str", "description": "The rating of the fan fiction"}, "length": {"type": "int", "description": "The length of the fan fiction in words"}, "content": {"type": "str", "description": "The content of the fan fiction"}}}
{"api_name": "getChickLitBookDetails", "api_description": "Retrieve details of a chick lit book", "field": "Literature/Chick lit", "parameters": {"book_title": {"type": "str", "description": "The title of the chick lit book you want to retrieve details for"}}, "required": ["book_title"], "responses": {"title": {"type": "str", "description": "The title of the book"}, "author": {"type": "str", "description": "The author of the book"}, "genre": {"type": "str", "description": "The genre of the book"}, "description": {"type": "str", "description": "A brief description of the book"}}}
{"api_name": "getMedievalLiteratureInfo", "api_description": "Retrieve information about medieval literature", "field": "Literature/Medieval literature", "parameters": {"title": {"type": "str", "description": "The title of the medieval literature work"}}, "required": ["title"], "responses": {"author": {"type": "str", "description": "The author of the medieval literature work"}, "genre": {"type": "str", "description": "The genre of the medieval literature work"}, "year": {"type": "int", "description": "The year when the medieval literature work was published"}, "summary": {"type": "str", "description": "A brief summary of the medieval literature work"}}}
{"api_name": "searchMiddleEasternBooks", "api_description": "Search for books in the field of Middle Eastern literature", "field": "Literature/Middle Eastern literature", "parameters": {"author": {"type": "str", "description": "The author of the book"}, "title": {"type": "str", "description": "The title of the book"}, "genre": {"type": "str", "description": "The genre of the book (e.g., fiction, poetry, memoir)"}, "year_published": {"type": "int", "description": "The year the book was published"}}, "required": [], "responses": {"books": {"type": "str", "description": "List of books matching the search criteria"}}}
{"api_name": "getKoreanLiteratureInfo", "api_description": "Retrieve information about Korean literature", "field": "Literature/Korean literature", "parameters": {"author": {"type": "str", "description": "The name of the Korean literature author (e.g., Han Kang, Shin Kyung-sook)"}, "title": {"type": "str", "description": "The title of the Korean literature work (e.g., The Vegetarian, Please Look After Mom)"}, "genre": {"type": "str", "description": "The genre of the Korean literature (e.g., novel, poetry, short story)"}, "language": {"type": "str", "description": "The language in which the Korean literature is written (e.g., Korean, translated versions in English)"}}, "required": ["author", "title"], "responses": {"author": {"type": "str", "description": "The name of the author of the Korean literature"}, "title": {"type": "str", "description": "The title of the Korean literature work"}, "genre": {"type": "str", "description": "The genre of the Korean literature"}, "language": {"type": "str", "description": "The language of the Korean literature"}}}
{"api_name": "getFrenchLiteratureWorks", "api_description": "Retrieve information about French literature works", "field": "Literature/French literature", "parameters": {"title": {"type": "str", "description": "The title of the French literature work"}, "author": {"type": "str", "description": "The author of the French literature work"}}, "required": ["title"], "responses": {"title": {"type": "str", "description": "The title of the French literature work"}, "author": {"type": "str", "description": "The author of the French literature work"}, "year": {"type": "int", "description": "The year when the French literature work was published"}, "genre": {"type": "str", "description": "The genre to which the French literature work belongs"}}}
{"api_name": "getAuthor", "api_description": "Retrieve information about a German literature author", "field": "Literature/German literature", "parameters": {"author_name": {"type": "str", "description": "The name of the author you want to get information about (e.g., Johann Wolfgang von Goethe, Franz Kafka)"}, "birth_year": {"type": "int", "description": "The birth year of the author"}}, "required": ["author_name"], "responses": {"author_info": {"type": "str", "description": "Information about the German literature author"}}}
{"api_name": "getPortugueseAuthors", "api_description": "Retrieve information about Portuguese authors", "field": "Literature/Portuguese literature", "parameters": {}, "required": [], "responses": {"authors": {"type": "str", "description": "List of Portuguese authors"}}}
{"api_name": "getPortugueseBooks", "api_description": "Retrieve information about Portuguese books", "field": "Literature/Portuguese literature", "parameters": {}, "required": [], "responses": {"books": {"type": "str", "description": "List of Portuguese books"}}}
{"api_name": "getRomanLiterature", "api_description": "Retrieve information about Roman literature", "field": "Literature/Roman literature", "parameters": {"author": {"type": "str", "description": "The name of the author of the Roman literature (e.g., Virgil, Cicero, Ovid)"}, "genre": {"type": "str", "description": "The genre of the Roman literature (e.g., epic, tragedy, comedy)"}, "publication_year": {"type": "int", "description": "The publication year of the Roman literature (e.g., 50 BC, 100 AD)"}}, "required": [], "responses": {"title": {"type": "str", "description": "The title of the Roman literature"}, "author": {"type": "str", "description": "The author of the Roman literature"}, "genre": {"type": "str", "description": "The genre of the Roman literature"}, "publication_year": {"type": "str", "description": "The publication year of the Roman literature"}}}
{"api_name": "getNordicBooks", "api_description": "Retrieve information about Nordic books", "field": "Literature/Nordic literature", "parameters": {"author": {"type": "str", "description": "The author of the Nordic book"}, "title": {"type": "str", "description": "The title of the Nordic book"}, "publication_year": {"type": "int", "description": "The year of publication"}}, "required": ["title"], "responses": {"book_info": {"type": "str", "description": "Information about the Nordic book"}, "author": {"type": "str", "description": "The author of the Nordic book"}}}
{"api_name": "getScandinavianLiterature", "api_description": "Retrieve information about Scandinavian literature", "field": "Literature/Scandinavian literature", "parameters": {"author": {"type": "str", "description": "The name of the author (e.g., Henrik Ibsen, Selma Lagerlöf, Astrid Lindgren)"}, "genre": {"type": "str", "description": "The genre of literature (e.g., drama, novel, children's literature)"}, "language": {"type": "str", "description": "The language of the literature (e.g., Swedish, Norwegian, Danish)"}}, "required": ["author"], "responses": {"title": {"type": "str", "description": "The title of the literature"}, "year": {"type": "int", "description": "The year of publication"}, "summary": {"type": "str", "description": "A summary of the literature"}}}
{"api_name": "getAfricanDiasporaLiterature", "api_description": "Retrieve literature information related to the African diaspora", "field": "Literature/Literature of the African diaspora", "parameters": {"author": {"type": "str", "description": "The name of the author of the literature"}, "title": {"type": "str", "description": "The title of the literature"}, "genre": {"type": "str", "description": "The genre of the literature (e.g., novel, poetry, essay)"}, "year": {"type": "int", "description": "The year of publication for the literature"}, "country": {"type": "str", "description": "The country associated with the literature"}}, "required": ["author", "title"], "responses": {"author": {"type": "str", "description": "The author of the literature"}, "title": {"type": "str", "description": "The title of the literature"}, "genre": {"type": "str", "description": "The genre of the literature"}, "year": {"type": "int", "description": "The year of publication for the literature"}, "country": {"type": "str", "description": "The country associated with the literature"}}}
{"api_name": "getLatinAmericanLiterature", "api_description": "Retrieve information about literature of the Latin American diaspora", "field": "Literature/Literature of the Latin American diaspora", "parameters": {"author": {"type": "str", "description": "The name of the author of the literature (e.g., Gabriel Garcia Marquez, Isabel Allende)"}, "title": {"type": "str", "description": "The title of the literature (e.g., One Hundred Years of Solitude, The House of the Spirits)"}, "genre": {"type": "str", "description": "The genre of the literature (e.g., magical realism, historical fiction)"}, "year": {"type": "int", "description": "The year of publication of the literature"}}, "required": ["author", "title"], "responses": {"summary": {"type": "str", "description": "A summary of the literature"}, "country_of_origin": {"type": "str", "description": "The country of origin of the author"}, "available_translations": {"type": "int", "description": "The number of translations available for the literature"}}}
{"api_name": "getFeministTheory", "api_description": "Retrieve information on feminist theory", "field": "Gender Studies/Feminist Theory", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information on feminist theory"}}}
{"api_name": "analyzeQueerRepresentation", "api_description": "Analyze the representation of queer identities in media", "field": "Gender Studies/Queer Theory", "parameters": {"media_type": {"type": "str", "description": "The type of media to analyze (e.g., film, television, literature)"}, "representation_type": {"type": "str", "description": "The aspect of representation to analyze (e.g., stereotypes, visibility, subversion)"}, "time_period": {"type": "str", "description": "The time period of the media (e.g., contemporary, historical)"}}, "required": ["media_type", "representation_type"], "responses": {"analysis_results": {"type": "str", "description": "The analysis results of queer representation in the specified media"}}}
{"api_name": "exploreGenderFluidity", "api_description": "Explore the concept of gender fluidity and its implications", "field": "Gender Studies/Queer Theory", "parameters": {"gender_identity": {"type": "str", "description": "The gender identity to explore (e.g., genderqueer, non-binary)"}, "cultural_perspective": {"type": "str", "description": "The cultural perspective to consider (e.g., Western, Eastern)"}, "historical_context": {"type": "str", "description": "The historical context to analyze (e.g., ancient civilization, modern era)"}}, "required": ["gender_identity"], "responses": {"exploration_results": {"type": "str", "description": "The results of exploring gender fluidity"}}}
{"api_name": "getMasculinityIndex", "api_description": "Retrieve the masculinity index of a specific individual", "field": "Gender Studies/Masculinity Studies", "parameters": {"name": {"type": "str", "description": "The name of the individual for whom you want to get the masculinity index (e.g., John, Mary, James)"}, "age": {"type": "int", "description": "The age of the individual in years"}, "country": {"type": "str", "description": "The country of origin of the individual"}}, "required": ["name"], "responses": {"masculinity_index": {"type": "float", "description": "The masculinity index of the specified individual"}}}
{"api_name": "getGenderAndHealthData", "api_description": "Retrieve gender-specific health data", "field": "Gender Studies/Gender and Health", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve the health data (e.g., United States, Canada, Australia)"}, "age_group": {"type": "str", "description": "Specify an age group for the health data (e.g., 18-24, 25-34, 35-44)"}, "gender": {"type": "str", "description": "Specify a gender for the health data (e.g., male, female, non-binary)"}, "health_indicator": {"type": "str", "description": "Specify a health indicator of interest (e.g., life expectancy, prevalence of a specific disease)"}}, "required": ["country", "gender"], "responses": {"health_data": {"type": "float", "description": "The health data value for the specified parameters"}}}
{"api_name": "getGenderAndEducation", "api_description": "Retrieve information about gender and education", "field": "Gender Studies/Gender and Education", "parameters": {"country": {"type": "str", "description": "The country for which you want to get data on gender and education (e.g., United States, Canada, India)"}, "year": {"type": "int", "description": "The year for which you want to get data on gender and education (e.g., 2020, 2021, 2022)"}}, "required": ["country", "year"], "responses": {"gender_gap": {"type": "float", "description": "The gender gap in education for the specified country and year"}, "male_enrollment_rate": {"type": "float", "description": "The male enrollment rate in education for the specified country and year"}, "female_enrollment_rate": {"type": "float", "description": "The female enrollment rate in education for the specified country and year"}}}
{"api_name": "getGenderCampaigns", "api_description": "Retrieve information about gender campaigns and activism", "field": "Gender Studies/Gender and Politics", "parameters": {}, "required": [], "responses": {"campaigns_info": {"type": "str", "description": "Information about ongoing gender campaigns and activism"}}}
{"api_name": "getGenderEqualityLaws", "api_description": "Retrieve information about gender equality laws", "field": "Gender Studies/Gender and Politics", "parameters": {"country": {"type": "str", "description": "The country for which you want to get gender equality laws information (e.g., France, Brazil, Japan)"}}, "required": ["country"], "responses": {"laws_info": {"type": "str", "description": "Information about gender equality laws in the country"}}}
{"api_name": "getGenderAndDevelopmentInfo", "api_description": "Retrieve information about gender and development", "field": "Gender Studies/Gender and Development", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve information about gender and development (e.g., India, Brazil, Kenya)"}, "year": {"type": "int", "description": "The year for which you want to retrieve information about gender and development (e.g., 2020, 2015, 2010)"}}, "required": ["country"], "responses": {"gender_gaps": {"type": "str", "description": "Information about gender gaps in the selected country and year"}, "progress": {"type": "str", "description": "Information about progress made in gender and development in the selected country and year"}}}
{"api_name": "getGenderAndEnvironment", "api_description": "Retrieve information on the relationship between gender and the environment", "field": "Gender Studies/Gender and Environment", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve gender and environment information (e.g., global, specific country)"}, "topic": {"type": "str", "description": "Specify a specific topic related to gender and the environment (e.g., climate change, sustainable development)"}, "time_period": {"type": "str", "description": "Specify a time period for the data retrieval (e.g., past 10 years, current year)"}, "gender_focus": {"type": "str", "description": "Specify the gender focus for the analysis (e.g., women, men, gender diverse)"}}, "required": ["location", "topic"], "responses": {"findings": {"type": "str", "description": "The research findings on the relationship between gender and the specified environmental topic"}}}
{"api_name": "getGenderAndDisabilityData", "api_description": "Retrieve gender and disability data", "field": "Gender Studies/Gender and Disability", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the gender and disability data (e.g., United States, Germany, Brazil)"}, "year": {"type": "int", "description": "The year for which you want to retrieve the data (e.g., 2010, 2015, 2020)"}}, "required": ["country", "year"], "responses": {"gender_ratio": {"type": "float", "description": "The ratio of genders with disabilities in the specified country and year"}, "male_disability_percentage": {"type": "float", "description": "The percentage of males with disabilities in the specified country and year"}, "female_disability_percentage": {"type": "float", "description": "The percentage of females with disabilities in the specified country and year"}}}
{"api_name": "getGenderClass", "api_description": "Retrieve information about the intersection of gender and social class", "field": "Gender Studies/Gender and Class", "parameters": {"gender": {"type": "str", "description": "The gender for which you want to get information about (e.g., male, female, non-binary)"}, "social_class": {"type": "str", "description": "The social class for which you want to get information about (e.g., upper class, middle class, lower class)"}}, "required": ["gender", "social_class"], "responses": {"inequalities": {"type": "str", "description": "Information about gender and class inequalities"}, "privileges": {"type": "str", "description": "Information about privileges based on gender and class"}}}
{"api_name": "getGenderAndAgingInfo", "api_description": "Retrieve gender and aging information", "field": "Gender Studies/Gender and Aging", "parameters": {"person_id": {"type": "int", "description": "ID of the person for whom you want to retrieve gender and aging information"}}, "required": ["person_id"], "responses": {"gender": {"type": "str", "description": "The gender of the person"}, "age": {"type": "int", "description": "The age of the person"}}}
{"api_name": "getOccupationalInequality", "api_description": "Retrieve information about occupational inequality in a specific country", "field": "Gender Studies/Gender and Work", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information about occupational inequality (e.g., Canada, Brazil, India)"}}, "required": ["country"], "responses": {"gender_pay_gap": {"type": "float", "description": "The gender pay gap in the specified country"}, "representation_ratio": {"type": "float", "description": "The ratio of male to female representation in different occupations in the specified country"}}}
{"api_name": "getGenderLeadershipGap", "api_description": "Retrieve the leadership gap between genders", "field": "Gender Studies/Gender and Work", "parameters": {"industry": {"type": "str", "description": "The industry for which you want to get the leadership gap"}}, "required": ["industry"], "responses": {"leadership_gap": {"type": "float", "description": "The difference in leadership roles between genders"}}}
{"api_name": "getGenderAndHistory", "api_description": "Retrieve gender-related historical information", "field": "Gender Studies/Gender and History", "parameters": {}, "required": [], "responses": {"historical_facts": {"type": "str", "description": "Interesting facts and events related to gender in history"}}}
{"api_name": "getPublicManagement", "api_description": "Retrieve information about public management practices", "field": "Public Administration/Public Management", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve public management information (e.g., USA, France, Japan)"}, "sector": {"type": "str", "description": "The sector of public management you are interested in (e.g., healthcare, education, transportation)"}}, "required": ["country"], "responses": {"management_practices": {"type": "str", "description": "The public management practices implemented in the specified country and sector"}}}
{"api_name": "getPublicSectorGDP", "api_description": "Retrieve gross domestic product (GDP) information of the public sector", "field": "Public Administration/Public Sector Economics", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the GDP information (e.g., United States, Germany, Japan)"}, "year": {"type": "int", "description": "The year for which you want to retrieve the GDP information"}}, "required": ["country", "year"], "responses": {"gdp": {"type": "float", "description": "The gross domestic product of the public sector for the specified country and year"}, "unit": {"type": "str", "description": "The unit of GDP in which the value is provided"}}}
{"api_name": "getGovernmentRevenue", "api_description": "Retrieve government revenue information", "field": "Public Administration/Public Sector Economics", "parameters": {"year": {"type": "int", "description": "The year for which you want to get the government revenue (e.g., 2021, 2022, 2023)"}}, "required": ["year"], "responses": {"revenue": {"type": "float", "description": "The government revenue for the specified year"}, "currency": {"type": "str", "description": "The currency in which the government revenue is provided"}}}
{"api_name": "getNonprofitOrganizationInfo", "api_description": "Retrieve information about a nonprofit organization", "field": "Public Administration/Nonprofit Management", "parameters": {"organization_name": {"type": "str", "description": "The name of the nonprofit organization you want to retrieve information about"}}, "required": ["organization_name"], "responses": {"organization_info": {"type": "str", "description": "Information about the nonprofit organization"}}}
{"api_name": "getNonprofitBudget", "api_description": "Retrieve budget information of a nonprofit organization", "field": "Public Administration/Nonprofit Management", "parameters": {"organization_name": {"type": "str", "description": "The name of the nonprofit organization you want to retrieve budget information for"}}, "required": ["organization_name"], "responses": {"budget": {"type": "float", "description": "The budget of the nonprofit organization"}}}
{"api_name": "getInterGovernmentalRelations", "api_description": "Retrieve information about intergovernmental relations", "field": "Public Administration/Intergovernmental Relations", "parameters": {"level_of_government": {"type": "str", "description": "The level of government to retrieve information for (e.g., national, state, local)"}, "issue_area": {"type": "str", "description": "The issue area to retrieve information for (e.g., education, healthcare, transportation)"}}, "required": ["level_of_government"], "responses": {"intergovernmental_relations": {"type": "str", "description": "Information about the intergovernmental relations at the specified level of government and issue area"}}}
{"api_name": "getPublicAdminHistory", "api_description": "Retrieve the history of public administration", "field": "Public Administration/Public Administration History", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the public administration history (e.g., United States, France, China)"}, "time_period": {"type": "str", "description": "Specify a time period for the public administration history (e.g., ancient times, modern era, present day)"}}, "required": ["country"], "responses": {"history": {"type": "str", "description": "The history of public administration in the specified country"}}}
{"api_name": "getEngagementLevel", "api_description": "Retrieve the engagement level of citizens", "field": "Public Administration/Citizen Engagement", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the engagement level (e.g., United States, Germany, Australia)"}, "city": {"type": "str", "description": "The city in the country for which you want to get the engagement level (e.g., New York, Berlin, Sydney)"}}, "required": ["country"], "responses": {"engagement_level": {"type": "str", "description": "The engagement level of citizens in the specified country"}}}
{"api_name": "sendFeedback", "api_description": "Allow citizens to send feedback to the government", "field": "Public Administration/Citizen Engagement", "parameters": {"citizen_name": {"type": "str", "description": "The name of the citizen"}, "feedback_text": {"type": "str", "description": "The feedback message from the citizen"}, "contact_email": {"type": "str", "description": "The email address of the citizen for contact purposes"}}, "required": ["citizen_name", "feedback_text"], "responses": {"success": {"type": "bool", "description": "Indicates if the feedback was successfully sent"}}}
{"api_name": "submitServiceRequest", "api_description": "Allow citizens to submit service requests to the government", "field": "Public Administration/Citizen Engagement", "parameters": {"citizen_name": {"type": "str", "description": "The name of the citizen"}, "service_request_type": {"type": "str", "description": "The type of service request being submitted (e.g., pothole repair, street lighting, garbage collection)"}, "request_details": {"type": "str", "description": "Additional details or description of the service request"}}, "required": ["citizen_name", "service_request_type"], "responses": {"success": {"type": "bool", "description": "Indicates if the service request was successfully submitted"}}}
{"api_name": "getPublicFeedback", "api_description": "Retrieve feedback from the public about government policies and services", "field": "Public Administration/Citizen Engagement", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve public feedback (e.g., city, state, country)"}, "topic": {"type": "str", "description": "Specify a topic for the feedback (e.g., healthcare, transportation, education)"}, "time_period": {"type": "str", "description": "Specify a time period for the feedback (e.g., the past month, the past year)"}}, "required": ["location"], "responses": {"feedback_data": {"type": "str", "description": "The feedback data received from the public regarding the specified location and topic"}}}
{"api_name": "getEthicsAndAccountability", "api_description": "Retrieve information about ethics and accountability in the public sector", "field": "Public Administration/Ethics and Accountability in the Public Sector", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about ethics and accountability in the public sector"}}}
{"api_name": "evaluatePolicy", "api_description": "Evaluate the effectiveness of a policy", "field": "Public Administration/Policy Evaluation", "parameters": {"policy": {"type": "str", "description": "The policy to be evaluated"}, "implementation": {"type": "str", "description": "The degree of implementation of the policy (e.g., fully implemented, partially implemented)"}, "time_period": {"type": "str", "description": "The time period for which the policy is evaluated (e.g., one year, five years)"}, "outcome_measure": {"type": "str", "description": "The measure used to assess the policy outcome (e.g., cost savings, improved public health)"}}, "required": ["policy", "implementation"], "responses": {"effectiveness": {"type": "float", "description": "The effectiveness score of the policy evaluation"}, "outcome": {"type": "str", "description": "The outcome of the policy evaluation (e.g., successful, unsuccessful)"}}}
{"api_name": "policyCostBenefitAnalysis", "api_description": "Perform a cost-benefit analysis of a policy", "field": "Public Administration/Policy Evaluation", "parameters": {"policy": {"type": "str", "description": "The policy to be analyzed"}, "cost_categories": {"type": "str", "description": "The categories of costs associated with the policy (e.g., implementation costs, monitoring costs)"}, "benefit_categories": {"type": "str", "description": "The categories of benefits resulting from the policy (e.g., cost savings, improved quality of life)"}}, "required": ["policy", "cost_categories", "benefit_categories"], "responses": {"net_benefit": {"type": "float", "description": "The net benefit (benefits minus costs) of the policy"}, "conclusion": {"type": "str", "description": "The conclusion of the cost-benefit analysis (e.g., cost-effective, not cost-effective)"}}}
{"api_name": "policyStakeholderAnalysis", "api_description": "Conduct a stakeholder analysis for a policy", "field": "Public Administration/Policy Evaluation", "parameters": {"policy": {"type": "str", "description": "The policy to be analyzed"}, "stakeholder_groups": {"type": "str", "description": "The groups of stakeholders affected by the policy (e.g., government agencies, NGOs)"}, "interests": {"type": "str", "description": "The interests of each stakeholder group in the policy (e.g., financial gains, social equity)"}, "influence_level": {"type": "str", "description": "The level of influence of each stakeholder group on the policy (e.g., high, medium, low)"}}, "required": ["policy", "stakeholder_groups", "interests", "influence_level"], "responses": {"analysis_result": {"type": "str", "description": "The result of the stakeholder analysis"}, "recommendations": {"type": "str", "description": "Recommendations for engaging stakeholders in the policy process"}}}
{"api_name": "getPublicServices", "api_description": "Retrieve information about public services", "field": "Public Administration/Law and Public Administration", "parameters": {"country": {"type": "str", "description": "The name of the country for which you want to get information about public services (e.g., USA, UK, Canada)"}}, "required": ["country"], "responses": {"services": {"type": "str", "description": "The list of public services available in the specified country"}}}
{"api_name": "evaluatePolicyEffectiveness", "api_description": "Evaluate the effectiveness of a specific public administration policy", "field": "Public Administration/Social Equity and Public Administration", "parameters": {"policy_name": {"type": "str", "description": "The name of the public administration policy"}, "target_population": {"type": "str", "description": "The target population affected by the policy"}, "indicators": {"type": "str", "description": "The key indicators used to evaluate the policy effectiveness (e.g., employment rate, poverty rate)"}, "time_period": {"type": "str", "description": "The time period over which the policy effectiveness is evaluated (e.g., 1 year, 5 years, 10 years)"}}, "required": ["policy_name", "target_population", "indicators"], "responses": {"effectiveness_score": {"type": "float", "description": "The calculated effectiveness score for the policy"}}}
{"api_name": "calculateEquityIndex", "api_description": "Calculate the social equity index for a given population", "field": "Public Administration/Social Equity and Public Administration", "parameters": {"population": {"type": "int", "description": "The total population of the area for which you want to calculate the social equity index"}, "income_distribution": {"type": "str", "description": "The income distribution data for the population (e.g., Gini coefficient, quartile income ranges)"}, "education_level": {"type": "str", "description": "The education level distribution data for the population (e.g., percentage of population with high school education, college education)"}, "ethnicity_distribution": {"type": "str", "description": "The ethnicity distribution data for the population (e.g., percentage of population belonging to different ethnic groups)"}}, "required": ["population"], "responses": {"equity_index": {"type": "float", "description": "The calculated social equity index for the given population"}}}
{"api_name": "getEquityData", "api_description": "Retrieve social equity data related to public administration", "field": "Public Administration/Social Equity and Public Administration", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the equity data (e.g., city, state, country)"}, "year": {"type": "int", "description": "The specific year for which you want to retrieve data"}}, "required": ["location"], "responses": {"equity_index": {"type": "float", "description": "The social equity index value for the specified location and year"}, "education_access": {"type": "float", "description": "The score representing the accessibility of education in the specified location and year"}, "income_inequality": {"type": "float", "description": "The measure of income inequality in the specified location and year"}}}
{"api_name": "emergencyAlert", "api_description": "Send emergency alert message", "field": "Public Administration/Homeland Security Policy and Administration", "parameters": {"message": {"type": "str", "description": "The emergency alert message to be sent"}, "recipients": {"type": "str", "description": "The recipients of the emergency alert (e.g., all citizens, specific departments)"}, "urgency": {"type": "str", "description": "Specify the urgency level of the alert (e.g., low, medium, high)"}}, "required": ["message", "recipients"], "responses": {"success": {"type": "bool", "description": "Indicates whether the emergency alert was sent successfully"}}}
{"api_name": "getTourismPolicy", "api_description": "Retrieve the tourism policies and regulations of a specific country or region", "field": "Public Administration/Tourism Policy and Administration", "parameters": {"location": {"type": "str", "description": "The country or region for which you want to get the tourism policies (e.g., United States, Europe, Asia)"}, "category": {"type": "str", "description": "The category of tourism policies to retrieve (e.g., visa regulations, transportation guidelines, safety protocols)"}}, "required": ["location"], "responses": {"policies": {"type": "str", "description": "The tourism policies and regulations for the specified location and category"}}}
{"api_name": "getDecisionMakingFramework", "api_description": "Retrieve a decision-making framework for ethical dilemmas in the public sector", "field": "Public Administration/Ethics and Leadership in the Public Sector", "parameters": {}, "required": [], "responses": {"decision_making_framework": {"type": "str", "description": "A decision-making framework for ethical dilemmas in the public sector"}}}
{"api_name": "getEthicsAndLeadershipInfo", "api_description": "Retrieve information about ethics and leadership in the public sector", "field": "Public Administration/Ethics and Leadership in the Public Sector", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information (e.g., USA, UK, Canada)"}, "government_level": {"type": "str", "description": "The government level to consider (e.g., national, state, local)"}, "topic": {"type": "str", "description": "The specific ethics and leadership topic of interest (e.g., accountability, transparency, decision-making)"}}, "required": ["country"], "responses": {"info": {"type": "str", "description": "Information about ethics and leadership in the public sector"}}}
{"api_name": "getLeadershipTraining", "api_description": "Retrieve leadership training information for public sector employees", "field": "Public Administration/Ethics and Leadership in the Public Sector", "parameters": {"employee_id": {"type": "str", "description": "The unique identifier of the public sector employee"}}, "required": ["employee_id"], "responses": {"training_courses": {"type": "str", "description": "The list of leadership training courses attended by the employee"}, "training_duration": {"type": "int", "description": "The total duration of leadership training in hours"}}}
{"api_name": "getPublicAdminTech", "api_description": "Retrieve information about the intersection of public administration and technology", "field": "Public Administration/Public Administration and Technology", "parameters": {}, "required": [], "responses": {"info": {"type": "str", "description": "Information about how technology is being used in public administration"}}}
{"api_name": "getDigitalTransformation", "api_description": "Retrieve information about digital transformation in public administration", "field": "Public Administration/Public Administration and Technology", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information about digital transformation (e.g., USA, Germany, Japan)"}, "year": {"type": "int", "description": "The specific year for which you want to retrieve the information"}}, "required": ["country"], "responses": {"digital_transformation": {"type": "str", "description": "The level of digital transformation in the specified country"}}}
{"api_name": "getCityMayor", "api_description": "Retrieve the mayor of a city", "field": "Public Administration/Urban Governance", "parameters": {"city": {"type": "str", "description": "The city for which you want to get the mayor (e.g., London, Berlin, Paris)"}}, "required": ["city"], "responses": {"mayor": {"type": "str", "description": "The name of the mayor of the specified city"}}}
{"api_name": "getCityTaxes", "api_description": "Retrieve information about the taxes in a city", "field": "Public Administration/Urban Governance", "parameters": {"city": {"type": "str", "description": "The city for which you want to get the tax information (e.g., New Orleans, Vancouver, Barcelona)"}}, "required": ["city"], "responses": {"taxes": {"type": "str", "description": "Details about the taxes in the specified city"}}}
{"api_name": "getWorkplaceCulture", "api_description": "Retrieve workplace culture information in a public sector organization", "field": "Public Administration/Organizational Behavior in the Public Sector", "parameters": {"department": {"type": "str", "description": "The department for which you want to get workplace culture information (e.g., finance, human resources, planning)"}, "aspect": {"type": "str", "description": "Specify the aspect of workplace culture you are interested in (e.g., diversity and inclusion, work-life balance, leadership)"}, "time_period": {"type": "str", "description": "Specify a time period for workplace culture information (e.g., monthly, quarterly, yearly)"}}, "required": ["department", "aspect"], "responses": {"culture_rating": {"type": "float", "description": "The workplace culture rating for the specified department and aspect"}, "employee_comments": {"type": "str", "description": "Comments provided by employees regarding the specified aspect of workplace culture"}}}
{"api_name": "getLeadershipEffectiveness", "api_description": "Retrieve leadership effectiveness information in a public sector organization", "field": "Public Administration/Organizational Behavior in the Public Sector", "parameters": {"department": {"type": "str", "description": "The department for which you want to get leadership effectiveness information (e.g., finance, human resources, planning)"}, "leadership_level": {"type": "str", "description": "Specify the leadership level for which you want to get effectiveness information (e.g., executives, managers, team leaders)"}, "time_period": {"type": "str", "description": "Specify a time period for leadership effectiveness information (e.g., monthly, quarterly, yearly)"}}, "required": ["department", "leadership_level"], "responses": {"effectiveness_score": {"type": "float", "description": "The leadership effectiveness score for the specified department and leadership level"}, "feedback_comments": {"type": "str", "description": "Feedback comments provided by employees regarding the specified leadership level"}}}
{"api_name": "getArtGrant", "api_description": "Retrieve information about art grants", "field": "Public Administration/Public Administration and the Arts", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information about art grants (e.g., United States, France, Australia)"}, "year": {"type": "int", "description": "The year for which you want to get information about art grants"}}, "required": ["country"], "responses": {"grant_amount": {"type": "float", "description": "The amount of the art grant in the specified country and year"}, "grant_description": {"type": "str", "description": "A description of the art grant in the specified country and year"}}}
{"api_name": "getPublicArtEvents", "api_description": "Retrieve information about public art events", "field": "Public Administration/Public Administration and the Arts", "parameters": {"city": {"type": "str", "description": "The city for which you want to get information about public art events (e.g., New York, Paris, London)"}, "date": {"type": "str", "description": "The date for which you want to get information about public art events"}, "category": {"type": "str", "description": "The category of public art events you are interested in (e.g., exhibitions, performances)"}}, "required": ["city"], "responses": {"event_title": {"type": "str", "description": "The title of the public art event in the specified city and date"}, "event_location": {"type": "str", "description": "The location of the public art event in the specified city and date"}, "event_description": {"type": "str", "description": "A description of the public art event in the specified city and date"}}}
{"api_name": "getEnrollmentStats", "api_description": "Retrieve enrollment statistics for a school", "field": "Public Administration/Educational Policy and Administration", "parameters": {"school_id": {"type": "int", "description": "The unique identifier of the school"}}, "required": ["school_id"], "responses": {"total_students": {"type": "int", "description": "The total number of students enrolled in the school"}, "male_students": {"type": "int", "description": "The number of male students enrolled in the school"}, "female_students": {"type": "int", "description": "The number of female students enrolled in the school"}}}
{"api_name": "getGenderDifference", "api_description": "Retrieve the gender difference in public administration", "field": "Public Administration/Public Administration and Gender", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the gender difference in public administration (e.g., United States, Germany, France)"}, "year": {"type": "int", "description": "The year for which you want to get the gender difference (e.g., 2010, 2020)"}}, "required": ["country"], "responses": {"gender_difference_percentage": {"type": "float", "description": "The percentage of gender difference in public administration at the specified country and year"}}}
{"api_name": "getIndigenousPeopleData", "api_description": "Retrieve data about indigenous peoples in a specific region", "field": "Public Administration/Public Administration and Indigenous Peoples", "parameters": {"region": {"type": "str", "description": "The region for which you want to get the data (e.g., North America, Africa, Asia)"}, "year": {"type": "int", "description": "The year for which you want to get the data (e.g., 2020, 2021)"}}, "required": ["region"], "responses": {"population": {"type": "int", "description": "The estimated population of indigenous peoples in the specified region"}, "language": {"type": "str", "description": "The predominant indigenous language spoken in the region"}}}
{"api_name": "getPublicAdminInfo", "api_description": "Retrieve public administration and philanthropy information", "field": "Public Administration/Public Administration and Philanthropy", "parameters": {"country": {"type": "str", "description": "The country for which you want to get public administration and philanthropy information (e.g., United States, Germany, Japan)"}, "region": {"type": "str", "description": "The region within the country (e.g., state, province)"}, "issue": {"type": "str", "description": "Specify a specific issue related to public administration and philanthropy (e.g., education, poverty alleviation)"}}, "required": ["country"], "responses": {"government_initiatives": {"type": "str", "description": "The government initiatives and policies related to the specified issue"}, "philanthropy_organizations": {"type": "str", "description": "The philanthropy organizations working on the specified issue"}}}
{"api_name": "getStrategicGoals", "api_description": "Retrieve the strategic goals of an organization", "field": "Management/Strategic Management", "parameters": {"organization": {"type": "str", "description": "The name of the organization for which you want to retrieve the strategic goals"}}, "required": ["organization"], "responses": {"strategic_goals": {"type": "str", "description": "The strategic goals of the specified organization"}}}
{"api_name": "createOperation", "api_description": "Create a new operation", "field": "Management/Operations Management", "parameters": {"operation_name": {"type": "str", "description": "Name of the operation"}, "start_date": {"type": "str", "description": "Start date of the operation (e.g., '2021-08-10')"}, "end_date": {"type": "str", "description": "End date of the operation (e.g., '2021-08-20')"}, "location": {"type": "str", "description": "Location of the operation (e.g., 'New York')"}}, "required": ["operation_name", "start_date", "end_date", "location"], "responses": {"operation_id": {"type": "int", "description": "Unique ID assigned to the created operation"}}}
{"api_name": "createTask", "api_description": "Create a new task for operations management", "field": "Management/Operations Management", "parameters": {"task_name": {"type": "str", "description": "The name of the task"}, "description": {"type": "str", "description": "Description of the task"}, "priority": {"type": "int", "description": "The priority level of the task (e.g., 1, 2, 3)"}, "deadline": {"type": "str", "description": "The deadline for completing the task"}}, "required": ["task_name", "deadline"], "responses": {"status": {"type": "str", "description": "The status of the task"}}}
{"api_name": "createRiskProfile", "api_description": "Create a risk profile for a particular project or activity", "field": "Management/Risk Management", "parameters": {"project_name": {"type": "str", "description": "The name of the project or activity for which to create the risk profile"}, "project_description": {"type": "str", "description": "A brief description of the project or activity"}, "likelihood": {"type": "str", "description": "The likelihood of the risk occurrence (e.g., low, medium, high)"}, "impact": {"type": "str", "description": "The impact of the risk occurrence (e.g., low, medium, high)"}, "risk_level": {"type": "str", "description": "The overall risk level (e.g., low, medium, high)"}}, "required": ["project_name", "likelihood", "impact", "risk_level"], "responses": {"success": {"type": "bool", "description": "Indicates whether the risk profile creation was successful"}, "risk_profile_id": {"type": "str", "description": "The unique identifier of the created risk profile"}}}
{"api_name": "addRiskFactor", "api_description": "Add a new risk factor to a specific project", "field": "Management/Risk Management", "parameters": {"project_id": {"type": "str", "description": "The ID of the project to which you want to add the risk factor"}, "risk_factor": {"type": "str", "description": "The description of the new risk factor"}}, "required": ["project_id", "risk_factor"], "responses": {"success": {"type": "bool", "description": "A boolean value indicating whether the risk factor was successfully added"}}}
{"api_name": "deleteRiskFactor", "api_description": "Delete a specific risk factor associated with a project", "field": "Management/Risk Management", "parameters": {"project_id": {"type": "str", "description": "The ID of the project to which the risk factor belongs"}, "risk_factor_id": {"type": "int", "description": "The ID of the risk factor to delete"}}, "required": ["project_id", "risk_factor_id"], "responses": {"success": {"type": "bool", "description": "A boolean value indicating whether the risk factor was successfully deleted"}}}
{"api_name": "createITProject", "api_description": "Create a new IT project", "field": "Management/Information Technology Management", "parameters": {"name": {"type": "str", "description": "The name of the new project"}, "department": {"type": "str", "description": "The department to which the project belongs (e.g., HR, Finance, Marketing)"}, "start_date": {"type": "str", "description": "The start date of the project (e.g., yyyy-mm-dd)"}, "end_date": {"type": "str", "description": "The end date of the project (e.g., yyyy-mm-dd)"}}, "required": ["name", "department", "start_date", "end_date"], "responses": {"message": {"type": "str", "description": "A message indicating the success of the API"}}}
{"api_name": "getEconomicAnalysis", "api_description": "Retrieve economic analysis for a given management scenario", "field": "Management/Economic Analysis", "parameters": {"scenario": {"type": "str", "description": "The management scenario for which you want to get the economic analysis (e.g., increasing production, cost reduction)"}}, "required": ["scenario"], "responses": {"analysis_result": {"type": "str", "description": "The economic analysis result for the specified management scenario"}}}
{"api_name": "makeDecision", "api_description": "Generate an informed decision based on provided data", "field": "Management/Decision Making", "parameters": {"data": {"type": "str", "description": "The data used for decision making (e.g., sales figures, market analysis)"}, "criteria": {"type": "str", "description": "The criteria or factors to consider when making the decision (e.g., cost, revenue, customer satisfaction)"}, "weightage": {"type": "float", "description": "The weightage or importance assigned to each criterion (e.g., 0.1, 0.5, 0.9)"}}, "required": ["data", "criteria", "weightage"], "responses": {"decision": {"type": "str", "description": "The generated decision based on the provided data, criteria, and weightage"}}}
{"api_name": "getDepartmentBudget", "api_description": "Retrieve the budget information of a department", "field": "Management/Organizational Development", "parameters": {"department": {"type": "str", "description": "The department for which you want to retrieve the budget information (e.g., Marketing, Sales, IT)"}}, "required": ["department"], "responses": {"budget": {"type": "float", "description": "The budget allocated to the specified department"}}}
{"api_name": "getTeamHierarchy", "api_description": "Retrieve the hierarchical structure of a team", "field": "Management/Organizational Development", "parameters": {"team": {"type": "str", "description": "The team for which you want to retrieve the hierarchy (e.g., Sales, Product, Customer Support)"}}, "required": ["team"], "responses": {"hierarchy": {"type": "str", "description": "The hierarchical structure of the specified team"}}}
{"api_name": "assignProject", "api_description": "Assign a project to a team", "field": "Management/Organizational Development", "parameters": {"project_name": {"type": "str", "description": "The name of the project"}, "team_id": {"type": "str", "description": "The unique identifier of the team to which the project will be assigned"}}, "required": ["project_name", "team_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the project assignment was successful"}}}
{"api_name": "addNewDepartment", "api_description": "Add a new department to the organization", "field": "Management/Organizational Development", "parameters": {"department_name": {"type": "str", "description": "The name of the new department"}, "manager_name": {"type": "str", "description": "The name of the department manager"}}, "required": ["department_name", "manager_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the department addition was successful"}}}
{"api_name": "addInnovation", "api_description": "Add a new innovation to the database", "field": "Management/Innovation Management", "parameters": {"title": {"type": "str", "description": "The title of the innovation"}, "description": {"type": "str", "description": "A brief description of the innovation"}, "industry": {"type": "str", "description": "The industry to which the innovation belongs (e.g., technology, healthcare, finance)"}}, "required": ["title", "description", "industry"], "responses": {"success": {"type": "bool", "description": "Indicates whether the innovation was added successfully"}}}
{"api_name": "deleteInnovation", "api_description": "Delete an existing innovation from the database", "field": "Management/Innovation Management", "parameters": {"title": {"type": "str", "description": "The title of the innovation to be deleted"}}, "required": ["title"], "responses": {"success": {"type": "bool", "description": "Indicates whether the innovation was deleted successfully"}}}
{"api_name": "updateOrganization", "api_description": "Update information of a nonprofit organization", "field": "Management/Nonprofit Management", "parameters": {"organization_id": {"type": "str", "description": "The unique identifier of the organization"}, "name": {"type": "str", "description": "The updated name of the nonprofit organization"}, "location": {"type": "str", "description": "The updated location of the nonprofit organization"}}, "required": ["organization_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the update was successful"}}}
{"api_name": "businessDevelopmentPlan", "api_description": "Create a business development plan for a company", "field": "Management/Business Development", "parameters": {"company_name": {"type": "str", "description": "The name of the company for which you want to create the plan"}, "target_market": {"type": "str", "description": "The target market for the business development plan (e.g., healthcare, technology, finance)"}, "key_objectives": {"type": "str", "description": "The key objectives to be achieved through the business development plan"}, "resources_available": {"type": "str", "description": "The resources available for implementing the plan"}}, "required": ["company_name", "target_market"], "responses": {"business_development_plan": {"type": "str", "description": "The business development plan for the specified company"}}}
{"api_name": "calculateEconomicValueAdded", "api_description": "Calculate the economic value added (EVA) for a company", "field": "Management/Corporate Finance", "parameters": {"net_profit": {"type": "float", "description": "The net profit of the company"}, "capital_cost": {"type": "float", "description": "The weighted average cost of capital (WACC)"}}, "required": ["net_profit", "capital_cost"], "responses": {"eva": {"type": "float", "description": "The economic value added (EVA) of the company"}}}
{"api_name": "calculateNetIncome", "api_description": "Calculate the net income of a business", "field": "Management/Entrepreneurial Finance", "parameters": {"revenue": {"type": "float", "description": "Total revenue generated by the business"}, "expenses": {"type": "float", "description": "Total expenses incurred by the business"}, "tax_rate": {"type": "float", "description": "The tax rate applicable to the business"}}, "required": ["revenue", "expenses"], "responses": {"net_income": {"type": "float", "description": "The net income of the business"}}}
{"api_name": "getCorporateStrategy", "api_description": "Retrieve corporate strategy information", "field": "Management/Corporate Strategy", "parameters": {"company": {"type": "str", "description": "The name of the company for which you want to get the corporate strategy"}}, "required": ["company"], "responses": {"strategy": {"type": "str", "description": "The corporate strategy of the specified company"}}}
{"api_name": "getCameraEquipment", "api_description": "Retrieve information about camera equipment used in a film", "field": "Film/Cinematography", "parameters": {"film_title": {"type": "str", "description": "The title of the film you want to get camera equipment information for (e.g., The Godfather, Titanic)"}, "scene_number": {"type": "int", "description": "The scene number for which you want to get camera equipment information (e.g., 1, 2, 3, ...)"}}, "required": ["film_title"], "responses": {"camera_brand": {"type": "str", "description": "The brand of the camera used for the specified scene"}, "camera_model": {"type": "str", "description": "The model of the camera used for the specified scene"}, "lens_brand": {"type": "str", "description": "The brand of the lens used for the specified scene"}, "lens_model": {"type": "str", "description": "The model of the lens used for the specified scene"}}}
{"api_name": "getMakeupLook", "api_description": "Retrieve a makeup look for a film character", "field": "Film/Makeup and Hair", "parameters": {"character": {"type": "str", "description": "The name of the film character for which you want to get the makeup look"}}, "required": ["character"], "responses": {"makeup_look": {"type": "str", "description": "The description of the makeup look for the specified film character"}}}
{"api_name": "getMakeupandHairArtist", "api_description": "Retrieve makeup and hair artist information for a film", "field": "Film/Makeup and Hair", "parameters": {"film_title": {"type": "str", "description": "The title of the film for which you want to get makeup and hair artist information"}, "character": {"type": "str", "description": "The name of the character for which you want to get the makeup and hair artist information"}, "artist_type": {"type": "str", "description": "Specify the type of artist for makeup and hair (e.g., makeup artist, hair stylist)"}}, "required": ["film_title", "character"], "responses": {"artist_name": {"type": "str", "description": "The name of the makeup and hair artist for the specified film and character"}, "artist_type": {"type": "str", "description": "The type of artist (makeup artist or hair stylist)"}}}
{"api_name": "getFilmMarketing", "api_description": "Retrieve film marketing information", "field": "Film/Film Marketing", "parameters": {"film_title": {"type": "str", "description": "The title of the film for which you want to get marketing information (e.g., Avengers: Endgame, The Lion King)"}, "platform": {"type": "str", "description": "The marketing platform to retrieve information from (e.g., Facebook, Instagram, Twitter)"}}, "required": ["film_title"], "responses": {"marketing_info": {"type": "str", "description": "The marketing information for the specified film"}}}
{"api_name": "getFilmDistribution", "api_description": "Retrieve film distribution information", "field": "Film/Film Distribution", "parameters": {"film_title": {"type": "str", "description": "The title of the film for which you want to get the distribution information"}}, "required": ["film_title"], "responses": {"distribution_company": {"type": "str", "description": "The name of the distribution company for the film"}, "release_date": {"type": "str", "description": "The release date of the film"}, "theaters": {"type": "int", "description": "The number of theaters where the film is currently being shown"}}}
{"api_name": "restoreFilm", "api_description": "Restore an old film to improve its quality and preserve it for future viewing", "field": "Film/Film Restoration", "parameters": {"film_file": {"type": "str", "description": "The file path of the film to be restored"}, "cleaning": {"type": "bool", "description": "Specify whether the film needs to be cleaned before restoration (True/False)"}, "color_correction": {"type": "bool", "description": "Specify whether color correction is needed during restoration (True/False)"}, "stabilization": {"type": "bool", "description": "Specify whether stabilization of the film is required (True/False)"}, "noise_reduction": {"type": "bool", "description": "Specify whether noise reduction should be applied during restoration (True/False)"}, "output_format": {"type": "str", "description": "The desired format of the restored film (e.g., MP4, AVI, MOV)"}}, "required": ["film_file"], "responses": {"restored_film": {"type": "str", "description": "The file path of the restored film"}}}
{"api_name": "getFilmCriticism", "api_description": "Retrieve film criticism information", "field": "Film/Film Criticism", "parameters": {"film_title": {"type": "str", "description": "The title of the film for which you want to get the criticism"}, "critic_name": {"type": "str", "description": "The name of the critic who reviewed the film"}, "critic_rating": {"type": "float", "description": "The minimum rating given by the critic (e.g., 0.0-10.0)"}, "year": {"type": "int", "description": "The year when the film was released"}}, "required": ["film_title"], "responses": {"criticism_text": {"type": "str", "description": "The text of the film criticism"}, "rating": {"type": "float", "description": "The rating given to the film by the critic"}}}
{"api_name": "getBiogeographyInfo", "api_description": "Retrieve information about the biogeography of a specific location", "field": "Geography/Biogeography", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the biogeography information (e.g., Amazon rainforest, Great Barrier Reef, Serengeti Plains)"}, "ecosystem_type": {"type": "str", "description": "Specify the type of ecosystem to include in the biogeography information (e.g., terrestrial, marine)"}, "endangered_species": {"type": "bool", "description": "Specify whether to include information about endangered species in the biogeography information (true, false)"}, "climate": {"type": "str", "description": "Specify the climate conditions of the location (e.g., tropical, arid, temperate)"}}, "required": ["location"], "responses": {"biogeography_info": {"type": "str", "description": "The biogeography information of the specified location"}}}
{"api_name": "getBiogeographicalDistribution", "api_description": "Retrieve the biogeographical distribution of a species", "field": "Geography/Biogeography", "parameters": {"species": {"type": "str", "description": "The species for which you want to get the biogeographical distribution (e.g., Homo sapiens, Panthera leo)"}, "habitat": {"type": "str", "description": "The habitat in which the species primarily lives (e.g., rainforest, desert)"}, "region": {"type": "str", "description": "The region in which you want to search for the biogeographical distribution of the species (e.g., Asia, Africa)"}, "conservation_status": {"type": "str", "description": "The conservation status of the species (e.g., endangered, vulnerable)"}, "endemic": {"type": "bool", "description": "Specify if you want to retrieve only species that are endemic to the specified region (true/false)"}}, "required": ["species"], "responses": {"distribution": {"type": "str", "description": "The biogeographical distribution of the specified species"}}}
{"api_name": "getRiverFlowRate", "api_description": "Retrieve the flow rate of a river", "field": "Geography/Hydrology", "parameters": {"river_name": {"type": "str", "description": "The name of the river for which you want to get the flow rate (e.g., Amazon River, Nile River)"}}, "required": ["river_name"], "responses": {"flow_rate": {"type": "float", "description": "The flow rate of the specified river in cubic meters per second"}}}
{"api_name": "getAquiferData", "api_description": "Retrieve data about a specific aquifer", "field": "Geography/Hydrology", "parameters": {"aquifer_name": {"type": "str", "description": "The name of the aquifer for which you want to retrieve data (e.g., Ogallala Aquifer, Great Artesian Basin)"}}, "required": ["aquifer_name"], "responses": {"data": {"type": "str", "description": "Data about the specified aquifer"}}}
{"api_name": "getRainfall", "api_description": "Retrieve the current rainfall information", "field": "Geography/Meteorology", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the rainfall information (e.g., Sydney, Seattle, Mumbai)"}, "duration": {"type": "str", "description": "The duration for which you want to get the rainfall information (e.g., last hour, last 24 hours)"}}, "required": ["location"], "responses": {"rainfall": {"type": "float", "description": "The amount of rainfall at the specified location"}, "duration": {"type": "str", "description": "The duration of rainfall measurement"}}}
{"api_name": "getMedicalGeographyData", "api_description": "Retrieve medical geography data", "field": "Geography/Medical Geography", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve medical geography data (e.g., United States, China, Australia)"}, "region": {"type": "str", "description": "The region within the country for which you want to retrieve medical geography data (e.g., Northeast, Midwest, Southwest)"}, "disease": {"type": "str", "description": "The specific disease for which you want to retrieve medical geography data (e.g., COVID-19, Malaria, Cancer)"}, "year": {"type": "int", "description": "The year for which you want to retrieve medical geography data (e.g., 2021, 2022)"}, "statistic_type": {"type": "str", "description": "The type of statistic you want to retrieve (e.g., incidence, prevalence, mortality)"}}, "required": ["country", "disease"], "responses": {"data": {"type": "str", "description": "The medical geography data for the specified country, region, disease, year, and statistic type"}}}
{"api_name": "getGeographicEducation", "api_description": "Retrieve geographic education information", "field": "Geography/Geographic Education", "parameters": {"location": {"type": "str", "description": "The location for which you want to get geographic education information (e.g., country, city)"}, "level": {"type": "str", "description": "The level of education (e.g., elementary, middle, high, university)"}, "subject": {"type": "str", "description": "The subject of geographic education (e.g., physical geography, human geography)"}}, "required": ["location"], "responses": {"education_info": {"type": "str", "description": "Information about geographic education at the specified location"}}}
{"api_name": "getFoodGeography", "api_description": "Retrieve geographic information about a specific food", "field": "Geography/Geography of Food", "parameters": {"food": {"type": "str", "description": "The name of the food for which you want to get the geographic information (e.g., pizza, sushi, pasta)"}}, "required": ["food"], "responses": {"geography": {"type": "str", "description": "The geographic origin or distribution of the specified food"}}}
{"api_name": "getMusculoskeletalSystem", "api_description": "Retrieve information about the musculoskeletal system of an animal", "field": "Veterinary Medicine/Animal anatomy and physiology", "parameters": {"animal_type": {"type": "str", "description": "The type of animal (e.g., dog, cat, horse)"}}, "required": ["animal_type"], "responses": {"musculoskeletal_system": {"type": "str", "description": "Information about the musculoskeletal system of the specified animal"}}}
{"api_name": "getAnimalPathology", "api_description": "Retrieve information about veterinary pathology", "field": "Veterinary Medicine/Veterinary pathology", "parameters": {"animal_type": {"type": "str", "description": "The type of animal (e.g., dog, cat, horse)"}, "disease": {"type": "str", "description": "The specific disease or condition to search for (e.g., cancer, infection, organ failure)"}, "severity": {"type": "str", "description": "The severity level of the condition (e.g., mild, moderate, severe)"}, "age": {"type": "int", "description": "The age of the animal in years"}, "gender": {"type": "str", "description": "The gender of the animal (e.g., male, female)"}}, "required": ["animal_type", "disease"], "responses": {"pathology_info": {"type": "str", "description": "Details about the veterinary pathology condition, including symptoms, causes, and treatment options"}, "diagnosis_date": {"type": "str", "description": "The date of diagnosis for the condition"}, "veterinarian": {"type": "str", "description": "The name of the veterinarian who diagnosed the condition"}}}
{"api_name": "getDiseaseDiagnosis", "api_description": "Retrieve the diagnosis of a disease in animals", "field": "Veterinary Medicine/Veterinary pathology", "parameters": {"animal_type": {"type": "str", "description": "The type of animal for which you want to retrieve the diagnosis (e.g., dog, cat, horse)"}, "symptoms": {"type": "str", "description": "The symptoms exhibited by the animal (e.g., fever, cough, diarrhea)"}, "age": {"type": "int", "description": "The age of the animal in years"}, "weight": {"type": "float", "description": "The weight of the animal in kilograms"}}, "required": ["animal_type", "symptoms"], "responses": {"diagnosis": {"type": "str", "description": "The diagnosis of the disease in the animal"}, "treatment": {"type": "str", "description": "The recommended treatment for the diagnosed disease"}}}
{"api_name": "checkPoisoningRisk", "api_description": "Check the risk of poisoning for a pet", "field": "Veterinary Medicine/Veterinary toxicology", "parameters": {"pet_species": {"type": "str", "description": "The species of the pet (e.g., dog, cat, bird)"}, "substance": {"type": "str", "description": "The substance to check for poisoning risk"}}, "required": ["pet_species", "substance"], "responses": {"poisoning_risk": {"type": "str", "description": "The level of poisoning risk for the specified pet and substance"}}}
{"api_name": "getImmunologicalTests", "api_description": "Retrieve information on immunological tests for veterinary medicine", "field": "Veterinary Medicine/Veterinary immunology", "parameters": {"species": {"type": "str", "description": "The species of the animal (e.g., dog, cat, horse)"}, "disease": {"type": "str", "description": "The disease for which the immunological test is required (e.g., distemper, feline immunodeficiency virus, equine influenza)"}, "test_type": {"type": "str", "description": "The type of immunological test required (e.g., ELISA, PCR, Western blot)"}}, "required": ["species", "disease"], "responses": {"test_name": {"type": "str", "description": "The name of the immunological test for the specified species and disease"}, "test_protocol": {"type": "str", "description": "The protocol or procedure for performing the immunological test"}, "test_sensitivity": {"type": "float", "description": "The sensitivity of the immunological test"}, "test_specificity": {"type": "float", "description": "The specificity of the immunological test"}}}
{"api_name": "getAntibodyResponse", "api_description": "Retrieve the antibody response information for a specific animal", "field": "Veterinary Medicine/Veterinary immunology", "parameters": {"animal_species": {"type": "str", "description": "The species of the animal for which you want to retrieve antibody response information (e.g., dog, cat, horse)"}, "antigen": {"type": "str", "description": "The specific antigen for which you want to retrieve antibody response information (e.g., rabies, distemper)"}, "time_point": {"type": "str", "description": "Specify a time point for antibody response (e.g., 1 week, 1 month, 3 months)"}}, "required": ["animal_species", "antigen"], "responses": {"antibody_level": {"type": "float", "description": "The level of antibody response for the specified animal and antigen"}, "unit": {"type": "str", "description": "The unit of antibody level"}}}
{"api_name": "getLargeAnimalVitals", "api_description": "Retrieve vital information of a large animal", "field": "Veterinary Medicine/Large animal medicine", "parameters": {"animal_id": {"type": "int", "description": "The unique identifier for the animal"}, "temperature_unit": {"type": "str", "description": "The unit of temperature in which the temperature will be provided (e.g., Celsius, Fahrenheit)"}, "heart_rate_unit": {"type": "str", "description": "The unit in which the heart rate will be provided (e.g., bpm, beats per minute)"}, "weight_unit": {"type": "str", "description": "The unit in which the weight will be provided (e.g., kg, pounds)"}, "blood_pressure_unit": {"type": "str", "description": "The unit in which blood pressure will be provided (e.g., mmHg, cmH2O)"}}, "required": ["animal_id"], "responses": {"temperature": {"type": "float", "description": "The temperature of the large animal"}, "heart_rate": {"type": "int", "description": "The heart rate of the large animal"}, "weight": {"type": "float", "description": "The weight of the large animal"}, "blood_pressure": {"type": "str", "description": "The blood pressure of the large animal"}}}
{"api_name": "getPetSymptoms", "api_description": "Retrieve common symptoms of diseases in small animals", "field": "Veterinary Medicine/Small animal medicine", "parameters": {}, "required": [], "responses": {"symptoms": {"type": "str", "description": "A list of common symptoms of diseases in small animals"}}}
{"api_name": "getSmallAnimalInfo", "api_description": "Retrieve information about small animal medicine", "field": "Veterinary Medicine/Small animal medicine", "parameters": {"animal_type": {"type": "str", "description": "The type of small animal for which you want to get information (e.g., dog, cat, rabbit)"}, "symptom": {"type": "str", "description": "The symptom or condition you want information about (e.g., diarrhea, skin rash, coughing)"}, "age": {"type": "int", "description": "The age of the small animal in months"}}, "required": ["animal_type", "symptom"], "responses": {"treatment": {"type": "str", "description": "The recommended treatment for the given symptom or condition"}, "diet": {"type": "str", "description": "The recommended diet for the small animal"}, "medication": {"type": "str", "description": "The suggested medication for the given symptom or condition"}}}
{"api_name": "addEquineVaccination", "api_description": "Add a vaccination entry for an equine animal", "field": "Veterinary Medicine/Equine medicine", "parameters": {"animal_id": {"type": "str", "description": "The ID of the equine animal for which you want to add a vaccination entry"}, "vaccine_name": {"type": "str", "description": "The name of the vaccine given to the equine animal"}, "vaccination_date": {"type": "str", "description": "The date on which the vaccination was administered (e.g., 2021-03-15)"}, "veterinarian_id": {"type": "str", "description": "The ID of the veterinarian who administered the vaccination"}}, "required": ["animal_id", "vaccine_name", "vaccination_date"], "responses": {"message": {"type": "str", "description": "Success message indicating the vaccination entry was added successfully"}}}
{"api_name": "getBirdDiet", "api_description": "Retrieve the recommended diet for a bird", "field": "Veterinary Medicine/Avian medicine", "parameters": {"species": {"type": "str", "description": "The species of the bird (e.g., parrot, canary, finch)"}, "age": {"type": "int", "description": "The age of the bird in months"}}, "required": ["species"], "responses": {"diet": {"type": "str", "description": "The recommended diet for the bird"}}}
{"api_name": "getExoticAnimalHealthStatus", "api_description": "Retrieve health status information of exotic animals", "field": "Veterinary Medicine/Exotic animal medicine", "parameters": {"animal_type": {"type": "str", "description": "The type of exotic animal (e.g., reptile, bird, amphibian)"}, "location": {"type": "str", "description": "The location of the veterinary clinic (e.g., city, state, country)"}, "symptoms": {"type": "str", "description": "The symptoms exhibited by the exotic animal (e.g., lethargy, loss of appetite, skin lesions)"}}, "required": ["animal_type", "location"], "responses": {"diagnosis": {"type": "str", "description": "The diagnosis of the exotic animal's health condition"}, "treatment": {"type": "str", "description": "The recommended treatment for the exotic animal"}}}
{"api_name": "getAnimalBloodParameters", "api_description": "Retrieve the blood parameters of a laboratory animal", "field": "Veterinary Medicine/Laboratory animal medicine", "parameters": {"animal_id": {"type": "int", "description": "The ID of the laboratory animal for which you want to get the blood parameters"}}, "required": ["animal_id"], "responses": {"blood_parameters": {"type": "str", "description": "The blood parameters of the laboratory animal (e.g., red blood cell count, white blood cell count)"}}}
{"api_name": "getAnimalHealthRecord", "api_description": "Retrieve health record of laboratory animals", "field": "Veterinary Medicine/Laboratory animal medicine", "parameters": {"animal_id": {"type": "str", "description": "The identification number of the laboratory animal"}, "start_date": {"type": "str", "description": "The start date for retrieving health records (e.g., YYYY-MM-DD)"}, "end_date": {"type": "str", "description": "The end date for retrieving health records (e.g., YYYY-MM-DD)"}, "species": {"type": "str", "description": "The species of laboratory animal (e.g., mice, rats, rabbits)"}, "data_type": {"type": "str", "description": "The type of health data to be retrieved (e.g., weight, blood work, histology)"}}, "required": ["animal_id"], "responses": {"health_data": {"type": "str", "description": "Health data of the laboratory animal for the specified time period"}}}
{"api_name": "getLabAnimalHousing", "api_description": "Retrieve information about the suitable housing conditions for laboratory animals", "field": "Veterinary Medicine/Laboratory animal medicine", "parameters": {"species": {"type": "str", "description": "The laboratory animal species for which you want to get the housing information (e.g., rat, mouse, guinea pig)"}}, "required": ["species"], "responses": {"housing_conditions": {"type": "str", "description": "The suitable housing conditions for the specified laboratory animal species"}}}
{"api_name": "reproductiveMedicine", "api_description": "Retrieve reproductive medicine information for animals", "field": "Veterinary Medicine/Reproductive medicine in animals", "parameters": {"animal_type": {"type": "str", "description": "The type of animal for which you want to retrieve reproductive medicine information (e.g., dogs, cats, horses)"}, "procedure_type": {"type": "str", "description": "The type of reproductive procedure you are interested in (e.g., artificial insemination, embryo transfer, hormone therapy)"}, "breed": {"type": "str", "description": "The specific breed of animal you are interested in (e.g., Labrador Retriever, Siamese, Arabian)"}, "age": {"type": "int", "description": "The age of the animal in months"}}, "required": ["animal_type", "procedure_type"], "responses": {"success": {"type": "bool", "description": "Indicates whether the reproductive procedure was successful"}, "cost": {"type": "float", "description": "The cost of the reproductive procedure in the local currency"}}}
{"api_name": "getAnimalReproductiveInfo", "api_description": "Retrieve reproductive information of animals", "field": "Veterinary Medicine/Reproductive medicine in animals", "parameters": {"animal_type": {"type": "str", "description": "The type of animal for which you want to retrieve reproductive information (e.g., dog, cat, horse)"}, "breed": {"type": "str", "description": "The specific breed of the animal (e.g., Labrador Retriever, Siamese, Arabian)"}, "age": {"type": "int", "description": "The age of the animal in months"}}, "required": ["animal_type"], "responses": {"gestation_period": {"type": "int", "description": "The gestation period of the animal in days"}, "mating_season": {"type": "str", "description": "The mating season of the animal (e.g., spring, summer, year-round)"}}}
{"api_name": "getEyeSurgery", "api_description": "Retrieve information about surgical procedures for eye conditions in animals", "field": "Veterinary Medicine/Veterinary ophthalmology", "parameters": {"condition": {"type": "str", "description": "The specific eye condition for which you need surgical procedure information"}}, "required": ["condition"], "responses": {"surgery": {"type": "str", "description": "The recommended surgical procedure for the specified eye condition"}}}
{"api_name": "getAnimalCancerData", "api_description": "Retrieve information about cancer in animals", "field": "Veterinary Medicine/Veterinary oncology", "parameters": {"species": {"type": "str", "description": "The species for which you want to get the cancer information (e.g., dog, cat, horse)"}, "cancer_type": {"type": "str", "description": "The type of cancer you want to retrieve information about (e.g., lymphoma, melanoma, osteosarcoma)"}, "stage": {"type": "str", "description": "The stage of cancer for which you want information (e.g., stage I, stage II, stage III)"}}, "required": ["species", "cancer_type"], "responses": {"treatment_options": {"type": "str", "description": "The available treatment options for the specified cancer in animals"}, "life_expectancy": {"type": "int", "description": "The average life expectancy of animals with the specified cancer"}}}
{"api_name": "getEndocrineDisorders", "api_description": "Retrieve information about endocrine disorders in animals", "field": "Veterinary Medicine/Veterinary endocrinology", "parameters": {"species": {"type": "str", "description": "The species of animal for which you want to retrieve information (e.g., dog, cat, horse)"}, "hormone": {"type": "str", "description": "The hormone associated with the endocrine disorder (e.g., insulin, thyroid hormone)"}}, "required": ["species", "hormone"], "responses": {"disorder_description": {"type": "str", "description": "Description of the endocrine disorder in the specified species and hormone"}}}
{"api_name": "getCoughSymptoms", "api_description": "Retrieve information about cough symptoms in veterinary pulmonology", "field": "Veterinary Medicine/Veterinary pulmonology", "parameters": {}, "required": [], "responses": {"symptoms": {"type": "str", "description": "The common symptoms of cough in veterinary pulmonology (e.g., persistent cough, wheezing, difficulty breathing)"}, "causes": {"type": "str", "description": "The possible causes of cough in veterinary pulmonology (e.g., respiratory infections, bronchitis, heartworm disease)"}}}
{"api_name": "getAcupuncturePoints", "api_description": "Retrieve acupuncture points for veterinary treatment", "field": "Veterinary Medicine/Veterinary acupuncture", "parameters": {"animal_type": {"type": "str", "description": "The type of animal for which you want to get the acupuncture points (e.g., dog, cat, horse)"}, "condition": {"type": "str", "description": "The specific condition or ailment to be treated with acupuncture (e.g., arthritis, gastrointestinal disorders, respiratory issues)"}}, "required": ["animal_type", "condition"], "responses": {"acupuncture_points": {"type": "str", "description": "The acupuncture points recommended for the given animal type and condition"}}}
{"api_name": "addAppointment", "api_description": "Add a new appointment to the veterinary practice management system", "field": "Veterinary Medicine/Veterinary practice management", "parameters": {"appointment_date": {"type": "str", "description": "The date of the appointment (e.g., 2022-01-15)"}, "appointment_time": {"type": "str", "description": "The time of the appointment (e.g., 10:00 AM)"}, "patient_name": {"type": "str", "description": "The name of the patient"}, "reason": {"type": "str", "description": "The reason for the appointment"}}, "required": ["appointment_date", "appointment_time", "patient_name"], "responses": {"success": {"type": "bool", "description": "Indicates whether the appointment was successfully added"}}}
{"api_name": "getHeritability", "api_description": "Retrieve heritability estimate for a specific trait", "field": "Genetics/Quantitative Genetics", "parameters": {"trait": {"type": "str", "description": "The trait for which you want to get the heritability estimate (e.g., height, weight, intelligence)"}}, "required": ["trait"], "responses": {"heritability_estimate": {"type": "float", "description": "The estimated heritability of the specified trait"}}}
{"api_name": "getExpressionPattern", "api_description": "Retrieve gene expression pattern during development", "field": "Genetics/Developmental Genetics", "parameters": {"gene": {"type": "str", "description": "The gene of interest (e.g., BRCA1, TP53)"}, "development_stage": {"type": "str", "description": "The specific developmental stage (e.g., embryonic, larval, adult)"}}, "required": ["gene"], "responses": {"expression_pattern": {"type": "str", "description": "The expression pattern of the gene during the specified developmental stage"}}}
{"api_name": "getAdaptationGenes", "api_description": "Retrieve the genes responsible for adaptation in a given species", "field": "Genetics/Ecological Genetics", "parameters": {"species": {"type": "str", "description": "The name of the species for which you want to retrieve adaptation genes"}}, "required": ["species"], "responses": {"adaptation_genes": {"type": "str", "description": "The genes responsible for adaptation in the specified species"}}}
{"api_name": "getPharmacogeneticsData", "api_description": "Retrieve pharmacogenetics data for a specific genotype", "field": "Genetics/Pharmacogenetics", "parameters": {"genotype": {"type": "str", "description": "The genotype for which you want to get pharmacogenetics data (e.g., rs123456, CYP2D6*4)"}, "drug": {"type": "str", "description": "The drug for which you want to get pharmacogenetics data (e.g., Warfarin, Clopidogrel)"}, "dose": {"type": "float", "description": "The dose of the drug (e.g., 2.5)"}, "patient_age": {"type": "int", "description": "The age of the patient (e.g., 30)"}, "patient_weight": {"type": "float", "description": "The weight of the patient in kg (e.g., 70.5)"}, "patient_sex": {"type": "str", "description": "The sex of the patient (e.g., Male, Female)"}, "patient_race": {"type": "str", "description": "The race of the patient (e.g., Caucasian, African American)"}}, "required": ["genotype", "drug"], "responses": {"effect": {"type": "str", "description": "The expected effect of the drug based on the genotype"}, "dose_adjustment": {"type": "str", "description": "Whether a dose adjustment is recommended based on the genotype"}, "adverse_effects": {"type": "str", "description": "Potential adverse effects associated with the drug and genotype"}, "therapeutic_recommendation": {"type": "str", "description": "Recommendations for therapeutic alternatives based on the genotype"}}}
{"api_name": "getDrugMetabolism", "api_description": "Retrieve drug metabolism information based on genetics", "field": "Genetics/Pharmacogenetics", "parameters": {"drug_name": {"type": "str", "description": "The name of the drug (e.g., aspirin, statins, antidepressants)"}, "genetic_variant": {"type": "str", "description": "The genetic variant to consider (e.g., CYP2C19*2, CYP2D6*4)"}, "patient_id": {"type": "str", "description": "The unique identifier of the patient"}, "dosage": {"type": "int", "description": "The dosage of the drug in mg"}}, "required": ["drug_name", "genetic_variant"], "responses": {"metabolism_rate": {"type": "float", "description": "The rate at which the drug is metabolized based on genetics"}, "recommended_dosage": {"type": "int", "description": "The recommended dosage of the drug for the patient based on genetics"}}}
{"api_name": "getGeneTherapyInfo", "api_description": "Retrieve information about gene therapy", "field": "Genetics/Gene Therapy", "parameters": {"disease": {"type": "str", "description": "The name of the disease for which gene therapy information is required (e.g., Parkinson's, Cancer, Cystic Fibrosis)"}}, "required": ["disease"], "responses": {"therapy_name": {"type": "str", "description": "The name of the gene therapy treatment for the specified disease"}, "target_gene": {"type": "str", "description": "The target gene for the gene therapy treatment"}, "method": {"type": "str", "description": "The method used for gene delivery (e.g., viral vector, non-viral vector)"}}}
{"api_name": "getGeneTherapySuccessRate", "api_description": "Get the success rate of gene therapy for a specific disease", "field": "Genetics/Gene Therapy", "parameters": {"disease": {"type": "str", "description": "The name of the disease for which success rate of gene therapy is required (e.g., Hemophilia, Muscular Dystrophy)"}}, "required": ["disease"], "responses": {"success_rate": {"type": "float", "description": "The success rate of gene therapy for the specified disease"}}}
{"api_name": "analyzeGenomicData", "api_description": "Analyze genomic data and extract useful information", "field": "Genetics/Genomic Data Analysis", "parameters": {"data_file": {"type": "str", "description": "The file containing genomic data for analysis (e.g., gene_expression_data.txt, variant_data.vcf)"}, "analysis_type": {"type": "str", "description": "The type of analysis to perform on the genomic data (e.g., gene_expression_analysis, variant_annotation)"}, "filters": {"type": "str", "description": "Filters to apply on the genomic data (e.g., gene_name=BRCA2, allele_frequency>0.05)"}, "output_format": {"type": "str", "description": "The desired format of the analysis output (e.g., CSV, JSON, HTML)"}, "include_metadata": {"type": "bool", "description": "Whether to include metadata in the analysis output (true or false)"}}, "required": ["data_file", "analysis_type"], "responses": {"analysis_result": {"type": "str", "description": "The result of the genomic data analysis in the specified format"}}}
{"api_name": "getGenomicVariation", "api_description": "Retrieve information about genomic variations at a specific location", "field": "Genetics/Genomic Variation", "parameters": {"location": {"type": "str", "description": "The specific genomic location for which you want to retrieve variation information (e.g., chr1:1000-2000)"}, "population": {"type": "str", "description": "The population from which you want to get genomic variation data (e.g., European, African, Asian)"}, "type": {"type": "str", "description": "The type of genomic variation you are interested in (e.g., Single Nucleotide Polymorphism, Insertion, Deletion)"}, "gene": {"type": "str", "description": "The gene of interest for which you want to get genomic variation information (e.g., BRCA1, TP53)"}}, "required": ["location"], "responses": {"variation_type": {"type": "str", "description": "The type of genomic variation at the specified location"}, "population_frequency": {"type": "float", "description": "The frequency of the genomic variation in the specified population"}, "gene_impact": {"type": "str", "description": "The impact of the genomic variation on the specified gene"}}}
{"api_name": "getELSI", "api_description": "Retrieve information about the ethical, legal, and social implications of genetics", "field": "Genetics/Ethical, Legal, and Social Implications of Genetics", "parameters": {"topic": {"type": "str", "description": "The specific topic you want to get information about (e.g., genetic privacy, genetic discrimination, genetic testing)"}, "country": {"type": "str", "description": "The country for which you want to get information (e.g., United States, United Kingdom, Canada)"}, "language": {"type": "str", "description": "The desired language of the information (e.g., English, Spanish, French)"}}, "required": ["topic"], "responses": {"information": {"type": "str", "description": "Information about the ethical, legal, and social implications of genetics for the specified topic"}, "resources": {"type": "str", "description": "Additional resources and references for further information"}}}
{"api_name": "deployApp", "api_description": "Deploy an application on the PaaS platform", "field": "Cloud Computing/Platform as a Service (PaaS)", "parameters": {"app_id": {"type": "str", "description": "The ID of the application to be deployed"}, "environment": {"type": "str", "description": "The target environment for deployment (e.g., production, staging)"}, "version": {"type": "str", "description": "The version of the application to be deployed (e.g., 1.0.0, latest)"}, "config_vars": {"type": "str", "description": "Configuration variables to be passed to the application"}}, "required": ["app_id", "environment", "version"], "responses": {"deployment_id": {"type": "str", "description": "The unique ID assigned to the deployment"}, "status": {"type": "str", "description": "The status of the deployment (e.g., in progress, completed)"}}}
{"api_name": "scaleApp", "api_description": "Scale an application on the PaaS platform", "field": "Cloud Computing/Platform as a Service (PaaS)", "parameters": {"app_id": {"type": "str", "description": "The ID of the application to be scaled"}, "instances": {"type": "int", "description": "The number of instances to scale the application to"}}, "required": ["app_id", "instances"], "responses": {"status": {"type": "str", "description": "The status of the scaling operation (e.g., success, error)"}, "current_instances": {"type": "int", "description": "The current number of instances for the scaled application"}}}
{"api_name": "getAppLogs", "api_description": "Retrieve logs for an application on the PaaS platform", "field": "Cloud Computing/Platform as a Service (PaaS)", "parameters": {"app_id": {"type": "str", "description": "The ID of the application to retrieve logs from"}, "start_time": {"type": "str", "description": "The start time of the log retrieval period in UTC format"}, "end_time": {"type": "str", "description": "The end time of the log retrieval period in UTC format"}}, "required": ["app_id"], "responses": {"logs": {"type": "str", "description": "The logs retrieved for the specified application"}}}
{"api_name": "createPaaSInstance", "api_description": "Create a new instance of a Platform as a Service (PaaS) platform", "field": "Cloud Computing/Platform as a Service (PaaS)", "parameters": {"name": {"type": "str", "description": "The name of the PaaS instance"}, "service_provider": {"type": "str", "description": "The service provider for the PaaS platform (e.g., AWS, Google Cloud)"}, "compute_resources": {"type": "str", "description": "The compute resources allocated to the PaaS instance (e.g., CPU cores, RAM)"}, "storage_resources": {"type": "str", "description": "The storage resources allocated to the PaaS instance (e.g., storage capacity, type of storage)"}, "environment_variables": {"type": "str", "description": "The environment variables set for the PaaS instance"}}, "required": ["name", "service_provider"], "responses": {"instance_id": {"type": "str", "description": "The ID of the created PaaS instance"}, "status": {"type": "str", "description": "The status of the PaaS instance"}}}
{"api_name": "updateApplicationVersion", "api_description": "Update the version of an existing application in the cloud", "field": "Cloud Computing/Software as a Service (SaaS)", "parameters": {"application_name": {"type": "str", "description": "The name of the application to update"}, "new_version": {"type": "str", "description": "The new version of the application"}}, "required": ["application_name", "new_version"], "responses": {"success": {"type": "bool", "description": "Indicates whether the application version update was successful"}}}
{"api_name": "deleteDatabaseInstance", "api_description": "Delete an existing database instance", "field": "Cloud Computing/Database as a Service (DBaaS)", "parameters": {"instance_id": {"type": "str", "description": "The unique identifier of the database instance to be deleted"}}, "required": ["instance_id"], "responses": {"status": {"type": "str", "description": "The status of the deletion process (e.g., success, error)"}}}
{"api_name": "backupDatabaseInstance", "api_description": "Create a backup of a database instance", "field": "Cloud Computing/Database as a Service (DBaaS)", "parameters": {"instance_id": {"type": "str", "description": "The unique identifier of the database instance to be backed up"}}, "required": ["instance_id"], "responses": {"backup_id": {"type": "str", "description": "The unique identifier of the created backup"}}}
{"api_name": "modifyDatabase", "api_description": "Modify the configuration of an existing database", "field": "Cloud Computing/Database as a Service (DBaaS)", "parameters": {"database_name": {"type": "str", "description": "The name of the database to be modified"}, "new_storage_size": {"type": "int", "description": "The new storage size for the database in gigabytes (e.g., 200, 1000, 5000)"}}, "required": ["database_name", "new_storage_size"], "responses": {"status": {"type": "str", "description": "The status of the database modification process"}}}
{"api_name": "createFunction", "api_description": "Create a new function in the FaaS platform", "field": "Cloud Computing/Function as a Service (FaaS)", "parameters": {"function_name": {"type": "str", "description": "The name of the function to be created"}, "runtime": {"type": "str", "description": "The programming language runtime environment for the function (e.g., Python 3.7, Node.js 10)"}, "memory": {"type": "int", "description": "The amount of memory to allocate to the function in megabytes"}, "timeout": {"type": "int", "description": "The maximum execution time for the function in seconds"}}, "required": ["function_name", "runtime"], "responses": {"function_id": {"type": "str", "description": "The unique identifier assigned to the newly created function"}}}
{"api_name": "invokeFunction", "api_description": "Invoke a function in the FaaS platform with given input data", "field": "Cloud Computing/Function as a Service (FaaS)", "parameters": {"function_id": {"type": "str", "description": "The unique identifier of the function to be invoked"}, "input_data": {"type": "str", "description": "The input data to be passed as input to the function"}}, "required": ["function_id", "input_data"], "responses": {"output_data": {"type": "str", "description": "The output data generated by the function"}}}
{"api_name": "deleteMBaaS", "api_description": "Delete an existing Mobile Backend as a Service (MBaaS) instance", "field": "Cloud Computing/Mobile Backend as a Service (MBaaS)", "parameters": {"instance_id": {"type": "str", "description": "The unique identifier of the MBaaS instance to delete"}}, "required": ["instance_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the MBaaS instance was successfully deleted"}}}
{"api_name": "getMBaaSInfo", "api_description": "Get detailed information about a Mobile Backend as a Service (MBaaS) instance", "field": "Cloud Computing/Mobile Backend as a Service (MBaaS)", "parameters": {"instance_id": {"type": "str", "description": "The unique identifier of the MBaaS instance"}}, "required": ["instance_id"], "responses": {"name": {"type": "str", "description": "The name of the MBaaS instance"}, "region": {"type": "str", "description": "The region where the MBaaS instance is located"}, "storage_limit": {"type": "int", "description": "The maximum storage limit in gigabytes for the MBaaS instance"}, "current_storage": {"type": "int", "description": "The current amount of storage used in gigabytes"}}}
{"api_name": "getDesktop", "api_description": "Retrieve desktop information", "field": "Cloud Computing/Desktop as a Service (DaaS)", "parameters": {"userid": {"type": "str", "description": "The user ID of the person accessing the desktop"}, "desktop_id": {"type": "str", "description": "The ID of the desktop to retrieve information for"}}, "required": ["userid", "desktop_id"], "responses": {"desktop_info": {"type": "str", "description": "The information about the requested desktop"}, "status": {"type": "str", "description": "The current status of the desktop"}}}
{"api_name": "restoreBackup", "api_description": "Restore data from a backup", "field": "Cloud Computing/Backup as a Service (BaaS)", "parameters": {"backup_id": {"type": "str", "description": "The unique identifier of the backup to restore from"}, "destination": {"type": "str", "description": "The location where the restored data will be placed (e.g., original location, new location)"}}, "required": ["backup_id", "destination"], "responses": {"status": {"type": "str", "description": "The status of the restore process (e.g., in progress, completed)"}, "restored_data": {"type": "str", "description": "The restored data from the backup"}}}
{"api_name": "deleteBackup", "api_description": "Delete a backup", "field": "Cloud Computing/Backup as a Service (BaaS)", "parameters": {"backup_id": {"type": "str", "description": "The unique identifier of the backup to delete"}}, "required": ["backup_id"], "responses": {"status": {"type": "str", "description": "The status of the delete process (e.g., in progress, completed)"}}}
{"api_name": "getBackupStatus", "api_description": "Retrieve the status of a backup", "field": "Cloud Computing/Backup as a Service (BaaS)", "parameters": {"backup_id": {"type": "str", "description": "The unique identifier of the backup to check status"}}, "required": ["backup_id"], "responses": {"status": {"type": "str", "description": "The status of the backup (e.g., in progress, completed)"}}}
{"api_name": "getDRaaSStatus", "api_description": "Retrieve the status of DRaaS service", "field": "Cloud Computing/Disaster Recovery as a Service (DRaaS)", "parameters": {"service_id": {"type": "str", "description": "The unique identifier of the DRaaS service"}}, "required": ["service_id"], "responses": {"status": {"type": "str", "description": "The current status of the DRaaS service"}}}
{"api_name": "createDRaaSPlan", "api_description": "Create a new DRaaS plan", "field": "Cloud Computing/Disaster Recovery as a Service (DRaaS)", "parameters": {"source_location": {"type": "str", "description": "The source location of the data to be protected (e.g., primary data center, on-premises server)"}, "target_location": {"type": "str", "description": "The target location for disaster recovery (e.g., cloud provider data center)"}, "replication_frequency": {"type": "str", "description": "The frequency at which data replication occurs (e.g., hourly, daily, weekly)"}, "retention_period": {"type": "int", "description": "The length of time data is retained in the target location (in days)"}}, "required": ["source_location", "target_location"], "responses": {"plan_id": {"type": "str", "description": "The unique identifier of the created DRaaS plan"}}}
{"api_name": "updateDRaaSTargetLocation", "api_description": "Update the target location for an existing DRaaS plan", "field": "Cloud Computing/Disaster Recovery as a Service (DRaaS)", "parameters": {"plan_id": {"type": "str", "description": "The unique identifier of the DRaaS plan"}, "new_target_location": {"type": "str", "description": "The new target location for disaster recovery"}}, "required": ["plan_id", "new_target_location"], "responses": {"status": {"type": "str", "description": "The current status of the DRaaS plan after updating"}}}
{"api_name": "performFailover", "api_description": "Perform a failover from the primary application server to the disaster recovery environment", "field": "Cloud Computing/Disaster Recovery as a Service (DRaaS)", "parameters": {"application_name": {"type": "str", "description": "The name of the application to perform failover for"}, "source_location": {"type": "str", "description": "The location of the primary application server (e.g., data center, cloud provider)"}, "target_location": {"type": "str", "description": "The location of the disaster recovery environment (e.g., secondary data center, cloud provider)"}}, "required": ["application_name", "source_location", "target_location"], "responses": {"status": {"type": "str", "description": "The status of the failover operation"}, "downtime": {"type": "str", "description": "The duration of application downtime during failover"}}}
{"api_name": "getBDaaSData", "api_description": "Retrieve Big Data as a Service (BDaaS) information", "field": "Cloud Computing/Big Data as a Service (BDaaS)", "parameters": {"dataset": {"type": "str", "description": "The name of the dataset you want to retrieve (e.g., user_data, product_sales, website_logs)"}, "format": {"type": "str", "description": "The desired format of the retrieved data (e.g., JSON, CSV, XML)"}, "query": {"type": "str", "description": "Query to filter the data (e.g., SELECT * FROM dataset WHERE column='value')"}, "access_token": {"type": "str", "description": "Access token for authentication"}}, "required": ["dataset", "access_token"], "responses": {"data": {"type": "str", "description": "The retrieved data in the specified format"}}}
{"api_name": "createIoTDevice", "api_description": "Create a new IoT device", "field": "Cloud Computing/Internet of Things as a Service (IoTaaS)", "parameters": {"device_name": {"type": "str", "description": "The name of the IoT device"}, "device_type": {"type": "str", "description": "The type of the IoT device (e.g., temperature sensor, humidity sensor)"}}, "required": ["device_name", "device_type"], "responses": {"device_id": {"type": "str", "description": "The unique ID assigned to the newly created IoT device"}}}
{"api_name": "updateFunction", "api_description": "Update an existing serverless function", "field": "Cloud Computing/Serverless Computing", "parameters": {"function_id": {"type": "str", "description": "The unique identifier of the function to update"}, "runtime": {"type": "str", "description": "The new runtime environment for the function (e.g., Node.js, Python, Java)"}, "memory": {"type": "int", "description": "The new memory allocation for the function in megabytes (e.g., 128, 256, 512)"}, "timeout": {"type": "int", "description": "The new maximum execution time in seconds for the function"}}, "required": ["function_id"], "responses": {"success": {"type": "bool", "description": "Indicates if the function update was successful"}}}
{"api_name": "createServerlessFunction", "api_description": "Create a serverless function for cloud computing", "field": "Cloud Computing/Serverless Computing", "parameters": {"function_name": {"type": "str", "description": "The name of the serverless function"}, "runtime": {"type": "str", "description": "The runtime environment for the serverless function (e.g., Node.js, Python, Java)"}, "memory": {"type": "int", "description": "The amount of memory to allocate for the serverless function (e.g., 128, 256, 512)"}}, "required": ["function_name", "runtime"], "responses": {"status": {"type": "str", "description": "The status of the serverless function creation"}, "function_arn": {"type": "str", "description": "The Amazon Resource Name (ARN) of the created serverless function"}}}
{"api_name": "createCloudNativeApp", "api_description": "Create a new cloud-native application", "field": "Cloud Computing/Cloud-Native Development", "parameters": {"app_name": {"type": "str", "description": "The name of the cloud-native application"}, "language": {"type": "str", "description": "The programming language for the application (e.g., Java, Python, Node.js)"}, "framework": {"type": "str", "description": "The framework used for developing the application (e.g., Spring Boot, Django, Express.js)"}, "database": {"type": "str", "description": "The database management system for the application (e.g., MySQL, MongoDB, PostgreSQL)"}, "cloud_provider": {"type": "str", "description": "The cloud provider to deploy the application (e.g., AWS, Azure, Google Cloud)"}}, "required": ["app_name", "language", "framework", "cloud_provider"], "responses": {"status": {"type": "str", "description": "The status of the application creation"}}}
{"api_name": "createVPC", "api_description": "Create a virtual private cloud", "field": "Cloud Computing/Cloud Networking", "parameters": {"vpc_name": {"type": "str", "description": "The name of the virtual private cloud"}, "cidr_block": {"type": "str", "description": "The IP address range for the VPC (e.g., 10.0.0.0/16)"}, "dns_support": {"type": "bool", "description": "Enable or disable DNS support (e.g., true, false)"}, "dns_hostnames": {"type": "bool", "description": "Enable or disable DNS hostnames (e.g., true, false)"}}, "required": ["vpc_name", "cidr_block"], "responses": {"vpc_id": {"type": "str", "description": "The unique identifier of the created VPC"}}}
{"api_name": "createSubnet", "api_description": "Create a subnet within a VPC", "field": "Cloud Computing/Cloud Networking", "parameters": {"vpc_id": {"type": "str", "description": "The ID of the VPC where the subnet will be created"}, "subnet_name": {"type": "str", "description": "The name of the subnet"}, "cidr_block": {"type": "str", "description": "The IP address range for the subnet (e.g., 10.0.1.0/24)"}, "availability_zone": {"type": "str", "description": "The availability zone where the subnet will be created (e.g., us-east-1a, us-west-2c)"}}, "required": ["vpc_id", "subnet_name", "cidr_block"], "responses": {"subnet_id": {"type": "str", "description": "The unique identifier of the created subnet"}}}
{"api_name": "createInternetGateway", "api_description": "Create an internet gateway", "field": "Cloud Computing/Cloud Networking", "parameters": {"vpc_id": {"type": "str", "description": "The ID of the VPC to which the internet gateway will be attached"}}, "required": ["vpc_id"], "responses": {"internet_gateway_id": {"type": "str", "description": "The unique identifier of the created internet gateway"}}}
{"api_name": "deleteVirtualNetwork", "api_description": "Delete a virtual network in the cloud", "field": "Cloud Computing/Cloud Networking", "parameters": {"network_id": {"type": "str", "description": "The ID of the virtual network to be deleted"}}, "required": ["network_id"], "responses": {"message": {"type": "str", "description": "Confirmation message indicating the deletion success"}}}
{"api_name": "createLoadBalancer", "api_description": "Create a load balancer for distributing incoming network traffic across multiple virtual machines", "field": "Cloud Computing/Cloud Networking", "parameters": {"load_balancer_name": {"type": "str", "description": "The name of the load balancer"}, "listeners": {"type": "str", "description": "The listeners configuration for the load balancer"}, "backend_servers": {"type": "str", "description": "The backend servers configuration for the load balancer"}}, "required": ["load_balancer_name", "listeners", "backend_servers"], "responses": {"load_balancer_id": {"type": "str", "description": "The ID of the created load balancer"}, "dns_name": {"type": "str", "description": "The DNS name associated with the load balancer"}}}
{"api_name": "deleteSubnet", "api_description": "Delete a subnet within a virtual network", "field": "Cloud Computing/Cloud Networking", "parameters": {"subnet_id": {"type": "str", "description": "The unique identifier of the subnet to be deleted"}}, "required": ["subnet_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the subnet was successfully deleted"}}}
{"api_name": "checkAccessControl", "api_description": "Check access control for a specific cloud resource", "field": "Cloud Computing/Cloud Security", "parameters": {"resource_id": {"type": "str", "description": "The ID of the cloud resource to be checked for access control"}, "user_id": {"type": "str", "description": "The ID of the user requesting access control check"}, "permission": {"type": "str", "description": "The permission level required for access (e.g., read, write, delete)"}}, "required": ["resource_id", "user_id", "permission"], "responses": {"allowed": {"type": "bool", "description": "Indicates whether the access control check was successful"}, "message": {"type": "str", "description": "Additional message providing details about the access control status"}}}
{"api_name": "calculateMonthlyCost", "api_description": "Calculate the monthly cost of using cloud computing services", "field": "Cloud Computing/Cloud Computing Economics and Pricing", "parameters": {"service": {"type": "str", "description": "The name of the cloud computing service (e.g., AWS, Azure, Google Cloud)"}, "instance_type": {"type": "str", "description": "The type of instance being used (e.g., t2.micro, g2.2xlarge, n1-standard-2)"}, "hours_used": {"type": "int", "description": "The number of hours the instance is used per month"}}, "required": ["service", "instance_type", "hours_used"], "responses": {"monthly_cost": {"type": "float", "description": "The estimated monthly cost of using the specified cloud computing service"}}}
{"api_name": "estimateCost", "api_description": "Estimate the cost of cloud migration", "field": "Cloud Computing/Cloud Migration", "parameters": {"current_workload": {"type": "float", "description": "Current workload that needs to be migrated (in GB/TB)"}, "data_transfer_rate": {"type": "float", "description": "The rate at which data will be transferred to the cloud (in Mbps)"}, "storage_cost": {"type": "float", "description": "The cost of storage in the cloud (per GB/month)"}, "compute_cost": {"type": "float", "description": "The cost of compute resources in the cloud (per hour)"}, "timeframe": {"type": "str", "description": "The timeframe for which the cost estimate is required (e.g., monthly, yearly)"}}, "required": ["current_workload", "storage_cost", "compute_cost"], "responses": {"cost_estimate": {"type": "float", "description": "Estimated cost of cloud migration"}}}
{"api_name": "migrateCloud", "api_description": "Migrate a workload to the cloud", "field": "Cloud Computing/Cloud Migration", "parameters": {"workload": {"type": "str", "description": "The workload to be migrated (e.g., application, database)"}, "source_cloud_provider": {"type": "str", "description": "The source cloud provider (e.g., AWS, Azure, Google Cloud)"}, "destination_cloud_provider": {"type": "str", "description": "The destination cloud provider (e.g., AWS, Azure, Google Cloud)"}, "migration_strategy": {"type": "str", "description": "The migration strategy to be used (e.g., lift and shift, re-architecture)"}}, "required": ["workload", "source_cloud_provider", "destination_cloud_provider"], "responses": {"migration_status": {"type": "str", "description": "The status of the migration process"}, "migration_duration": {"type": "float", "description": "The duration of the migration process in hours"}}}
{"api_name": "analyzeMigrationFeasibility", "api_description": "Analyze the feasibility of migrating an application to the cloud", "field": "Cloud Computing/Cloud Migration", "parameters": {"application_name": {"type": "str", "description": "The name of the application to be analyzed"}, "current_infrastructure": {"type": "str", "description": "The current infrastructure details of the application (e.g., hardware specifications, network configuration)"}, "data_volumes": {"type": "str", "description": "The volume of data to be transferred during migration (e.g., 100GB, 500TB)"}, "security_requirements": {"type": "str", "description": "The security requirements for the application data in the cloud (e.g., encryption, access control)"}, "compliance_requirements": {"type": "str", "description": "The compliance requirements that need to be met during migration (e.g., HIPAA, GDPR)"}, "cost_analysis": {"type": "bool", "description": "Flag to indicate whether cost analysis should be performed for the migration"}}, "required": ["application_name", "current_infrastructure"], "responses": {"feasibility_report": {"type": "str", "description": "A detailed report on the feasibility of migrating the application to the cloud"}}}
{"api_name": "planMigrationStrategy", "api_description": "Plan a migration strategy for moving an application to the cloud", "field": "Cloud Computing/Cloud Migration", "parameters": {"application_name": {"type": "str", "description": "The name of the application to be migrated"}, "current_infrastructure": {"type": "str", "description": "The current infrastructure details of the application (e.g., hardware specifications, network configuration)"}, "target_platform": {"type": "str", "description": "The platform on which the application will be migrated to in the cloud (e.g., Amazon Web Services, Azure)"}, "data_transfer_method": {"type": "str", "description": "The method to be used for data transfer during migration (e.g., direct transfer, backup and restore)"}, "migration_timeline": {"type": "str", "description": "The desired timeline for completing the migration (e.g., 1 month, 3 months, 6 months)"}, "resource_planning": {"type": "bool", "description": "Flag to indicate whether resource planning should be included in the migration strategy"}}, "required": ["application_name", "current_infrastructure", "target_platform"], "responses": {"migration_strategy": {"type": "str", "description": "A detailed plan outlining the migration strategy for the application"}}}
{"api_name": "migrateVM", "api_description": "Migrate a virtual machine to the cloud", "field": "Cloud Computing/Cloud Migration", "parameters": {"vm_name": {"type": "str", "description": "The name of the virtual machine to be migrated"}, "target_cloud_provider": {"type": "str", "description": "The cloud provider to which the virtual machine should be migrated (e.g., AWS, Azure, Google Cloud)"}, "instance_type": {"type": "str", "description": "The type of instance on the target cloud provider (e.g., t2.micro, Standard_D2_v2)"}, "storage_type": {"type": "str", "description": "The type of storage on the target cloud provider (e.g., EBS, Standard SSD)"}}, "required": ["vm_name", "target_cloud_provider"], "responses": {"success": {"type": "str", "description": "Confirmation message indicating successful migration"}, "error_message": {"type": "str", "description": "Error message if migration fails"}}}
{"api_name": "optimizePerformance", "api_description": "Optimize the performance of a cloud computing system", "field": "Cloud Computing/Cloud Performance Optimization", "parameters": {"system_id": {"type": "str", "description": "The ID of the cloud computing system"}, "workload_type": {"type": "str", "description": "The type of workload to be optimized (e.g., CPU-intensive, memory-intensive)"}, "scaling_factor": {"type": "float", "description": "The scaling factor to adjust the resources (e.g., 0.5 for reducing, 2.0 for increasing)"}, "optimization_algorithm": {"type": "str", "description": "The algorithm to be used for optimizing performance (e.g., genetic algorithm, particle swarm optimization)"}, "constraints": {"type": "str", "description": "Additional constraints for the optimization process"}}, "required": ["system_id", "workload_type"], "responses": {"optimized_resources": {"type": "str", "description": "The optimized allocation of cloud resources"}, "performance_improvement": {"type": "float", "description": "The percentage improvement in system performance after optimization"}}}
{"api_name": "getCloudSlaInfo", "api_description": "Retrieve information about the Service Level Agreement (SLA) for a specific cloud service", "field": "Cloud Computing/Cloud Service Level Agreement (SLA)", "parameters": {"service_name": {"type": "str", "description": "The name of the cloud service for which you want to get the SLA information (e.g., AWS, Azure, Google Cloud)"}, "region": {"type": "str", "description": "The region where the cloud service is deployed (e.g., us-east-1, europe-west1, asia-southeast1)"}, "service_type": {"type": "str", "description": "The type of cloud service (e.g., compute, storage, database)"}}, "required": ["service_name"], "responses": {"availability": {"type": "float", "description": "The availability percentage guaranteed by the SLA"}, "response_time": {"type": "float", "description": "The maximum response time permitted by the SLA in milliseconds"}, "support": {"type": "bool", "description": "Indicates whether or not 24/7 technical support is provided according to the SLA"}}}
{"api_name": "connectToCloud", "api_description": "Establish a connection to a cloud platform", "field": "Cloud Computing/Cloud Integration", "parameters": {"cloud_provider": {"type": "str", "description": "The name of the cloud provider you want to connect to (e.g., AWS, Azure, GCP)"}, "authentication": {"type": "bool", "description": "Specify if authentication is required to connect to the cloud platform"}}, "required": ["cloud_provider"], "responses": {"connection_status": {"type": "bool", "description": "The status of the connection to the cloud platform"}}}
{"api_name": "stopCloudInstance", "api_description": "Stop a running cloud instance", "field": "Cloud Computing/Cloud DevOps", "parameters": {"instance_id": {"type": "str", "description": "The ID of the cloud instance to be stopped"}}, "required": ["instance_id"], "responses": {"message": {"type": "str", "description": "A message indicating the success of the stop process"}}}
{"api_name": "createCloudResource", "api_description": "Create a new cloud resource", "field": "Cloud Computing/Cloud Resource Management", "parameters": {"resource_type": {"type": "str", "description": "The type of resource to create (e.g., virtual machine, storage, database)"}, "region": {"type": "str", "description": "The region where the resource will be created (e.g., us-west-1, eu-central-1)"}, "name": {"type": "str", "description": "The name of the resource"}, "size": {"type": "int", "description": "The size of the resource in GB"}}, "required": ["resource_type", "name"], "responses": {"resource_id": {"type": "str", "description": "The ID of the created resource"}}}
{"api_name": "getScalabilityMetrics", "api_description": "Retrieve scalability metrics for a cloud service", "field": "Cloud Computing/Cloud Scalability", "parameters": {"service_name": {"type": "str", "description": "The name of the cloud service for which you want to get the scalability metrics"}, "time_period": {"type": "str", "description": "The time period for which you want to retrieve scalability metrics (e.g., last 24 hours, last 7 days, last month)"}, "granularity": {"type": "str", "description": "The granularity of scalability metrics (e.g., hourly, daily, weekly)"}}, "required": ["service_name", "time_period"], "responses": {"requests_per_second": {"type": "float", "description": "The average number of requests per second during the specified time period"}, "response_time": {"type": "float", "description": "The average response time for requests during the specified time period"}, "scaling_events": {"type": "int", "description": "The number of scaling events that occurred during the specified time period"}}}
{"api_name": "deployMicroservice", "api_description": "Deploy a serverless microservice", "field": "Cloud Computing/Serverless Microservices", "parameters": {"service_name": {"type": "str", "description": "The name of the microservice to be deployed"}, "runtime": {"type": "str", "description": "The runtime environment for the microservice (e.g., Node.js, Python, Java)"}, "memory_size": {"type": "int", "description": "The memory size allocated to the microservice in MB"}}, "required": ["service_name", "runtime"], "responses": {"success": {"type": "bool", "description": "Indicates whether the microservice was deployed successfully"}}}
{"api_name": "listFunctions", "api_description": "List all serverless functions", "field": "Cloud Computing/Serverless Microservices", "parameters": {}, "required": [], "responses": {"functions": {"type": "str", "description": "A list of names of all available serverless functions"}}}
{"api_name": "scaleInstance", "api_description": "Scale the capacity of a cloud instance", "field": "Cloud Computing/Cloud Development Tools", "parameters": {"instance_id": {"type": "str", "description": "The ID of the cloud instance to be scaled"}, "capacity": {"type": "int", "description": "The desired capacity of the instance (e.g., 2, 4, 8)"}, "autoscaling": {"type": "bool", "description": "Enable or disable autoscaling for the instance (true or false)"}, "min_instances": {"type": "int", "description": "The minimum number of instances allowed during autoscaling"}, "max_instances": {"type": "int", "description": "The maximum number of instances allowed during autoscaling"}}, "required": ["instance_id", "capacity"], "responses": {"success": {"type": "bool", "description": "Indicates if the instance scaling was successful"}, "message": {"type": "str", "description": "Additional information or error message related to the instance scaling"}}}
{"api_name": "createCloudServer", "api_description": "Create a cloud server", "field": "Cloud Computing/Cloud Development Tools", "parameters": {"server_name": {"type": "str", "description": "The name of the cloud server"}, "image": {"type": "str", "description": "The image or template to be used for the cloud server"}, "flavor": {"type": "str", "description": "The hardware configuration of the cloud server"}, "network": {"type": "str", "description": "The network to which the cloud server should be connected"}, "security_groups": {"type": "str", "description": "The security groups to be applied to the cloud server"}}, "required": ["server_name", "image", "flavor"], "responses": {"status": {"type": "str", "description": "The status of the server creation process"}, "server_id": {"type": "str", "description": "The unique identifier of the created cloud server"}}}
{"api_name": "startWorkspace", "api_description": "Start a workspace in a cloud IDE", "field": "Cloud Computing/Cloud IDEs (Integrated Development Environments)", "parameters": {"workspace_id": {"type": "str", "description": "The unique identifier of the workspace you want to start"}}, "required": ["workspace_id"], "responses": {"status": {"type": "str", "description": "The status of the workspace after starting"}}}
{"api_name": "deleteWorkspace", "api_description": "Delete a workspace in a cloud IDE", "field": "Cloud Computing/Cloud IDEs (Integrated Development Environments)", "parameters": {"workspace_id": {"type": "str", "description": "The unique identifier of the workspace you want to delete"}}, "required": ["workspace_id"], "responses": {"status": {"type": "str", "description": "The status of the deletion process"}}}
{"api_name": "openFile", "api_description": "Open a specific file in a project in a cloud IDE", "field": "Cloud Computing/Cloud IDEs (Integrated Development Environments)", "parameters": {"project_id": {"type": "str", "description": "The unique identifier of the project"}, "file_path": {"type": "str", "description": "The path of the file to be opened"}}, "required": ["project_id", "file_path"], "responses": {"file_content": {"type": "str", "description": "The content of the opened file"}}}
{"api_name": "saveFile", "api_description": "Save the changes made to a file in a project in a cloud IDE", "field": "Cloud Computing/Cloud IDEs (Integrated Development Environments)", "parameters": {"project_id": {"type": "str", "description": "The unique identifier of the project"}, "file_path": {"type": "str", "description": "The path of the file to be saved"}, "file_content": {"type": "str", "description": "The new content of the file"}}, "required": ["project_id", "file_path", "file_content"], "responses": {"status": {"type": "str", "description": "The status of the file saving (e.g., Success, Error)"}}}
{"api_name": "backupData", "api_description": "Backup data to the cloud", "field": "Cloud Computing/Cloud Backup and Recovery", "parameters": {"source_path": {"type": "str", "description": "The path of the source data to be backed up (e.g., /home/user/data)"}, "destination_path": {"type": "str", "description": "The path in the cloud where the data will be stored (e.g., /cloud_backup/data)"}}, "required": ["source_path", "destination_path"], "responses": {"status": {"type": "str", "description": "The status of the backup process"}}}
{"api_name": "createDNSRecord", "api_description": "Create a new DNS record in the cloud", "field": "Cloud Computing/Cloud DNS (Domain Name System)", "parameters": {"zone_name": {"type": "str", "description": "The name of the DNS zone in which to create the record"}, "record_name": {"type": "str", "description": "The name of the DNS record to create"}, "record_type": {"type": "str", "description": "The type of DNS record to create (e.g., A, CNAME, MX)"}, "record_value": {"type": "str", "description": "The value of the DNS record (e.g., IP address, domain name)"}}, "required": ["zone_name", "record_name", "record_type", "record_value"], "responses": {"success": {"type": "bool", "description": "Indicates whether the DNS record creation was successful"}}}
{"api_name": "createCloudDNSZone", "api_description": "Create a new DNS zone in the cloud", "field": "Cloud Computing/Cloud DNS (Domain Name System)", "parameters": {"zone_name": {"type": "str", "description": "The name of the DNS zone to be created"}, "zone_type": {"type": "str", "description": "The type of DNS zone (e.g., public, private)"}, "zone_description": {"type": "str", "description": "A brief description of the DNS zone"}}, "required": ["zone_name"], "responses": {"zone_id": {"type": "str", "description": "The unique identifier assigned to the created DNS zone"}}}
{"api_name": "addCloudDNSRecord", "api_description": "Add a new DNS record to an existing zone", "field": "Cloud Computing/Cloud DNS (Domain Name System)", "parameters": {"zone_id": {"type": "str", "description": "The unique identifier of the DNS zone to which the record should be added"}, "record_type": {"type": "str", "description": "The type of DNS record (e.g., A, CNAME, MX)"}, "record_name": {"type": "str", "description": "The name of the DNS record to be added"}, "record_value": {"type": "str", "description": "The value associated with the DNS record"}}, "required": ["zone_id", "record_type", "record_name", "record_value"], "responses": {"record_id": {"type": "str", "description": "The unique identifier assigned to the added DNS record"}}}
{"api_name": "getPathwayAnalysis", "api_description": "Perform metabolic pathway analysis", "field": "Biochemistry/Metabolic pathway analysis", "parameters": {"pathway": {"type": "str", "description": "The pathway of interest (e.g., glycolysis, TCA cycle)"}, "genes": {"type": "str", "description": "A list of genes involved in the pathway (e.g., gene1, gene2, gene3)"}}, "required": ["pathway", "genes"], "responses": {"pathway_results": {"type": "str", "description": "The analysis results for the specified pathway"}, "gene_annotation": {"type": "str", "description": "The functional annotation of the genes in the pathway"}}}
{"api_name": "getMetabolismRate", "api_description": "Retrieve the cellular metabolism rate", "field": "Biochemistry/Cellular biochemistry", "parameters": {"cell_type": {"type": "str", "description": "The type of cell for which you want to get the metabolism rate (e.g., liver cell, muscle cell, nerve cell)"}, "temperature": {"type": "float", "description": "The temperature at which the metabolism rate is measured (e.g., 37.0, 25.0, 42.5)"}}, "required": ["cell_type", "temperature"], "responses": {"metabolism_rate": {"type": "float", "description": "The metabolism rate of the specified cell type at the given temperature"}}}
{"api_name": "getCellularProcesses", "api_description": "Retrieve information about cellular processes", "field": "Biochemistry/Cellular biochemistry", "parameters": {"cell_type": {"type": "str", "description": "The type of cell for which you want to retrieve information (e.g., prokaryotic, eukaryotic)"}, "process_type": {"type": "str", "description": "The type of cellular process you are interested in (e.g., metabolism, signal transduction)"}, "specificity": {"type": "str", "description": "Specify the level of specificity you want for the process (e.g., general, specific)"}, "time_scale": {"type": "str", "description": "Specify the time scale for the process (e.g., seconds, minutes, hours)"}}, "required": ["cell_type", "process_type"], "responses": {"process_info": {"type": "str", "description": "Description of the cellular process"}, "molecular_components": {"type": "str", "description": "List of molecular components involved in the process"}, "regulation": {"type": "str", "description": "Information about the regulation of the process"}}}
{"api_name": "getBiochemicalToxicity", "api_description": "Retrieve biochemical toxicity information", "field": "Biochemistry/Biochemical toxicology", "parameters": {"compound": {"type": "str", "description": "The compound for which you want to get the biochemical toxicity information (e.g., Benzene, Arsenic, Lead)"}, "exposure_time": {"type": "str", "description": "Specify the duration of exposure to the compound (e.g., 24 hours, 7 days)"}, "dose": {"type": "float", "description": "Specify the dose or concentration of the compound (e.g., 10.5 mg/kg, 100 ppm)"}, "species": {"type": "str", "description": "Specify the species for which you want to get the toxicological data (e.g., Human, Mouse, Rat)"}}, "required": ["compound", "exposure_time"], "responses": {"toxicity_level": {"type": "str", "description": "The level of toxicity associated with the compound"}, "effects": {"type": "str", "description": "The biochemical effects caused by the compound"}}}
{"api_name": "optimizeMetabolism", "api_description": "Optimize metabolic pathways to improve biochemical production", "field": "Biochemistry/Metabolic engineering", "parameters": {"target_product": {"type": "str", "description": "The desired biochemical product to be optimized (e.g., ethanol, insulin, antibiotics)"}, "organism": {"type": "str", "description": "The organism or host used for biochemical production (e.g., E. coli, yeast, mammalian cells)"}, "constraints": {"type": "str", "description": "Additional constraints for pathway optimization (e.g., limited resources, regulatory restrictions)"}, "genetic_tools": {"type": "str", "description": "Specific genetic tools or modifications to be utilized in the optimization process (e.g., CRISPR-Cas9, RNA interference)"}}, "required": ["target_product", "organism"], "responses": {"optimized_pathway": {"type": "str", "description": "The optimized metabolic pathway for biochemical production"}, "product_yield": {"type": "float", "description": "The predicted yield of the target biochemical product"}, "timeframe": {"type": "str", "description": "The estimated timeframe for implementing the optimized pathway"}}}
{"api_name": "optimizeEnzymeFunction", "api_description": "Optimize the function of a specific enzyme", "field": "Biochemistry/Enzyme engineering", "parameters": {"enzyme_name": {"type": "str", "description": "The name of the enzyme to be optimized (e.g., Lipase, Protease)"}, "substrate": {"type": "str", "description": "The substrate the enzyme acts upon (e.g., Glucose, Lactose)"}, "mutation_rate": {"type": "float", "description": "The desired rate of mutation during the optimization process"}, "target_function": {"type": "str", "description": "The target function or activity that the enzyme should achieve (e.g., increase activity, alter substrate specificity)"}}, "required": ["enzyme_name", "substrate", "target_function"], "responses": {"optimized_enzyme": {"type": "str", "description": "The resulting optimized enzyme with improved function"}}}
{"api_name": "calculateProteinIsoelectricPoint", "api_description": "Calculate the isoelectric point of a protein", "field": "Biochemistry/Biophysics", "parameters": {"protein_sequence": {"type": "str", "description": "The amino acid sequence of the protein"}}, "required": ["protein_sequence"], "responses": {"isoelectric_point": {"type": "float", "description": "The isoelectric point of the protein"}}}
{"api_name": "getBiochemicalMicroscopy", "api_description": "Retrieve biochemical microscopy information", "field": "Biochemistry/Biochemical microscopy", "parameters": {"sample": {"type": "str", "description": "The type of sample you want to analyze (e.g., blood, tissue, urine)"}, "stain": {"type": "str", "description": "The type of stain used for visualization (e.g., Hematoxylin and Eosin, Periodic Acid-Schiff, Giemsa)"}}, "required": ["sample"], "responses": {"image": {"type": "str", "description": "The image of the sample under biochemical microscopy"}}}
{"api_name": "getAbsorbance", "api_description": "Retrieve the absorbance of a substance at a specific wavelength using biochemical spectroscopy", "field": "Biochemistry/Biochemical spectroscopy", "parameters": {"substance": {"type": "str", "description": "The name of the substance for which you want to measure the absorbance (e.g., glucose, protein)"}, "wavelength": {"type": "float", "description": "The specific wavelength at which absorbance is measured (e.g., 260 nm, 450 nm)"}, "solvent": {"type": "str", "description": "The solvent in which the substance is dissolved (e.g., water, ethanol)"}}, "required": ["substance", "wavelength"], "responses": {"absorbance": {"type": "float", "description": "The absorbance value of the substance at the specified wavelength"}}}
{"api_name": "getImmunoglobulinLevel", "api_description": "Retrieve the level of immunoglobulin in a person's blood", "field": "Biochemistry/Biochemical immunology", "parameters": {"person_id": {"type": "int", "description": "The unique identifier of the person whose immunoglobulin level is wanted (e.g., 1234)"}, "time_period": {"type": "str", "description": "The time period for which the immunoglobulin level is wanted (e.g., last month, last year)"}, "type": {"type": "str", "description": "The type of immunoglobulin to retrieve the level of (e.g., IgA, IgG, IgM)"}}, "required": ["person_id", "type"], "responses": {"level": {"type": "float", "description": "The level of the specified immunoglobulin in the person's blood", "unit": "g/L"}}}
{"api_name": "detectAntibodies", "api_description": "Detect antibodies in a biological sample", "field": "Biochemistry/Biochemical immunology", "parameters": {"sample_type": {"type": "str", "description": "Type of biological sample to be analyzed (e.g., blood, urine, saliva)"}, "target_antigen": {"type": "str", "description": "Specific antigen to be detected in the sample (e.g., SARS-CoV-2 spike protein, HIV p24 antigen)"}, "detection_method": {"type": "str", "description": "Method used to detect antibodies (e.g., ELISA, Western blot, Immunofluorescence)"}, "antibody_class": {"type": "str", "description": "Type of antibodies to be detected (e.g., IgG, IgM, IgA)"}}, "required": ["sample_type", "target_antigen"], "responses": {"antibody_detected": {"type": "bool", "description": "Indicates whether the target antibody was detected in the sample"}, "detection_result": {"type": "str", "description": "Result of the antibody detection test"}}}
{"api_name": "sendOpticalSignal", "api_description": "Send a optical signal through a communication channel", "field": "Communications/Optical Communications", "parameters": {"signal": {"type": "str", "description": "The optical signal to be sent (e.g., 0s and 1s encoded using a modulation scheme)"}}, "required": ["signal"], "responses": {"success": {"type": "bool", "description": "Indicates if the optical signal was successfully sent"}}}
{"api_name": "receiveOpticalSignal", "api_description": "Receive an optical signal from a communication channel", "field": "Communications/Optical Communications", "parameters": {}, "required": [], "responses": {"signal": {"type": "str", "description": "The received optical signal"}}}
{"api_name": "estimateChannelLoss", "api_description": "Estimate the amount of signal loss in a communication channel", "field": "Communications/Optical Communications", "parameters": {"length": {"type": "int", "description": "The length of the communication channel in meters"}}, "required": ["length"], "responses": {"loss": {"type": "float", "description": "The estimated amount of signal loss in dB"}}}
{"api_name": "calculateBitErrorRate", "api_description": "Calculate the bit error rate for a given received optical signal", "field": "Communications/Optical Communications", "parameters": {"received_signal": {"type": "str", "description": "The received optical signal"}, "expected_signal": {"type": "str", "description": "The expected optical signal for comparison"}}, "required": ["received_signal", "expected_signal"], "responses": {"bit_error_rate": {"type": "float", "description": "The calculated bit error rate"}}}
{"api_name": "sendFile", "api_description": "Send a file to a recipient", "field": "Communications/Digital Communications", "parameters": {"recipient": {"type": "str", "description": "The recipient's email address or username"}, "file_path": {"type": "str", "description": "The path of the file to be sent"}}, "required": ["recipient", "file_path"], "responses": {"success": {"type": "bool", "description": "Indicates if the file was sent successfully"}}}
{"api_name": "getAmplitudeModulation", "api_description": "Retrieve information about amplitude modulation", "field": "Communications/Analog Communications", "parameters": {"frequency": {"type": "int", "description": "The frequency of the carrier signal in Hertz"}, "amplitude": {"type": "float", "description": "The amplitude of the carrier signal in Volts"}, "message": {"type": "str", "description": "The message signal to be modulated onto the carrier signal (e.g., 'Hello World')"}}, "required": ["frequency", "amplitude", "message"], "responses": {"modulated_signal": {"type": "str", "description": "The modulated analog signal"}}}
{"api_name": "calculateMutualInformation", "api_description": "Calculate the mutual information between two sets of data", "field": "Communications/Information Theory", "parameters": {"data1": {"type": "str", "description": "The first set of data for which you want to calculate the mutual information"}, "data2": {"type": "str", "description": "The second set of data for which you want to calculate the mutual information"}}, "required": ["data1", "data2"], "responses": {"mutual_information": {"type": "float", "description": "The calculated mutual information between the given sets of data"}}}
{"api_name": "encodeDataWithHuffman", "api_description": "Encode a given set of data using Huffman coding", "field": "Communications/Information Theory", "parameters": {"data": {"type": "str", "description": "The set of data you want to encode with Huffman coding"}}, "required": ["data"], "responses": {"encoded_data": {"type": "str", "description": "The encoded data using Huffman coding"}}}
{"api_name": "estimateDataRate", "api_description": "Estimate the data rate for a given signal", "field": "Communications/Signal Processing", "parameters": {"signal_strength": {"type": "int", "description": "The signal strength of the device (e.g., -65)"}, "bandwidth": {"type": "float", "description": "The bandwidth of the signal (e.g., 20.0)"}, "coding_rate": {"type": "float", "description": "The coding rate of the signal (e.g., 0.9)"}}, "required": ["signal_strength", "bandwidth", "coding_rate"], "responses": {"data_rate": {"type": "float", "description": "The estimated data rate in Mbps"}}}
{"api_name": "demodulateSignal", "api_description": "Demodulate a given signal with specified demodulation technique", "field": "Communications/Modulation and Demodulation", "parameters": {"signal": {"type": "str", "description": "The signal to be demodulated"}, "demodulation_technique": {"type": "str", "description": "The desired demodulation technique for signal demodulation (e.g., coherent demodulation, non-coherent demodulation)"}}, "required": ["signal", "demodulation_technique"], "responses": {"demodulated_signal": {"type": "str", "description": "The demodulated signal after applying the specified demodulation technique"}}}
{"api_name": "setModulation", "api_description": "Set the modulation scheme for communication", "field": "Communications/Modulation and Demodulation", "parameters": {"modulation_scheme": {"type": "str", "description": "The desired modulation scheme to be set (e.g., QPSK, BPSK, QAM)"}, "frequency_band": {"type": "str", "description": "The frequency band in which the modulation needs to be performed (e.g., 2.4 GHz, 5 GHz)"}, "transmit_power": {"type": "float", "description": "The transmit power to be used for modulation (e.g., 1.5 dBm, 10 dBm)"}, "antenna_gain": {"type": "float", "description": "The gain of the antenna used for modulation (e.g., 3 dBi, 6 dBi)"}}, "required": ["modulation_scheme", "frequency_band"], "responses": {"success": {"type": "bool", "description": "Indicates whether the modulation is set successfully or not"}}}
{"api_name": "calculateFrameCheckSequence", "api_description": "Calculate the frame check sequence for error control coding", "field": "Communications/Error Control Coding", "parameters": {"data": {"type": "str", "description": "The data to be encoded using error control coding"}}, "required": ["data"], "responses": {"frame_check_sequence": {"type": "str", "description": "The frame check sequence generated for the given data"}}}
{"api_name": "enhanceAudio", "api_description": "Enhance the quality of audio recordings", "field": "Communications/Speech and Audio Processing", "parameters": {"audio_file": {"type": "str", "description": "The audio file to be enhanced (e.g., audio.wav)"}}, "required": ["audio_file"], "responses": {"enhanced_audio": {"type": "str", "description": "The path to the enhanced audio file"}}}
{"api_name": "transcribeAudio", "api_description": "Convert audio to text transcription", "field": "Communications/Speech and Audio Processing", "parameters": {"audio_file": {"type": "str", "description": "The path or URL to the audio file you want to transcribe"}, "language": {"type": "str", "description": "The language spoken in the audio file (e.g., English, Spanish, French)"}, "model": {"type": "str", "description": "The speech recognition model to use (e.g., default, enhanced)"}}, "required": ["audio_file"], "responses": {"transcription": {"type": "str", "description": "The text transcription of the audio"}}}
{"api_name": "extractThumbnail", "api_description": "Extract a thumbnail from a video", "field": "Communications/Image and Video Compression", "parameters": {"video_path": {"type": "str", "description": "The path to the video file"}, "time_stamp": {"type": "str", "description": "The desired timestamp in the video from which to extract the thumbnail"}}, "required": ["video_path", "time_stamp"], "responses": {"thumbnail_path": {"type": "str", "description": "The path to the extracted thumbnail image file"}}}
{"api_name": "initiateVideoConference", "api_description": "Initiate a video conference with multiple participants", "field": "Communications/Cognitive Communications", "parameters": {"participants": {"type": "str", "description": "The email addresses or phone numbers of the participants separated by commas"}, "duration": {"type": "int", "description": "The duration of the video conference in minutes"}}, "required": ["participants"], "responses": {"status": {"type": "str", "description": "The status of the video conference (e.g., ongoing, ended)"}}}
{"api_name": "createAdHocNetwork", "api_description": "Create an ad hoc network", "field": "Communications/Ad Hoc Networks", "parameters": {"network_name": {"type": "str", "description": "The name of the ad hoc network"}, "security": {"type": "str", "description": "The security protocol to be used (e.g., WEP, WPA, WPA2)"}, "bandwidth": {"type": "int", "description": "The desired bandwidth for the network in Mbps"}, "range": {"type": "int", "description": "The coverage range of the network in meters"}}, "required": ["network_name", "security"], "responses": {"success": {"type": "bool", "description": "Indicates whether the ad hoc network creation was successful"}}}
{"api_name": "checkEthicality", "api_description": "Check the ethicality of a given action", "field": "Ethics/Applied Ethics", "parameters": {"action": {"type": "str", "description": "The action to be checked for ethicality (e.g., buying a fur coat, using animals for experiments)"}, "consequences": {"type": "str", "description": "The potential consequences of the action (e.g., harm to animals, environmental damage)"}, "society": {"type": "str", "description": "The society in which the action is being evaluated (e.g., Western society, Eastern society)"}}, "required": ["action", "consequences"], "responses": {"ethicality": {"type": "str", "description": "The ethicality of the given action based on the provided parameters"}}}
{"api_name": "checkEthicalConduct", "api_description": "Check if a specific conduct is ethically acceptable or not", "field": "Ethics/Applied Ethics", "parameters": {"conduct": {"type": "str", "description": "The specific conduct that you want to check (e.g., cheating in exams, animal testing, human cloning)"}}, "required": ["conduct"], "responses": {"is_acceptable": {"type": "bool", "description": "A boolean value indicating whether the conduct is considered ethically acceptable"}}}
{"api_name": "getCommonEthicalDilemma", "api_description": "Retrieve a common ethical dilemma", "field": "Ethics/Descriptive Ethics", "parameters": {}, "required": [], "responses": {"dilemma": {"type": "str", "description": "A common ethical dilemma in society"}}}
{"api_name": "getMoralValues", "api_description": "Retrieve descriptive moral values", "field": "Ethics/Descriptive Ethics", "parameters": {}, "required": [], "responses": {"values": {"type": "str", "description": "A list of descriptive moral values"}}}
{"api_name": "describeEthics", "api_description": "Retrieve information on descriptive ethics", "field": "Ethics/Descriptive Ethics", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information on descriptive ethics"}}}
{"api_name": "analyzeMoralPsychology", "api_description": "Analyze the moral psychology of a person", "field": "Ethics/Moral Psychology", "parameters": {"name": {"type": "str", "description": "The name of the person whose moral psychology you want to analyze"}, "age": {"type": "int", "description": "The age of the person"}, "gender": {"type": "str", "description": "The gender of the person (e.g., male, female, other)"}, "behavior": {"type": "str", "description": "The specific behavior you want to analyze (e.g., lying, cheating, helping others)"}, "context": {"type": "str", "description": "The context in which the behavior occurred (e.g., at work, in a relationship, in a social setting)"}}, "required": ["name", "behavior"], "responses": {"moral_evaluation": {"type": "str", "description": "The moral evaluation of the person's behavior (e.g., morally right, morally wrong)"}, "moral_reasoning": {"type": "str", "description": "The moral reasoning behind the person's behavior"}, "moral_development_stage": {"type": "str", "description": "The stage of moral development the person is in (e.g., pre-conventional, conventional, post-conventional)"}}}
{"api_name": "getEnvironmentalEthicsPrinciples", "api_description": "Retrieve the core principles of environmental ethics", "field": "Ethics/Environmental Ethics", "parameters": {}, "required": [], "responses": {"principles": {"type": "str", "description": "The core principles of environmental ethics"}}}
{"api_name": "checkEthicalViolation", "api_description": "Check if a certain action violates any ethical principles in medical ethics", "field": "Ethics/Medical Ethics", "parameters": {"action": {"type": "str", "description": "The action that needs to be checked for ethical violation"}}, "required": ["action"], "responses": {"violation": {"type": "bool", "description": "A boolean value indicating if the action violates any ethical principles"}}}
{"api_name": "getLegalEthics", "api_description": "Retrieve information on legal ethics", "field": "Ethics/Legal Ethics", "parameters": {"jurisdiction": {"type": "str", "description": "The jurisdiction for which you want to get information on legal ethics (e.g., United States, United Kingdom, Australia)"}}, "required": ["jurisdiction"], "responses": {"guidelines": {"type": "str", "description": "The ethical guidelines followed in the specified jurisdiction"}, "case_laws": {"type": "str", "description": "The case laws related to legal ethics in the specified jurisdiction"}}}
{"api_name": "checkBias", "api_description": "Check the bias of a media source", "field": "Ethics/Media Ethics", "parameters": {"media_source": {"type": "str", "description": "The name of the media source you want to check for bias (e.g., CNN, Fox News, BBC)"}, "article_url": {"type": "str", "description": "The URL of a specific article from the media source"}}, "required": ["media_source"], "responses": {"bias_score": {"type": "float", "description": "The bias score of the media source"}, "article_bias_score": {"type": "float", "description": "The bias score of the specific article"}}}
{"api_name": "reportAnimalEthicsViolation", "api_description": "Report a violation of animal ethics", "field": "Ethics/Animal Ethics", "parameters": {"location": {"type": "str", "description": "The location of the animal ethics violation (e.g., zoo, research facility, farm)"}, "description": {"type": "str", "description": "Detailed description of the animal ethics violation"}}, "required": ["location", "description"], "responses": {"success": {"type": "bool", "description": "True if the violation is successfully reported, False otherwise"}}}
{"api_name": "analyzeEthicalImplications", "api_description": "Analyze the ethical implications of a specific technology", "field": "Ethics/Ethics of Technology", "parameters": {"technology": {"type": "str", "description": "The specific technology to analyze the ethical implications (e.g., artificial intelligence, genetic engineering)"}, "context": {"type": "str", "description": "Provide the context in which the technology is being used (e.g., healthcare, transportation, education)"}}, "required": ["technology"], "responses": {"implications": {"type": "str", "description": "The ethical implications associated with the given technology and context"}}}
{"api_name": "getEthicsOfTechnology", "api_description": "Retrieve information about the ethics of technology", "field": "Ethics/Ethics of Technology", "parameters": {"technology": {"type": "str", "description": "Specify the technology for which you want to learn about the ethics (e.g., artificial intelligence, biotechnology, robotics)"}, "consequences": {"type": "str", "description": "Specify the consequences of the technology (e.g., social, environmental, economic)"}, "ethical_framework": {"type": "str", "description": "Specify the ethical framework for evaluating the technology (e.g., Utilitarianism, Deontology, Virtue Ethics)"}}, "required": ["technology"], "responses": {"ethics": {"type": "str", "description": "Information about the ethics of the specified technology"}}}
{"api_name": "generateExplainabilityReport", "api_description": "Generate an explainability report for an AI model", "field": "Ethics/Ethics of Artificial Intelligence", "parameters": {"model": {"type": "str", "description": "The AI model to generate the report for"}}, "required": ["model"], "responses": {"report": {"type": "str", "description": "The generated explainability report for the AI model"}}}
{"api_name": "deidentifyData", "api_description": "Deidentify sensitive data to ensure privacy and comply with ethical standards", "field": "Ethics/Ethics of Artificial Intelligence", "parameters": {"data": {"type": "str", "description": "The sensitive data to be deidentified"}}, "required": ["data"], "responses": {"deidentified_data": {"type": "str", "description": "The deidentified version of the sensitive data"}}}
{"api_name": "getEthicsInEducation", "api_description": "Retrieve information on ethics in education", "field": "Ethics/Ethics in Education", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about ethics in education"}}}
{"api_name": "reportEthicalConcern", "api_description": "Report an ethical concern in education", "field": "Ethics/Ethics in Education", "parameters": {"concern": {"type": "str", "description": "The ethical concern to be reported"}}, "required": ["concern"], "responses": {"status": {"type": "str", "description": "The status of the reported concern"}}}
{"api_name": "getEthicsOfWar", "api_description": "Retrieve information about the ethics of war", "field": "Ethics/Ethics of War", "parameters": {"location": {"type": "str", "description": "The location where the war is taking place (e.g., Syria, Afghanistan)"}, "conflict_type": {"type": "str", "description": "The type of conflict (e.g., civil war, international war)"}, "parties_involved": {"type": "str", "description": "The parties or countries involved in the war (e.g., USA, Russia, ISIS)"}, "year": {"type": "int", "description": "The year of the war"}}, "required": ["location", "conflict_type"], "responses": {"ethics": {"type": "str", "description": "The ethical considerations and principles applicable to the war"}, "parties_involved": {"type": "str", "description": "The parties or countries involved in the war"}}}
{"api_name": "getEthicsInCounseling", "api_description": "Retrieve information about ethics in counseling", "field": "Ethics/Ethics in Counseling", "parameters": {"counselor_name": {"type": "str", "description": "The name of the counselor"}, "client_name": {"type": "str", "description": "The name of the client"}, "therapy_type": {"type": "str", "description": "The type of therapy being conducted (e.g., individual, group, family)"}, "issue": {"type": "str", "description": "The ethical issue being addressed in counseling"}}, "required": ["counselor_name", "client_name"], "responses": {"ethics_guidelines": {"type": "str", "description": "Guidelines and principles of ethics in counseling"}, "recommendations": {"type": "str", "description": "Recommendations for ethical conduct in the given counseling scenario"}}}
{"api_name": "getEthicsInPolitics", "api_description": "Retrieve information about ethics in politics", "field": "Ethics/Ethics in Politics", "parameters": {"country": {"type": "str", "description": "The country for which you want to get information about ethics in politics (e.g., USA, UK, Germany)"}, "political_party": {"type": "str", "description": "The political party you want to analyze in terms of ethics (e.g., Democratic Party, Conservative Party, Social Democratic Party)"}, "issue": {"type": "str", "description": "The specific issue you want to evaluate in terms of ethics (e.g., campaign finance, corruption, nepotism)"}}, "required": ["country", "political_party", "issue"], "responses": {"ethics_score": {"type": "float", "description": "The ethics score of the specified political party in relation to the specified issue"}, "analysis": {"type": "str", "description": "An analysis of the ethics situation in politics regarding the specified country", "example": "Ethics in politics in USA are primarily focused on issues such as campaign finance reform and transparency in government"}}}
{"api_name": "getEthicsInLaw", "api_description": "Retrieve information on ethics in law", "field": "Ethics/Ethics in Law", "parameters": {"law_type": {"type": "str", "description": "The type of law (e.g., criminal law, civil law, constitutional law)"}, "country": {"type": "str", "description": "The country for which you want to get information on ethics in law (e.g., United States, United Kingdom, Australia)"}, "issue": {"type": "str", "description": "The specific ethical issue you want to explore in relation to law (e.g., privacy, human rights)"}}, "required": ["law_type", "country"], "responses": {"ethics": {"type": "str", "description": "Information on ethics in law for the specified parameters"}}}
{"api_name": "provideMediaGuidelines", "api_description": "Provide guidelines for responsible media reporting", "field": "Ethics/Ethics in Journalism", "parameters": {"topic": {"type": "str", "description": "The topic for which media guidelines are needed (e.g., elections, emergencies)"}, "language": {"type": "str", "description": "Specify the language of the guidelines (e.g., English, Spanish)"}}, "required": ["topic"], "responses": {"guidelines": {"type": "str", "description": "The guidelines for responsible media reporting"}}}
{"api_name": "reportMisinformation", "api_description": "Report misinformation or fake news", "field": "Ethics/Ethics in Journalism", "parameters": {"news_content": {"type": "str", "description": "The content or URL of the news article containing misinformation"}}, "required": ["news_content"], "responses": {"report_status": {"type": "str", "description": "The status of the misinformation report (e.g., submitted, under review)"}}}
{"api_name": "discloseConflicts", "api_description": "Disclose conflicts of interest in journalism", "field": "Ethics/Ethics in Journalism", "parameters": {"journalist_name": {"type": "str", "description": "The name of the journalist"}, "conflict_details": {"type": "str", "description": "Details of the conflict of interest (e.g., financial, personal)"}, "publication": {"type": "str", "description": "The publication or news organization affiliated with the journalist"}}, "required": ["journalist_name", "conflict_details", "publication"], "responses": {"disclosure_status": {"type": "str", "description": "The status of the conflict of interest disclosure (e.g., disclosed, pending)"}}}
{"api_name": "evaluateVRContent", "api_description": "Evaluate the ethical implications of a virtual reality experience", "field": "Ethics/Ethics of Virtual Reality", "parameters": {"content": {"type": "str", "description": "The virtual reality content to be evaluated"}, "user_profile": {"type": "str", "description": "The user's profile and preferences for ethical evaluation"}, "platform": {"type": "str", "description": "The virtual reality platform or device used"}, "duration": {"type": "int", "description": "The duration of the virtual reality experience in minutes"}}, "required": ["content"], "responses": {"ethical_score": {"type": "float", "description": "The ethical score of the virtual reality experience"}, "recommendations": {"type": "str", "description": "Recommendations for improving the ethical aspects of the virtual reality content"}}}
{"api_name": "getEthicsOfHumanEnhancement", "api_description": "Retrieve information about the ethics of human enhancement", "field": "Ethics/Ethics of Human Enhancement", "parameters": {"technology_type": {"type": "str", "description": "Type of human enhancement technology (e.g., genetic engineering, cybernetics, nanotechnology)"}, "ethical_framework": {"type": "str", "description": "The ethical framework for assessing human enhancement (e.g., consequentialism, deontology, virtue ethics)"}, "philosophical_perspective": {"type": "str", "description": "The philosophical perspective on human enhancement (e.g., transhumanism, bioconservatism)"}}, "required": [], "responses": {"ethics": {"type": "str", "description": "The ethical considerations related to human enhancement"}, "technology_implications": {"type": "str", "description": "Implications of human enhancement technologies on society and individuals"}, "ethical_guidelines": {"type": "str", "description": "Existing ethical guidelines or principles for human enhancement"}}}
{"api_name": "getEthicsGeneticEngineering", "api_description": "Retrieve information about the ethics of genetic engineering", "field": "Ethics/Ethics of Genetic Engineering", "parameters": {"topic": {"type": "str", "description": "The specific topic within the field of genetic engineering ethics (e.g., cloning, gene therapy, designer babies)"}, "ethical_framework": {"type": "str", "description": "The ethical framework used to evaluate the ethics of genetic engineering (e.g., utilitarianism, deontology, virtue ethics)"}}, "required": ["topic"], "responses": {"ethical_view": {"type": "str", "description": "The perspective or point of view on the ethics of genetic engineering"}, "arguments": {"type": "str", "description": "Key arguments supporting or opposing the ethics of genetic engineering"}, "ethical_framework_used": {"type": "str", "description": "The ethical framework used to evaluate the ethics of genetic engineering"}}}
{"api_name": "getEthicsOfHumanRights", "api_description": "Retrieve information about the ethics of human rights", "field": "Ethics/Ethics of Human Rights", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about the ethics of human rights"}}}
{"api_name": "getPrivacyEthics", "api_description": "Retrieve ethics information related to privacy", "field": "Ethics/Ethics of Privacy", "parameters": {"topic": {"type": "str", "description": "Specify a privacy topic to get ethics information (e.g., surveillance, data protection)"}, "country": {"type": "str", "description": "The country for which you want to retrieve privacy ethics information (e.g., USA, Germany, China)"}}, "required": ["topic"], "responses": {"ethics_info": {"type": "str", "description": "The ethics information related to the specified privacy topic"}}}
{"api_name": "getPrivacyViolationRisk", "api_description": "Assess the risk of privacy violations", "field": "Ethics/Ethics of Privacy", "parameters": {"data": {"type": "str", "description": "The data to be analyzed for privacy violations (e.g., user information, location data)"}, "purpose": {"type": "str", "description": "The purpose for which the data will be used (e.g., advertising, research, personalization)"}}, "required": ["data", "purpose"], "responses": {"risk_score": {"type": "float", "description": "The risk score indicating the likelihood of privacy violations"}, "recommendations": {"type": "str", "description": "Recommendations to mitigate privacy risks"}}}
{"api_name": "checkPrivacyPolicy", "api_description": "Check if a website has a privacy policy in place", "field": "Ethics/Ethics of Privacy", "parameters": {"website_url": {"type": "str", "description": "The URL of the website to check for privacy policy"}}, "required": ["website_url"], "responses": {"has_privacy_policy": {"type": "bool", "description": "Indicates whether the website has a privacy policy or not"}}}
{"api_name": "getEthicsOfDataManagement", "api_description": "Retrieve information about the ethics of data management", "field": "Ethics/Ethics of Data Management", "parameters": {}, "required": [], "responses": {"ethics": {"type": "str", "description": "Information about the ethics of data management"}}}
{"api_name": "getEthicsOfSurveillance", "api_description": "Retrieve information about the ethics of surveillance", "field": "Ethics/Ethics of Surveillance", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about the ethics of surveillance"}}}
{"api_name": "evaluateEthics", "api_description": "Evaluate the ethics of social media platforms", "field": "Ethics/Ethics of Social Media", "parameters": {"platform": {"type": "str", "description": "The social media platform to evaluate (e.g., Facebook, Twitter, Instagram)"}, "user_privacy": {"type": "bool", "description": "Indicates whether user privacy is protected on the platform"}, "content_censorship": {"type": "bool", "description": "Indicates whether the platform censors content"}, "data_collection": {"type": "bool", "description": "Indicates whether the platform collects user data"}, "ethical_advertising": {"type": "bool", "description": "Indicates whether the platform's advertising practices are considered ethical"}}, "required": ["platform"], "responses": {"ethics_score": {"type": "float", "description": "The ethics score of the specified social media platform"}, "user_privacy": {"type": "str", "description": "The level of user privacy protection on the platform"}, "content_censorship": {"type": "str", "description": "The level of content censorship on the platform"}, "data_collection": {"type": "str", "description": "The extent of user data collection on the platform"}, "ethical_advertising": {"type": "str", "description": "The assessment of the platform's advertising practices"}}}
{"api_name": "checkEthicsInArtificialLife", "api_description": "Check the ethical considerations in artificial life", "field": "Ethics/Ethics in Artificial Life", "parameters": {"technology": {"type": "str", "description": "The type of technology used in artificial life (e.g., genetic engineering, machine learning)"}, "purpose": {"type": "str", "description": "The purpose of creating artificial life (e.g., scientific research, entertainment)"}, "consequences": {"type": "str", "description": "The potential consequences of artificial life (e.g., environmental impact, social implications)"}}, "required": ["technology", "purpose"], "responses": {"ethical_issues": {"type": "str", "description": "The ethical issues associated with artificial life"}, "guidelines": {"type": "str", "description": "Guidelines to ensure ethical practices in artificial life"}}}
{"api_name": "getNegotiationEthics", "api_description": "Retrieve information about ethics in negotiation", "field": "Ethics/Ethics in Negotiation", "parameters": {"topic": {"type": "str", "description": "The specific topic of negotiation ethics you want to learn about (e.g., trust, fairness, transparency)"}, "industry": {"type": "str", "description": "The industry for which you want to explore negotiation ethics (e.g., healthcare, finance, technology)"}, "case_study": {"type": "bool", "description": "Specify if you want to include a case study in the response"}}, "required": ["topic"], "responses": {"ethics_principles": {"type": "str", "description": "The principles of ethics applicable to the specified topic in negotiation"}, "case_study": {"type": "str", "description": "An illustrative case study showcasing negotiation ethics if requested"}}}
{"api_name": "getEthicsInInternationalRelations", "api_description": "Retrieve information about ethics in international relations", "field": "Ethics/Ethics in International Relations", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about ethics in international relations"}}}
{"api_name": "getEthicsInDemocracy", "api_description": "Retrieve information about ethics in a democracy", "field": "Ethics/Ethics in Democracy", "parameters": {"country": {"type": "str", "description": "The name of the country to retrieve the information for (e.g., United States, United Kingdom, Canada)"}, "topic": {"type": "str", "description": "A specific topic related to ethics in democracy (e.g., freedom of speech, right to vote)"}}, "required": ["country"], "responses": {"ethics": {"type": "str", "description": "Ethical considerations in a democracy"}, "laws": {"type": "str", "description": "The laws and regulations governing ethics in a democracy"}}}
{"api_name": "getPhilanthropyCode", "api_description": "Retrieve the ethical code for philanthropy organizations", "field": "Ethics/Ethics in Philanthropy", "parameters": {}, "required": [], "responses": {"code": {"type": "str", "description": "The ethical code for philanthropy organizations"}}}
{"api_name": "checkPhilanthropyTransparency", "api_description": "Check the level of transparency of a philanthropy organization", "field": "Ethics/Ethics in Philanthropy", "parameters": {"organization_name": {"type": "str", "description": "The name of the philanthropy organization"}}, "required": ["organization_name"], "responses": {"transparency_level": {"type": "str", "description": "The level of transparency of the philanthropy organization"}}}
{"api_name": "evaluateEthicsInPhilanthropy", "api_description": "Evaluate the ethical aspects of a philanthropic act or organization", "field": "Ethics/Ethics in Philanthropy", "parameters": {"act_or_organization": {"type": "str", "description": "The philanthropic act or organization to be evaluated"}, "criteria": {"type": "str", "description": "The ethical criteria for evaluation (e.g., transparency, impact, equity, sustainability)"}, "region": {"type": "str", "description": "The region/context in which the act or organization operates (e.g., local, national, global)"}, "timeframe": {"type": "str", "description": "The timeframe during which the act or organization has been active (e.g., past 1 year, past 5 years, overall)"}, "stakeholders": {"type": "str", "description": "The key stakeholders affected by the act or organization"}}, "required": ["act_or_organization", "criteria"], "responses": {"ethics_score": {"type": "float", "description": "The overall ethics score of the philanthropic act or organization"}, "comments": {"type": "str", "description": "Additional comments or insights regarding the ethical evaluation"}}}
{"api_name": "getInformedConsentForm", "api_description": "Retrieve a template for an informed consent form for social science research", "field": "Ethics/Ethics in Social Science Research", "parameters": {}, "required": [], "responses": {"consent_form": {"type": "str", "description": "The template for an informed consent form"}}}
{"api_name": "getEthicsInClimateChangeResearch", "api_description": "Retrieve ethics considerations in climate change research", "field": "Ethics/Ethics in Climate Change Research", "parameters": {"research_topic": {"type": "str", "description": "The specific topic of climate change research (e.g., impacts, mitigation, adaptation)"}, "data_type": {"type": "str", "description": "The type of data used in the research (e.g., observational, model output)"}, "geographical_scope": {"type": "str", "description": "The geographical scope of the research (e.g., global, regional, local)"}, "time_horizon": {"type": "str", "description": "The time horizon considered in the research (e.g., short-term, long-term)"}, "research_question": {"type": "str", "description": "The key research question the study aims to answer"}}, "required": ["research_topic", "data_type"], "responses": {"ethics_considerations": {"type": "str", "description": "The ethics considerations relevant to the climate change research"}, "benefits": {"type": "str", "description": "The potential benefits of the research"}, "risks": {"type": "str", "description": "The potential risks associated with the research"}}}
{"api_name": "evaluateEthicalImpact", "api_description": "Evaluate the ethical impact of climate change research", "field": "Ethics/Ethics in Climate Change Research", "parameters": {"research_topic": {"type": "str", "description": "The topic of the climate change research (e.g., carbon emissions, adaptation strategies)"}, "ethical_framework": {"type": "str", "description": "The ethical framework used to evaluate the research (e.g., utilitarianism, deontology)"}, "risk_assessment": {"type": "bool", "description": "Specify if a risk assessment is required for evaluating the ethical impact"}}, "required": ["research_topic", "ethical_framework"], "responses": {"ethical_impact": {"type": "str", "description": "The ethical impact of the climate change research"}, "recommendations": {"type": "str", "description": "Recommendations for addressing the ethical concerns identified"}}}
{"api_name": "checkResearchEthics", "api_description": "Check if quantum research is conducted ethically", "field": "Ethics/Ethics in Quantum Research", "parameters": {"research_topic": {"type": "str", "description": "The research topic in quantum field (e.g., Quantum computing, Quantum communication)"}, "researcher": {"type": "str", "description": "The name of the researcher conducting the quantum research"}}, "required": ["research_topic", "researcher"], "responses": {"ethics_status": {"type": "str", "description": "The status of ethics in the quantum research project"}}}
{"api_name": "getEthicsInQuantumResearch", "api_description": "Retrieve information about the ethical considerations in conducting quantum research", "field": "Ethics/Ethics in Quantum Research", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about the ethical considerations in conducting quantum research"}}}
{"api_name": "getEthicsInNanotechnology", "api_description": "Retrieve information about ethics in nanotechnology research", "field": "Ethics/Ethics in Nanotechnology Research", "parameters": {"research_topic": {"type": "str", "description": "The specific nanotechnology research topic (e.g., nanomedicine, nanoelectronics)"}, "focus_area": {"type": "str", "description": "The ethical focus area (e.g., privacy, responsible innovation)"}, "country": {"type": "str", "description": "The specific country where the research is being conducted"}}, "required": ["research_topic"], "responses": {"ethics_guidelines": {"type": "str", "description": "The existing ethics guidelines for the specified research topic and focus area"}, "ethical_issues": {"type": "str", "description": "The identified ethical issues in the specified research area and country"}}}
{"api_name": "getBacteriaGramStain", "api_description": "Retrieve the Gram stain result of a specific bacteria", "field": "Microbiology/Bacteriology", "parameters": {"bacteria_name": {"type": "str", "description": "The name of the bacteria for which you want to get the Gram stain result (e.g., Escherichia coli, Staphylococcus aureus)"}}, "required": ["bacteria_name"], "responses": {"gram_stain_result": {"type": "str", "description": "The Gram stain result of the specified bacteria"}}}
{"api_name": "getBacteriaAntibioticResistance", "api_description": "Retrieve the antibiotic resistance profile of a specific bacteria", "field": "Microbiology/Bacteriology", "parameters": {"bacteria_name": {"type": "str", "description": "The name of the bacteria for which you want to get the antibiotic resistance profile (e.g., Klebsiella pneumoniae, Enterococcus faecalis)"}}, "required": ["bacteria_name"], "responses": {"antibiotic_resistance": {"type": "str", "description": "The antibiotic resistance profile of the specified bacteria"}}}
{"api_name": "detectVirus", "api_description": "Detect the presence of a virus in a sample", "field": "Microbiology/Virology", "parameters": {"sample": {"type": "str", "description": "The sample to be tested for virus presence (e.g., blood, tissue, saliva)"}, "test_type": {"type": "str", "description": "The type of test to be performed (e.g., PCR, ELISA, serology)"}, "target_virus": {"type": "str", "description": "The specific virus to be detected (e.g., Influenza A, Zika virus)"}}, "required": ["sample", "test_type"], "responses": {"virus_present": {"type": "bool", "description": "Boolean value indicating the presence of the target virus in the sample"}}}
{"api_name": "identifyVirus", "api_description": "Identify the type of virus in a given sample", "field": "Microbiology/Virology", "parameters": {"sample": {"type": "str", "description": "The biological sample to be tested for virus identification (e.g., blood, tissue, saliva)"}, "instrument": {"type": "str", "description": "The instrument used for virus identification (e.g., RT-PCR machine, electron microscope)"}, "protocol": {"type": "str", "description": "The protocol or method followed for virus identification (e.g., viral genome sequencing, immunofluorescence assay)"}}, "required": ["sample"], "responses": {"virus_type": {"type": "str", "description": "The type of virus identified in the given sample"}, "confidence_level": {"type": "float", "description": "The confidence level of virus identification"}}}
{"api_name": "getFungalSpecies", "api_description": "Retrieve the species of a given fungus", "field": "Microbiology/Mycology", "parameters": {"fungus_name": {"type": "str", "description": "The name of the fungus for which you want to retrieve the species (e.g., Aspergillus fumigatus, Candida albicans, Trichophyton rubrum)"}, "isolate_number": {"type": "int", "description": "The isolate number of the fungus (e.g., 1, 2, 3)"}}, "required": ["fungus_name"], "responses": {"species_name": {"type": "str", "description": "The species of the specified fungus"}}}
{"api_name": "getAntifungalSusceptibility", "api_description": "Retrieve the antifungal susceptibility of a given fungal species", "field": "Microbiology/Mycology", "parameters": {"species_name": {"type": "str", "description": "The name of the fungal species for which you want to retrieve the antifungal susceptibility (e.g., Aspergillus fumigatus, Candida albicans)"}, "antifungal_agent": {"type": "str", "description": "The specific antifungal agent to check susceptibility for (e.g., Fluconazole, Amphotericin B)"}}, "required": ["species_name", "antifungal_agent"], "responses": {"susceptibility": {"type": "str", "description": "The susceptibility of the given fungal species to the specified antifungal agent"}}}
{"api_name": "getParasiteImages", "api_description": "Retrieve images of parasites in a sample", "field": "Microbiology/Parasitology", "parameters": {"sample_id": {"type": "str", "description": "The unique identifier for the sample"}}, "required": ["sample_id"], "responses": {"images": {"type": "str", "description": "The URLs of images showing parasites in the given sample"}}}
{"api_name": "detectFoodContamination", "api_description": "Detect the presence of microbial contamination in food samples", "field": "Microbiology/Food Microbiology", "parameters": {"sample": {"type": "str", "description": "The food sample to be tested"}, "testing_method": {"type": "str", "description": "The method to be used for testing the food sample (e.g., culture-based method, molecular-based method)"}}, "required": ["sample"], "responses": {"contamination_detected": {"type": "bool", "description": "Indicates whether microbial contamination is detected in the food sample"}, "contaminating_microorganisms": {"type": "str", "description": "The list of microorganisms detected in the food sample"}}}
{"api_name": "getFoodMicrobiologyInfo", "api_description": "Retrieve information about food microbiology", "field": "Microbiology/Food Microbiology", "parameters": {"food_item": {"type": "str", "description": "The name of the food item you want microbiology information for (e.g., chicken, lettuce, cheese)"}, "testing_method": {"type": "str", "description": "The method used for microbiological testing (e.g., PCR, culture-based)"}, "country": {"type": "str", "description": "The country from which the food item is obtained"}}, "required": ["food_item"], "responses": {"bacterial_count": {"type": "int", "description": "The count of bacteria in the food item"}, "pathogen_presence": {"type": "bool", "description": "Whether any pathogenic bacteria are present in the food item"}, "testing_result": {"type": "str", "description": "The result of microbiological testing on the food item"}}}
{"api_name": "getMicrobialPopulation", "api_description": "Retrieve the population of microbes in agricultural soil", "field": "Microbiology/Agricultural Microbiology", "parameters": {"location": {"type": "str", "description": "The location of the agricultural field (e.g., farm, garden, greenhouse)"}, "depth": {"type": "str", "description": "The depth at which microbial population is to be measured (e.g., topsoil, subsoil)"}, "time": {"type": "str", "description": "The time period for which microbial population data is required (e.g., daily, weekly, monthly)"}}, "required": ["location"], "responses": {"microbial_population": {"type": "int", "description": "The population of microbes in the specified agricultural soil"}, "unit": {"type": "str", "description": "The unit of measurement for microbial population (e.g., colony forming units per gram of soil)"}}}
{"api_name": "detectPlantPathogens", "api_description": "Detect potential pathogens in agricultural plants", "field": "Microbiology/Agricultural Microbiology", "parameters": {"plant_species": {"type": "str", "description": "The species of agricultural plants to detect potential pathogens in (e.g., Wheat, Tomato, Corn)"}, "field": {"type": "str", "description": "The specific agricultural field to perform the plant pathogen detection (e.g., Farm A, Garden B)"}}, "required": ["plant_species"], "responses": {"pathogens_detected": {"type": "str", "description": "The potential pathogens detected in the agricultural plants"}}}
{"api_name": "getNutrientUtilization", "api_description": "Retrieve information on the utilization of specific nutrients by microbes", "field": "Microbiology/Microbial Physiology", "parameters": {"microbe": {"type": "str", "description": "The specific microbe for which you want to retrieve nutrient utilization information (e.g., Escherichia coli, Saccharomyces cerevisiae)"}, "nutrient": {"type": "str", "description": "The specific nutrient for which you want to retrieve utilization information (e.g., glucose, ammonium)"}, "growth_conditions": {"type": "str", "description": "The specific growth conditions under which the microbe's nutrient utilization will be evaluated (e.g., aerobic, anaerobic, high temperature)"}}, "required": ["microbe", "nutrient"], "responses": {"utilization_rate": {"type": "float", "description": "The rate at which the microbe utilizes the specified nutrient"}, "growth_conditions": {"type": "str", "description": "The growth conditions under which the nutrient utilization rate is determined"}}}
{"api_name": "getMicrobialDNA", "api_description": "Retrieve DNA sequence information for a specific microorganism", "field": "Microbiology/Molecular Microbiology", "parameters": {"microorganism": {"type": "str", "description": "The name of the microorganism for which you want to retrieve DNA sequence information (e.g., Escherichia coli, Saccharomyces cerevisiae)"}, "gene": {"type": "str", "description": "The name of the gene for which you want to retrieve DNA sequence information (e.g., rpoB, 16S rRNA)"}}, "required": ["microorganism", "gene"], "responses": {"dna_sequence": {"type": "str", "description": "The DNA sequence of the specified gene in the specified microorganism"}}}
{"api_name": "getOptimalpH", "api_description": "Retrieve the optimal pH range for a specific microbial enzyme", "field": "Microbiology/Microbial Enzymology", "parameters": {"enzyme_name": {"type": "str", "description": "The name of the microbial enzyme for which you want to get the optimal pH range (e.g., protease, cellulase)"}}, "required": ["enzyme_name"], "responses": {"optimal_pH": {"type": "str", "description": "The optimal pH range for the specified microbial enzyme"}}}
{"api_name": "getMetabolismInfo", "api_description": "Retrieve information about microbial metabolism", "field": "Microbiology/Microbial Metabolism", "parameters": {"microorganism": {"type": "str", "description": "The name of the microorganism you want to get metabolism information for (e.g., Escherichia coli, Saccharomyces cerevisiae)"}}, "required": ["microorganism"], "responses": {"metabolism_info": {"type": "str", "description": "Information about the metabolism of the specified microorganism"}}}
{"api_name": "getMicrobialMetabolismInfo", "api_description": "Retrieve detailed information about a specific microbial metabolism", "field": "Microbiology/Microbial Metabolism", "parameters": {"metabolism_type": {"type": "str", "description": "The type of microbial metabolism for which you want detailed information"}}, "required": ["metabolism_type"], "responses": {"metabolism_info": {"type": "str", "description": "Detailed information about the specified microbial metabolism"}}}
{"api_name": "getMutationRate", "api_description": "Retrieve the mutation rate of a microbial population", "field": "Microbiology/Microbial Evolution", "parameters": {"species": {"type": "str", "description": "The name of the microbial species (e.g., E. coli, S. cerevisiae)"}, "generation": {"type": "int", "description": "The current generation of the microbial population"}}, "required": ["species", "generation"], "responses": {"mutation_rate": {"type": "float", "description": "The mutation rate of the microbial population"}, "unit": {"type": "str", "description": "The unit of mutation rate (e.g., mutations per generation)"}}}
{"api_name": "getMicrobialNanotechnologyInfo", "api_description": "Retrieve information about microbial nanotechnology", "field": "Microbiology/Microbial Nanotechnology", "parameters": {"microorganism": {"type": "str", "description": "The name of the microorganism related to nanotechnology (e.g., bacteria, fungi, viruses)"}, "application": {"type": "str", "description": "The specific application of microbial nanotechnology (e.g., drug delivery, biosensors, nanomaterial synthesis)"}, "functional_property": {"type": "str", "description": "The functional property of microbial nanotechnology (e.g., self-assembly, biomineralization, bioremediation)"}}, "required": ["microorganism"], "responses": {"info": {"type": "str", "description": "Detailed information about microbial nanotechnology"}}}
{"api_name": "getPublicHealthMicrobiologyData", "api_description": "Retrieve public health microbiology data", "field": "Microbiology/Public Health Microbiology", "parameters": {"disease": {"type": "str", "description": "Specify the type of disease for which you want microbiology data (e.g., influenza, tuberculosis, HIV)"}, "location": {"type": "str", "description": "Specify the location for which you want microbiology data (e.g., country, city)"}, "time_range": {"type": "str", "description": "Specify the time range for microbiology data (e.g., last 30 days, last year)"}}, "required": ["disease"], "responses": {"data": {"type": "str", "description": "Microbiology data for the specified disease, location, and time range"}}}
{"api_name": "getFungalGrowthRate", "api_description": "Retrieve the growth rate of a specific fungal species", "field": "Microbiology/Medical Mycology", "parameters": {"species": {"type": "str", "description": "The name of the fungal species (e.g., Candida albicans, Aspergillus fumigatus)"}, "temperature": {"type": "float", "description": "The temperature at which the fungal growth rate is measured (e.g., 25.0, 37.5)"}, "culture_medium": {"type": "str", "description": "The type of culture medium used for the fungal growth (e.g., Sabouraud agar, Potato dextrose broth)"}}, "required": ["species", "temperature"], "responses": {"growth_rate": {"type": "float", "description": "The growth rate of the specified fungal species under the given conditions"}, "unit": {"type": "str", "description": "The unit of the growth rate (e.g., mm/day)"}}}
{"api_name": "getMicroscopyImage", "api_description": "Retrieve a microscopic image", "field": "Microbiology/Medical Microscopy", "parameters": {"sample_type": {"type": "str", "description": "The type of sample to be observed (e.g., blood, tissues, body fluids)"}, "magnification": {"type": "int", "description": "The desired level of magnification for the microscopic image (e.g. 100x, 400x)"}, "stain": {"type": "str", "description": "The type of stain used for better visualization of the sample (e.g. Gram stain, Ziehl-Neelsen stain)"}}, "required": ["sample_type", "magnification"], "responses": {"microscopic_image": {"type": "str", "description": "The URL or path to the retrieved microscopic image"}}}
{"api_name": "getImmersiveVRInfo", "api_description": "Retrieve information about immersive virtual reality (VR) experiences", "field": "Virtual Reality/Immersive virtual reality (VR)", "parameters": {"category": {"type": "str", "description": "The category of immersive VR experience to retrieve information about (e.g., gaming, education, healthcare)"}, "price_range": {"type": "str", "description": "Specify a price range for the immersive VR experiences (e.g., affordable, premium)"}, "location": {"type": "str", "description": "The location where the immersive VR experiences are available (e.g., New York, London)"}}, "required": ["category"], "responses": {"experience_name": {"type": "str", "description": "The name of the immersive VR experience"}, "description": {"type": "str", "description": "A brief description of the immersive VR experience"}, "price": {"type": "float", "description": "The price of the immersive VR experience"}, "location": {"type": "str", "description": "The location where the immersive VR experience is available"}}}
{"api_name": "getARAvatar", "api_description": "Retrieve the augmented reality avatar details", "field": "Virtual Reality/Augmented reality (AR)", "parameters": {"avatar_id": {"type": "str", "description": "The ID of the augmented reality avatar"}, "location": {"type": "str", "description": "The location for which you want to view the augmented reality (e.g., office, home, park)"}, "compatibility": {"type": "bool", "description": "Specify if the augmented reality avatar is compatible with the device (e.g., true, false)"}}, "required": ["avatar_id"], "responses": {"avatar_details": {"type": "str", "description": "The details of the augmented reality avatar"}, "location": {"type": "str", "description": "The location where the augmented reality can be viewed"}, "compatible": {"type": "bool", "description": "Specifies if the augmented reality avatar is compatible with the device"}}}
{"api_name": "getVirtualRealitySports", "api_description": "Retrieve virtual reality sports and fitness information", "field": "Virtual Reality/Virtual reality in sports and fitness", "parameters": {"sport": {"type": "str", "description": "The sport for which you want to experience virtual reality (e.g., basketball, cycling, tennis)"}, "duration": {"type": "int", "description": "The desired duration of the virtual reality experience in minutes"}}, "required": ["sport"], "responses": {"experience": {"type": "str", "description": "Description of the virtual reality experience for the specified sport"}, "calories_burned": {"type": "float", "description": "Estimated calories burned during the virtual reality sports experience"}}}
{"api_name": "getWorkoutData", "api_description": "Retrieve workout data from virtual reality sports and fitness activities", "field": "Virtual Reality/Virtual reality in sports and fitness", "parameters": {"activity": {"type": "str", "description": "Type of virtual reality sports or fitness activity (e.g., boxing, soccer, yoga)"}, "duration": {"type": "int", "description": "Duration of the workout in minutes", "example": "30"}}, "required": ["activity"], "responses": {"calories_burned": {"type": "float", "description": "The estimated number of calories burned during the workout"}, "heart_rate": {"type": "int", "description": "The user's average heart rate during the workout"}}}
{"api_name": "getFitnessRewards", "api_description": "Retrieve virtual rewards earned during fitness training in virtual reality", "field": "Virtual Reality/Virtual reality in sports and fitness", "parameters": {"user": {"type": "str", "description": "User's name or ID"}, "activity_type": {"type": "str", "description": "Type of fitness activity (e.g., running, cycling, strength training)"}}, "required": ["user", "activity_type"], "responses": {"rewards": {"type": "str", "description": "List of virtual rewards earned during the fitness training"}}}
{"api_name": "getVRWorkout", "api_description": "Retrieve a virtual reality workout for sports and fitness", "field": "Virtual Reality/Virtual reality in sports and fitness", "parameters": {"sport": {"type": "str", "description": "The sport for which you want to get a virtual reality workout (e.g., basketball, yoga, cycling)"}, "difficulty": {"type": "str", "description": "The desired difficulty level of the workout (e.g., beginner, intermediate, advanced)"}, "duration": {"type": "int", "description": "The desired duration of the workout in minutes"}}, "required": ["sport", "duration"], "responses": {"workout": {"type": "str", "description": "A virtual reality workout for the specified sport and duration"}}}
{"api_name": "getSportVRContent", "api_description": "Retrieve virtual reality content related to sports", "field": "Virtual Reality/Virtual reality in sports and fitness", "parameters": {"sport": {"type": "str", "description": "The sport for which you want to get virtual reality content (e.g., basketball, soccer, tennis)"}, "type": {"type": "str", "description": "The type of virtual reality content you are looking for (e.g., training, live game, highlights)"}, "player_name": {"type": "str", "description": "The name of a specific player you want to watch in virtual reality"}}, "required": ["sport"], "responses": {"content_url": {"type": "str", "description": "The URL to the virtual reality content"}, "description": {"type": "str", "description": "A brief description of the virtual reality content"}}}
{"api_name": "createVirtualAd", "api_description": "Create a virtual reality advertisement for marketing purposes", "field": "Virtual Reality/Virtual reality in marketing and advertising", "parameters": {"product_name": {"type": "str", "description": "The name of the product being advertised"}, "target_audience": {"type": "str", "description": "The intended audience for the advertisement"}, "storyline": {"type": "str", "description": "The narrative or storyline of the advertisement"}, "duration": {"type": "int", "description": "The duration of the advertisement in seconds"}, "visual_effects": {"type": "str", "description": "The desired visual effects for the advertisement (e.g., realistic, futuristic, immersive)"}, "soundtrack": {"type": "str", "description": "The desired soundtrack or background music for the advertisement"}}, "required": ["product_name", "target_audience", "storyline"], "responses": {"ad_url": {"type": "str", "description": "The URL or link to access the created virtual reality advertisement"}}}
{"api_name": "getVRAdsData", "api_description": "Retrieve virtual reality ads data for marketing and advertising", "field": "Virtual Reality/Virtual reality in marketing and advertising", "parameters": {"product": {"type": "str", "description": "The product for which you want to get virtual reality ads data (e.g., smartphones, cars, clothing)"}, "location": {"type": "str", "description": "The location for which you want to get virtual reality ads data (e.g., global, specific country)"}, "time_frame": {"type": "str", "description": "The time frame for which you want to get virtual reality ads data (e.g., last month, last year)"}}, "required": ["product"], "responses": {"ad_impressions": {"type": "int", "description": "The number of times the virtual reality ads were shown"}, "click_through_rate": {"type": "float", "description": "The percentage of users who clicked on the virtual reality ads"}, "conversion_rate": {"type": "float", "description": "The percentage of users who performed a desired action after interacting with the virtual reality ads"}}}
{"api_name": "getEthicsAndPrivacyInformation", "api_description": "Retrieve information about virtual reality ethics and privacy", "field": "Virtual Reality/Virtual reality ethics and privacy", "parameters": {}, "required": [], "responses": {"information": {"type": "str", "description": "Information about virtual reality ethics and privacy"}}}
{"api_name": "initializeVRHardware", "api_description": "Initialize the virtual reality hardware", "field": "Virtual Reality/Virtual reality hardware integration", "parameters": {}, "required": [], "responses": {"success": {"type": "bool", "description": "Indicates whether the hardware initialization was successful"}}}
{"api_name": "calibrateVRHardware", "api_description": "Calibrate the virtual reality hardware", "field": "Virtual Reality/Virtual reality hardware integration", "parameters": {}, "required": [], "responses": {"success": {"type": "bool", "description": "Indicates whether the hardware calibration was successful"}}}
{"api_name": "setDisplayMode", "api_description": "Set the display mode of the virtual reality hardware", "field": "Virtual Reality/Virtual reality hardware integration", "parameters": {"mode": {"type": "str", "description": "The desired display mode (e.g., immersive, cinematic, mixed reality)"}}, "required": ["mode"], "responses": {"success": {"type": "bool", "description": "Indicates whether the display mode was set successfully"}}}
{"api_name": "startCollaboration", "api_description": "Start a virtual reality session for remote collaboration", "field": "Virtual Reality/Virtual reality for remote collaboration", "parameters": {"session_id": {"type": "str", "description": "Unique identifier for the virtual reality session"}, "participants": {"type": "str", "description": "List of participants involved in the session"}, "meeting_room": {"type": "str", "description": "Location or virtual room where the collaboration session is being held"}, "equipment": {"type": "str", "description": "Equipment required for the virtual reality collaboration (e.g., VR headsets, motion controllers)"}}, "required": ["session_id", "participants"], "responses": {"success": {"type": "bool", "description": "Indicates if the collaboration session was successfully started"}}}
{"api_name": "getCybersecurityThreats", "api_description": "Retrieve cybersecurity threats in virtual reality", "field": "Virtual Reality/Virtual reality cybersecurity", "parameters": {}, "required": [], "responses": {"threats": {"type": "str", "description": "A list of cybersecurity threats in the virtual reality environment"}}}
{"api_name": "getVRSecurityLevel", "api_description": "Retrieve the security level of a virtual reality system", "field": "Virtual Reality/Virtual reality cybersecurity", "parameters": {"system_type": {"type": "str", "description": "The type of virtual reality system (e.g., headsets, full-body suits)"}, "network_type": {"type": "str", "description": "The type of network connection for the virtual reality system (e.g., Wi-Fi, Ethernet)"}}, "required": ["system_type"], "responses": {"security_level": {"type": "str", "description": "The security level of the specified virtual reality system"}}}
{"api_name": "checkCybersecurity", "api_description": "Check the cybersecurity status of a virtual reality system", "field": "Virtual Reality/Virtual reality cybersecurity", "parameters": {"system_id": {"type": "str", "description": "The identification number of the virtual reality system to be checked"}}, "required": ["system_id"], "responses": {"status": {"type": "str", "description": "The cybersecurity status of the virtual reality system"}, "recommendations": {"type": "str", "description": "Recommendations to enhance the cybersecurity of the virtual reality system"}}}
{"api_name": "checkVRSecurity", "api_description": "Check the cybersecurity of virtual reality system", "field": "Virtual Reality/Virtual reality cybersecurity", "parameters": {"system_id": {"type": "str", "description": "The ID of the virtual reality system to be checked"}, "scan_time": {"type": "str", "description": "The time when the cybersecurity scan should be performed"}}, "required": ["system_id"], "responses": {"vulnerabilities": {"type": "int", "description": "The number of vulnerabilities found in the virtual reality system"}}}
{"api_name": "getVRFlightSimulator", "api_description": "Retrieve virtual reality flight simulator for aviation and aerospace", "field": "Virtual Reality/Virtual reality for aviation and aerospace", "parameters": {"aircraft_type": {"type": "str", "description": "The type of aircraft for the flight simulator (e.g., commercial airliner, fighter jet, helicopter)"}, "location": {"type": "str", "description": "The location where the flight simulation takes place (e.g., airport, military base, training facility)"}, "duration": {"type": "int", "description": "The duration of the virtual reality flight simulation in minutes"}}, "required": ["aircraft_type", "location"], "responses": {"simulation_data": {"type": "str", "description": "The data generated during the virtual reality flight simulation"}}}
{"api_name": "getAviationVRData", "api_description": "Retrieve virtual reality data for aviation and aerospace industries", "field": "Virtual Reality/Virtual reality for aviation and aerospace", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve virtual reality data (e.g., airport code, city)"}, "aircraft": {"type": "str", "description": "The specific aircraft for which you want to retrieve virtual reality data (e.g., Boeing 747, Airbus A320)"}, "scenario": {"type": "str", "description": "The simulated scenario for which you want to retrieve virtual reality data (e.g., takeoff, landing, emergency)"}}, "required": ["location"], "responses": {"virtual_environment": {"type": "str", "description": "The virtual environment designed for the specified location, aircraft, and scenario"}, "flight_data": {"type": "str", "description": "The realistic flight data integrated into the virtual reality simulation"}, "checklist": {"type": "str", "description": "The checklist of procedures and tasks included in the virtual reality experience"}}}
{"api_name": "flightSimulation", "api_description": "Simulate a virtual reality flight experience for aviation and aerospace purposes", "field": "Virtual Reality/Virtual reality for aviation and aerospace", "parameters": {"aircraft": {"type": "str", "description": "The type of aircraft to simulate (e.g., commercial jet, fighter jet, helicopter)"}, "location": {"type": "str", "description": "The virtual location for the flight simulation (e.g., New York City, Grand Canyon, Paris)"}, "weather_conditions": {"type": "str", "description": "The simulated weather conditions during the flight (e.g., clear skies, heavy rain, stormy)"}, "time_of_day": {"type": "str", "description": "Specify a time of day for the virtual flight (e.g., morning, afternoon, night)"}}, "required": ["aircraft", "location"], "responses": {"passenger_view": {"type": "str", "description": "The view experienced by passengers during the virtual flight"}, "pilot_view": {"type": "str", "description": "The view experienced by the pilot during the virtual flight"}, "safety_checklist": {"type": "str", "description": "The safety checklist and procedures for the specified aircraft"}}}
{"api_name": "getPsychosomaticSymptoms", "api_description": "Retrieve psychosomatic symptoms of a person", "field": "Psychiatry/Psychosomatic Medicine", "parameters": {"name": {"type": "str", "description": "The name of the person you want to retrieve the symptoms for"}, "age": {"type": "int", "description": "The age of the person"}, "gender": {"type": "str", "description": "The gender of the person (e.g., male, female)"}}, "required": ["name"], "responses": {"symptoms": {"type": "str", "description": "A description of the psychosomatic symptoms the person is experiencing"}}}
{"api_name": "getNeuropsychiatricEvaluation", "api_description": "Retrieve neuropsychiatric evaluation", "field": "Psychiatry/Neuropsychiatry", "parameters": {"patient_id": {"type": "int", "description": "The ID of the patient to evaluate"}, "assessment_type": {"type": "str", "description": "The type of assessment to be conducted (e.g., cognitive, behavioral, emotional)"}}, "required": ["patient_id"], "responses": {"evaluation": {"type": "str", "description": "The result of the neuropsychiatric evaluation"}}}
{"api_name": "predictOptimalBedtime", "api_description": "Predict the optimal bedtime", "field": "Psychiatry/Sleep Medicine", "parameters": {"desired_waketime": {"type": "str", "description": "The desired time of waking up (e.g., 07:30)"}, "user_id": {"type": "int", "description": "The ID of the user for whom the optimal bedtime is predicted"}}, "required": ["desired_waketime", "user_id"], "responses": {"optimal_bedtime": {"type": "str", "description": "The predicted optimal bedtime for the desired waketime (e.g., 23:00)"}}}
{"api_name": "getConsultationLiaisonPsychiatry", "api_description": "Retrieve information about consultation-liaison psychiatry", "field": "Psychiatry/Consultation-Liaison Psychiatry", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient receiving the consultation"}}, "required": ["patient_id"], "responses": {"psychiatrist": {"type": "str", "description": "The name of the psychiatrist providing the consultation"}, "consult_date": {"type": "str", "description": "The date of the consultation"}, "diagnosis": {"type": "str", "description": "The diagnosis given by the psychiatrist"}, "treatment_plan": {"type": "str", "description": "The recommended treatment plan for the patient"}}}
{"api_name": "getCultureSpecificTreatment", "api_description": "Retrieve culture-specific treatment suggestions for psychiatric conditions", "field": "Psychiatry/Cultural Psychiatry", "parameters": {"condition": {"type": "str", "description": "The psychiatric condition for which you want to get culture-specific treatment suggestions (e.g., depression, anxiety, schizophrenia)"}, "culture": {"type": "str", "description": "The culture for which you want to obtain treatment suggestions (e.g., Chinese, Indian, African-American)"}, "severity": {"type": "str", "description": "Specify the severity of the condition to receive appropriate treatment suggestions (e.g., mild, moderate, severe)"}}, "required": ["condition", "culture"], "responses": {"treatment_suggestions": {"type": "str", "description": "Culture-specific treatment suggestions for the specified psychiatric condition"}}}
{"api_name": "getMedicationSideEffects", "api_description": "Retrieve information about the side effects of a specific medication used in psychopharmacology", "field": "Psychiatry/Psychopharmacology", "parameters": {"medication_name": {"type": "str", "description": "The name of the medication you want information about"}}, "required": ["medication_name"], "responses": {"side_effects": {"type": "str", "description": "Side effects of the specified medication"}}}
{"api_name": "getNeurodevelopmentalDisorders", "api_description": "Retrieve information about neurodevelopmental disorders", "field": "Psychiatry/Neurodevelopmental Disorders", "parameters": {"disorder_name": {"type": "str", "description": "The name of the neurodevelopmental disorder you want to retrieve information about (e.g., Autism, ADHD, Down Syndrome)"}, "age_group": {"type": "str", "description": "Specify the age group for the disorder (e.g., children, adolescents, adults)"}, "severity_level": {"type": "str", "description": "Specify the severity level of the disorder (e.g., mild, moderate, severe)"}}, "required": ["disorder_name"], "responses": {"description": {"type": "str", "description": "A detailed description of the specified neurodevelopmental disorder"}}}
{"api_name": "getMoodDisorders", "api_description": "Retrieve information about mood disorders", "field": "Psychiatry/Mood Disorders", "parameters": {"patient_id": {"type": "str", "description": "The ID of the patient for whom you want to retrieve mood disorder information"}, "date_range": {"type": "str", "description": "Specify the range of dates for which you want to retrieve mood disorder information (e.g., '2021-01-01 to 2021-12-31')"}}, "required": ["patient_id"], "responses": {"mood_disorders": {"type": "str", "description": "The list of mood disorders experienced by the patient during the specified date range"}}}
{"api_name": "getAnxietyDisorders", "api_description": "Retrieve information about anxiety disorders", "field": "Psychiatry/Anxiety Disorders", "parameters": {}, "required": [], "responses": {"anxiety_disorders": {"type": "str", "description": "List of different types of anxiety disorders"}}}
{"api_name": "getSubstanceUseDisorders", "api_description": "Retrieve information about substance use disorders", "field": "Psychiatry/Substance Use Disorders", "parameters": {"patient_id": {"type": "str", "description": "The unique identifier of the patient for whom you want to get information"}, "substances": {"type": "str", "description": "Specify substances to search for in the patient's history (e.g., alcohol, opioids, cocaine)"}}, "required": ["patient_id"], "responses": {"diagnosis": {"type": "str", "description": "The diagnosis of substance use disorder for the specified patient"}, "treatment": {"type": "str", "description": "The recommended treatment plan for the patient"}}}
{"api_name": "getNeurocognitiveDisorders", "api_description": "Retrieve information about neurocognitive disorders", "field": "Psychiatry/Neurocognitive Disorders", "parameters": {"diagnosis": {"type": "str", "description": "The specific neurocognitive disorder to retrieve information about (e.g., Alzheimer's disease, Parkinson's disease, Huntington's disease)"}, "age_group": {"type": "str", "description": "The age group of the patients (e.g., adult, elderly)"}, "severity": {"type": "str", "description": "The severity level of the disorder (e.g., mild, moderate, severe)"}}, "required": ["diagnosis"], "responses": {"information": {"type": "str", "description": "Detailed information about the specified neurocognitive disorder"}}}
{"api_name": "createSocialMediaCampaign", "api_description": "Create a social media marketing campaign", "field": "Social Media/Social media marketing", "parameters": {"campaign_name": {"type": "str", "description": "The name of the marketing campaign"}, "platform": {"type": "str", "description": "The social media platform to run the campaign on"}, "target_audience": {"type": "str", "description": "The target audience for the marketing campaign (e.g., age group, interests)"}, "budget": {"type": "float", "description": "The budget allocated for the campaign"}, "start_date": {"type": "str", "description": "The start date of the campaign"}}, "required": ["campaign_name", "platform", "target_audience", "budget", "start_date"], "responses": {"campaign_id": {"type": "str", "description": "The unique identifier for the created marketing campaign"}}}
{"api_name": "getCommunityMembers", "api_description": "Retrieve the total number of community members", "field": "Social Media/Community management", "parameters": {"community_id": {"type": "str", "description": "The ID of the community for which you want to retrieve the members"}}, "required": ["community_id"], "responses": {"total_members": {"type": "int", "description": "The total number of members in the community"}}}
{"api_name": "getInfluencerEngagement", "api_description": "Retrieve the engagement metrics for a specific influencer", "field": "Social Media/Influencer marketing", "parameters": {"username": {"type": "str", "description": "The username of the influencer for which you want to retrieve engagement metrics"}}, "required": ["username"], "responses": {"engagement_rate": {"type": "float", "description": "The engagement rate of the influencer (e.g., 5.2%)"}, "likes_per_post": {"type": "float", "description": "The average number of likes per post by the influencer"}, "comments_per_post": {"type": "float", "description": "The average number of comments per post by the influencer"}}}
{"api_name": "getLikes", "api_description": "Retrieve the number of likes for a specific post", "field": "Social Media/Brand management", "parameters": {"platform": {"type": "str", "description": "The social media platform on which the post is located (e.g., Facebook, Twitter, Instagram)"}, "post_id": {"type": "str", "description": "Unique identifier of the post"}}, "required": ["platform", "post_id"], "responses": {"likes": {"type": "int", "description": "The number of likes for the post"}}}
{"api_name": "getInvertebrateDetails", "api_description": "Retrieve details about a specific invertebrate species", "field": "Zoology/Invertebrate Zoology", "parameters": {"species_name": {"type": "str", "description": "The name of the invertebrate species for which you want to get details"}}, "required": ["species_name"], "responses": {"species_name": {"type": "str", "description": "The name of the invertebrate species"}, "habitat": {"type": "str", "description": "The natural habitat of the invertebrate species"}, "reproduction": {"type": "str", "description": "The reproductive behavior of the invertebrate species"}, "lifecycle": {"type": "str", "description": "The lifecycle stages of the invertebrate species"}}}
{"api_name": "getVertebrateInfo", "api_description": "Retrieve information about vertebrate animals", "field": "Zoology/Vertebrate Zoology", "parameters": {"species": {"type": "str", "description": "The species of vertebrate animal you want information about (e.g., lion, eagle, whale)"}, "habitat": {"type": "str", "description": "The habitat of the vertebrate animal (e.g., forest, ocean, savannah)"}, "diet": {"type": "str", "description": "The diet of the vertebrate animal (e.g., carnivore, herbivore, omnivore)"}, "location": {"type": "str", "description": "The location where the vertebrate animal can be found (e.g., Africa, North America)"}}, "required": ["species"], "responses": {"info": {"type": "str", "description": "Information about the specified vertebrate animal"}}}
{"api_name": "getVertebrateSpecies", "api_description": "Retrieve information about vertebrate species", "field": "Zoology/Vertebrate Zoology", "parameters": {"habitat": {"type": "str", "description": "The habitat where the species lives (e.g., forest, ocean, desert)"}, "diet": {"type": "str", "description": "The diet of the species (e.g., herbivore, carnivore, omnivore)"}, "endangered": {"type": "bool", "description": "Specify if the species is endangered or not"}}, "required": ["habitat"], "responses": {"species": {"type": "str", "description": "The name of the vertebrate species"}, "habitat": {"type": "str", "description": "The habitat where the species lives"}, "diet": {"type": "str", "description": "The diet of the species"}, "endangered": {"type": "bool", "description": "If the species is endangered or not"}}}
{"api_name": "getAnatomicalStructure", "api_description": "Retrieve anatomical structure information of a species", "field": "Zoology/Comparative Anatomy", "parameters": {"species": {"type": "str", "description": "The species for which you want to get the anatomical structure (e.g., lion, dolphin, eagle)"}, "organ": {"type": "str", "description": "Specify a particular organ to retrieve anatomical structure (e.g., heart, brain, lungs)"}}, "required": ["species"], "responses": {"anatomical_structure": {"type": "str", "description": "The anatomical structure of the specified species and organ"}}}
{"api_name": "getComparativeAnatomyInfo", "api_description": "Retrieve information about comparative anatomy", "field": "Zoology/Comparative Anatomy", "parameters": {"species": {"type": "str", "description": "The species for which you want to retrieve comparative anatomy information (e.g., dog, cat, horse)"}, "organism": {"type": "str", "description": "The organism for which you want to retrieve comparative anatomy information (e.g., vertebrate, invertebrate)"}, "system": {"type": "str", "description": "The system of the organism for which you want to retrieve comparative anatomy information (e.g., skeletal, muscular, nervous)"}}, "required": ["species", "organism", "system"], "responses": {"anatomy_info": {"type": "str", "description": "The comparative anatomy information for the specified species, organism, and system"}}}
{"api_name": "getOrganismAnatomy", "api_description": "Retrieve the anatomy of a specific organism", "field": "Zoology/Comparative Anatomy", "parameters": {"organism": {"type": "str", "description": "The name of the organism for which you want to retrieve the anatomy"}}, "required": ["organism"], "responses": {"anatomy": {"type": "str", "description": "The anatomical characteristics of the specified organism"}}}
{"api_name": "compareOrganismsAnatomy", "api_description": "Compare the anatomy of two organisms", "field": "Zoology/Comparative Anatomy", "parameters": {"organism1": {"type": "str", "description": "The name of the first organism for comparison"}, "organism2": {"type": "str", "description": "The name of the second organism for comparison"}}, "required": ["organism1", "organism2"], "responses": {"comparison_result": {"type": "str", "description": "The result of the anatomical comparison between the two organisms"}}}
{"api_name": "getLawsByCountry", "api_description": "Retrieve international laws by country", "field": "International Relations/International law", "parameters": {"country": {"type": "str", "description": "The country for which you want to retrieve international laws"}}, "required": ["country"], "responses": {"laws": {"type": "str", "description": "The international laws that apply to the specified country"}}}
{"api_name": "getCountryTradeData", "api_description": "Retrieve trade data for a specific country", "field": "International Relations/Globalization", "parameters": {"country": {"type": "str", "description": "The country for which you want to get trade data (e.g., United States, China, Germany)"}, "year": {"type": "int", "description": "The specific year for which you want to retrieve trade data (e.g., 2019, 2020, 2021)"}, "product_type": {"type": "str", "description": "Specify the type of product for trade data (e.g., electronics, agricultural, automotive)"}}, "required": ["country", "year"], "responses": {"exports": {"type": "float", "description": "The total value of exports for the specified country in the given year"}, "imports": {"type": "float", "description": "The total value of imports for the specified country in the given year"}, "trade_balance": {"type": "float", "description": "The trade balance (exports minus imports) for the specified country in the given year"}}}
{"api_name": "getTradeData", "api_description": "Retrieve trade data between different countries", "field": "International Relations/Globalization", "parameters": {"country1": {"type": "str", "description": "Name of the first country (e.g., United States, China, Germany)"}, "country2": {"type": "str", "description": "Name of the second country (e.g., United Kingdom, Japan, France)"}, "year": {"type": "int", "description": "Specify a year to get trade data (e.g., 2019, 2020, 2021)"}}, "required": ["country1", "country2", "year"], "responses": {"export_value": {"type": "float", "description": "The total export value from country1 to country2 for the specified year"}, "import_value": {"type": "float", "description": "The total import value from country2 to country1 for the specified year"}}}
{"api_name": "getHumanRightsReport", "api_description": "Retrieve human rights reports for a specific country", "field": "International Relations/Human rights", "parameters": {"country": {"type": "str", "description": "The country for which you want to get the human rights report (e.g., China, United States, Russia)"}, "year": {"type": "int", "description": "The year of the human rights report (e.g., 2020, 2021)"}, "language": {"type": "str", "description": "Specify the language of the report (e.g., English, Spanish)"}}, "required": ["country"], "responses": {"report": {"type": "str", "description": "The human rights report for the specified country"}, "year": {"type": "int", "description": "The year of the report"}}}
{"api_name": "getRegionalRelations", "api_description": "Get information about international relations of specific regions or countries", "field": "International Relations/International relations of specific regions or countries", "parameters": {"region": {"type": "str", "description": "The region for which you want to get the international relations (e.g., Middle East, Asia, Europe)"}}, "required": ["region"], "responses": {"diplomatic_relations": {"type": "str", "description": "Information about diplomatic relations with other countries"}, "trade_relations": {"type": "str", "description": "Information about trade relations with other countries"}, "economic_relations": {"type": "str", "description": "Information about economic relations with other countries"}}}
{"api_name": "getNegotiationOutcome", "api_description": "Retrieve the outcome of an international negotiation", "field": "International Relations/International negotiation", "parameters": {"negotiation_topic": {"type": "str", "description": "The topic of the negotiation (e.g., trade, environment, disarmament)"}, "year": {"type": "int", "description": "The year of the negotiation (e.g., 2021, 2022, 2023)"}, "region": {"type": "str", "description": "The region where the negotiation takes place (e.g., Asia, Europe, Middle East)"}}, "required": ["negotiation_topic", "year"], "responses": {"outcome": {"type": "str", "description": "The outcome of the international negotiation"}}}
{"api_name": "getGlobalIndices", "api_description": "Retrieve global economic indices for a specific year", "field": "International Relations/Economic development and global governance", "parameters": {"year": {"type": "int", "description": "The specific year for which you want to get global economic indices"}}, "required": ["year"], "responses": {"gini_index": {"type": "float", "description": "The Gini Index, a measure of income inequality, for the specified year"}, "hdi": {"type": "float", "description": "The Human Development Index, a composite index measuring average achievements in three basic dimensions of human development, for the specified year"}}}
{"api_name": "getSEMData", "api_description": "Retrieve search engine marketing data", "field": "Digital Marketing/Search Engine Marketing (SEM)", "parameters": {"keywords": {"type": "str", "description": "The keywords for which you want to get SEM data (e.g., car, hotel, clothing)"}, "time_period": {"type": "str", "description": "The time period for which you want to get SEM data (e.g., past week, last month)"}, "device": {"type": "str", "description": "The device for which you want to get SEM data (e.g., desktop, mobile)"}}, "required": ["keywords"], "responses": {"clicks": {"type": "int", "description": "The number of clicks for the specified keywords"}, "impressions": {"type": "int", "description": "The number of impressions for the specified keywords"}, "cost": {"type": "float", "description": "The cost incurred for the specified keywords"}}}
{"api_name": "sendMobileCampaign", "api_description": "Send a mobile marketing campaign to target audience", "field": "Digital Marketing/Mobile Marketing", "parameters": {"campaign_name": {"type": "str", "description": "The name of the marketing campaign"}, "target_audience": {"type": "str", "description": "The target audience for the campaign"}, "message": {"type": "str", "description": "The message content of the campaign"}}, "required": ["campaign_name", "target_audience", "message"], "responses": {"status": {"type": "str", "description": "The status of the campaign (e.g., Sent, Failed, In progress)"}}}
{"api_name": "createIn-AppMessage", "api_description": "Create an in-app message for mobile apps", "field": "Digital Marketing/Mobile Marketing", "parameters": {"app_id": {"type": "str", "description": "The identifier of the mobile app"}, "title": {"type": "str", "description": "The title of the in-app message"}, "message": {"type": "str", "description": "The content of the in-app message"}, "image_url": {"type": "str", "description": "The URL of the image displayed in the in-app message", "example": "https://example.com/image.png"}, "cta_text": {"type": "str", "description": "The text of the call-to-action button", "example": "Learn More"}, "cta_url": {"type": "str", "description": "The URL opened when the user taps the call-to-action button", "example": "https://example.com"}}, "required": ["app_id", "title", "message"], "responses": {"message_id": {"type": "str", "description": "The identifier of the created in-app message", "example": "ABC123"}}}
{"api_name": "getVideoStats", "api_description": "Retrieve statistics of a video's performance in the marketing campaign", "field": "Digital Marketing/Video Marketing", "parameters": {"video_id": {"type": "str", "description": "Unique identifier of the video"}, "time_period": {"type": "str", "description": "Time period for which the statistics should be retrieved (e.g., daily, weekly, monthly)"}}, "required": ["video_id"], "responses": {"views": {"type": "int", "description": "Number of views the video has received"}, "likes": {"type": "int", "description": "Number of likes the video has received"}, "comments": {"type": "int", "description": "Number of comments the video has received"}}}
{"api_name": "createVideoAd", "api_description": "Create a video ad for digital marketing", "field": "Digital Marketing/Video Marketing", "parameters": {"video_file": {"type": "str", "description": "The file path of the video to be used in the ad"}, "target_audience": {"type": "str", "description": "Specify the target audience for the ad (e.g., age group, interests)"}, "duration": {"type": "int", "description": "The duration of the video ad in seconds"}}, "required": ["video_file", "target_audience", "duration"], "responses": {"ad_id": {"type": "str", "description": "Unique identifier for the created video ad"}}}
{"api_name": "getAverageTimeOnPage", "api_description": "Retrieve the average time spent by visitors on a specific page", "field": "Digital Marketing/Web Analytics", "parameters": {"website_url": {"type": "str", "description": "The URL of the page for which you want to get average time spent (e.g., www.example.com/page1)", "example": "www.example.com/page1"}}, "required": ["website_url"], "responses": {"average_time": {"type": "int", "description": "The average time spent by visitors on the specified page in seconds"}}}
{"api_name": "analyzeUserFeedback", "api_description": "Analyze user feedback for UX design improvements", "field": "Digital Marketing/User Experience (UX) Design", "parameters": {"feedback": {"type": "str", "description": "The user feedback or comments regarding the UX design"}}, "required": ["feedback"], "responses": {"improvements": {"type": "str", "description": "Suggested improvements or modifications to the UX design based on the user feedback"}, "user_satisfaction": {"type": "str", "description": "Level of user satisfaction with the UX design after making the suggested improvements"}}}
{"api_name": "conductABTesting", "api_description": "Conduct A/B testing to compare UX design variations", "field": "Digital Marketing/User Experience (UX) Design", "parameters": {"design_variation_A": {"type": "str", "description": "The first UX design variation to be tested"}, "design_variation_B": {"type": "str", "description": "The second UX design variation to be tested"}, "target_metric": {"type": "str", "description": "The metric to be measured for comparison (e.g., click-through rate, conversion rate)"}, "sample_size": {"type": "int", "description": "The sample size of users to participate in the A/B testing"}}, "required": ["design_variation_A", "design_variation_B", "target_metric", "sample_size"], "responses": {"variation_performance": {"type": "str", "description": "Performance comparison between the two UX design variations based on the target metric"}, "statistical_significance": {"type": "str", "description": "Statistical significance of the performance difference between the variations"}}}
{"api_name": "sendAutomatedEmail", "api_description": "Send automated email to a list of recipients", "field": "Digital Marketing/Email Automation", "parameters": {"recipients": {"type": "str", "description": "The email addresses of the recipients, separated by commas"}, "subject": {"type": "str", "description": "The subject of the email"}, "body": {"type": "str", "description": "The content of the email"}, "attachment": {"type": "str", "description": "The file path of the attachment (optional)"}, "schedule": {"type": "str", "description": "The schedule for sending the email (e.g., daily, weekly, specific date)"}, "template": {"type": "str", "description": "The email template to use for the email (optional)"}}, "required": ["recipients", "subject", "body"], "responses": {"success": {"type": "bool", "description": "Indicates if the email has been sent successfully"}}}
{"api_name": "getLeadGenerationData", "api_description": "Retrieve lead generation data for a specific campaign", "field": "Digital Marketing/Lead Generation", "parameters": {"campaign_id": {"type": "str", "description": "The ID of the campaign for which you want to retrieve lead generation data"}}, "required": ["campaign_id"], "responses": {"leads": {"type": "int", "description": "The number of leads generated by the specified campaign"}, "conversion_rate": {"type": "float", "description": "The conversion rate of the campaign in percentage"}}}
{"api_name": "fillMissingValues", "api_description": "Fill missing values in the dataset", "field": "Big Data/Data preprocessing", "parameters": {"data": {"type": "str", "description": "The dataset with missing values"}, "missing_values_strategy": {"type": "str", "description": "Specify a strategy to fill missing values (e.g., mean, median, mode)"}}, "required": ["data"], "responses": {"filled_data": {"type": "str", "description": "The dataset with missing values filled"}}}
{"api_name": "applyDataMiningAlgorithm", "api_description": "Apply a specific data mining algorithm to input data", "field": "Big Data/Data mining", "parameters": {"input_data": {"type": "str", "description": "The data to be analyzed for mining (e.g., customer reviews, social media posts)"}, "algorithm": {"type": "str", "description": "The data mining algorithm to be applied (e.g., sentiment analysis, topic modeling, anomaly detection)"}, "parameters": {"type": "str", "description": "Additional parameters for the chosen algorithm (e.g., sentiment threshold, number of topics, anomaly detection threshold)"}}, "required": ["input_data", "algorithm"], "responses": {"results": {"type": "str", "description": "The outcomes of the data mining algorithm applied to the input data"}}}
{"api_name": "transformData", "api_description": "Transform data from one format to another", "field": "Big Data/Data engineering", "parameters": {"source_data": {"type": "str", "description": "The data to be transformed"}, "from_format": {"type": "str", "description": "The format of the input data"}, "to_format": {"type": "str", "description": "The desired format for the output data"}}, "required": ["source_data", "from_format", "to_format"], "responses": {"transformed_data": {"type": "str", "description": "The transformed data in the specified output format"}}}
{"api_name": "startJob", "api_description": "Start a distributed computing job", "field": "Big Data/Distributed computing", "parameters": {"job_name": {"type": "str", "description": "The name of the job"}, "input_data": {"type": "str", "description": "The input data for the job"}, "num_workers": {"type": "int", "description": "The number of worker nodes for distributed computing"}, "batch_size": {"type": "int", "description": "The batch size for processing the data"}}, "required": ["job_name", "input_data"], "responses": {"job_id": {"type": "str", "description": "The ID of the started job"}}}
{"api_name": "stopJob", "api_description": "Stop a currently running distributed computing job", "field": "Big Data/Distributed computing", "parameters": {"job_id": {"type": "str", "description": "The ID of the job to stop"}}, "required": ["job_id"], "responses": {"message": {"type": "str", "description": "The status message indicating if job stop was successful"}}}
{"api_name": "runJob", "api_description": "Run a job on the cloud computing platform", "field": "Big Data/Cloud computing", "parameters": {"job_name": {"type": "str", "description": "The name of the job to be run"}, "job_type": {"type": "str", "description": "The type of job to be run (e.g., MapReduce, Spark, Hive)"}, "input_data": {"type": "str", "description": "The input data for the job"}, "output_location": {"type": "str", "description": "The location where the job outputs will be stored"}}, "required": ["job_name", "job_type"], "responses": {"status": {"type": "str", "description": "The status of the job execution"}}}
{"api_name": "downloadData", "api_description": "Download data from the cloud", "field": "Big Data/Cloud computing", "parameters": {"file_name": {"type": "str", "description": "The name of the file to be downloaded"}, "destination": {"type": "str", "description": "The destination folder to save the downloaded file"}}, "required": ["file_name", "destination"], "responses": {"status": {"type": "str", "description": "The status of the download process"}, "message": {"type": "str", "description": "Additional information or error message, if any"}, "file_size": {"type": "str", "description": "The size of the downloaded file"}}}
{"api_name": "performSentimentAnalysis", "api_description": "Analyze the sentiment of a given text", "field": "Big Data/Natural language processing", "parameters": {"text": {"type": "str", "description": "The text for which you want to perform sentiment analysis"}}, "required": ["text"], "responses": {"sentiment_score": {"type": "float", "description": "The sentiment score of the given text, ranging from -1 to 1 (-1 being negative, 1 being positive)"}, "sentiment_label": {"type": "str", "description": "The sentiment label of the given text, indicating whether it is positive, negative, or neutral"}}}
{"api_name": "performTextClassification", "api_description": "Classify a given text into predefined categories", "field": "Big Data/Natural language processing", "parameters": {"text": {"type": "str", "description": "The text that needs to be classified"}}, "required": ["text"], "responses": {"category": {"type": "str", "description": "The category to which the given text belongs"}}}
{"api_name": "addGovernancePolicy", "api_description": "Add a new governance policy for a dataset", "field": "Big Data/Data governance", "parameters": {"dataset_name": {"type": "str", "description": "The name of the dataset for which you want to add the governance policy"}, "policy": {"type": "str", "description": "The governance policy to be added for the dataset"}}, "required": ["dataset_name", "policy"], "responses": {"success": {"type": "bool", "description": "Indicates whether the governance policy was successfully added"}}}
{"api_name": "dataWrangling", "api_description": "Perform data wrangling operations on a dataset", "field": "Big Data/Data wrangling", "parameters": {"dataset": {"type": "str", "description": "The dataset on which data wrangling operations will be performed"}}, "required": ["dataset"], "responses": {"cleaned_data": {"type": "str", "description": "The cleaned data after performing data wrangling operations"}}}
{"api_name": "predictNextPurchase", "api_description": "Predict the next purchase of a customer based on their historical data", "field": "Big Data/Predictive analytics", "parameters": {"customer_id": {"type": "str", "description": "The unique identifier of the customer for whom the prediction is to be made"}, "purchase_history": {"type": "str", "description": "The historical purchase data of the customer (e.g., item IDs, purchase dates, quantities)"}}, "required": ["customer_id", "purchase_history"], "responses": {"prediction": {"type": "str", "description": "The predicted item that the customer is likely to purchase next"}}}
{"api_name": "getHadoopVersion", "api_description": "Retrieve the version of Hadoop installed", "field": "Big Data/Hadoop ecosystem", "parameters": {}, "required": [], "responses": {"version": {"type": "str", "description": "The version of Hadoop installed"}}}
{"api_name": "getHadoopConfiguration", "api_description": "Retrieve the configuration settings of Hadoop", "field": "Big Data/Hadoop ecosystem", "parameters": {}, "required": [], "responses": {"configuration": {"type": "str", "description": "The configuration settings of Hadoop"}}}
{"api_name": "getHadoopLogs", "api_description": "Retrieve the log files of Hadoop", "field": "Big Data/Hadoop ecosystem", "parameters": {"start_date": {"type": "str", "description": "The start date for log retrieval (e.g., 2021-01-01)"}, "end_date": {"type": "str", "description": "The end date for log retrieval (e.g., 2021-01-31)"}}, "required": [], "responses": {"logs": {"type": "str", "description": "The log files of Hadoop"}}}
{"api_name": "getHadoopJobStatus", "api_description": "Retrieve the status of a specific Hadoop job", "field": "Big Data/Hadoop ecosystem", "parameters": {"job_id": {"type": "str", "description": "The ID of the job"}}, "required": ["job_id"], "responses": {"status": {"type": "str", "description": "The status of the job (e.g., running, completed, failed)"}}}
{"api_name": "submitSparkJob", "api_description": "Submit a Spark job to be executed in the cluster", "field": "Big Data/Spark ecosystem", "parameters": {"job_name": {"type": "str", "description": "The name of the Spark job"}, "app_file": {"type": "str", "description": "The file containing the Spark application code"}, "args": {"type": "str", "description": "Arguments to be passed to the Spark application (e.g., input paths, output paths)"}, "executor_memory": {"type": "str", "description": "The memory allocated for executors (e.g., 2g, 4g, 8g)"}, "num_executors": {"type": "int", "description": "The number of executors to use for the Spark job"}}, "required": ["job_name", "app_file"], "responses": {"status": {"type": "str", "description": "The status of the submitted Spark job (e.g., RUNNING, FAILED, COMPLETED)"}, "job_id": {"type": "str", "description": "The ID assigned to the submitted Spark job"}}}
{"api_name": "cancelSparkJob", "api_description": "Cancel a running Spark job", "field": "Big Data/Spark ecosystem", "parameters": {"job_id": {"type": "str", "description": "The ID of the Spark job to be canceled"}}, "required": ["job_id"], "responses": {"status": {"type": "str", "description": "The status of the canceled Spark job (e.g., CANCELED)"}}}
{"api_name": "getSparkJobLogs", "api_description": "Retrieve logs of a completed Spark job", "field": "Big Data/Spark ecosystem", "parameters": {"job_id": {"type": "str", "description": "The ID of the Spark job"}, "limit": {"type": "int", "description": "The maximum number of log entries to retrieve"}}, "required": ["job_id"], "responses": {"logs": {"type": "str", "description": "Logs of the completed Spark job"}}}
{"api_name": "analyzeStepResponse", "api_description": "Analyze the step response of a given control system", "field": "Electrical Engineering/Control Systems", "parameters": {"plant_model": {"type": "str", "description": "The mathematical model of the plant or system being controlled (e.g., transfer function, state-space model)"}, "controller_parameters": {"type": "str", "description": "The parameters of the controller used in the control system"}}, "required": ["plant_model"], "responses": {"step_response_data": {"type": "str", "description": "The data of the step response of the control system"}}}
{"api_name": "controlSystemConfig", "api_description": "Retrieve the configuration settings of a control system", "field": "Electrical Engineering/Control Systems", "parameters": {"system_id": {"type": "str", "description": "Identifier of the control system you want to get the configuration settings of (e.g., C1001, C2002, C3003)"}}, "required": ["system_id"], "responses": {"config": {"type": "str", "description": "The configuration settings of the control system"}}}
{"api_name": "getInterferenceLevel", "api_description": "Retrieve the level of interference for a wireless connection", "field": "Electrical Engineering/Wireless Communication", "parameters": {"device_id": {"type": "str", "description": "The ID of the wireless device"}, "frequency_band": {"type": "str", "description": "The frequency band to check for interference (e.g., 2.4 GHz, 5 GHz)"}, "measurement_duration": {"type": "int", "description": "The duration of time over which to measure the interference level (e.g., 10 seconds, 1 minute)"}}, "required": ["device_id"], "responses": {"interference_level": {"type": "str", "description": "The level of interference for the wireless connection"}}}
{"api_name": "getTransmissionPower", "api_description": "Retrieve current transmission power information", "field": "Electrical Engineering/Optical Communication", "parameters": {"transmitter_id": {"type": "str", "description": "The ID of the transmitter"}, "frequency": {"type": "float", "description": "The frequency of transmission (e.g., 1550, 1310, 850)"}, "distance": {"type": "float", "description": "The distance of transmission in kilometers"}}, "required": ["transmitter_id"], "responses": {"power": {"type": "float", "description": "The transmission power in decibels (dBm)"}}}
{"api_name": "calculateLinkBudget", "api_description": "Calculate the link budget in an optical communication system", "field": "Electrical Engineering/Optical Communication", "parameters": {"transmitter_power": {"type": "float", "description": "The transmitter power in decibels (dBm)"}, "fiber_loss": {"type": "float", "description": "The fiber optic link loss in decibels (dB)"}, "connector_loss": {"type": "float", "description": "The loss caused by connectors in decibels (dB)"}, "splicing_loss": {"type": "float", "description": "The loss caused by splices in decibels (dB)"}, "receiver_sensitivity": {"type": "float", "description": "The minimum power level required at the receiver for proper operation in decibels (dBm)"}, "fiber_length": {"type": "float", "description": "The length of the fiber optic cable in kilometers"}}, "required": ["transmitter_power", "fiber_loss", "connector_loss", "receiver_sensitivity", "fiber_length"], "responses": {"link_budget": {"type": "float", "description": "The link budget in decibels (dB)"}}}
{"api_name": "getOpticalPower", "api_description": "Retrieve the optical power information", "field": "Electrical Engineering/Optical Communication", "parameters": {"fiber_type": {"type": "str", "description": "The type of fiber being used (e.g., single-mode, multi-mode)"}, "wavelength": {"type": "float", "description": "The wavelength of the transmitted light in nm"}}, "required": ["fiber_type", "wavelength"], "responses": {"optical_power": {"type": "float", "description": "The measured optical power in dBm"}}}
{"api_name": "calculateNoiseFigure", "api_description": "Calculate the noise figure", "field": "Electrical Engineering/RF and Microwave Engineering", "parameters": {"frequency": {"type": "float", "description": "The frequency at which the noise figure is desired (e.g., 1 GHz, 10 GHz)"}, "temperature": {"type": "float", "description": "The temperature in Kelvin (e.g., 300 K, 500 K)"}, "gain": {"type": "float", "description": "The gain of the system in dB (e.g., 20 dB, 30 dB)"}}, "required": ["frequency", "temperature"], "responses": {"noise_figure": {"type": "float", "description": "The calculated noise figure of the system"}}}
{"api_name": "calculateAntennaGain", "api_description": "Calculate the gain of an antenna based on its specifications", "field": "Electrical Engineering/RF and Microwave Engineering", "parameters": {"frequency": {"type": "float", "description": "The frequency of the RF signal in Hz"}, "aperture": {"type": "float", "description": "The aperture area of the antenna in square meters"}}, "required": ["frequency", "aperture"], "responses": {"gain": {"type": "float", "description": "The gain of the antenna in dBi"}}}
{"api_name": "setDeviceCommand", "api_description": "Send command to control an embedded device", "field": "Electrical Engineering/Embedded Systems", "parameters": {"device_id": {"type": "str", "description": "The ID of the embedded device"}, "device_type": {"type": "str", "description": "The type of the embedded device"}, "command": {"type": "str", "description": "The command to be sent to the device (e.g., ON, OFF)"}, "parameters": {"type": "str", "description": "Additional parameters for the command"}}, "required": ["device_id", "command"], "responses": {"success": {"type": "bool", "description": "Indicates whether the command was executed successfully"}}}
{"api_name": "toggleDeviceState", "api_description": "Toggle the state of a device in an embedded system", "field": "Electrical Engineering/Embedded Systems", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the device (e.g., D001, D002, D003)"}, "state": {"type": "bool", "description": "The desired state of the device (e.g., True, False)"}}, "required": ["device_id", "state"], "responses": {"success": {"type": "bool", "description": "Indicates if the device state was successfully toggled"}}}
{"api_name": "optimizeVLSICircuit", "api_description": "Optimize a VLSI circuit for performance or power consumption", "field": "Electrical Engineering/VLSI Design", "parameters": {"circuit_file": {"type": "str", "description": "The file containing the circuit description (e.g., circuit.txt)"}, "objective": {"type": "str", "description": "The optimization objective (e.g., performance, power)"}}, "required": ["circuit_file", "objective"], "responses": {"optimized_circuit": {"type": "str", "description": "The optimized circuit description file"}}}
{"api_name": "generateVLSICircuitLayout", "api_description": "Generate the layout of a VLSI circuit", "field": "Electrical Engineering/VLSI Design", "parameters": {"circuit_file": {"type": "str", "description": "The file containing the circuit description (e.g., circuit.txt)"}, "output_file": {"type": "str", "description": "The file to save the generated circuit layout (e.g., layout.txt)"}}, "required": ["circuit_file", "output_file"], "responses": {"layout_file": {"type": "str", "description": "The generated circuit layout file"}}}
{"api_name": "createCircuit", "api_description": "Create a new circuit design", "field": "Electrical Engineering/VLSI Design", "parameters": {"circuit_name": {"type": "str", "description": "The name of the circuit being designed"}, "num_inputs": {"type": "int", "description": "The number of input ports in the circuit"}, "num_outputs": {"type": "int", "description": "The number of output ports in the circuit"}, "technology": {"type": "str", "description": "The technology/process node used for designing the circuit (e.g., 7nm, 16nm, 28nm)"}}, "required": ["circuit_name", "num_inputs", "num_outputs"], "responses": {"success": {"type": "bool", "description": "Indicates whether the circuit creation was successful or not"}}}
{"api_name": "initializeDriveSystem", "api_description": "Initialize the electric drive system", "field": "Electrical Engineering/Electric Drives", "parameters": {"drive_system_id": {"type": "str", "description": "The unique identifier of the drive system (e.g., DS1, DS2, DS3)"}}, "required": ["drive_system_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the drive system was successfully initialized"}}}
{"api_name": "getHydroPower", "api_description": "Retrieve hydro power generation information", "field": "Electrical Engineering/Renewable Energy Systems", "parameters": {"location": {"type": "str", "description": "The location for which you want to get hydro power generation data (e.g., Beijing, London, New York)"}, "time_interval": {"type": "str", "description": "The time interval for retrieving hydro power generation (e.g., hourly, daily, monthly)"}}, "required": ["location"], "responses": {"power_generation": {"type": "float", "description": "The hydro power generation at the specified location"}, "unit": {"type": "str", "description": "The unit of power in which the hydro power generation is provided"}}}
{"api_name": "tripCircuitBreaker", "api_description": "Trigger the trip action of a circuit breaker", "field": "Electrical Engineering/Power System Protection", "parameters": {"breaker_id": {"type": "str", "description": "The identification number of the circuit breaker"}}, "required": ["breaker_id"], "responses": {"status": {"type": "str", "description": "The status of the circuit breaker after the trip action is triggered"}}}
{"api_name": "getStabilityIndex", "api_description": "Retrieve the stability index of the power system", "field": "Electrical Engineering/Power System Stability", "parameters": {"location": {"type": "str", "description": "The location of the power system (e.g., city, region)"}, "voltage_level": {"type": "str", "description": "The voltage level of the power system (e.g., high, medium, low)"}, "frequency": {"type": "float", "description": "The operating frequency of the power system in Hertz (e.g., 50, 60)"}}, "required": ["location", "voltage_level"], "responses": {"stability_index": {"type": "float", "description": "The stability index of the power system"}}}
{"api_name": "getPowerSystemStability", "api_description": "Retrieve power system stability information", "field": "Electrical Engineering/Power System Stability", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve power system stability information (e.g., city, country)"}, "time_range": {"type": "str", "description": "Specify a time range to retrieve power system stability information (e.g., last week, last month, last year)"}}, "required": ["location"], "responses": {"stability_index": {"type": "float", "description": "The stability index of the power system at the specified location"}, "status": {"type": "str", "description": "The status of the power system stability (e.g., stable, unstable, critical)"}}}
{"api_name": "getLoadSheddingStatus", "api_description": "Retrieve load shedding status", "field": "Electrical Engineering/Power System Stability", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve load shedding status (e.g., city, country)"}, "time_of_day": {"type": "str", "description": "Specify a time of day to retrieve load shedding status (e.g., morning, afternoon, evening)"}}, "required": ["location"], "responses": {"status": {"type": "str", "description": "The load shedding status at the specified location"}}}
{"api_name": "setPowerSystemControlMode", "api_description": "Set the control mode of the power system", "field": "Electrical Engineering/Power System Control and Operation", "parameters": {"system_id": {"type": "str", "description": "The unique identifier for the power system"}, "control_mode": {"type": "str", "description": "The desired control mode for the power system (e.g., automatic, manual)"}}, "required": ["system_id", "control_mode"], "responses": {"success": {"type": "bool", "description": "Indicates if the control mode was successfully set"}}}
{"api_name": "getPowerSystemLoad", "api_description": "Retrieve the current load of the power system", "field": "Electrical Engineering/Power System Control and Operation", "parameters": {"system_id": {"type": "str", "description": "The unique identifier for the power system"}, "unit": {"type": "str", "description": "The desired unit for the load (e.g., MW, MVA)"}}, "required": ["system_id"], "responses": {"load": {"type": "float", "description": "The current load of the power system"}, "unit": {"type": "str", "description": "The unit of load in which the load is provided"}}}
{"api_name": "setLoadshedding", "api_description": "Set loadshedding schedule for specified area", "field": "Electrical Engineering/Power System Control and Operation", "parameters": {"area": {"type": "str", "description": "The area for which you want to set loadshedding schedule (e.g., city, neighborhood)"}, "schedule": {"type": "str", "description": "The loadshedding schedule for the area (e.g., 2 hours on, 2 hours off)"}}, "required": ["area", "schedule"], "responses": {"success": {"type": "bool", "description": "Returns true if loadshedding schedule is successfully set"}}}
{"api_name": "setLoadForecast", "api_description": "Set load forecast for a specific area", "field": "Electrical Engineering/Power System Control and Operation", "parameters": {"area": {"type": "str", "description": "The area for which you want to set load forecast (e.g., city, region)"}, "forecast_value": {"type": "float", "description": "The forecasted load value for the area (in MW)"}}, "required": ["area", "forecast_value"], "responses": {"success": {"type": "bool", "description": "Returns true if load forecast is successfully set"}}}
{"api_name": "getWindTurbineOutput", "api_description": "Retrieve the power output of a wind turbine", "field": "Electrical Engineering/Renewable Power Conversion", "parameters": {"location": {"type": "str", "description": "The location where the wind turbine is installed (e.g., Houston, London, Beijing)"}, "turbine_type": {"type": "str", "description": "The type of wind turbine (e.g., horizontal-axis, vertical-axis)"}}, "required": ["location", "turbine_type"], "responses": {"power_output": {"type": "float", "description": "The power output of the specified wind turbine in kilowatts"}}}
{"api_name": "calculateFriisEquation", "api_description": "Calculate the received power at a given distance using Friis equation", "field": "Electrical Engineering/Antenna Design and Propagation", "parameters": {"transmit_power": {"type": "float", "description": "The power transmitted by the antenna in Watts"}, "transmit_gain": {"type": "float", "description": "The gain of the transmitting antenna"}, "receive_gain": {"type": "float", "description": "The gain of the receiving antenna"}, "frequency": {"type": "float", "description": "The frequency at which the transmission is happening in Hz"}, "distance": {"type": "float", "description": "The distance between the transmitting and receiving antennas in meters"}}, "required": ["transmit_power", "transmit_gain", "receive_gain", "frequency", "distance"], "responses": {"received_power": {"type": "float", "description": "The received power at the given distance in Watts"}}}
{"api_name": "calculateReflectionCoefficient", "api_description": "Calculate the reflection coefficient of a microwave signal", "field": "Electrical Engineering/Microwave Engineering", "parameters": {"transmitted_power": {"type": "float", "description": "The power of the transmitted microwave signal in dBm"}, "reflected_power": {"type": "float", "description": "The power of the reflected microwave signal in dBm"}}, "required": ["transmitted_power", "reflected_power"], "responses": {"reflection_coefficient": {"type": "float", "description": "The reflection coefficient of the microwave signal"}}}
{"api_name": "calculateJunctionVoltage", "api_description": "Calculate the voltage across a semiconductor junction", "field": "Electrical Engineering/Semiconductor Devices", "parameters": {"current": {"type": "float", "description": "The current flowing through the junction (e.g., 10 mA)"}, "temperature": {"type": "float", "description": "The temperature at which the junction is operating (e.g., 25 degrees Celsius)"}}, "required": ["current"], "responses": {"voltage": {"type": "float", "description": "The voltage across the semiconductor junction"}}}
{"api_name": "getWaferSize", "api_description": "Retrieve the size of a semiconductor wafer", "field": "Electrical Engineering/Semiconductor Fabrication", "parameters": {"wafer_type": {"type": "str", "description": "The type of wafer to retrieve the size for (e.g., 200mm, 300mm, 450mm)"}}, "required": ["wafer_type"], "responses": {"wafer_size": {"type": "str", "description": "The size of the specified wafer"}}}
{"api_name": "getWaferThickness", "api_description": "Retrieve the thickness of a semiconductor wafer", "field": "Electrical Engineering/Semiconductor Fabrication", "parameters": {"wafer_type": {"type": "str", "description": "The type of wafer to retrieve the thickness for (e.g., 200mm, 300mm, 450mm)"}}, "required": ["wafer_type"], "responses": {"wafer_thickness": {"type": "str", "description": "The thickness of the specified wafer"}}}
{"api_name": "getEtchRate", "api_description": "Retrieve the etch rate of a material in semiconductor fabrication", "field": "Electrical Engineering/Semiconductor Fabrication", "parameters": {"material": {"type": "str", "description": "The material to retrieve the etch rate for (e.g., silicon, silicon dioxide, photoresist)"}, "temperature": {"type": "int", "description": "The temperature at which the etch rate is measured (in degrees Celsius)"}}, "required": ["material"], "responses": {"etch_rate": {"type": "float", "description": "The etch rate of the specified material at the given temperature"}}}
{"api_name": "getProcessSteps", "api_description": "Retrieve the list of process steps involved in semiconductor fabrication", "field": "Electrical Engineering/Semiconductor Fabrication", "parameters": {}, "required": [], "responses": {"process_steps": {"type": "str", "description": "The list of process steps involved in semiconductor fabrication"}}}
{"api_name": "getMaskLayout", "api_description": "Retrieve the mask layout used for manufacturing a specific semiconductor component", "field": "Electrical Engineering/Semiconductor Fabrication", "parameters": {"component_name": {"type": "str", "description": "The name of the semiconductor component (e.g., transistor, diode, capacitor)"}, "technology_node": {"type": "str", "description": "The technology node for manufacturing (e.g., 7nm, 14nm, 28nm)"}, "process_variation": {"type": "str", "description": "Specify process variation for the mask layout (e.g., nominal, high-performance, low-power)"}}, "required": ["component_name", "technology_node"], "responses": {"mask_layout": {"type": "str", "description": "The mask layout used for manufacturing the specified semiconductor component"}}}
{"api_name": "generateSpeech", "api_description": "Convert written text into speech", "field": "Electrical Engineering/Speech Processing", "parameters": {"text": {"type": "str", "description": "The text to be synthesized into speech"}}, "required": ["text"], "responses": {"audio_file": {"type": "str", "description": "The path or URL to the generated speech audio file"}}}
{"api_name": "speakerIdentification", "api_description": "Identify the speaker from a given speech sample", "field": "Electrical Engineering/Speech Processing", "parameters": {"audio_file": {"type": "str", "description": "The path or URL to the speech audio file to be analyzed"}}, "required": ["audio_file"], "responses": {"speaker_id": {"type": "str", "description": "The identified speaker's unique identifier"}}}
{"api_name": "identifySpeechEmotion", "api_description": "Identify the emotion expressed in a speech", "field": "Electrical Engineering/Speech Processing", "parameters": {"audio_file": {"type": "str", "description": "The path to the audio file containing the speech"}}, "required": ["audio_file"], "responses": {"emotion": {"type": "str", "description": "The identified emotion from the speech"}}}
{"api_name": "removeBackgroundNoise", "api_description": "Remove background noise from a speech recording", "field": "Electrical Engineering/Speech Processing", "parameters": {"audio_file": {"type": "str", "description": "The path to the audio file containing the speech"}}, "required": ["audio_file"], "responses": {"cleaned_audio": {"type": "str", "description": "URL or path to the audio file with background noise removed"}}}
{"api_name": "stimulateNeuron", "api_description": "Apply electrical stimulation to a neuron", "field": "Electrical Engineering/Neural Engineering", "parameters": {"neuron_id": {"type": "int", "description": "The unique identifier of the neuron"}, "stimulus_amplitude": {"type": "float", "description": "The strength of the electrical stimulus (in milliamps)"}, "stimulus_duration": {"type": "float", "description": "The duration of the electrical stimulus (in milliseconds)"}}, "required": ["neuron_id", "stimulus_amplitude", "stimulus_duration"], "responses": {"stimulation_success": {"type": "bool", "description": "Indicates whether the stimulation was successfully applied to the neuron"}}}
{"api_name": "getControlSignal", "api_description": "Retrieve the current control signal of a control system", "field": "Electrical Engineering/Control Engineering", "parameters": {"system_id": {"type": "int", "description": "The ID of the control system"}, "time_range": {"type": "str", "description": "The time range for which the control signal needs to be obtained (e.g., last hour, last day)"}}, "required": ["system_id"], "responses": {"control_signal": {"type": "float", "description": "The current control signal of the control system"}, "time_stamp": {"type": "str", "description": "The timestamp at which the control signal was retrieved"}}}
{"api_name": "getControllerOutput", "api_description": "Retrieve the output of the controller", "field": "Electrical Engineering/Control Engineering", "parameters": {}, "required": [], "responses": {"output": {"type": "float", "description": "The output value of the controller"}}}
{"api_name": "calculateInverterPower", "api_description": "Calculate the average power output of a solar inverter", "field": "Electrical Engineering/Power Electronics for Renewable Energy Systems", "parameters": {"solar_power": {"type": "float", "description": "The solar power generated by the PV panels in watts"}}, "required": ["solar_power"], "responses": {"inverter_power": {"type": "float", "description": "The average power output of the solar inverter in watts"}}}
{"api_name": "resetFPGA", "api_description": "Reset the FPGA to its initial state", "field": "Electrical Engineering/FPGA Design", "parameters": {}, "required": [], "responses": {"success": {"type": "bool", "description": "Indicates whether the reset operation was successful"}}}
{"api_name": "programFPGAMemory", "api_description": "Program the memory of the FPGA with the specified data", "field": "Electrical Engineering/FPGA Design", "parameters": {"data": {"type": "str", "description": "The data to be programmed into the FPGA memory"}}, "required": ["data"], "responses": {"success": {"type": "bool", "description": "Indicates whether the programming was successful"}}}
{"api_name": "programFPGA", "api_description": "Program the FPGA with the compiled design", "field": "Electrical Engineering/FPGA Design", "parameters": {"bitstream_file": {"type": "str", "description": "The file path of the FPGA bitstream to be programmed"}}, "required": ["bitstream_file"], "responses": {"status": {"type": "str", "description": "The status of the programming process (e.g., success, failure)"}}}
{"api_name": "pingDevice", "api_description": "Ping a device in a computer network", "field": "Electrical Engineering/Computer Networks", "parameters": {"network_name": {"type": "str", "description": "The name of the computer network"}, "device_ip": {"type": "str", "description": "The IP address of the device to be pinged"}, "count": {"type": "int", "description": "The number of ping requests to send (e.g., 5, 10, 20)"}}, "required": ["network_name", "device_ip"], "responses": {"ping_results": {"type": "str", "description": "The results of the ping request"}}}
{"api_name": "deployCloudService", "api_description": "Deploy a cloud computing service", "field": "Electrical Engineering/Cloud Computing", "parameters": {"service_name": {"type": "str", "description": "The name of the cloud service you want to deploy"}, "service_type": {"type": "str", "description": "The type of cloud service (e.g., Infrastructure as a Service, Platform as a Service, Software as a Service)"}, "region": {"type": "str", "description": "The region where the cloud service will be deployed (e.g., US-East, Europe-West)"}, "instance_type": {"type": "str", "description": "The instance type for the cloud service (e.g., small, medium, large)"}, "security_group": {"type": "str", "description": "The security group to assign to the cloud service"}}, "required": ["service_name", "service_type", "region"], "responses": {"status": {"type": "str", "description": "The status of the deployment (e.g., success, failed)"}, "service_id": {"type": "str", "description": "The ID of the deployed cloud service"}, "public_ip": {"type": "str", "description": "The public IP address of the deployed cloud service"}}}
{"api_name": "analyzeWindEnergy", "api_description": "Analyze the wind energy potential", "field": "Electrical Engineering/Renewable Energy Integration", "parameters": {"location": {"type": "str", "description": "The location where wind energy potential is being analyzed (e.g., New York, London, Melbourne)"}, "height": {"type": "float", "description": "The height at which wind speed is measured in meters"}}, "required": ["location", "height"], "responses": {"potential": {"type": "float", "description": "The wind energy potential in kilowatts"}}}
{"api_name": "calculateRenewableEnergyCapacity", "api_description": "Calculate the optimal capacity of renewable energy sources for integration into the electrical grid", "field": "Electrical Engineering/Renewable Energy Integration", "parameters": {"demand": {"type": "float", "description": "The current electricity demand in megawatts (MW)"}, "renewable_percentage": {"type": "float", "description": "The desired percentage of renewable energy in the electricity mix (e.g., 20, 50, 100)"}}, "required": ["demand", "renewable_percentage"], "responses": {"renewable_capacity": {"type": "float", "description": "The recommended capacity of renewable energy sources to meet the desired percentage of renewable energy"}, "conventional_capacity": {"type": "float", "description": "The recommended capacity of conventional energy sources to meet the remaining electricity demand"}}}
{"api_name": "startCharging", "api_description": "Initiate the charging process for an electric vehicle", "field": "Electrical Engineering/Electric Vehicle Technologies", "parameters": {"vehicle_id": {"type": "str", "description": "The unique identifier for the electric vehicle"}, "charging_station_id": {"type": "str", "description": "The unique identifier for the charging station where the vehicle will be charged"}}, "required": ["vehicle_id", "charging_station_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the charging process was successfully initiated"}}}
{"api_name": "checkElectricalSafety", "api_description": "Check the electrical safety of a device or installation", "field": "Electrical Engineering/Electrical Safety", "parameters": {"device_name": {"type": "str", "description": "The name or identifier of the device to be checked"}, "voltage_rating": {"type": "int", "description": "The maximum voltage rating of the device in volts"}, "frequency": {"type": "float", "description": "The frequency of electrical supply in Hertz"}, "current_rating": {"type": "float", "description": "The maximum current rating of the device in Amperes"}}, "required": ["device_name", "voltage_rating", "current_rating"], "responses": {"safety_status": {"type": "bool", "description": "The safety status of the device; True indicates that the device is electrically safe, False indicates potential safety issues"}}}
{"api_name": "measureCurrent", "api_description": "Measure the current flowing through a circuit", "field": "Electrical Engineering/Electrical Measurements and Instrumentation", "parameters": {"circuit_name": {"type": "str", "description": "The name of the circuit to measure current"}, "current_range": {"type": "str", "description": "The range of current to be measured (e.g., 0-1A, 0-10mA)"}}, "required": ["circuit_name"], "responses": {"current": {"type": "float", "description": "The current measured in the specified circuit"}}}
{"api_name": "checkEMCRisk", "api_description": "Check electromagnetic compatibility (EMC) risk of a device", "field": "Electrical Engineering/Electromagnetic Compatibility", "parameters": {"device_id": {"type": "str", "description": "The unique identifier of the device"}, "frequency": {"type": "float", "description": "The operating frequency of the device (e.g., 2.4 GHz, 5.8 GHz)"}, "power_level": {"type": "float", "description": "The power level of the device in dBm (e.g., -30 dBm, 20 dBm)"}, "distance": {"type": "float", "description": "The distance between the device and other devices or equipment in meters"}}, "required": ["device_id", "frequency", "power_level"], "responses": {"emc_risk_level": {"type": "str", "description": "The level of electromagnetic compatibility (EMC) risk for the device (e.g., low, medium, high)"}}}
{"api_name": "calculateEMCInterference", "api_description": "Calculate electromagnetic compatibility (EMC) interference between devices", "field": "Electrical Engineering/Electromagnetic Compatibility", "parameters": {"device_id_1": {"type": "str", "description": "The unique identifier of the first device"}, "device_id_2": {"type": "str", "description": "The unique identifier of the second device"}, "frequency": {"type": "float", "description": "The operating frequency of the devices in GHz (e.g., 2.4 GHz, 5.8 GHz)"}, "power_level_1": {"type": "float", "description": "The power level of the first device in dBm (e.g., -30 dBm, 20 dBm)"}, "power_level_2": {"type": "float", "description": "The power level of the second device in dBm (e.g., -30 dBm, 20 dBm)"}, "distance": {"type": "float", "description": "The distance between the devices in meters"}}, "required": ["device_id_1", "device_id_2", "frequency", "power_level_1", "power_level_2"], "responses": {"interference_level": {"type": "str", "description": "The level of electromagnetic compatibility (EMC) interference between the devices (e.g., low, medium, high)"}}}
{"api_name": "measureEMCImpedance", "api_description": "Measure electromagnetic compatibility (EMC) impedance of a circuit", "field": "Electrical Engineering/Electromagnetic Compatibility", "parameters": {"circuit_id": {"type": "str", "description": "The unique identifier of the circuit"}, "frequency": {"type": "float", "description": "The frequency at which the impedance is measured in GHz (e.g., 1 GHz, 10 GHz)"}}, "required": ["circuit_id", "frequency"], "responses": {"impedance_value": {"type": "float", "description": "The impedance value of the circuit at the specified frequency"}}}
{"api_name": "calculateRadiatedEmissions", "api_description": "Calculate the radiated emissions of an electrical device", "field": "Electrical Engineering/Electromagnetic Compatibility", "parameters": {"frequency": {"type": "float", "description": "The frequency at which the device emits electromagnetic waves (e.g., 100 MHz, 1 GHz, 2.4 GHz)"}, "power_level": {"type": "float", "description": "The power level at which the device operates (e.g., 5 dBm, 10 dBm, 20 dBm)"}, "distance": {"type": "float", "description": "The distance between the device and the measuring point (e.g., 1 meter, 3 meters, 5 meters)"}}, "required": ["frequency", "power_level", "distance"], "responses": {"emissions_level": {"type": "str", "description": "The level of radiated emissions of the device at the specified frequency, power level, and distance"}}}
{"api_name": "checkEMCRadiation", "api_description": "Check the level of electromagnetic radiation", "field": "Electrical Engineering/Electromagnetic Compatibility", "parameters": {"device": {"type": "str", "description": "The device or equipment to be checked for electromagnetic radiation"}, "frequency": {"type": "float", "description": "The frequency of the electromagnetic radiation in Hz"}, "distance": {"type": "float", "description": "The distance from the device to the measurement point in meters"}}, "required": ["device"], "responses": {"radiation_level": {"type": "str", "description": "The level of electromagnetic radiation emitted by the device"}, "safety_limit": {"type": "str", "description": "The safety limit for electromagnetic radiation in this frequency range"}}}
{"api_name": "calculateSettlement", "api_description": "Calculate the settlement of a geotechnical structure", "field": "Civil Engineering/Geotechnical Engineering", "parameters": {"soil_type": {"type": "str", "description": "The type of soil at the site where the geotechnical structure is located (e.g., clay, sand, silt)"}, "structure_type": {"type": "str", "description": "The type of geotechnical structure (e.g., shallow foundation, pile, retaining wall)"}, "load": {"type": "float", "description": "The applied load on the geotechnical structure in kN"}}, "required": ["soil_type", "structure_type", "load"], "responses": {"settlement": {"type": "float", "description": "The calculated settlement of the geotechnical structure in meters"}}}
{"api_name": "designRetainingWall", "api_description": "Design a retaining wall for a geotechnical structure", "field": "Civil Engineering/Geotechnical Engineering", "parameters": {"soil_properties": {"type": "str", "description": "The properties of the soil (e.g., cohesion, friction angle)"}, "wall_height": {"type": "float", "description": "The desired height of the retaining wall in meters"}, "backfill_type": {"type": "str", "description": "The type of backfill material (e.g., clay, sand)"}, "load": {"type": "float", "description": "The applied load on the retaining wall in kN/m²"}}, "required": ["soil_properties", "wall_height", "backfill_type"], "responses": {"design_plan": {"type": "str", "description": "The design plan for the retaining wall"}}}
{"api_name": "calculateHydraulicGradient", "api_description": "Calculate the hydraulic gradient of a flow in a channel", "field": "Civil Engineering/Water Resources Engineering", "parameters": {"elevation_difference": {"type": "float", "description": "The difference in elevation between two points along the flow in meters"}, "flow_length": {"type": "float", "description": "The length of the flow path in meters"}}, "required": ["elevation_difference", "flow_length"], "responses": {"hydraulic_gradient": {"type": "float", "description": "The hydraulic gradient of the flow"}}}
{"api_name": "calculateStructuralLoad", "api_description": "Calculate the maximum load a structure can bear", "field": "Civil Engineering/Construction Engineering", "parameters": {"material": {"type": "str", "description": "The construction material used in the structure (e.g., concrete, steel, wood)"}, "dimensions": {"type": "str", "description": "The dimensions of the structure (e.g., length, width, height)"}, "load_type": {"type": "str", "description": "The type of load to consider (e.g., dead load, live load, wind load)"}, "safety_factor": {"type": "float", "description": "The safety factor for the structure's design"}}, "required": ["material", "dimensions", "load_type"], "responses": {"maximum_load": {"type": "float", "description": "The maximum load the structure can bear without failure"}}}
{"api_name": "calculatePumpHead", "api_description": "Calculate the total head required by a pump in a hydraulic system", "field": "Civil Engineering/Hydraulic Engineering", "parameters": {"flow_rate": {"type": "float", "description": "The flow rate of the fluid in cubic meters per second (e.g., 0.5, 1.0, 1.5)"}, "pipe_length": {"type": "float", "description": "The length of the pipe in meters (e.g., 10.0, 20.0, 30.0)"}, "pipe_friction_factor": {"type": "float", "description": "The friction factor of the pipe (e.g., 0.01, 0.05, 0.1)"}, "fluid_density": {"type": "float", "description": "The density of the fluid in kilograms per cubic meter (e.g., 1000.0, 1100.0, 1200.0)"}}, "required": ["flow_rate", "pipe_length"], "responses": {"pump_head": {"type": "float", "description": "The total head required by the pump in meters"}}}
{"api_name": "getWasteManagementSystem", "api_description": "Retrieve waste management system information of a specific location", "field": "Civil Engineering/Urban Engineering", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the waste management system information (e.g., Singapore, San Francisco)"}, "type": {"type": "str", "description": "Specify the type of waste management system (e.g., recycling program, landfill management, waste-to-energy facilities)"}}, "required": ["location"], "responses": {"system_info": {"type": "str", "description": "Information about the waste management system at the specified location"}}}
{"api_name": "getSurveyData", "api_description": "Retrieve survey data for a given location", "field": "Civil Engineering/Surveying and Geomatics", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve survey data (e.g., city, coordinates)"}}, "required": ["location"], "responses": {"data": {"type": "str", "description": "Survey data for the specified location"}}}
{"api_name": "estimateElevation", "api_description": "Estimate the elevation at a given location", "field": "Civil Engineering/Surveying and Geomatics", "parameters": {"location": {"type": "str", "description": "The location for which you want to estimate the elevation (e.g., city, coordinates)"}}, "required": ["location"], "responses": {"elevation": {"type": "float", "description": "The estimated elevation at the specified location"}}}
{"api_name": "getBridgeLength", "api_description": "Retrieve the length of a bridge", "field": "Civil Engineering/Bridge Engineering", "parameters": {"bridge_id": {"type": "str", "description": "The unique identifier of the bridge"}}, "required": ["bridge_id"], "responses": {"length": {"type": "float", "description": "The length of the specified bridge"}}}
{"api_name": "getBridgeLoadCapacity", "api_description": "Retrieve the load capacity of a bridge", "field": "Civil Engineering/Bridge Engineering", "parameters": {"bridge_id": {"type": "str", "description": "The unique identifier of the bridge"}}, "required": ["bridge_id"], "responses": {"load_capacity": {"type": "float", "description": "The load capacity of the specified bridge"}}}
{"api_name": "getBridgeMaintenanceSchedule", "api_description": "Retrieve the maintenance schedule for a bridge", "field": "Civil Engineering/Bridge Engineering", "parameters": {"bridge_id": {"type": "str", "description": "The unique identifier of the bridge"}}, "required": ["bridge_id"], "responses": {"maintenance_schedule": {"type": "str", "description": "The maintenance schedule for the specified bridge"}}}
{"api_name": "calculatePavementLife", "api_description": "Calculate the remaining life of a pavement based on certain inputs", "field": "Civil Engineering/Pavement Engineering", "parameters": {"current_age": {"type": "int", "description": "The current age of the pavement (in years)"}, "design_life": {"type": "int", "description": "The design life of the pavement (in years)"}, "traffic_volume": {"type": "int", "description": "The average daily traffic volume on the pavement"}, "climate_conditions": {"type": "str", "description": "The climate conditions of the area where the pavement is located (e.g., cold, hot, moderate)"}}, "required": ["current_age", "design_life", "traffic_volume"], "responses": {"remaining_life": {"type": "int", "description": "The remaining life of the pavement (in years)"}}}
{"api_name": "getRailwaySpeedLimit", "api_description": "Retrieve the speed limit of a railway track", "field": "Civil Engineering/Railway Engineering", "parameters": {"track_id": {"type": "int", "description": "The unique identifier of the railway track"}}, "required": ["track_id"], "responses": {"speed_limit": {"type": "int", "description": "The speed limit of the railway track in kilometers per hour"}}}
{"api_name": "getRailwaySlope", "api_description": "Retrieve the slope of a railway track", "field": "Civil Engineering/Railway Engineering", "parameters": {"track_id": {"type": "int", "description": "The unique identifier of the railway track"}}, "required": ["track_id"], "responses": {"slope": {"type": "float", "description": "The slope of the railway track in percent"}}}
{"api_name": "calculateRailwayTrackCapacity", "api_description": "Calculate the maximum capacity of a railway track", "field": "Civil Engineering/Railway Engineering", "parameters": {"track_length": {"type": "float", "description": "The length of the railway track in kilometers"}, "train_length": {"type": "float", "description": "The length of a train in meters"}, "headway_time": {"type": "float", "description": "The time interval between successive trains in minutes"}}, "required": ["track_length", "train_length", "headway_time"], "responses": {"capacity": {"type": "int", "description": "The maximum capacity of the railway track in terms of number of trains"}}}
{"api_name": "getTrainSpeedLimit", "api_description": "Retrieve the maximum speed limit for trains on a railway track", "field": "Civil Engineering/Railway Engineering", "parameters": {"track_id": {"type": "int", "description": "The unique identifier of the railway track"}}, "required": ["track_id"], "responses": {"speed_limit": {"type": "int", "description": "The maximum speed limit for trains on the specified railway track"}}}
{"api_name": "getPlatformCapacity", "api_description": "Retrieve the capacity of a railway platform", "field": "Civil Engineering/Railway Engineering", "parameters": {"platform_id": {"type": "int", "description": "The unique identifier of the railway platform"}}, "required": ["platform_id"], "responses": {"capacity": {"type": "int", "description": "The capacity of the specified railway platform"}}}
{"api_name": "getWasteAmount", "api_description": "Retrieve the amount of waste generated in a specific location", "field": "Civil Engineering/Waste Management", "parameters": {"location": {"type": "str", "description": "The location for which you want to get the waste amount (e.g., city, neighborhood)"}, "time_period": {"type": "str", "description": "Specify a time period for waste generation (e.g., daily, weekly, monthly)"}}, "required": ["location"], "responses": {"waste_amount": {"type": "float", "description": "The amount of waste generated in the specified location"}}}
{"api_name": "getDamSafetyLevel", "api_description": "Retrieve the safety level of a dam", "field": "Civil Engineering/Dam Engineering", "parameters": {"dam_name": {"type": "str", "description": "The name of the dam"}}, "required": ["dam_name"], "responses": {"safety_level": {"type": "str", "description": "The safety level of the dam (e.g., Low, Medium, High)"}}}
{"api_name": "getDamHeight", "api_description": "Retrieve the height information of a dam", "field": "Civil Engineering/Dam Engineering", "parameters": {"dam_name": {"type": "str", "description": "The name of the dam for which you want to get the height"}, "unit": {"type": "str", "description": "The desired unit for height (e.g., meters, feet)"}}, "required": ["dam_name"], "responses": {"height": {"type": "float", "description": "The height of the specified dam"}, "unit": {"type": "str", "description": "The unit of height in which the height is provided"}}}
{"api_name": "getDamCapacity", "api_description": "Retrieve the capacity information of a dam", "field": "Civil Engineering/Dam Engineering", "parameters": {"dam_name": {"type": "str", "description": "The name of the dam for which you want to get the capacity"}, "unit": {"type": "str", "description": "The desired unit for capacity (e.g., cubic meters, acre-feet)"}}, "required": ["dam_name"], "responses": {"capacity": {"type": "float", "description": "The capacity of water that can be stored in the specified dam"}, "unit": {"type": "str", "description": "The unit of capacity in which the capacity is provided"}}}
{"api_name": "getCurrentFlow", "api_description": "Retrieve the current flow rate at a specific location", "field": "Civil Engineering/Marine Engineering", "parameters": {"location": {"type": "str", "description": "The location for which you want to retrieve the current flow rate (e.g., river name, channel name)"}, "time": {"type": "str", "description": "The specific time for which you want to retrieve the current flow rate (e.g., specific date and time)"}}, "required": ["location"], "responses": {"current_flow": {"type": "float", "description": "The current flow rate at the specified location"}}}
{"api_name": "calculateGeotextileThickness", "api_description": "Calculate the required thickness of geotextile for a civil engineering project", "field": "Civil Engineering/Geosynthetics in Civil Engineering", "parameters": {"load": {"type": "float", "description": "The load exerted on the geotextile (e.g., 1000 N/m2)"}, "soil_cohesion": {"type": "float", "description": "The cohesion of the soil (e.g., 200 kPa)"}, "friction_angle": {"type": "float", "description": "The friction angle of the soil (e.g., 30 degrees)"}, "permeability": {"type": "float", "description": "The permeability of the soil (e.g., 1x10^-5 m/s)"}, "service_life": {"type": "int", "description": "The desired service life of the geotextile in years (e.g., 20 years)"}}, "required": ["load", "soil_cohesion", "friction_angle", "permeability"], "responses": {"geotextile_thickness": {"type": "float", "description": "The required thickness of geotextile in meters"}}}
{"api_name": "getTunnelLength", "api_description": "Retrieve the length of a tunnel", "field": "Civil Engineering/Tunnel Engineering", "parameters": {"tunnel_name": {"type": "str", "description": "The name or id of the tunnel"}}, "required": ["tunnel_name"], "responses": {"length": {"type": "float", "description": "The length of the tunnel in meters"}}}
{"api_name": "getTunnelGradient", "api_description": "Retrieve the gradient of a tunnel", "field": "Civil Engineering/Tunnel Engineering", "parameters": {"tunnel_name": {"type": "str", "description": "The name or id of the tunnel"}}, "required": ["tunnel_name"], "responses": {"gradient": {"type": "float", "description": "The gradient of the tunnel in percentage"}}}
{"api_name": "calculateTunnelVolume", "api_description": "Calculate the volume of a tunnel", "field": "Civil Engineering/Tunnel Engineering", "parameters": {"tunnel_length": {"type": "float", "description": "The length of the tunnel in meters"}, "tunnel_width": {"type": "float", "description": "The width of the tunnel in meters"}, "tunnel_height": {"type": "float", "description": "The height of the tunnel in meters"}}, "required": ["tunnel_length", "tunnel_width", "tunnel_height"], "responses": {"volume": {"type": "float", "description": "The volume of the tunnel in cubic meters"}}}
{"api_name": "calculateTunnelReinforcement", "api_description": "Calculate the required reinforcement for a tunnel", "field": "Civil Engineering/Tunnel Engineering", "parameters": {"tunnel_length": {"type": "float", "description": "The length of the tunnel in meters"}, "tunnel_width": {"type": "float", "description": "The width of the tunnel in meters"}, "tunnel_height": {"type": "float", "description": "The height of the tunnel in meters"}, "tunnel_material": {"type": "str", "description": "The material used for the tunnel (e.g., concrete, steel)"}}, "required": ["tunnel_length", "tunnel_width", "tunnel_height", "tunnel_material"], "responses": {"reinforcement": {"type": "str", "description": "The required reinforcement for the tunnel"}}}
{"api_name": "estimateProjectCost", "api_description": "Estimate the cost of a land development project", "field": "Civil Engineering/Land Development", "parameters": {"area": {"type": "float", "description": "The land area of the project in square meters"}, "earthwork_volume": {"type": "float", "description": "The earthwork volume required in cubic meters"}, "construction_material": {"type": "str", "description": "The type of construction material to be used (e.g., concrete, asphalt)"}, "labor_cost": {"type": "float", "description": "The cost of labor per unit"}, "material_cost": {"type": "float", "description": "The cost of construction material per unit"}}, "required": ["area", "earthwork_volume", "construction_material", "labor_cost", "material_cost"], "responses": {"estimated_cost": {"type": "float", "description": "The estimated cost of the land development project"}}}
{"api_name": "determineCoordinates", "api_description": "Determine the coordinates of a specific location", "field": "Civil Engineering/Geomatics Engineering", "parameters": {"address": {"type": "str", "description": "The address of the location (e.g., 123 Main Street, London, UK)"}}, "required": ["address"], "responses": {"latitude": {"type": "float", "description": "The latitude coordinate of the specified location"}, "longitude": {"type": "float", "description": "The longitude coordinate of the specified location"}}}
{"api_name": "getDynamicResponse", "api_description": "Calculate the dynamic response of a structure to an external force", "field": "Civil Engineering/Structural Dynamics", "parameters": {"mass": {"type": "float", "description": "The mass of the structure (in kg)"}, "stiffness": {"type": "float", "description": "The stiffness of the structure (in N/m)"}, "damping_ratio": {"type": "float", "description": "The damping ratio of the structure"}, "excitation_force": {"type": "float", "description": "The magnitude of the external force (in N)"}, "excitation_frequency": {"type": "float", "description": "The frequency of the external force (in Hz)"}}, "required": ["mass", "stiffness", "damping_ratio", "excitation_force", "excitation_frequency"], "responses": {"displacement": {"type": "float", "description": "The displacement of the structure (in m)"}, "velocity": {"type": "float", "description": "The velocity of the structure (in m/s)"}, "acceleration": {"type": "float", "description": "The acceleration of the structure (in m/s²)"}}}
{"api_name": "calculateCutFillBalance", "api_description": "Calculate the balance between cut and fill volumes for earthworks", "field": "Civil Engineering/Earthworks Engineering", "parameters": {"cut_volume": {"type": "float", "description": "The volume of soil to be cut (excavated) in cubic meters"}, "fill_volume": {"type": "float", "description": "The volume of soil to be filled in cubic meters"}}, "required": ["cut_volume", "fill_volume"], "responses": {"cut_fill_balance": {"type": "float", "description": "The balance between cut and fill volumes in cubic meters"}}}
{"api_name": "calculateTrenchExcavation", "api_description": "Calculate the volume of soil to be excavated for a trench", "field": "Civil Engineering/Earthworks Engineering", "parameters": {"width": {"type": "float", "description": "The width of the trench in meters"}, "depth": {"type": "float", "description": "The depth of the trench in meters"}, "length": {"type": "float", "description": "The length of the trench in meters"}}, "required": ["width", "depth", "length"], "responses": {"excavation_volume": {"type": "float", "description": "The volume of soil to be excavated for the trench in cubic meters"}}}
{"api_name": "calculateFoundationLoad", "api_description": "Calculate the load on a foundation", "field": "Civil Engineering/Foundation Design", "parameters": {"structure_type": {"type": "str", "description": "Type of structure (e.g., residential building, commercial building, bridge)"}, "building_area": {"type": "float", "description": "Total area of the building in square feet"}, "soil_type": {"type": "str", "description": "Type of soil (e.g., clay, sand, gravel)"}, "number_of_floors": {"type": "int", "description": "Total number of floors in the building"}}, "required": ["structure_type", "building_area", "soil_type"], "responses": {"foundation_load": {"type": "float", "description": "The calculated load on the foundation in pounds"}}}
{"api_name": "calculateWastewaterFlowRate", "api_description": "Calculate the flow rate of wastewater", "field": "Civil Engineering/Wastewater Engineering", "parameters": {"pipe_diameter": {"type": "float", "description": "The diameter of the pipe used to carry wastewater (in inches)"}, "pipe_length": {"type": "float", "description": "The length of the pipe used to carry wastewater (in feet)"}, "pipe_slope": {"type": "float", "description": "The slope of the pipe used to carry wastewater (in inches per foot)"}, "design_factor": {"type": "float", "description": "The design factor for the pipe used to carry wastewater"}}, "required": ["pipe_diameter", "pipe_length"], "responses": {"flow_rate": {"type": "float", "description": "The calculated flow rate of wastewater (in gallons per minute)"}}}
{"api_name": "getWastewaterTreatmentCapacity", "api_description": "Retrieve the wastewater treatment capacity of a facility", "field": "Civil Engineering/Wastewater Engineering", "parameters": {"facility_name": {"type": "str", "description": "The name of the facility for which you want to get the wastewater treatment capacity"}}, "required": ["facility_name"], "responses": {"capacity": {"type": "float", "description": "The wastewater treatment capacity of the specified facility"}}}
{"api_name": "getWastewaterTreatmentProcess", "api_description": "Retrieve the treatment process used for wastewater treatment", "field": "Civil Engineering/Wastewater Engineering", "parameters": {"facility_name": {"type": "str", "description": "The name of the facility for which you want to retrieve the wastewater treatment process"}}, "required": ["facility_name"], "responses": {"process": {"type": "str", "description": "The treatment process used for wastewater treatment"}}}
{"api_name": "estimateWastewaterFlow", "api_description": "Estimate the flow rate of wastewater for a specific location", "field": "Civil Engineering/Wastewater Engineering", "parameters": {"location": {"type": "str", "description": "The location for which you want to estimate the wastewater flow rate"}}, "required": ["location"], "responses": {"flow_rate": {"type": "float", "description": "The estimated flow rate of wastewater at the specified location"}}}
{"api_name": "determineBODRemovalEfficiency", "api_description": "Determine the Biological Oxygen Demand (BOD) removal efficiency of a wastewater treatment plant", "field": "Civil Engineering/Wastewater Engineering", "parameters": {"influent_bod": {"type": "float", "description": "The influent BOD concentration in milligrams per liter"}, "effluent_bod": {"type": "float", "description": "The effluent BOD concentration in milligrams per liter"}}, "required": ["influent_bod", "effluent_bod"], "responses": {"removal_efficiency": {"type": "float", "description": "The BOD removal efficiency as a percentage"}}}
{"api_name": "calculateSludgeProduction", "api_description": "Calculate the sludge production rate in a wastewater treatment plant", "field": "Civil Engineering/Wastewater Engineering", "parameters": {"flow_rate": {"type": "float", "description": "The flow rate of wastewater in cubic meters per day"}, "influent_suspended_solids": {"type": "float", "description": "The influent suspended solids concentration in milligrams per liter"}}, "required": ["flow_rate", "influent_suspended_solids"], "responses": {"sludge_production_rate": {"type": "float", "description": "The sludge production rate in kilograms per day"}}}
{"api_name": "estimateCODRemoval", "api_description": "Estimate the Chemical Oxygen Demand (COD) removal efficiency of a wastewater treatment plant", "field": "Civil Engineering/Wastewater Engineering", "parameters": {"influent_cod": {"type": "float", "description": "The influent COD concentration in milligrams per liter"}, "effluent_cod": {"type": "float", "description": "The effluent COD concentration in milligrams per liter"}}, "required": ["influent_cod", "effluent_cod"], "responses": {"removal_efficiency": {"type": "float", "description": "The COD removal efficiency as a percentage"}}}
{"api_name": "getSlopeStability", "api_description": "Retrieve slope stability analysis results", "field": "Civil Engineering/Slope Stability Analysis", "parameters": {"location": {"type": "str", "description": "The location of the slope (e.g., mountainous region, construction site)"}, "slope_angle": {"type": "float", "description": "The angle of the slope in degrees (e.g., 30, 40, 50)"}, "slope_height": {"type": "float", "description": "The height of the slope in meters (e.g., 10, 20, 30)"}, "slope_material": {"type": "str", "description": "The material of the slope (e.g., soil, rock)"}, "water_content": {"type": "float", "description": "The water content of the slope material in percentage (e.g., 5, 10, 15)"}, "slope_geometry": {"type": "str", "description": "The geometry of the slope (e.g., simple slope, compound slope, concave slope)"}, "slope_conditions": {"type": "str", "description": "The conditions of the slope (e.g., dry, saturated, partially saturated)"}, "depth_of_failure": {"type": "float", "description": "The depth of failure of the slope in meters (e.g., 5, 10, 15)"}}, "required": ["location", "slope_angle", "slope_height", "slope_material"], "responses": {"factor_of_safety": {"type": "float", "description": "The factor of safety of the slope"}, "mode_of_failure": {"type": "str", "description": "The mode of failure of the slope (e.g., rotational, translational)"}, "critical_slope_angle": {"type": "float", "description": "The critical slope angle for stability"}, "required_reinforcement": {"type": "str", "description": "The type and amount of reinforcement required for slope stability"}}}
{"api_name": "calculateFactorOfSafety", "api_description": "Calculate the factor of safety for slope stability analysis", "field": "Civil Engineering/Slope Stability Analysis", "parameters": {"safety_factor": {"type": "float", "description": "The minimum acceptable factor of safety for stability", "example": "1.5"}, "slope_height": {"type": "float", "description": "The height of the slope in meters", "example": "20.5"}, "slope_angle": {"type": "float", "description": "The angle of the slope in degrees", "example": "30"}, "cohesion": {"type": "float", "description": "The cohesion of the soil in kPa", "example": "50"}, "friction_angle": {"type": "float", "description": "The friction angle of the soil in degrees", "example": "20"}, "unit_weight": {"type": "float", "description": "The unit weight of the soil in kN/m^3", "example": "18"}}, "required": ["safety_factor", "slope_height", "slope_angle", "cohesion", "friction_angle", "unit_weight"], "responses": {"factor_of_safety": {"type": "float", "description": "The calculated factor of safety for slope stability", "example": "1.7"}}}
{"api_name": "analyzeSlopeStability", "api_description": "Perform slope stability analysis for a given slope", "field": "Civil Engineering/Slope Stability Analysis", "parameters": {"slope_geometry": {"type": "str", "description": "The geometry of the slope (e.g., cross-sectional dimensions, angle)", "example": "trapezoidal shape, 30 degrees"}, "soil_properties": {"type": "str", "description": "The properties of the soil (e.g., cohesion, friction angle)", "example": "cohesion = 50 kPa, friction angle = 30 degrees"}, "water_conditions": {"type": "str", "description": "The water conditions at the site of the slope (e.g., pore water pressure)", "example": "pore water pressure = 5 kPa"}}, "required": ["slope_geometry", "soil_properties"], "responses": {"factor_of_safety": {"type": "float", "description": "The factor of safety calculated for the slope", "example": "1.5"}, "failure_mode": {"type": "str", "description": "The predicted failure mode of the slope (e.g., sliding, overturning)", "example": "sliding"}, "safety_recommendations": {"type": "str", "description": "Recommendations for improving slope stability and safety", "example": "increase slope angle, reinforce with retaining structures"}}}
{"api_name": "getFlightControlSystemStatus", "api_description": "Retrieve the status of the flight control system", "field": "Aerospace Engineering/Flight control systems", "parameters": {"flight_number": {"type": "str", "description": "The flight number of the aircraft (e.g., AA1234)"}}, "required": ["flight_number"], "responses": {"status": {"type": "str", "description": "The current status of the flight control system (e.g., normal, abnormal)"}}}
{"api_name": "calibrateAircraftSensors", "api_description": "Calibrate the sensors of the aircraft", "field": "Aerospace Engineering/Flight control systems", "parameters": {"flight_number": {"type": "str", "description": "The flight number of the aircraft (e.g., AA1234)"}, "altitude": {"type": "int", "description": "The current altitude of the aircraft in meters (e.g., 10000)"}, "speed": {"type": "int", "description": "The current speed of the aircraft in meters per second (e.g., 250)"}}, "required": ["flight_number", "altitude", "speed"], "responses": {"success": {"type": "bool", "description": "Indicates if the calibration of sensors was successful"}}}
{"api_name": "getFlightControlData", "api_description": "Retrieve flight control data for a specified aircraft", "field": "Aerospace Engineering/Flight control systems", "parameters": {"aircraft_id": {"type": "str", "description": "The unique identifier of the aircraft"}, "flight_mode": {"type": "str", "description": "The current flight mode of the aircraft (e.g., takeoff, cruising, landing)"}}, "required": ["aircraft_id"], "responses": {"roll_angle": {"type": "float", "description": "The roll angle of the aircraft in degrees"}, "pitch_angle": {"type": "float", "description": "The pitch angle of the aircraft in degrees"}, "yaw_angle": {"type": "float", "description": "The yaw angle of the aircraft in degrees"}, "altitude": {"type": "float", "description": "The altitude of the aircraft in meters"}, "airspeed": {"type": "float", "description": "The airspeed of the aircraft in meters per second"}}}
{"api_name": "getCompositeStrength", "api_description": "Retrieve the strength of a composite material", "field": "Aerospace Engineering/Composites", "parameters": {"composite_type": {"type": "str", "description": "The type of composite material (e.g., carbon fiber, fiberglass)"}}, "required": ["composite_type"], "responses": {"strength": {"type": "float", "description": "The strength value of the specified composite material"}}}
{"api_name": "updateGuidanceSystemSettings", "api_description": "Update the settings of a guidance system", "field": "Aerospace Engineering/Guidance systems", "parameters": {"system_id": {"type": "str", "description": "The ID of the guidance system to be updated"}, "settings": {"type": "str", "description": "The new settings to be applied to the guidance system"}}, "required": ["system_id", "settings"], "responses": {"message": {"type": "str", "description": "A message indicating the success or failure of the update process"}}}
{"api_name": "runWindTunnelTest", "api_description": "Perform wind tunnel testing on a model", "field": "Aerospace Engineering/Wind tunnel testing", "parameters": {"model": {"type": "str", "description": "The model to be tested in the wind tunnel"}, "speed": {"type": "float", "description": "The desired wind speed in meters per second (e.g., 10.5, 20.2, 30)"}, "angle_of_attack": {"type": "float", "description": "The angle of attack of the model in degrees (e.g., 5, 10, 15)"}, "test_duration": {"type": "int", "description": "The duration of the wind tunnel test in minutes (e.g., 30, 60, 90)"}}, "required": ["model", "speed"], "responses": {"drag_coefficient": {"type": "float", "description": "The drag coefficient of the model during the wind tunnel test"}, "lift_coefficient": {"type": "float", "description": "The lift coefficient of the model during the wind tunnel test"}}}
{"api_name": "calculateDopplerShift", "api_description": "Calculate the Doppler shift of targets detected using radar systems", "field": "Aerospace Engineering/Radar systems", "parameters": {"radial_speed": {"type": "float", "description": "The radial speed of the target in km/h"}}, "required": ["radial_speed"], "responses": {"doppler_shift": {"type": "float", "description": "Doppler shift of the target in Hz"}}}
{"api_name": "detectObjects", "api_description": "Detect and track objects using radar systems", "field": "Aerospace Engineering/Radar systems", "parameters": {"range": {"type": "float", "description": "The range of the radar system in kilometers"}, "angle": {"type": "float", "description": "The angle of detection in degrees"}, "resolution": {"type": "float", "description": "The resolution of the radar system in meters"}}, "required": ["range", "angle"], "responses": {"detected_objects": {"type": "str", "description": "The list of detected objects"}, "object_positions": {"type": "str", "description": "The positions of the detected objects"}, "velocity": {"type": "str", "description": "The velocity of the detected objects"}}}
{"api_name": "resumeFlightSimulation", "api_description": "Resume a paused flight simulation", "field": "Aerospace Engineering/Flight simulation", "parameters": {"simulation_id": {"type": "str", "description": "The unique identifier of the flight simulation to resume"}}, "required": ["simulation_id"], "responses": {"status": {"type": "str", "description": "The updated status of the flight simulation after resuming"}}}
{"api_name": "takeOff", "api_description": "Command an autonomous drone to take off", "field": "Aerospace Engineering/Autonomous systems", "parameters": {"drone_id": {"type": "str", "description": "The ID of the drone you want to command to take off"}}, "required": ["drone_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the take off command was successful"}}}
{"api_name": "landDrone", "api_description": "Command an autonomous drone to land", "field": "Aerospace Engineering/Autonomous systems", "parameters": {"drone_id": {"type": "str", "description": "The ID of the drone you want to command to land"}}, "required": ["drone_id"], "responses": {"success": {"type": "bool", "description": "Indicates whether the landing command was successful"}}}
{"api_name": "setAutonomousMode", "api_description": "Set the autonomous mode for a spacecraft or aircraft", "field": "Aerospace Engineering/Autonomous systems", "parameters": {"mode": {"type": "str", "description": "The desired autonomous mode for the spacecraft or aircraft (e.g., full autonomy, semi-autonomy)"}, "speed": {"type": "float", "description": "The desired speed at which the autonomous system should operate (e.g., 1000 km/h)"}}, "required": ["mode"], "responses": {"status": {"type": "str", "description": "The status of the autonomous system after setting the mode"}}}
{"api_name": "getAutonomousStatus", "api_description": "Retrieve the current status of the autonomous system in a spacecraft or aircraft", "field": "Aerospace Engineering/Autonomous systems", "parameters": {}, "required": [], "responses": {"status": {"type": "str", "description": "The current status of the autonomous system"}}}
{"api_name": "engageAutonomousLanding", "api_description": "Engage autonomous landing for an aircraft or spacecraft", "field": "Aerospace Engineering/Autonomous systems", "parameters": {"landing_site": {"type": "str", "description": "The designated landing site for the autonomous landing (e.g., runway, landing pad)"}, "approach_speed": {"type": "float", "description": "The desired approach speed for the landing (e.g., 300 km/h)"}}, "required": ["landing_site"], "responses": {"status": {"type": "str", "description": "The status after engaging autonomous landing"}}}
{"api_name": "getUAVSpecs", "api_description": "Retrieve specifications of a specific unmanned aerial vehicle", "field": "Aerospace Engineering/Unmanned aerial vehicles", "parameters": {"model": {"type": "str", "description": "The model of the unmanned aerial vehicle (e.g., DJI Mavic Air 2, Parrot Anafi)"}, "manufacturer": {"type": "str", "description": "The manufacturer of the unmanned aerial vehicle (e.g., DJI, Parrot)"}, "year": {"type": "int", "description": "The year of production for the unmanned aerial vehicle"}}, "required": ["model"], "responses": {"weight": {"type": "float", "description": "The weight of the UAV in kilograms"}, "flight_time": {"type": "float", "description": "The maximum flight time of the UAV in minutes"}, "range": {"type": "float", "description": "The maximum range of the UAV in kilometers"}, "camera_resolution": {"type": "float", "description": "The resolution of the built-in camera in megapixels"}}}
{"api_name": "calculateLandingDistance", "api_description": "Calculate the required distance for an aircraft to land", "field": "Aerospace Engineering/Flight dynamics", "parameters": {"aircraft_id": {"type": "str", "description": "The unique identifier of the aircraft"}, "landing_speed": {"type": "float", "description": "The speed of the aircraft during landing"}, "landing_weight": {"type": "float", "description": "The weight of the aircraft during landing"}, "altitude": {"type": "int", "description": "The altitude at which the landing is performed"}}, "required": ["aircraft_id", "landing_speed", "landing_weight"], "responses": {"landing_distance": {"type": "float", "description": "The required landing distance for the aircraft at the specified altitude"}}}
{"api_name": "getAircraftVelocity", "api_description": "Retrieve current velocity of an aircraft", "field": "Aerospace Engineering/Flight dynamics", "parameters": {"aircraft_id": {"type": "str", "description": "The unique identifier of the aircraft"}, "velocity": {"type": "float", "description": "The velocity at which the aircraft is moving"}, "direction": {"type": "float", "description": "The direction in which the aircraft is moving"}}, "required": ["aircraft_id"], "responses": {"velocity": {"type": "float", "description": "The current velocity of the aircraft"}, "direction": {"type": "float", "description": "The current direction of the aircraft"}}}
{"api_name": "sendSpacecraftCommand", "api_description": "Send a command to a spacecraft", "field": "Aerospace Engineering/Spacecraft systems", "parameters": {"spacecraft": {"type": "str", "description": "The name or ID of the spacecraft you want to send a command to"}, "command": {"type": "str", "description": "The command to be sent to the spacecraft"}}, "required": ["spacecraft", "command"], "responses": {"status": {"type": "str", "description": "The status of the command execution"}}}
{"api_name": "getSpacecraftData", "api_description": "Retrieve information about spacecraft systems", "field": "Aerospace Engineering/Spacecraft systems", "parameters": {"name": {"type": "str", "description": "The name of the spacecraft (e.g., Voyager, Hubble, Curiosity)"}}, "required": ["name"], "responses": {"weight": {"type": "float", "description": "The weight of the spacecraft in kilograms"}, "power_consumption": {"type": "float", "description": "The power consumption of the spacecraft in watts"}, "communication_system": {"type": "str", "description": "The type of communication system used by the spacecraft"}}}
{"api_name": "getSpacecraftFuelLevel", "api_description": "Retrieve the current fuel level of a spacecraft", "field": "Aerospace Engineering/Spacecraft systems", "parameters": {"spacecraft_id": {"type": "str", "description": "The unique identifier of the spacecraft (e.g., NASA1234, ESA5678)"}}, "required": ["spacecraft_id"], "responses": {"fuel_level": {"type": "float", "description": "The current fuel level of the spacecraft in percentage"}}}
{"api_name": "getPropellantMass", "api_description": "Retrieve the propellant mass of a launch vehicle", "field": "Aerospace Engineering/Launch vehicle design", "parameters": {"launch_vehicle": {"type": "str", "description": "The name of the launch vehicle (e.g., Falcon 9, Saturn V, Atlas V)"}, "payload_mass": {"type": "float", "description": "The mass of the payload to be deployed in kilograms"}, "efficiency": {"type": "float", "description": "The propulsion system efficiency in percentage (e.g., 95.5%)"}, "delta_v": {"type": "float", "description": "The desired delta-v for the mission in meters per second"}}, "required": ["launch_vehicle", "payload_mass", "delta_v"], "responses": {"propellant_mass": {"type": "float", "description": "The total mass of propellant required for the specified launch vehicle and mission in kilograms"}}}
{"api_name": "getSoundIntensity", "api_description": "Retrieve the intensity of sound at a given location", "field": "Mechanical Engineering/Acoustics", "parameters": {"location": {"type": "str", "description": "The location at which the sound intensity needs to be measured (e.g., room, building, street)"}, "frequency": {"type": "float", "description": "The frequency of sound in Hz (e.g., 1000, 2000, 5000)"}, "distance": {"type": "float", "description": "The distance from the sound source in meters (e.g., 1, 5, 10)"}}, "required": ["location"], "responses": {"intensity": {"type": "float", "description": "The intensity of sound at the specified location in decibels (dB)"}, "unit": {"type": "str", "description": "The unit of intensity in which the sound intensity is provided"}}}
{"api_name": "calculateSoundPressureLevel", "api_description": "Calculate the sound pressure level at a given location", "field": "Mechanical Engineering/Acoustics", "parameters": {"source_power": {"type": "float", "description": "The power of the sound source in watts"}, "distance": {"type": "float", "description": "The distance from the sound source to the location in meters"}, "reference_distance": {"type": "float", "description": "The reference distance to calculate sound pressure level in meters"}, "reference_sound_pressure": {"type": "float", "description": "The reference sound pressure for calculating sound pressure level in Pascals"}}, "required": ["source_power", "distance"], "responses": {"sound_pressure_level": {"type": "float", "description": "The sound pressure level at the given location in decibels"}}}
{"api_name": "estimateVehicleEmissions", "api_description": "Estimate the emissions produced by a vehicle", "field": "Mechanical Engineering/Automotive Engineering", "parameters": {"vehicle_model": {"type": "str", "description": "The model of the vehicle (e.g., Sedan, SUV, Hatchback)"}, "vehicle_year": {"type": "int", "description": "The manufacturing year of the vehicle"}, "distance": {"type": "float", "description": "The distance traveled by the vehicle in kilometers"}}, "required": ["vehicle_model", "vehicle_year", "distance"], "responses": {"co2_emissions": {"type": "float", "description": "The estimated CO2 emissions produced by the vehicle in grams"}}}
{"api_name": "getFluidPressure", "api_description": "Calculate the pressure of a fluid at a given depth", "field": "Mechanical Engineering/Fluid Mechanics", "parameters": {"fluid_density": {"type": "float", "description": "The density of the fluid (in kilograms per cubic meter)"}, "depth": {"type": "float", "description": "The depth at which the fluid is located (in meters)"}, "gravitational_acceleration": {"type": "float", "description": "The acceleration due to gravity (in meters per second squared)"}}, "required": ["fluid_density", "depth", "gravitational_acceleration"], "responses": {"pressure": {"type": "float", "description": "The pressure of the fluid at the given depth (in pascals)"}}}
{"api_name": "getFluidViscosity", "api_description": "Retrieve the viscosity of a fluid", "field": "Mechanical Engineering/Fluid Mechanics", "parameters": {"fluid_type": {"type": "str", "description": "The type of fluid for which you want to get the viscosity (e.g., water, oil, air)"}}, "required": ["fluid_type"], "responses": {"viscosity": {"type": "float", "description": "The viscosity of the specified fluid"}}}
{"api_name": "calculateStressStrain", "api_description": "Calculate the stress-strain curve of a nanomaterial", "field": "Mechanical Engineering/Nanoengineering", "parameters": {"material_type": {"type": "str", "description": "The type of nanomaterial (e.g., graphene, carbon nanotube)"}, "strain_rate": {"type": "float", "description": "The applied strain rate in 1/s"}, "temperature": {"type": "float", "description": "The temperature in Kelvin"}}, "required": ["material_type", "strain_rate", "temperature"], "responses": {"stress": {"type": "float", "description": "The stress in megapascals"}, "strain": {"type": "float", "description": "The strain as a decimal fraction"}}}
{"api_name": "calculateNanodevicePerformance", "api_description": "Calculate the performance of a nanodevice", "field": "Mechanical Engineering/Nanoengineering", "parameters": {"material": {"type": "str", "description": "The material of the nanodevice (e.g., silicon, graphene, quantum dots)"}, "dimensions": {"type": "str", "description": "The dimensions of the nanodevice (e.g., length, width, thickness)"}, "operating_conditions": {"type": "str", "description": "The operating conditions of the nanodevice (e.g., temperature, voltage, frequency)"}}, "required": ["material", "dimensions"], "responses": {"performance": {"type": "float", "description": "The performance of the nanodevice"}}}
{"api_name": "grabObject", "api_description": "Command the robot to grab an object", "field": "Mechanical Engineering/Robotics", "parameters": {"object_id": {"type": "str", "description": "The ID of the object to be grabbed"}}, "required": ["object_id"], "responses": {"status": {"type": "str", "description": "The status of the robot after grabbing the object"}}}
{"api_name": "scanEnvironment", "api_description": "Scan the environment using sensors and provide information about obstacles", "field": "Mechanical Engineering/Robotics", "parameters": {}, "required": [], "responses": {"obstacles": {"type": "str", "description": "Information about obstacles detected in the environment"}}}
{"api_name": "executeRobotCommand", "api_description": "Send a command to a robot for execution", "field": "Mechanical Engineering/Robotics", "parameters": {"robot_id": {"type": "str", "description": "The ID of the robot you want to send the command to (e.g., RBT001, RBT002, RBT003)"}, "command": {"type": "str", "description": "The command to be executed by the robot (e.g., pick, place, rotate)"}}, "required": ["robot_id", "command"], "responses": {"success": {"type": "bool", "description": "Indicates whether the robot successfully executed the command"}}}
{"api_name": "optimizeProcess", "api_description": "Optimize process design for chemical engineering", "field": "Chemical Engineering/Process design and optimization", "parameters": {"input_parameters": {"type": "str", "description": "Input parameters for process optimization"}, "desired_outputs": {"type": "str", "description": "Desired outputs of process optimization"}}, "required": ["input_parameters", "desired_outputs"], "responses": {"optimized_parameters": {"type": "str", "description": "Optimized process parameters"}, "optimized_outputs": {"type": "str", "description": "Optimized process outputs"}}}
{"api_name": "calculateEnthalpy", "api_description": "Calculate the enthalpy of a given substance", "field": "Chemical Engineering/Thermodynamics", "parameters": {"substance": {"type": "str", "description": "The name of the substance for which you want to calculate enthalpy (e.g., water, ethanol, ammonia)"}, "temperature": {"type": "float", "description": "The temperature at which the enthalpy is to be calculated in degrees Celsius"}}, "required": ["substance", "temperature"], "responses": {"enthalpy": {"type": "float", "description": "The calculated enthalpy of the substance at the given temperature"}}}
{"api_name": "calculateConvectiveHeatTransferCoefficient", "api_description": "Calculate convective heat transfer coefficient", "field": "Chemical Engineering/Heat transfer", "parameters": {"fluid_velocity": {"type": "float", "description": "The velocity of the fluid (e.g., 2.5)", "unit": "m/s"}, "fluid_density": {"type": "float", "description": "The density of the fluid (e.g., 1000)", "unit": "kg/m^3"}, "fluid_specific_heat": {"type": "float", "description": "The specific heat of the fluid (e.g., 4.2)", "unit": "J/kg·K"}, "fluid_viscosity": {"type": "float", "description": "The viscosity of the fluid (e.g., 0.8)", "unit": "Pa·s"}, "characteristic_length": {"type": "float", "description": "The characteristic length of the surface (e.g., 0.3)", "unit": "m"}}, "required": ["fluid_velocity", "fluid_density", "fluid_specific_heat", "fluid_viscosity", "characteristic_length"], "responses": {"heat_transfer_coefficient": {"type": "float", "description": "The convective heat transfer coefficient"}, "unit": {"type": "str", "description": "The unit of heat transfer coefficient (e.g., W/(m^2·K), BTU/(ft^2·hr·°F)"}}}
{"api_name": "calculateHeatExchangerEffectiveness", "api_description": "Calculate heat exchanger effectiveness", "field": "Chemical Engineering/Heat transfer", "parameters": {"hot_fluid_flowrate": {"type": "float", "description": "The flow rate of hot fluid (e.g., 100)", "unit": "kg/s"}, "cold_fluid_flowrate": {"type": "float", "description": "The flow rate of cold fluid (e.g., 80)", "unit": "kg/s"}, "hot_fluid_inlet_temperature": {"type": "float", "description": "The inlet temperature of hot fluid (e.g., 150)", "unit": "°C"}, "hot_fluid_outlet_temperature": {"type": "float", "description": "The outlet temperature of hot fluid (e.g., 70)", "unit": "°C"}, "cold_fluid_inlet_temperature": {"type": "float", "description": "The inlet temperature of cold fluid (e.g., 10)", "unit": "°C"}, "cold_fluid_outlet_temperature": {"type": "float", "description": "The outlet temperature of cold fluid (e.g., 90)", "unit": "°C"}}, "required": ["hot_fluid_flowrate", "cold_fluid_flowrate", "hot_fluid_inlet_temperature", "hot_fluid_outlet_temperature", "cold_fluid_inlet_temperature", "cold_fluid_outlet_temperature"], "responses": {"effectiveness": {"type": "float", "description": "The effectiveness of the heat exchanger"}}}
{"api_name": "calculateMolecularDiffusion", "api_description": "Calculate the molecular diffusion coefficient for a given gas and temperature", "field": "Chemical Engineering/Transport phenomena", "parameters": {"gas": {"type": "str", "description": "The name of the gas for which you want to calculate the diffusion coefficient (e.g., oxygen, nitrogen, carbon dioxide)"}, "temperature": {"type": "float", "description": "The temperature at which to calculate the diffusion coefficient (in Kelvin)"}}, "required": ["gas", "temperature"], "responses": {"diffusion_coefficient": {"type": "float", "description": "The molecular diffusion coefficient of the gas at the specified temperature"}}}
{"api_name": "getMassTransferCoefficient", "api_description": "Calculate the mass transfer coefficient for a given system", "field": "Chemical Engineering/Transport phenomena", "parameters": {"gas": {"type": "str", "description": "The gas involved in the mass transfer process (e.g., oxygen, nitrogen, carbon dioxide)"}, "liquid": {"type": "str", "description": "The liquid involved in the mass transfer process (e.g., water, ethanol, sulfuric acid)"}, "temperature": {"type": "float", "description": "The temperature of the system for mass transfer"}, "concentration_difference": {"type": "float", "description": "The concentration difference between the gas and liquid for mass transfer"}}, "required": ["gas", "liquid", "concentration_difference"], "responses": {"mass_transfer_coefficient": {"type": "float", "description": "The mass transfer coefficient for the given system (in 1/s)"}}}
{"api_name": "getMassFlowRate", "api_description": "Retrieve the mass flow rate information of a fluid", "field": "Chemical Engineering/Transport phenomena", "parameters": {"fluid_name": {"type": "str", "description": "The name of the fluid for which you want to get the mass flow rate (e.g., water, air, oil)"}, "cross_sectional_area": {"type": "float", "description": "The cross-sectional area through which the fluid is flowing in square meters (e.g., 2.5, 10.6, 15.2)"}, "flow_velocity": {"type": "float", "description": "The velocity of the fluid flow in meters per second (e.g., 0.5, 1.2, 2.8)"}}, "required": ["fluid_name", "cross_sectional_area", "flow_velocity"], "responses": {"mass_flow_rate": {"type": "float", "description": "The mass flow rate of the fluid in kilograms per second"}}}
{"api_name": "calculateResidenceTime", "api_description": "Calculates the residence time in a chemical reactor", "field": "Chemical Engineering/Chemical reactor design", "parameters": {"volume": {"type": "float", "description": "The volume of the reactor in liters"}, "flow_rate": {"type": "float", "description": "The flow rate of the reactants in liters per second"}, "conversion": {"type": "float", "description": "The desired conversion of the reactants in percentage"}}, "required": ["volume", "flow_rate"], "responses": {"residence_time": {"type": "float", "description": "The residence time in the reactor in seconds"}, "conversion": {"type": "float", "description": "The achieved conversion of the reactants in percentage"}}}
{"api_name": "setControllerSetpoint", "api_description": "Set the setpoint value for a controller in a chemical process", "field": "Chemical Engineering/Process control", "parameters": {"controller_id": {"type": "str", "description": "The identifier of the controller in the process (e.g., C1, C2, C3)"}, "setpoint": {"type": "float", "description": "The desired value for the setpoint"}}, "required": ["controller_id", "setpoint"], "responses": {"success": {"type": "bool", "description": "Indicates whether the setpoint value was successfully updated"}}}
{"api_name": "adjustControlGain", "api_description": "Adjust the control gain of a controller in a chemical process", "field": "Chemical Engineering/Process control", "parameters": {"controller_id": {"type": "str", "description": "The identifier of the controller in the process (e.g., C1, C2, C3)"}, "gain": {"type": "float", "description": "The value to adjust the control gain"}}, "required": ["controller_id", "gain"], "responses": {"success": {"type": "bool", "description": "Indicates whether the control gain was successfully adjusted"}}}
{"api_name": "getFermentationParameters", "api_description": "Retrieve the parameters for a fermentation process", "field": "Chemical Engineering/Bioprocess engineering", "parameters": {"microorganism": {"type": "str", "description": "The microorganism used in the fermentation process (e.g., yeast, bacteria)"}, "substrate": {"type": "str", "description": "The substrate or feedstock used in the fermentation process (e.g., glucose, ethanol)"}, "temperature": {"type": "int", "description": "The temperature at which the fermentation process is carried out (in Celsius)"}}, "required": ["microorganism", "substrate"], "responses": {"fermentation_time": {"type": "float", "description": "The duration of the fermentation process (in hours)"}, "product_concentration": {"type": "float", "description": "The concentration of the desired product obtained from the fermentation process"}}}
{"api_name": "determineGlassTransitionTemperature", "api_description": "Determine the glass transition temperature of a polymer material", "field": "Chemical Engineering/Polymers and materials science", "parameters": {"polymer_type": {"type": "str", "description": "The type of polymer (e.g., polyethylene, polypropylene)", "example": "polyethylene, polypropylene"}, "molecular_weight": {"type": "float", "description": "The average molecular weight of the polymer (in g/mol)", "example": "10000, 20000, 30000"}}, "required": ["polymer_type", "molecular_weight"], "responses": {"glass_transition_temperature": {"type": "float", "description": "The glass transition temperature of the polymer material (in Celsius)"}}}
{"api_name": "calculateEnergyOutput", "api_description": "Calculate the energy output of a renewable energy system", "field": "Chemical Engineering/Renewable energy", "parameters": {"system_type": {"type": "str", "description": "The type of renewable energy system (e.g., solar, wind, hydro)"}, "system_capacity": {"type": "float", "description": "The capacity of the renewable energy system in kilowatts"}, "location": {"type": "str", "description": "The location where the system is installed (e.g., city, country)"}}, "required": ["system_type", "system_capacity"], "responses": {"energy_output": {"type": "float", "description": "The estimated energy output of the renewable energy system in kilowatt-hours per day"}}}
{"api_name": "removeImpurities", "api_description": "Remove impurities from water using various techniques", "field": "Chemical Engineering/Water treatment and desalination", "parameters": {"water_source": {"type": "str", "description": "The source of water (e.g., tap water, well water)"}, "impurity_type": {"type": "str", "description": "The type of impurity present in the water (e.g., heavy metals, organic compounds)"}, "treatment_method": {"type": "str", "description": "The technique used for removing the impurity"}}, "required": ["water_source", "impurity_type", "treatment_method"], "responses": {"water_quality": {"type": "str", "description": "The quality of water after removing the impurity"}}}
{"api_name": "checkChemicalComposition", "api_description": "Check the chemical composition of a sample", "field": "Chemical Engineering/Quality control and assurance", "parameters": {"sample_id": {"type": "str", "description": "The unique identifier for the sample"}, "composition_type": {"type": "str", "description": "Type of chemical composition to check (e.g., elemental composition, percent composition)"}, "testing_method": {"type": "str", "description": "The testing method used to determine the chemical composition"}}, "required": ["sample_id", "composition_type"], "responses": {"composition": {"type": "str", "description": "The chemical composition of the sample"}, "unit": {"type": "str", "description": "The unit of measurement for the chemical composition"}}}
{"api_name": "getDrugDeliverySystem", "api_description": "Retrieve information about drug delivery systems", "field": "Chemical Engineering/Drug delivery systems", "parameters": {"drug_name": {"type": "str", "description": "The name of the drug (e.g., Aspirin, Insulin)"}, "delivery_device": {"type": "str", "description": "The type of delivery device (e.g., injection, transdermal patch)"}, "patient_type": {"type": "str", "description": "The targeted patient type (e.g., adult, pediatric, geriatric)"}}, "required": ["drug_name"], "responses": {"delivery_system": {"type": "str", "description": "The drug delivery system for the specified drug"}, "administration_route": {"type": "str", "description": "The administration route of the drug delivery system"}, "patient_compliance": {"type": "float", "description": "The level of patient compliance achieved by the drug delivery system"}}}
{"api_name": "troubleshootPlantIssue", "api_description": "Provide troubleshooting guidance for chemical plant issues", "field": "Chemical Engineering/Chemical plant troubleshooting", "parameters": {"issue_description": {"type": "str", "description": "A description of the issue faced in the chemical plant (e.g., abnormal temperature, low pressure, equipment malfunction)"}}, "required": ["issue_description"], "responses": {"troubleshooting_guide": {"type": "str", "description": "A step-by-step guide to troubleshoot and resolve the plant issue"}}}
{"api_name": "getWoodSource", "api_description": "Retrieve the source of wood used in paper production", "field": "Chemical Engineering/Paper and pulp technology", "parameters": {"paper_type": {"type": "str", "description": "The type of paper for which you want to retrieve wood source (e.g., newsprint, tissue paper, cardboard)"}, "region": {"type": "str", "description": "The region from which you want to retrieve wood source (e.g., North America, Europe, Asia)"}}, "required": ["paper_type"], "responses": {"wood_source": {"type": "str", "description": "The source of wood used in the specified paper type at the specified region"}}}
{"api_name": "estimatePaperDurability", "api_description": "Estimate the durability of a paper based on its composition and processing parameters", "field": "Chemical Engineering/Paper and pulp technology", "parameters": {"fiber_type": {"type": "str", "description": "The type of fiber used in paper production (e.g., hardwood, softwood)"}, "additives": {"type": "str", "description": "Additives used in the paper (e.g., fillers, bonding agents)"}, "processing_conditions": {"type": "str", "description": "Processing conditions used (e.g., temperature, pressure, drying time)"}}, "required": ["fiber_type"], "responses": {"durability": {"type": "str", "description": "The estimated durability of the paper"}}}
